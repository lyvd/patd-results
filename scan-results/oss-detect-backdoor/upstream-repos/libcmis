{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/data/gdrive/login2.html"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 41,
                  "endLine": 8,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  <input name=\"continue\" id=\"continue\" value=\"redirectLink&amp;scope=Scope\" type=\"hidden\">\n  <input name=\"service\" id=\"service\" value=\"lso\" type=\"hidden\">\n  <input name=\"GALX\" value=\"cookie\" type=\"hidden\">\n  <input name=\"Passwd\" id=\"Passwd\" type=\"password\">\n</form>\n</body>\n</html>\n",
                    "rendered": {
                      "text": "  <input name=\"continue\" id=\"continue\" value=\"redirectLink&amp;scope=Scope\" type=\"hidden\">\n  <input name=\"service\" id=\"service\" value=\"lso\" type=\"hidden\">\n  <input name=\"GALX\" value=\"cookie\" type=\"hidden\">\n  <input name=\"Passwd\" id=\"Passwd\" type=\"password\">\n</form>\n</body>\n</html>\n",
                      "markdown": "`  <input name=\"continue\" id=\"continue\" value=\"redirectLink&amp;scope=Scope\" type=\"hidden\">\n  <input name=\"service\" id=\"service\" value=\"lso\" type=\"hidden\">\n  <input name=\"GALX\" value=\"cookie\" type=\"hidden\">\n  <input name=\"Passwd\" id=\"Passwd\" type=\"password\">\n</form>\n</body>\n</html>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis-c/test-folder.cxx"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 82,
                  "endLine": 102,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\ndummies::Document* FolderTest::getDocumentImplementation( libcmis_DocumentPtr document )\n{\n    dummies::Document* impl = dynamic_cast< dummies::Document* >( document->handle.get( ) );\n    return impl;\n}\n\n",
                    "rendered": {
                      "text": "\ndummies::Document* FolderTest::getDocumentImplementation( libcmis_DocumentPtr document )\n{\n    dummies::Document* impl = dynamic_cast< dummies::Document* >( document->handle.get( ) );\n    return impl;\n}\n\n",
                      "markdown": "`\ndummies::Document* FolderTest::getDocumentImplementation( libcmis_DocumentPtr document )\n{\n    dummies::Document* impl = dynamic_cast< dummies::Document* >( document->handle.get( ) );\n    return impl;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/property.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/property.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object.hxx"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 15,
                  "endLine": 184,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            virtual std::vector< RenditionPtr> getRenditions( std::string filter = std::string( ) );\n            virtual AllowableActionsPtr getAllowableActions( ) { return m_allowableActions; }\n\n            /** Update the object properties and return the updated object.\n\n                \\attention\n                    even if the returned object may have the same Id than 'this'\n",
                    "rendered": {
                      "text": "            virtual std::vector< RenditionPtr> getRenditions( std::string filter = std::string( ) );\n            virtual AllowableActionsPtr getAllowableActions( ) { return m_allowableActions; }\n\n            /** Update the object properties and return the updated object.\n\n                \\attention\n                    even if the returned object may have the same Id than 'this'\n",
                      "markdown": "`            virtual std::vector< RenditionPtr> getRenditions( std::string filter = std::string( ) );\n            virtual AllowableActionsPtr getAllowableActions( ) { return m_allowableActions; }\n\n            /** Update the object properties and return the updated object.\n\n                \\attention\n                    even if the returned object may have the same Id than 'this'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object.hxx"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 15,
                  "endLine": 93,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n                Note that folders will have only path, documents may have\n                several ones and there may be cases where there is no path\n                at all (unfilled objects);\n              */\n            virtual std::vector< std::string > getPaths( );\n\n",
                    "rendered": {
                      "text": "\n                Note that folders will have only path, documents may have\n                several ones and there may be cases where there is no path\n                at all (unfilled objects);\n              */\n            virtual std::vector< std::string > getPaths( );\n\n",
                      "markdown": "`\n                Note that folders will have only path, documents may have\n                several ones and there may be cases where there is no path\n                at all (unfilled objects);\n              */\n            virtual std::vector< std::string > getPaths( );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object.hxx"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 48,
                  "endLine": 79,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        public:\n\n            Object( Session* session );\n            Object( Session* session, xmlNodePtr node );\n            Object( const Object& copy );\n            virtual ~Object( ) { }\n\n",
                    "rendered": {
                      "text": "        public:\n\n            Object( Session* session );\n            Object( Session* session, xmlNodePtr node );\n            Object( const Object& copy );\n            virtual ~Object( ) { }\n\n",
                      "markdown": "`        public:\n\n            Object( Session* session );\n            Object( Session* session, xmlNodePtr node );\n            Object( const Object& copy );\n            virtual ~Object( ) { }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object.hxx"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 47,
                  "endLine": 74,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            std::map< std::string, PropertyPtr > m_properties;\n            boost::shared_ptr< AllowableActions > m_allowableActions;\n            std::vector< RenditionPtr > m_renditions;\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n\n",
                    "rendered": {
                      "text": "            std::map< std::string, PropertyPtr > m_properties;\n            boost::shared_ptr< AllowableActions > m_allowableActions;\n            std::vector< RenditionPtr > m_renditions;\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n\n",
                      "markdown": "`            std::map< std::string, PropertyPtr > m_properties;\n            boost::shared_ptr< AllowableActions > m_allowableActions;\n            std::vector< RenditionPtr > m_renditions;\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/property-type.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/property-type.hxx"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 36,
                  "endLine": 78,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n            /// Default constructor, mostly present for testing.\n            PropertyType( );\n            PropertyType( xmlNodePtr node );\n            PropertyType( const PropertyType& copy );\n            /// constructor for temporary type definitions\n            PropertyType( std::string type,\n",
                    "rendered": {
                      "text": "\n            /// Default constructor, mostly present for testing.\n            PropertyType( );\n            PropertyType( xmlNodePtr node );\n            PropertyType( const PropertyType& copy );\n            /// constructor for temporary type definitions\n            PropertyType( std::string type,\n",
                      "markdown": "`\n            /// Default constructor, mostly present for testing.\n            PropertyType( );\n            PropertyType( xmlNodePtr node );\n            PropertyType( const PropertyType& copy );\n            /// constructor for temporary type definitions\n            PropertyType( std::string type,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/property-type.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis-c/session-factory.h"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 14,
                  "endLine": 71,
                  "endColumn": 22,
                  "snippet": {
                    "text": "LIBCMIS_C_API libcmis_vector_Repository_Ptr libcmis_getRepositories(\n        char* bindingUrl,\n        char* username,\n        char* password,\n        bool  verbose,\n        libcmis_ErrorPtr error );\n\n",
                    "rendered": {
                      "text": "LIBCMIS_C_API libcmis_vector_Repository_Ptr libcmis_getRepositories(\n        char* bindingUrl,\n        char* username,\n        char* password,\n        bool  verbose,\n        libcmis_ErrorPtr error );\n\n",
                      "markdown": "`LIBCMIS_C_API libcmis_vector_Repository_Ptr libcmis_getRepositories(\n        char* bindingUrl,\n        char* username,\n        char* password,\n        bool  verbose,\n        libcmis_ErrorPtr error );\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis-c/session-factory.h"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 14,
                  "endLine": 58,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        char* bindingUrl,\n        char* repositoryId,\n        char* username,\n        char* password,\n        bool noSslCheck,\n        libcmis_OAuth2DataPtr oauth2,\n        bool  verbose,\n",
                    "rendered": {
                      "text": "        char* bindingUrl,\n        char* repositoryId,\n        char* username,\n        char* password,\n        bool noSslCheck,\n        libcmis_OAuth2DataPtr oauth2,\n        bool  verbose,\n",
                      "markdown": "`        char* bindingUrl,\n        char* repositoryId,\n        char* username,\n        char* password,\n        bool noSslCheck,\n        libcmis_OAuth2DataPtr oauth2,\n        bool  verbose,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis-c/types.h"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 42,
                  "endLine": 215,
                  "endColumn": 50,
                  "snippet": {
                    "text": "typedef struct libcmis_oauth2data* libcmis_OAuth2DataPtr;\n\ntypedef char* ( *libcmis_OAuth2AuthCodeProvider )( const char* authUrl,\n        const char* username, const char* password );\n\n\n/* Rendition */\n",
                    "rendered": {
                      "text": "typedef struct libcmis_oauth2data* libcmis_OAuth2DataPtr;\n\ntypedef char* ( *libcmis_OAuth2AuthCodeProvider )( const char* authUrl,\n        const char* username, const char* password );\n\n\n/* Rendition */\n",
                      "markdown": "`typedef struct libcmis_oauth2data* libcmis_OAuth2DataPtr;\n\ntypedef char* ( *libcmis_OAuth2AuthCodeProvider )( const char* authUrl,\n        const char* username, const char* password );\n\n\n/* Rendition */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis-c/types.h"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 108,
                  "endLine": 206,
                  "endColumn": 116,
                  "snippet": {
                    "text": "\ntypedef bool ( *libcmis_authenticationCallback )( char* username, char* password );\ntypedef bool ( *libcmis_certValidationCallback )( libcmis_vector_string_Ptr certificatesChain );\ntypedef char * ( *libcmis_oauth2AuthCodeProvider ) ( const char* authUrl, const char* username, const char* password );\n\n\n/* OAuth2Data */\n",
                    "rendered": {
                      "text": "\ntypedef bool ( *libcmis_authenticationCallback )( char* username, char* password );\ntypedef bool ( *libcmis_certValidationCallback )( libcmis_vector_string_Ptr certificatesChain );\ntypedef char * ( *libcmis_oauth2AuthCodeProvider ) ( const char* authUrl, const char* username, const char* password );\n\n\n/* OAuth2Data */\n",
                      "markdown": "`\ntypedef bool ( *libcmis_authenticationCallback )( char* username, char* password );\ntypedef bool ( *libcmis_certValidationCallback )( libcmis_vector_string_Ptr certificatesChain );\ntypedef char * ( *libcmis_oauth2AuthCodeProvider ) ( const char* authUrl, const char* username, const char* password );\n\n\n/* OAuth2Data */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis-c/types.h"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 72,
                  "endLine": 204,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\ntypedef struct libcmis_session* libcmis_SessionPtr;\n\ntypedef bool ( *libcmis_authenticationCallback )( char* username, char* password );\ntypedef bool ( *libcmis_certValidationCallback )( libcmis_vector_string_Ptr certificatesChain );\ntypedef char * ( *libcmis_oauth2AuthCodeProvider ) ( const char* authUrl, const char* username, const char* password );\n\n",
                    "rendered": {
                      "text": "\ntypedef struct libcmis_session* libcmis_SessionPtr;\n\ntypedef bool ( *libcmis_authenticationCallback )( char* username, char* password );\ntypedef bool ( *libcmis_certValidationCallback )( libcmis_vector_string_Ptr certificatesChain );\ntypedef char * ( *libcmis_oauth2AuthCodeProvider ) ( const char* authUrl, const char* username, const char* password );\n\n",
                      "markdown": "`\ntypedef struct libcmis_session* libcmis_SessionPtr;\n\ntypedef bool ( *libcmis_authenticationCallback )( char* username, char* password );\ntypedef bool ( *libcmis_certValidationCallback )( libcmis_vector_string_Ptr certificatesChain );\ntypedef char * ( *libcmis_oauth2AuthCodeProvider ) ( const char* authUrl, const char* username, const char* password );\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.cxx"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 68,
                  "endLine": 223,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n\n    // Set the proxy configuration if any\n    if ( !libcmis::SessionFactory::getProxy( ).empty() )\n",
                    "rendered": {
                      "text": "        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n\n    // Set the proxy configuration if any\n    if ( !libcmis::SessionFactory::getProxy( ).empty() )\n",
                      "markdown": "`        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n\n    // Set the proxy configuration if any\n    if ( !libcmis::SessionFactory::getProxy( ).empty() )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.cxx"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 57,
                  "endLine": 236,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        {\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYUSERNAME, proxyUser.c_str( ) );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYPASSWORD, proxyPass.c_str( ) );\n        }\n    }\n\n",
                    "rendered": {
                      "text": "        {\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYUSERNAME, proxyUser.c_str( ) );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYPASSWORD, proxyPass.c_str( ) );\n        }\n    }\n\n",
                      "markdown": "`        {\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYUSERNAME, proxyUser.c_str( ) );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYPASSWORD, proxyPass.c_str( ) );\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.cxx"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 61,
                  "endLine": 220,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n",
                    "rendered": {
                      "text": "    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n",
                      "markdown": "`    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.cxx"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 48,
                  "endLine": 220,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n",
                    "rendered": {
                      "text": "    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n",
                      "markdown": "`    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.cxx"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 39,
                  "endLine": 216,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    // but since this class is specifically for SharePoint just add it always\n    headers_slist.reset(curl_slist_append(headers_slist.release(), \"X-FORMS_BASED_AUTH_ACCEPTED: f\"));\n\n    if ( !getUsername().empty() && !getPassword().empty() )\n    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n",
                    "rendered": {
                      "text": "    // but since this class is specifically for SharePoint just add it always\n    headers_slist.reset(curl_slist_append(headers_slist.release(), \"X-FORMS_BASED_AUTH_ACCEPTED: f\"));\n\n    if ( !getUsername().empty() && !getPassword().empty() )\n    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n",
                      "markdown": "`    // but since this class is specifically for SharePoint just add it always\n    headers_slist.reset(curl_slist_append(headers_slist.release(), \"X-FORMS_BASED_AUTH_ACCEPTED: f\"));\n\n    if ( !getUsername().empty() && !getPassword().empty() )\n    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.cxx"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 46,
                  "endLine": 47,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                               string password,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction ),\n    m_digestCode( string( ) ) \n\n",
                    "rendered": {
                      "text": "                               string password,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction ),\n    m_digestCode( string( ) ) \n\n",
                      "markdown": "`                               string password,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction ),\n    m_digestCode( string( ) ) \n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.cxx"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 38,
                  "endLine": 44,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nSharePointSession::SharePointSession ( string baseUrl,\n                               string username,\n                               string password,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n",
                    "rendered": {
                      "text": "\nSharePointSession::SharePointSession ( string baseUrl,\n                               string username,\n                               string password,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n",
                      "markdown": "`\nSharePointSession::SharePointSession ( string baseUrl,\n                               string username,\n                               string password,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-folder.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-folder.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-workspace.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-workspace.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-session.cxx"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 47,
                  "endLine": 84,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        {\n            m_inOAuth2Authentication = true;\n\n            m_oauth2Handler->setRefreshToken(m_password);\n            // Try to get new access tokens using the stored refreshtoken\n            m_oauth2Handler->refresh();\n            m_inOAuth2Authentication = false;\n",
                    "rendered": {
                      "text": "        {\n            m_inOAuth2Authentication = true;\n\n            m_oauth2Handler->setRefreshToken(m_password);\n            // Try to get new access tokens using the stored refreshtoken\n            m_oauth2Handler->refresh();\n            m_inOAuth2Authentication = false;\n",
                      "markdown": "`        {\n            m_inOAuth2Authentication = true;\n\n            m_oauth2Handler->setRefreshToken(m_password);\n            // Try to get new access tokens using the stored refreshtoken\n            m_oauth2Handler->refresh();\n            m_inOAuth2Authentication = false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-session.cxx"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 11,
                  "endLine": 78,
                  "endColumn": 19,
                  "snippet": {
                    "text": "void OneDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "void OneDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n        {\n",
                      "markdown": "`void OneDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-session.cxx"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 26,
                  "endLine": 77,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nvoid OneDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n",
                    "rendered": {
                      "text": "\nvoid OneDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n",
                      "markdown": "`\nvoid OneDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-session.cxx"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 46,
                  "endLine": 46,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction)\n\n{\n",
                    "rendered": {
                      "text": "                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction)\n\n{\n",
                      "markdown": "`                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction)\n\n{\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-session.cxx"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 38,
                  "endLine": 42,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nOneDriveSession::OneDriveSession ( string baseUrl,\n                               string username,\n                               string password,\n                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n",
                    "rendered": {
                      "text": "\nOneDriveSession::OneDriveSession ( string baseUrl,\n                               string username,\n                               string password,\n                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n",
                      "markdown": "`\nOneDriveSession::OneDriveSession ( string baseUrl,\n                               string username,\n                               string password,\n                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-folder.cxx"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 12,
                  "endLine": 160,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                                                       string contentType, \n                                                       string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( fileName.empty( ) )\n",
                    "rendered": {
                      "text": "                                                       string contentType, \n                                                       string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( fileName.empty( ) )\n",
                      "markdown": "`                                                       string contentType, \n                                                       string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( fileName.empty( ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-utils.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-utils.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-document.cxx"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 12,
                  "endLine": 168,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                                       string fileName, \n                                       bool /*overwrite*/ ) \n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    // TODO: when would the filename need an update?\n",
                    "rendered": {
                      "text": "                                       string fileName, \n                                       bool /*overwrite*/ ) \n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    // TODO: when would the filename need an update?\n",
                      "markdown": "`                                       string fileName, \n                                       bool /*overwrite*/ ) \n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    // TODO: when would the filename need an update?\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-document.cxx"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 12,
                  "endLine": 139,
                  "endColumn": 17,
                  "snippet": {
                    "text": "void GDriveDocument::uploadStream( boost::shared_ptr< ostream > os, \n                                   string contentType )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    string putUrl = GDRIVE_UPLOAD_LINK + getId( ) + \"?uploadType=media\";\n",
                    "rendered": {
                      "text": "void GDriveDocument::uploadStream( boost::shared_ptr< ostream > os, \n                                   string contentType )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    string putUrl = GDRIVE_UPLOAD_LINK + getId( ) + \"?uploadType=media\";\n",
                      "markdown": "`void GDriveDocument::uploadStream( boost::shared_ptr< ostream > os, \n                                   string contentType )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    string putUrl = GDRIVE_UPLOAD_LINK + getId( ) + \"?uploadType=media\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-document.cxx"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 24,
                  "endLine": 82,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    }\n    else\n    {\n        // Automatically find the rendition\n\n        // Prefer ODF format\n        for ( const auto& renditionPtr : renditions )\n",
                    "rendered": {
                      "text": "    }\n    else\n    {\n        // Automatically find the rendition\n\n        // Prefer ODF format\n        for ( const auto& renditionPtr : renditions )\n",
                      "markdown": "`    }\n    else\n    {\n        // Automatically find the rendition\n\n        // Prefer ODF format\n        for ( const auto& renditionPtr : renditions )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-folder.cxx"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 12,
                  "endLine": 143,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    boost::shared_ptr< ostream > os, \n    string contentType, string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n    \n    Json propsJson = GdriveUtils::toGdriveJson( properties );\n",
                    "rendered": {
                      "text": "    boost::shared_ptr< ostream > os, \n    string contentType, string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n    \n    Json propsJson = GdriveUtils::toGdriveJson( properties );\n",
                      "markdown": "`    boost::shared_ptr< ostream > os, \n    string contentType, string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n    \n    Json propsJson = GdriveUtils::toGdriveJson( properties );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 70,
                  "endLine": 441,
                  "snippet": {
                    "text": "\n     ``The contents of this file are subject to the Mozilla Public License\n     Version 1.1 (the \"License\"); you may not use this file except in\n     compliance with the License. You may obtain a copy of the License at\n     http://www.mozilla.org/MPL/\n\n     Software distributed under the License is distributed on an \"AS IS\"\n     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n",
                    "rendered": {
                      "text": "\n     ``The contents of this file are subject to the Mozilla Public License\n     Version 1.1 (the \"License\"); you may not use this file except in\n     compliance with the License. You may obtain a copy of the License at\n     http://www.mozilla.org/MPL/\n\n     Software distributed under the License is distributed on an \"AS IS\"\n     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n",
                      "markdown": "`\n     ``The contents of this file are subject to the Mozilla Public License\n     Version 1.1 (the \"License\"); you may not use this file except in\n     compliance with the License. You may obtain a copy of the License at\n     http://www.mozilla.org/MPL/\n\n     Software distributed under the License is distributed on an \"AS IS\"\n     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 38,
                  "endLine": 405,
                  "endColumn": 42,
                  "snippet": {
                    "text": "     necessary to make it enforceable. This License shall be governed by\n     California law provisions (except to the extent applicable law, if\n     any, provides otherwise), excluding its conflict-of-law provisions.\n     With respect to disputes in which at least one party is a citizen of,\n     or an entity chartered or registered to do business in the United\n     States of America, any litigation relating to this License shall be\n     subject to the jurisdiction of the Federal Courts of the Northern\n",
                    "rendered": {
                      "text": "     necessary to make it enforceable. This License shall be governed by\n     California law provisions (except to the extent applicable law, if\n     any, provides otherwise), excluding its conflict-of-law provisions.\n     With respect to disputes in which at least one party is a citizen of,\n     or an entity chartered or registered to do business in the United\n     States of America, any litigation relating to this License shall be\n     subject to the jurisdiction of the Federal Courts of the Northern\n",
                      "markdown": "`     necessary to make it enforceable. This License shall be governed by\n     California law provisions (except to the extent applicable law, if\n     any, provides otherwise), excluding its conflict-of-law provisions.\n     With respect to disputes in which at least one party is a citizen of,\n     or an entity chartered or registered to do business in the United\n     States of America, any litigation relating to this License shall be\n     subject to the jurisdiction of the Federal Courts of the Northern\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 52,
                  "endLine": 346,
                  "endColumn": 56,
                  "snippet": {
                    "text": "     of notice, a reasonable royalty and payment arrangement are not\n     mutually agreed upon in writing by the parties or the litigation claim\n     is not withdrawn, the rights granted by Participant to You under\n     Sections 2.1 and/or 2.2 automatically terminate at the expiration of\n     the 60 day notice period specified above.\n\n     (b)  any software, hardware, or device, other than such Participant's\n",
                    "rendered": {
                      "text": "     of notice, a reasonable royalty and payment arrangement are not\n     mutually agreed upon in writing by the parties or the litigation claim\n     is not withdrawn, the rights granted by Participant to You under\n     Sections 2.1 and/or 2.2 automatically terminate at the expiration of\n     the 60 day notice period specified above.\n\n     (b)  any software, hardware, or device, other than such Participant's\n",
                      "markdown": "`     of notice, a reasonable royalty and payment arrangement are not\n     mutually agreed upon in writing by the parties or the litigation claim\n     is not withdrawn, the rights granted by Participant to You under\n     Sections 2.1 and/or 2.2 automatically terminate at the expiration of\n     the 60 day notice period specified above.\n\n     (b)  any software, hardware, or device, other than such Participant's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 60,
                  "endLine": 165,
                  "endColumn": 64,
                  "snippet": {
                    "text": "     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n     ensuring that the Source Code version remains available even if the\n",
                    "rendered": {
                      "text": "     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n     ensuring that the Source Code version remains available even if the\n",
                      "markdown": "`     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n     ensuring that the Source Code version remains available even if the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 54,
                  "endLine": 164,
                  "endColumn": 58,
                  "snippet": {
                    "text": "     either on the same media as an Executable version or via an accepted\n     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n",
                    "rendered": {
                      "text": "     either on the same media as an Executable version or via an accepted\n     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n",
                      "markdown": "`     either on the same media as an Executable version or via an accepted\n     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 38,
                  "endLine": 75,
                  "endColumn": 47,
                  "snippet": {
                    "text": "     exercising rights under, and complying with all of the terms of, this\n     License or a future version of this License issued under Section 6.1.\n     For legal entities, \"You\" includes any entity which controls, is\n     controlled by, or is under common control with You. For purposes of\n     this definition, \"control\" means (a) the power, direct or indirect,\n     to cause the direction or management of such entity, whether by\n     contract or otherwise, or (b) ownership of more than fifty percent\n",
                    "rendered": {
                      "text": "     exercising rights under, and complying with all of the terms of, this\n     License or a future version of this License issued under Section 6.1.\n     For legal entities, \"You\" includes any entity which controls, is\n     controlled by, or is under common control with You. For purposes of\n     this definition, \"control\" means (a) the power, direct or indirect,\n     to cause the direction or management of such entity, whether by\n     contract or otherwise, or (b) ownership of more than fifty percent\n",
                      "markdown": "`     exercising rights under, and complying with all of the terms of, this\n     License or a future version of this License issued under Section 6.1.\n     For legal entities, \"You\" includes any entity which controls, is\n     controlled by, or is under common control with You. For purposes of\n     this definition, \"control\" means (a) the power, direct or indirect,\n     to cause the direction or management of such entity, whether by\n     contract or otherwise, or (b) ownership of more than fifty percent\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 63,
                  "endLine": 64,
                  "snippet": {
                    "text": "\n     1.11. \"Source Code\" means the preferred form of the Covered Code for\n     making modifications to it, including all modules it contains, plus\n     any associated interface definition files, scripts used to control\n     compilation and installation of an Executable, or source code\n     differential comparisons against either the Original Code or another\n     well known, available Covered Code of the Contributor's choice. The\n     Source Code can be in a compressed or archival form, provided the\n",
                    "rendered": {
                      "text": "\n     1.11. \"Source Code\" means the preferred form of the Covered Code for\n     making modifications to it, including all modules it contains, plus\n     any associated interface definition files, scripts used to control\n     compilation and installation of an Executable, or source code\n     differential comparisons against either the Original Code or another\n     well known, available Covered Code of the Contributor's choice. The\n     Source Code can be in a compressed or archival form, provided the\n",
                      "markdown": "`\n     1.11. \"Source Code\" means the preferred form of the Covered Code for\n     making modifications to it, including all modules it contains, plus\n     any associated interface definition files, scripts used to control\n     compilation and installation of an Executable, or source code\n     differential comparisons against either the Original Code or another\n     well known, available Covered Code of the Contributor's choice. The\n     Source Code can be in a compressed or archival form, provided the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 30,
                  "endLine": 54,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n",
                    "rendered": {
                      "text": "\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n",
                      "markdown": "`\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 29,
                  "endLine": 39,
                  "endColumn": 33,
                  "snippet": {
                    "text": "     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n",
                    "rendered": {
                      "text": "     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n",
                      "markdown": "`     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 19,
                  "endLine": 459,
                  "endColumn": 25,
                  "snippet": {
                    "text": "     Alternatively, the contents of this file may be used under the terms\n     of the _____ license (the  \"[___] License\"), in which case the\n     provisions of [______] License are applicable instead of those\n     above.  If you wish to allow use of your version of this file only\n     under the terms of the [____] License and not to allow others to use\n     your version of this file under the MPL, indicate your decision by\n     deleting  the provisions above and replace  them with the notice and\n",
                    "rendered": {
                      "text": "     Alternatively, the contents of this file may be used under the terms\n     of the _____ license (the  \"[___] License\"), in which case the\n     provisions of [______] License are applicable instead of those\n     above.  If you wish to allow use of your version of this file only\n     under the terms of the [____] License and not to allow others to use\n     your version of this file under the MPL, indicate your decision by\n     deleting  the provisions above and replace  them with the notice and\n",
                      "markdown": "`     Alternatively, the contents of this file may be used under the terms\n     of the _____ license (the  \"[___] License\"), in which case the\n     provisions of [______] License are applicable instead of those\n     above.  If you wish to allow use of your version of this file only\n     under the terms of the [____] License and not to allow others to use\n     your version of this file under the MPL, indicate your decision by\n     deleting  the provisions above and replace  them with the notice and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 44,
                  "endLine": 281,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n     6.1. New Versions.\n     BBC Communications Corporation (\"Netscape\") may publish revised\n     and/or new versions of the License from time to time. Each version\n     will be given a distinguishing version number.\n\n     6.2. Effect of New Versions.\n",
                    "rendered": {
                      "text": "\n     6.1. New Versions.\n     BBC Communications Corporation (\"Netscape\") may publish revised\n     and/or new versions of the License from time to time. Each version\n     will be given a distinguishing version number.\n\n     6.2. Effect of New Versions.\n",
                      "markdown": "`\n     6.1. New Versions.\n     BBC Communications Corporation (\"Netscape\") may publish revised\n     and/or new versions of the License from time to time. Each version\n     will be given a distinguishing version number.\n\n     6.2. Effect of New Versions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 37,
                  "endLine": 54,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n",
                    "rendered": {
                      "text": "\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n",
                      "markdown": "`\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.MPL"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 36,
                  "endLine": 39,
                  "endColumn": 42,
                  "snippet": {
                    "text": "     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n",
                    "rendered": {
                      "text": "     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n",
                      "markdown": "`     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 6,
                  "endLine": 484,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    m_readData = NULL;\n    m_readSize = 0;\n    m_username = string( );\n    m_password = string( );\n    m_proxy = string( );\n    m_noProxy = string( );\n    m_proxyUser = string( );\n",
                    "rendered": {
                      "text": "    m_readData = NULL;\n    m_readSize = 0;\n    m_username = string( );\n    m_password = string( );\n    m_proxy = string( );\n    m_noProxy = string( );\n    m_proxyUser = string( );\n",
                      "markdown": "`    m_readData = NULL;\n    m_readSize = 0;\n    m_username = string( );\n    m_password = string( );\n    m_proxy = string( );\n    m_noProxy = string( );\n    m_proxyUser = string( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 28,
                  "endLine": 454,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        m_headersFn = copy.m_headersFn;\n        m_headersData = copy.m_headersData;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_proxy = copy.m_proxy;\n        m_noProxy = copy.m_noProxy;\n        m_proxyUser = copy.m_proxyUser;\n",
                    "rendered": {
                      "text": "        m_headersFn = copy.m_headersFn;\n        m_headersData = copy.m_headersData;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_proxy = copy.m_proxy;\n        m_noProxy = copy.m_noProxy;\n        m_proxyUser = copy.m_proxyUser;\n",
                      "markdown": "`        m_headersFn = copy.m_headersFn;\n        m_headersData = copy.m_headersData;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_proxy = copy.m_proxy;\n        m_noProxy = copy.m_noProxy;\n        m_proxyUser = copy.m_proxyUser;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 10,
                  "endLine": 454,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        m_headersFn = copy.m_headersFn;\n        m_headersData = copy.m_headersData;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_proxy = copy.m_proxy;\n        m_noProxy = copy.m_noProxy;\n        m_proxyUser = copy.m_proxyUser;\n",
                    "rendered": {
                      "text": "        m_headersFn = copy.m_headersFn;\n        m_headersData = copy.m_headersData;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_proxy = copy.m_proxy;\n        m_noProxy = copy.m_noProxy;\n        m_proxyUser = copy.m_proxyUser;\n",
                      "markdown": "`        m_headersFn = copy.m_headersFn;\n        m_headersData = copy.m_headersData;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_proxy = copy.m_proxy;\n        m_noProxy = copy.m_noProxy;\n        m_proxyUser = copy.m_proxyUser;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 23,
                  "endLine": 426,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    m_headersFn( copy.m_headersFn ),\n    m_headersData( copy.m_headersData ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_proxy( copy.m_proxy ),\n    m_noProxy( copy.m_noProxy ),\n    m_proxyUser( copy.m_proxyUser ),\n",
                    "rendered": {
                      "text": "    m_headersFn( copy.m_headersFn ),\n    m_headersData( copy.m_headersData ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_proxy( copy.m_proxy ),\n    m_noProxy( copy.m_noProxy ),\n    m_proxyUser( copy.m_proxyUser ),\n",
                      "markdown": "`    m_headersFn( copy.m_headersFn ),\n    m_headersData( copy.m_headersData ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_proxy( copy.m_proxy ),\n    m_noProxy( copy.m_noProxy ),\n    m_proxyUser( copy.m_proxyUser ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 6,
                  "endLine": 426,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    m_headersFn( copy.m_headersFn ),\n    m_headersData( copy.m_headersData ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_proxy( copy.m_proxy ),\n    m_noProxy( copy.m_noProxy ),\n    m_proxyUser( copy.m_proxyUser ),\n",
                    "rendered": {
                      "text": "    m_headersFn( copy.m_headersFn ),\n    m_headersData( copy.m_headersData ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_proxy( copy.m_proxy ),\n    m_noProxy( copy.m_noProxy ),\n    m_proxyUser( copy.m_proxyUser ),\n",
                      "markdown": "`    m_headersFn( copy.m_headersFn ),\n    m_headersData( copy.m_headersData ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_proxy( copy.m_proxy ),\n    m_noProxy( copy.m_noProxy ),\n    m_proxyUser( copy.m_proxyUser ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 6,
                  "endLine": 401,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    m_headersFn( NULL ),\n    m_headersData( NULL ),\n    m_username( ),\n    m_password( ),\n    m_proxy( ),\n    m_noProxy( ),\n    m_proxyUser( ),\n",
                    "rendered": {
                      "text": "    m_headersFn( NULL ),\n    m_headersData( NULL ),\n    m_username( ),\n    m_password( ),\n    m_proxy( ),\n    m_noProxy( ),\n    m_proxyUser( ),\n",
                      "markdown": "`    m_headersFn( NULL ),\n    m_headersData( NULL ),\n    m_username( ),\n    m_password( ),\n    m_proxy( ),\n    m_noProxy( ),\n    m_proxyUser( ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 54,
                  "endLine": 320,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    /* Check the credentials */\n    if ( mockup::config->hasCredentials( ) &&\n            ( handle->m_username != mockup::config->m_username ||\n              handle->m_password != mockup::config->m_password ) )\n    {\n        // Send HTTP 401\n        handle->m_httpError = 401;\n",
                    "rendered": {
                      "text": "    /* Check the credentials */\n    if ( mockup::config->hasCredentials( ) &&\n            ( handle->m_username != mockup::config->m_username ||\n              handle->m_password != mockup::config->m_password ) )\n    {\n        // Send HTTP 401\n        handle->m_httpError = 401;\n",
                      "markdown": "`    /* Check the credentials */\n    if ( mockup::config->hasCredentials( ) &&\n            ( handle->m_username != mockup::config->m_username ||\n              handle->m_password != mockup::config->m_password ) )\n    {\n        // Send HTTP 401\n        handle->m_httpError = 401;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 24,
                  "endLine": 320,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    /* Check the credentials */\n    if ( mockup::config->hasCredentials( ) &&\n            ( handle->m_username != mockup::config->m_username ||\n              handle->m_password != mockup::config->m_password ) )\n    {\n        // Send HTTP 401\n        handle->m_httpError = 401;\n",
                    "rendered": {
                      "text": "    /* Check the credentials */\n    if ( mockup::config->hasCredentials( ) &&\n            ( handle->m_username != mockup::config->m_username ||\n              handle->m_password != mockup::config->m_password ) )\n    {\n        // Send HTTP 401\n        handle->m_httpError = 401;\n",
                      "markdown": "`    /* Check the credentials */\n    if ( mockup::config->hasCredentials( ) &&\n            ( handle->m_username != mockup::config->m_username ||\n              handle->m_password != mockup::config->m_password ) )\n    {\n        // Send HTTP 401\n        handle->m_httpError = 401;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 26,
                  "endLine": 241,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            handle->m_proxyUser = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_PROXYPASSWORD:\n        {\n            handle->m_proxyPass = string( va_arg( arg, char* ) );\n            break;\n",
                    "rendered": {
                      "text": "            handle->m_proxyUser = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_PROXYPASSWORD:\n        {\n            handle->m_proxyPass = string( va_arg( arg, char* ) );\n            break;\n",
                      "markdown": "`            handle->m_proxyUser = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_PROXYPASSWORD:\n        {\n            handle->m_proxyPass = string( va_arg( arg, char* ) );\n            break;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 26,
                  "endLine": 221,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            if ( pos != string::npos )\n            {\n                handle->m_username = userpwd.substr( 0, pos );\n                handle->m_password = userpwd.substr( pos + 1 );\n            }\n            break;\n        }\n",
                    "rendered": {
                      "text": "            if ( pos != string::npos )\n            {\n                handle->m_username = userpwd.substr( 0, pos );\n                handle->m_password = userpwd.substr( pos + 1 );\n            }\n            break;\n        }\n",
                      "markdown": "`            if ( pos != string::npos )\n            {\n                handle->m_username = userpwd.substr( 0, pos );\n                handle->m_password = userpwd.substr( pos + 1 );\n            }\n            break;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 22,
                  "endLine": 211,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        }\n        case CURLOPT_PASSWORD:\n        {\n            handle->m_password = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_USERPWD:\n",
                    "rendered": {
                      "text": "        }\n        case CURLOPT_PASSWORD:\n        {\n            handle->m_password = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_USERPWD:\n",
                      "markdown": "`        }\n        case CURLOPT_PASSWORD:\n        {\n            handle->m_password = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_USERPWD:\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 21,
                  "endLine": 209,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            handle->m_username = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_PASSWORD:\n        {\n            handle->m_password = string( va_arg( arg, char* ) );\n            break;\n",
                    "rendered": {
                      "text": "            handle->m_username = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_PASSWORD:\n        {\n            handle->m_password = string( va_arg( arg, char* ) );\n            break;\n",
                      "markdown": "`            handle->m_username = string( va_arg( arg, char* ) );\n            break;\n        }\n        case CURLOPT_PASSWORD:\n        {\n            handle->m_password = string( va_arg( arg, char* ) );\n            break;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 53,
                  "endLine": 352,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nCURLcode curl_easy_getinfo( CURL * curl, long info, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    va_list arg;\n    va_start( arg, info );\n",
                    "rendered": {
                      "text": "\nCURLcode curl_easy_getinfo( CURL * curl, long info, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    va_list arg;\n    va_start( arg, info );\n",
                      "markdown": "`\nCURLcode curl_easy_getinfo( CURL * curl, long info, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    va_list arg;\n    va_start( arg, info );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 27,
                  "endLine": 350,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    return mockup::config->writeResponse( handle );\n}\n\nCURLcode curl_easy_getinfo( CURL * curl, long info, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n",
                    "rendered": {
                      "text": "    return mockup::config->writeResponse( handle );\n}\n\nCURLcode curl_easy_getinfo( CURL * curl, long info, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n",
                      "markdown": "`    return mockup::config->writeResponse( handle );\n}\n\nCURLcode curl_easy_getinfo( CURL * curl, long info, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 53,
                  "endLine": 295,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    /* Fake a bad SSL Certificate? */\n    if ( !mockup::config->m_badSSLCertificate.empty( ) && handle->m_verifyPeer && handle->m_verifyHost )\n",
                    "rendered": {
                      "text": "\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    /* Fake a bad SSL Certificate? */\n    if ( !mockup::config->m_badSSLCertificate.empty( ) && handle->m_verifyPeer && handle->m_verifyHost )\n",
                      "markdown": "`\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    /* Fake a bad SSL Certificate? */\n    if ( !mockup::config->m_badSSLCertificate.empty( ) && handle->m_verifyPeer && handle->m_verifyHost )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 34,
                  "endLine": 293,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    return CURLE_OK;\n}\n\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n",
                    "rendered": {
                      "text": "    return CURLE_OK;\n}\n\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n",
                      "markdown": "`    return CURLE_OK;\n}\n\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 27,
                  "endLine": 293,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    return CURLE_OK;\n}\n\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n",
                    "rendered": {
                      "text": "    return CURLE_OK;\n}\n\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n",
                      "markdown": "`    return CURLE_OK;\n}\n\nCURLcode curl_easy_perform( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 20,
                  "endLine": 227,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        }\n        case CURLOPT_PROXY:\n        {\n            // FIXME curl does some more complex things with port and type\n            handle->m_proxy = string( va_arg( arg, char* ) );\n            break;\n        }\n",
                    "rendered": {
                      "text": "        }\n        case CURLOPT_PROXY:\n        {\n            // FIXME curl does some more complex things with port and type\n            handle->m_proxy = string( va_arg( arg, char* ) );\n            break;\n        }\n",
                      "markdown": "`        }\n        case CURLOPT_PROXY:\n        {\n            // FIXME curl does some more complex things with port and type\n            handle->m_proxy = string( va_arg( arg, char* ) );\n            break;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 53,
                  "endLine": 142,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nCURLcode curl_easy_setopt( CURL * curl, long option, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    va_list arg;\n    va_start( arg, option );\n",
                    "rendered": {
                      "text": "\nCURLcode curl_easy_setopt( CURL * curl, long option, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    va_list arg;\n    va_start( arg, option );\n",
                      "markdown": "`\nCURLcode curl_easy_setopt( CURL * curl, long option, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n    va_list arg;\n    va_start( arg, option );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 26,
                  "endLine": 140,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    return curl_unescape( string, length );\n}\n\nCURLcode curl_easy_setopt( CURL * curl, long option, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n",
                    "rendered": {
                      "text": "    return curl_unescape( string, length );\n}\n\nCURLcode curl_easy_setopt( CURL * curl, long option, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n",
                      "markdown": "`    return curl_unescape( string, length );\n}\n\nCURLcode curl_easy_setopt( CURL * curl, long option, ... )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 25,
                  "endLine": 135,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    return strndup( string, length );\n}\n\nchar *curl_easy_unescape( CURL *, const char *string, int length, int * )\n{\n    return curl_unescape( string, length );\n}\n",
                    "rendered": {
                      "text": "    return strndup( string, length );\n}\n\nchar *curl_easy_unescape( CURL *, const char *string, int length, int * )\n{\n    return curl_unescape( string, length );\n}\n",
                      "markdown": "`    return strndup( string, length );\n}\n\nchar *curl_easy_unescape( CURL *, const char *string, int length, int * )\n{\n    return curl_unescape( string, length );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 23,
                  "endLine": 125,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    handle->reset( );\n}\n\nchar *curl_easy_escape( CURL *, const char *string, int length )\n{\n    return strndup( string, length );\n}\n",
                    "rendered": {
                      "text": "    handle->reset( );\n}\n\nchar *curl_easy_escape( CURL *, const char *string, int length )\n{\n    return strndup( string, length );\n}\n",
                      "markdown": "`    handle->reset( );\n}\n\nchar *curl_easy_escape( CURL *, const char *string, int length )\n{\n    return strndup( string, length );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 53,
                  "endLine": 121,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n}\n\n",
                    "rendered": {
                      "text": "\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n}\n\n",
                      "markdown": "`\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 28,
                  "endLine": 119,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    delete( handle );\n}\n\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n",
                    "rendered": {
                      "text": "    delete( handle );\n}\n\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n",
                      "markdown": "`    delete( handle );\n}\n\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 21,
                  "endLine": 119,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    delete( handle );\n}\n\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n",
                    "rendered": {
                      "text": "    delete( handle );\n}\n\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n",
                      "markdown": "`    delete( handle );\n}\n\nvoid curl_easy_reset( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle * >( curl );\n    handle->reset( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 52,
                  "endLine": 115,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n}\n\n",
                    "rendered": {
                      "text": "\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n}\n\n",
                      "markdown": "`\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 30,
                  "endLine": 113,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    return new CurlHandle();\n}\n\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n",
                    "rendered": {
                      "text": "    return new CurlHandle();\n}\n\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n",
                      "markdown": "`    return new CurlHandle();\n}\n\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 23,
                  "endLine": 113,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    return new CurlHandle();\n}\n\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n",
                    "rendered": {
                      "text": "    return new CurlHandle();\n}\n\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n",
                      "markdown": "`    return new CurlHandle();\n}\n\nvoid curl_easy_cleanup( CURL * curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    delete( handle );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl-mockup.cxx"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 108,
                  "endColumn": 5,
                  "snippet": {
                    "text": "{\n    return CURLE_OK;\n}\n\nCURL *curl_easy_init( void )\n{\n    return new CurlHandle();\n}\n",
                    "rendered": {
                      "text": "{\n    return CURLE_OK;\n}\n\nCURL *curl_easy_init( void )\n{\n    return new CurlHandle();\n}\n",
                      "markdown": "`{\n    return CURLE_OK;\n}\n\nCURL *curl_easy_init( void )\n{\n    return new CurlHandle();\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.h"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 67,
                  "endLine": 71,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    This will reset all already defined responses.\n */\nvoid curl_mockup_setResponse( const char* filepath );\nvoid curl_mockup_setCredentials( const char* username, const char* password );\n\nstruct HttpRequest\n{\n",
                    "rendered": {
                      "text": "    This will reset all already defined responses.\n */\nvoid curl_mockup_setResponse( const char* filepath );\nvoid curl_mockup_setCredentials( const char* username, const char* password );\n\nstruct HttpRequest\n{\n",
                      "markdown": "`    This will reset all already defined responses.\n */\nvoid curl_mockup_setResponse( const char* filepath );\nvoid curl_mockup_setCredentials( const char* username, const char* password );\n\nstruct HttpRequest\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/internals.hxx"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 26,
                  "endLine": 128,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            std::map< RequestMatcher, Response > m_responses;\n            std::vector< Request > m_requests;\n            std::string m_username;\n            std::string m_password;\n            std::string m_badSSLCertificate;\n    };\n}\n",
                    "rendered": {
                      "text": "            std::map< RequestMatcher, Response > m_responses;\n            std::vector< Request > m_requests;\n            std::string m_username;\n            std::string m_password;\n            std::string m_badSSLCertificate;\n    };\n}\n",
                      "markdown": "`            std::map< RequestMatcher, Response > m_responses;\n            std::vector< Request > m_requests;\n            std::string m_username;\n            std::string m_password;\n            std::string m_badSSLCertificate;\n    };\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/internals.hxx"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 22,
                  "endLine": 59,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        void* m_headersData;\n\n        std::string m_username;\n        std::string m_password;\n        std::string m_proxy;\n        std::string m_noProxy;\n        std::string m_proxyUser;\n",
                    "rendered": {
                      "text": "        void* m_headersData;\n\n        std::string m_username;\n        std::string m_password;\n        std::string m_proxy;\n        std::string m_noProxy;\n        std::string m_proxyUser;\n",
                      "markdown": "`        void* m_headersData;\n\n        std::string m_username;\n        std::string m_password;\n        std::string m_proxy;\n        std::string m_noProxy;\n        std::string m_proxyUser;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/internals.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/internals.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 41,
                  "endLine": 257,
                  "endColumn": 49,
                  "snippet": {
                    "text": "void curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n}\n\nconst struct HttpRequest* curl_mockup_getRequest( const char* urlBase,\n",
                    "rendered": {
                      "text": "void curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n}\n\nconst struct HttpRequest* curl_mockup_getRequest( const char* urlBase,\n",
                      "markdown": "`void curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n}\n\nconst struct HttpRequest* curl_mockup_getRequest( const char* urlBase,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 22,
                  "endLine": 257,
                  "endColumn": 30,
                  "snippet": {
                    "text": "void curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n}\n\nconst struct HttpRequest* curl_mockup_getRequest( const char* urlBase,\n",
                    "rendered": {
                      "text": "void curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n}\n\nconst struct HttpRequest* curl_mockup_getRequest( const char* urlBase,\n",
                      "markdown": "`void curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n}\n\nconst struct HttpRequest* curl_mockup_getRequest( const char* urlBase,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 67,
                  "endLine": 254,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"\", \"\", \"\", filepath );\n}\n\nvoid curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"\", \"\", \"\", filepath );\n}\n\nvoid curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n",
                      "markdown": "`    curl_mockup_addResponse( \"\", \"\", \"\", filepath );\n}\n\nvoid curl_mockup_setCredentials( const char* username, const char* password )\n{\n    mockup::config->m_username = string( username );\n    mockup::config->m_password = string( password );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 42,
                  "endLine": 121,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    bool Configuration::hasCredentials( )\n    {\n        return !m_username.empty( ) && !m_password.empty( );\n    }\n\n    /** Find a suitable response\n",
                    "rendered": {
                      "text": "\n    bool Configuration::hasCredentials( )\n    {\n        return !m_username.empty( ) && !m_password.empty( );\n    }\n\n    /** Find a suitable response\n",
                      "markdown": "`\n    bool Configuration::hasCredentials( )\n    {\n        return !m_username.empty( ) && !m_password.empty( );\n    }\n\n    /** Find a suitable response\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 10,
                  "endLine": 114,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        m_responses( ),\n        m_requests( ),\n        m_username( ),\n        m_password( ),\n        m_badSSLCertificate( )\n    {\n    }\n",
                    "rendered": {
                      "text": "        m_responses( ),\n        m_requests( ),\n        m_username( ),\n        m_password( ),\n        m_badSSLCertificate( )\n    {\n    }\n",
                      "markdown": "`        m_responses( ),\n        m_requests( ),\n        m_username( ),\n        m_password( ),\n        m_badSSLCertificate( )\n    {\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 52,
                  "endLine": 400,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nconst char* curl_mockup_getProxyPass( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxyPass.c_str();\n    return NULL;\n",
                    "rendered": {
                      "text": "\nconst char* curl_mockup_getProxyPass( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxyPass.c_str();\n    return NULL;\n",
                      "markdown": "`\nconst char* curl_mockup_getProxyPass( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxyPass.c_str();\n    return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 43,
                  "endLine": 398,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    return NULL;\n}\n\nconst char* curl_mockup_getProxyPass( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n",
                    "rendered": {
                      "text": "    return NULL;\n}\n\nconst char* curl_mockup_getProxyPass( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n",
                      "markdown": "`    return NULL;\n}\n\nconst char* curl_mockup_getProxyPass( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 52,
                  "endLine": 392,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nconst char* curl_mockup_getProxyUser( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxyUser.c_str();\n    return NULL;\n",
                    "rendered": {
                      "text": "\nconst char* curl_mockup_getProxyUser( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxyUser.c_str();\n    return NULL;\n",
                      "markdown": "`\nconst char* curl_mockup_getProxyUser( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxyUser.c_str();\n    return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 43,
                  "endLine": 390,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    return NULL;\n}\n\nconst char* curl_mockup_getProxyUser( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n",
                    "rendered": {
                      "text": "    return NULL;\n}\n\nconst char* curl_mockup_getProxyUser( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n",
                      "markdown": "`    return NULL;\n}\n\nconst char* curl_mockup_getProxyUser( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 52,
                  "endLine": 384,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nconst char* curl_mockup_getNoProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_noProxy.c_str();\n    return NULL;\n",
                    "rendered": {
                      "text": "\nconst char* curl_mockup_getNoProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_noProxy.c_str();\n    return NULL;\n",
                      "markdown": "`\nconst char* curl_mockup_getNoProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_noProxy.c_str();\n    return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 41,
                  "endLine": 382,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    return NULL;\n}\n\nconst char* curl_mockup_getNoProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n",
                    "rendered": {
                      "text": "    return NULL;\n}\n\nconst char* curl_mockup_getNoProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n",
                      "markdown": "`    return NULL;\n}\n\nconst char* curl_mockup_getNoProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 52,
                  "endLine": 376,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nconst char* curl_mockup_getProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxy.c_str();\n    return NULL;\n",
                    "rendered": {
                      "text": "\nconst char* curl_mockup_getProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxy.c_str();\n    return NULL;\n",
                      "markdown": "`\nconst char* curl_mockup_getProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n        return handle->m_proxy.c_str();\n    return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 39,
                  "endLine": 374,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    return value;\n}\n\nconst char* curl_mockup_getProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n",
                    "rendered": {
                      "text": "    return value;\n}\n\nconst char* curl_mockup_getProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n",
                      "markdown": "`    return value;\n}\n\nconst char* curl_mockup_getProxy( CURL* curl )\n{\n    CurlHandle* handle = static_cast< CurlHandle* >( curl );\n    if ( NULL != handle )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/mockup-config.cxx"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 15,
                  "endLine": 211,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            }\n        }\n\n        // What curl error code to give?\n        if ( handle->m_httpError == 0 )\n            handle->m_httpError = 200;\n\n",
                    "rendered": {
                      "text": "            }\n        }\n\n        // What curl error code to give?\n        if ( handle->m_httpError == 0 )\n            handle->m_httpError = 200;\n\n",
                      "markdown": "`            }\n        }\n\n        // What curl error code to give?\n        if ( handle->m_httpError == 0 )\n            handle->m_httpError = 200;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis-c/test-dummies.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis-c/test-dummies.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis-c/test-document.cxx"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 82,
                  "endLine": 139,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\ndummies::Document* DocumentTest::getTestedImplementation( libcmis_DocumentPtr document )\n{\n    dummies::Document* impl = dynamic_cast< dummies::Document* >( document->handle.get( ) );\n    return impl;\n}\n\n",
                    "rendered": {
                      "text": "\ndummies::Document* DocumentTest::getTestedImplementation( libcmis_DocumentPtr document )\n{\n    dummies::Document* impl = dynamic_cast< dummies::Document* >( document->handle.get( ) );\n    return impl;\n}\n\n",
                      "markdown": "`\ndummies::Document* DocumentTest::getTestedImplementation( libcmis_DocumentPtr document )\n{\n    dummies::Document* impl = dynamic_cast< dummies::Document* >( document->handle.get( ) );\n    return impl;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/libcmis.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/libcmis.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/exception.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/exception.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/document.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/document.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/xml-utils.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/xml-utils.hxx"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 67,
                  "endLine": 144,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    LIBCMIS_API boost::posix_time::ptime parseDateTime( const std::string& dateTimeStr );\n\n    /// Write a UTC time object to an xsd:dateTime string\n    LIBCMIS_API std::string writeDateTime( boost::posix_time::ptime time );\n\n    LIBCMIS_API bool parseBool( const std::string& str );\n\n",
                    "rendered": {
                      "text": "    LIBCMIS_API boost::posix_time::ptime parseDateTime( const std::string& dateTimeStr );\n\n    /// Write a UTC time object to an xsd:dateTime string\n    LIBCMIS_API std::string writeDateTime( boost::posix_time::ptime time );\n\n    LIBCMIS_API bool parseBool( const std::string& str );\n\n",
                      "markdown": "`    LIBCMIS_API boost::posix_time::ptime parseDateTime( const std::string& dateTimeStr );\n\n    /// Write a UTC time object to an xsd:dateTime string\n    LIBCMIS_API std::string writeDateTime( boost::posix_time::ptime time );\n\n    LIBCMIS_API bool parseBool( const std::string& str );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/xml-utils.hxx"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 19,
                  "endLine": 143,
                  "endColumn": 25,
                  "snippet": {
                    "text": "     */\n    LIBCMIS_API boost::posix_time::ptime parseDateTime( const std::string& dateTimeStr );\n\n    /// Write a UTC time object to an xsd:dateTime string\n    LIBCMIS_API std::string writeDateTime( boost::posix_time::ptime time );\n\n    LIBCMIS_API bool parseBool( const std::string& str );\n",
                    "rendered": {
                      "text": "     */\n    LIBCMIS_API boost::posix_time::ptime parseDateTime( const std::string& dateTimeStr );\n\n    /// Write a UTC time object to an xsd:dateTime string\n    LIBCMIS_API std::string writeDateTime( boost::posix_time::ptime time );\n\n    LIBCMIS_API bool parseBool( const std::string& str );\n",
                      "markdown": "`     */\n    LIBCMIS_API boost::posix_time::ptime parseDateTime( const std::string& dateTimeStr );\n\n    /// Write a UTC time object to an xsd:dateTime string\n    LIBCMIS_API std::string writeDateTime( boost::posix_time::ptime time );\n\n    LIBCMIS_API bool parseBool( const std::string& str );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/xml-utils.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/allowable-actions.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/allowable-actions.hxx"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 40,
                  "endLine": 111,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            /** Default constructor for testing purpose\n              */\n            AllowableActions( );\n            AllowableActions( xmlNodePtr node );\n            AllowableActions( const AllowableActions& copy );\n            virtual ~AllowableActions( );\n\n",
                    "rendered": {
                      "text": "            /** Default constructor for testing purpose\n              */\n            AllowableActions( );\n            AllowableActions( xmlNodePtr node );\n            AllowableActions( const AllowableActions& copy );\n            virtual ~AllowableActions( );\n\n",
                      "markdown": "`            /** Default constructor for testing purpose\n              */\n            AllowableActions( );\n            AllowableActions( xmlNodePtr node );\n            AllowableActions( const AllowableActions& copy );\n            virtual ~AllowableActions( );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/allowable-actions.hxx"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 36,
                  "endLine": 86,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            bool m_valid;\n\n        public:\n            ObjectAction( xmlNodePtr node );\n            virtual ~ObjectAction( ){ }\n\n            Type getType( ) { return m_type; }\n",
                    "rendered": {
                      "text": "            bool m_valid;\n\n        public:\n            ObjectAction( xmlNodePtr node );\n            virtual ~ObjectAction( ){ }\n\n            Type getType( ) { return m_type; }\n",
                      "markdown": "`            bool m_valid;\n\n        public:\n            ObjectAction( xmlNodePtr node );\n            virtual ~ObjectAction( ){ }\n\n            Type getType( ) { return m_type; }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/allowable-actions.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/oauth2-data.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/oauth2-data.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session-factory.hxx"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 32,
                  "endLine": 152,
                  "endColumn": 40,
                  "snippet": {
                    "text": "              */\n            static std::vector< RepositoryPtr > getRepositories( std::string bindingUrl,\n                    std::string username = std::string( ),\n                    std::string password = std::string( ),\n                    bool verbose = false );\n    };\n}\n",
                    "rendered": {
                      "text": "              */\n            static std::vector< RepositoryPtr > getRepositories( std::string bindingUrl,\n                    std::string username = std::string( ),\n                    std::string password = std::string( ),\n                    bool verbose = false );\n    };\n}\n",
                      "markdown": "`              */\n            static std::vector< RepositoryPtr > getRepositories( std::string bindingUrl,\n                    std::string username = std::string( ),\n                    std::string password = std::string( ),\n                    bool verbose = false );\n    };\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session-factory.hxx"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 32,
                  "endLine": 136,
                  "endColumn": 40,
                  "snippet": {
                    "text": "              */\n            static Session* createSession( std::string bindingUrl,\n                    std::string username = std::string( ),\n                    std::string password = std::string( ),\n                    std::string repositoryId = std::string( ),\n                    bool noSslCheck = false,\n                    OAuth2DataPtr oauth2 = OAuth2DataPtr(), bool verbose = false );\n",
                    "rendered": {
                      "text": "              */\n            static Session* createSession( std::string bindingUrl,\n                    std::string username = std::string( ),\n                    std::string password = std::string( ),\n                    std::string repositoryId = std::string( ),\n                    bool noSslCheck = false,\n                    OAuth2DataPtr oauth2 = OAuth2DataPtr(), bool verbose = false );\n",
                      "markdown": "`              */\n            static Session* createSession( std::string bindingUrl,\n                    std::string username = std::string( ),\n                    std::string password = std::string( ),\n                    std::string repositoryId = std::string( ),\n                    bool noSslCheck = false,\n                    OAuth2DataPtr oauth2 = OAuth2DataPtr(), bool verbose = false );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session-factory.hxx"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 82,
                  "endLine": 62,
                  "endColumn": 90,
                  "snippet": {
                    "text": "                and return true. Returning false means that the user cancelled the authentication\n                and will fail the query.\n              */\n            virtual bool authenticationQuery( std::string& username, std::string& password ) = 0;\n    };\n    typedef boost::shared_ptr< AuthProvider > AuthProviderPtr;\n  \n",
                    "rendered": {
                      "text": "                and return true. Returning false means that the user cancelled the authentication\n                and will fail the query.\n              */\n            virtual bool authenticationQuery( std::string& username, std::string& password ) = 0;\n    };\n    typedef boost::shared_ptr< AuthProvider > AuthProviderPtr;\n  \n",
                      "markdown": "`                and return true. Returning false means that the user cancelled the authentication\n                and will fail the query.\n              */\n            virtual bool authenticationQuery( std::string& username, std::string& password ) = 0;\n    };\n    typedef boost::shared_ptr< AuthProvider > AuthProviderPtr;\n  \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session-factory.hxx"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 76,
                  "endLine": 58,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        public:\n            virtual ~AuthProvider() { };\n\n            /** The function implementing it needs to fill the username and password parameters\n                and return true. Returning false means that the user cancelled the authentication\n                and will fail the query.\n              */\n",
                    "rendered": {
                      "text": "        public:\n            virtual ~AuthProvider() { };\n\n            /** The function implementing it needs to fill the username and password parameters\n                and return true. Returning false means that the user cancelled the authentication\n                and will fail the query.\n              */\n",
                      "markdown": "`        public:\n            virtual ~AuthProvider() { };\n\n            /** The function implementing it needs to fill the username and password parameters\n                and return true. Returning false means that the user cancelled the authentication\n                and will fail the query.\n              */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session-factory.hxx"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 42,
                  "endLine": 51,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        The returned string must be free()d by the caller.\n      */\n    typedef char* ( *OAuth2AuthCodeProvider )( const char* authUrl,\n        const char* username, const char* password );\n\n    class LIBCMIS_API AuthProvider\n    {\n",
                    "rendered": {
                      "text": "        The returned string must be free()d by the caller.\n      */\n    typedef char* ( *OAuth2AuthCodeProvider )( const char* authUrl,\n        const char* username, const char* password );\n\n    class LIBCMIS_API AuthProvider\n    {\n",
                      "markdown": "`        The returned string must be free()d by the caller.\n      */\n    typedef char* ( *OAuth2AuthCodeProvider )( const char* authUrl,\n        const char* username, const char* password );\n\n    class LIBCMIS_API AuthProvider\n    {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session-factory.hxx"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 84,
                  "endLine": 73,
                  "endColumn": 90,
                  "snippet": {
                    "text": "        public:\n             virtual ~CertValidationHandler( ){ };\n\n             /** This function is provided a vector of X509 certificates encoded in base64, with\n                 the first certificate being the one to validate, and the others are the issuers\n                 chain.\n\n",
                    "rendered": {
                      "text": "        public:\n             virtual ~CertValidationHandler( ){ };\n\n             /** This function is provided a vector of X509 certificates encoded in base64, with\n                 the first certificate being the one to validate, and the others are the issuers\n                 chain.\n\n",
                      "markdown": "`        public:\n             virtual ~CertValidationHandler( ){ };\n\n             /** This function is provided a vector of X509 certificates encoded in base64, with\n                 the first certificate being the one to validate, and the others are the issuers\n                 chain.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session-factory.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/session-factory.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/json-utils.cxx"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 32,
                  "endLine": 218,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        return type;\n    try \n    {\n        boost::posix_time::ptime time = libcmis::parseDateTime( str );\n        if ( !time.is_not_a_date_time( ) )\n            return json_datetime;\n    }\n",
                    "rendered": {
                      "text": "        return type;\n    try \n    {\n        boost::posix_time::ptime time = libcmis::parseDateTime( str );\n        if ( !time.is_not_a_date_time( ) )\n            return json_datetime;\n    }\n",
                      "markdown": "`        return type;\n    try \n    {\n        boost::posix_time::ptime time = libcmis::parseDateTime( str );\n        if ( !time.is_not_a_date_time( ) )\n            return json_datetime;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-allowable-actions.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-allowable-actions.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-navigationservice.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-navigationservice.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-document.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-document.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-property.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-property.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/base-session.cxx"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 27,
                  "endLine": 49,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        string password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2, bool verbose,\n        libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    Session( ),\n    HttpSession( username, password, noSslCheck, oauth2, verbose, initProtocolsFunction ),\n    m_bindingUrl( bindingUrl ),\n    m_repositoryId( repositoryId ),\n    m_repositories( )\n",
                    "rendered": {
                      "text": "        string password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2, bool verbose,\n        libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    Session( ),\n    HttpSession( username, password, noSslCheck, oauth2, verbose, initProtocolsFunction ),\n    m_bindingUrl( bindingUrl ),\n    m_repositoryId( repositoryId ),\n    m_repositories( )\n",
                      "markdown": "`        string password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2, bool verbose,\n        libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    Session( ),\n    HttpSession( username, password, noSslCheck, oauth2, verbose, initProtocolsFunction ),\n    m_bindingUrl( bindingUrl ),\n    m_repositoryId( repositoryId ),\n    m_repositories( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/base-session.cxx"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 15,
                  "endLine": 46,
                  "endColumn": 23,
                  "snippet": {
                    "text": "using namespace std;\n\nBaseSession::BaseSession( string bindingUrl, string repositoryId, string username,\n        string password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2, bool verbose,\n        libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    Session( ),\n    HttpSession( username, password, noSslCheck, oauth2, verbose, initProtocolsFunction ),\n",
                    "rendered": {
                      "text": "using namespace std;\n\nBaseSession::BaseSession( string bindingUrl, string repositoryId, string username,\n        string password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2, bool verbose,\n        libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    Session( ),\n    HttpSession( username, password, noSslCheck, oauth2, verbose, initProtocolsFunction ),\n",
                      "markdown": "`using namespace std;\n\nBaseSession::BaseSession( string bindingUrl, string repositoryId, string username,\n        string password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2, bool verbose,\n        libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    Session( ),\n    HttpSession( username, password, noSslCheck, oauth2, verbose, initProtocolsFunction ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/property-type.cxx"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 42,
                  "endLine": 57,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    {\n    }\n\n    PropertyType::PropertyType( xmlNodePtr node ) :\n        m_id( ),\n        m_localName( ),\n        m_localNamespace( ),\n",
                    "rendered": {
                      "text": "    {\n    }\n\n    PropertyType::PropertyType( xmlNodePtr node ) :\n        m_id( ),\n        m_localName( ),\n        m_localNamespace( ),\n",
                      "markdown": "`    {\n    }\n\n    PropertyType::PropertyType( xmlNodePtr node ) :\n        m_id( ),\n        m_localName( ),\n        m_localNamespace( ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-handler.cxx"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 45,
                  "endLine": 188,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    {\n        code = m_oauth2Parser( m_session, getAuthURL( ),\n                               m_session->getUsername( ),\n                               m_session->getPassword( ) );\n    }\n    return code;\n}\n",
                    "rendered": {
                      "text": "    {\n        code = m_oauth2Parser( m_session, getAuthURL( ),\n                               m_session->getUsername( ),\n                               m_session->getPassword( ) );\n    }\n    return code;\n}\n",
                      "markdown": "`    {\n        code = m_oauth2Parser( m_session, getAuthURL( ),\n                               m_session->getUsername( ),\n                               m_session->getPassword( ) );\n    }\n    return code;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 59,
                  "endLine": 470,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n",
                    "rendered": {
                      "text": "\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n",
                      "markdown": "`\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 30,
                  "endLine": 381,
                  "endColumn": 34,
                  "snippet": {
                    "text": "excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n",
                    "rendered": {
                      "text": "excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n",
                      "markdown": "`excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 57,
                  "endLine": 307,
                  "snippet": {
                    "text": "    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n",
                    "rendered": {
                      "text": "    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n",
                      "markdown": "`    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 55,
                  "endLine": 299,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n",
                    "rendered": {
                      "text": "    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n",
                      "markdown": "`    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 21,
                  "endLine": 203,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\n",
                    "rendered": {
                      "text": "\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\n",
                      "markdown": "`\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 58,
                  "endLine": 172,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n",
                    "rendered": {
                      "text": "    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n",
                      "markdown": "`    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 11,
                  "endLine": 159,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Library.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\n",
                    "rendered": {
                      "text": "Library.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\n",
                      "markdown": "`Library.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 52,
                  "endLine": 139,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\n",
                    "rendered": {
                      "text": "  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\n",
                      "markdown": "`  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 12,
                  "endLine": 426,
                  "endColumn": 18,
                  "snippet": {
                    "text": "license version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\n",
                    "rendered": {
                      "text": "license version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\n",
                      "markdown": "`license version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 50,
                  "endLine": 414,
                  "endColumn": 56,
                  "snippet": {
                    "text": "written in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\n",
                    "rendered": {
                      "text": "written in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\n",
                      "markdown": "`written in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 10,
                  "endLine": 366,
                  "endColumn": 16,
                  "snippet": {
                    "text": "all its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\n",
                    "rendered": {
                      "text": "all its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\n",
                      "markdown": "`all its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 12,
                  "endLine": 347,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\n",
                    "rendered": {
                      "text": "\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\n",
                      "markdown": "`\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 62,
                  "endLine": 299,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n",
                    "rendered": {
                      "text": "    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n",
                      "markdown": "`    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 32,
                  "endLine": 224,
                  "endColumn": 38,
                  "snippet": {
                    "text": "that copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\n",
                    "rendered": {
                      "text": "that copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\n",
                      "markdown": "`that copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 21,
                  "endLine": 60,
                  "endColumn": 27,
                  "snippet": {
                    "text": "introduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\n",
                    "rendered": {
                      "text": "introduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\n",
                      "markdown": "`introduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.LGPL"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n",
                    "rendered": {
                      "text": "  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n",
                      "markdown": "`  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 38,
                  "endLine": 594,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    {\n        // check correct width\n        string actual = libcmis::sha1( \"35969137\" );\n        CPPUNIT_ASSERT_EQUAL( string( \"0d93546909cfeb5c00089202104df3980000ec9f\" ), actual );\n    }\n}\n\n",
                    "rendered": {
                      "text": "    {\n        // check correct width\n        string actual = libcmis::sha1( \"35969137\" );\n        CPPUNIT_ASSERT_EQUAL( string( \"0d93546909cfeb5c00089202104df3980000ec9f\" ), actual );\n    }\n}\n\n",
                      "markdown": "`    {\n        // check correct width\n        string actual = libcmis::sha1( \"35969137\" );\n        CPPUNIT_ASSERT_EQUAL( string( \"0d93546909cfeb5c00089202104df3980000ec9f\" ), actual );\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 38,
                  "endLine": 588,
                  "endColumn": 80,
                  "snippet": {
                    "text": "{\n    {\n        string actual = libcmis::sha1( \"Hello\" );\n        CPPUNIT_ASSERT_EQUAL( string( \"f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0\" ), actual );\n    }\n\n    {\n",
                    "rendered": {
                      "text": "{\n    {\n        string actual = libcmis::sha1( \"Hello\" );\n        CPPUNIT_ASSERT_EQUAL( string( \"f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0\" ), actual );\n    }\n\n    {\n",
                      "markdown": "`{\n    {\n        string actual = libcmis::sha1( \"Hello\" );\n        CPPUNIT_ASSERT_EQUAL( string( \"f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0\" ), actual );\n    }\n\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 45,
                  "endLine": 255,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        posix_time::time_duration expTime( basis.tm_hour - 2, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // Error test\n",
                    "rendered": {
                      "text": "        posix_time::time_duration expTime( basis.tm_hour - 2, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // Error test\n",
                      "markdown": "`        posix_time::time_duration expTime( basis.tm_hour - 2, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // Error test\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 13,
                  "endLine": 245,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // -XX:XX time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T-02:00\", &basis );\n",
                    "rendered": {
                      "text": "        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // -XX:XX time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T-02:00\", &basis );\n",
                      "markdown": "`        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // -XX:XX time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T-02:00\", &basis );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 45,
                  "endLine": 242,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        posix_time::time_duration expTime( basis.tm_hour + 2, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // -XX:XX time zone test\n",
                    "rendered": {
                      "text": "        posix_time::time_duration expTime( basis.tm_hour + 2, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // -XX:XX time zone test\n",
                      "markdown": "`        posix_time::time_duration expTime( basis.tm_hour + 2, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"+XX:XX time zone case failed\", expected, t );\n    }\n\n    // -XX:XX time zone test\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 13,
                  "endLine": 232,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Z time zone case failed\", expected, t );\n    }\n\n    // +XX:XX time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T+02:00\", &basis );\n",
                    "rendered": {
                      "text": "        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Z time zone case failed\", expected, t );\n    }\n\n    // +XX:XX time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T+02:00\", &basis );\n",
                      "markdown": "`        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Z time zone case failed\", expected, t );\n    }\n\n    // +XX:XX time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T+02:00\", &basis );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 40,
                  "endLine": 229,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        posix_time::time_duration expTime( basis.tm_hour, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Z time zone case failed\", expected, t );\n    }\n\n    // +XX:XX time zone test\n",
                    "rendered": {
                      "text": "        posix_time::time_duration expTime( basis.tm_hour, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Z time zone case failed\", expected, t );\n    }\n\n    // +XX:XX time zone test\n",
                      "markdown": "`        posix_time::time_duration expTime( basis.tm_hour, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Z time zone case failed\", expected, t );\n    }\n\n    // +XX:XX time zone test\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 8,
                  "endLine": 219,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"No time zone case failed\", expected, t );\n    }\n\n    // Z time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%TZ\", &basis );\n",
                    "rendered": {
                      "text": "        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"No time zone case failed\", expected, t );\n    }\n\n    // Z time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%TZ\", &basis );\n",
                      "markdown": "`        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"No time zone case failed\", expected, t );\n    }\n\n    // Z time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%TZ\", &basis );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 41,
                  "endLine": 216,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        posix_time::time_duration expTime( basis.tm_hour, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"No time zone case failed\", expected, t );\n    }\n\n    // Z time zone test\n",
                    "rendered": {
                      "text": "        posix_time::time_duration expTime( basis.tm_hour, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"No time zone case failed\", expected, t );\n    }\n\n    // Z time zone test\n",
                      "markdown": "`        posix_time::time_duration expTime( basis.tm_hour, basis.tm_min, basis.tm_sec );\n        posix_time::ptime expected( expDate, expTime );\n\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"No time zone case failed\", expected, t );\n    }\n\n    // Z time zone test\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 9,
                  "endLine": 206,
                  "endColumn": 15,
                  "snippet": {
                    "text": "                                      expected, t );\n    }\n\n    // No time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T\", &basis );\n",
                    "rendered": {
                      "text": "                                      expected, t );\n    }\n\n    // No time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T\", &basis );\n",
                      "markdown": "`                                      expected, t );\n    }\n\n    // No time zone test\n    {\n        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT%T\", &basis );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 45,
                  "endLine": 202,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n        strftime( toParse, sizeof( toParse ), \"%T\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #4\",\n                                      expected, t );\n    }\n\n",
                    "rendered": {
                      "text": "\n        strftime( toParse, sizeof( toParse ), \"%T\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #4\",\n                                      expected, t );\n    }\n\n",
                      "markdown": "`\n        strftime( toParse, sizeof( toParse ), \"%T\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #4\",\n                                      expected, t );\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 45,
                  "endLine": 197,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n        strftime( toParse, sizeof( toParse ), \"T%T\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #3\",\n                                      expected, t );\n\n        strftime( toParse, sizeof( toParse ), \"%T\", &basis );\n",
                    "rendered": {
                      "text": "\n        strftime( toParse, sizeof( toParse ), \"T%T\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #3\",\n                                      expected, t );\n\n        strftime( toParse, sizeof( toParse ), \"%T\", &basis );\n",
                      "markdown": "`\n        strftime( toParse, sizeof( toParse ), \"T%T\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #3\",\n                                      expected, t );\n\n        strftime( toParse, sizeof( toParse ), \"%T\", &basis );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 45,
                  "endLine": 192,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #2\",\n                                      expected, t );\n\n        strftime( toParse, sizeof( toParse ), \"T%T\", &basis );\n",
                    "rendered": {
                      "text": "        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #2\",\n                                      expected, t );\n\n        strftime( toParse, sizeof( toParse ), \"T%T\", &basis );\n",
                      "markdown": "`        char toParse[50];\n        strftime( toParse, sizeof( toParse ), \"%FT\", &basis );\n        t = libcmis::parseDateTime( string( toParse ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #2\",\n                                      expected, t );\n\n        strftime( toParse, sizeof( toParse ), \"T%T\", &basis );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-xmlutils.cxx"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 45,
                  "endLine": 186,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        posix_time::ptime expected( boost::date_time::not_a_date_time );\n\n        posix_time::ptime t = libcmis::parseDateTime( string() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #1\",\n                                      expected, t );\n\n        char toParse[50];\n",
                    "rendered": {
                      "text": "        posix_time::ptime expected( boost::date_time::not_a_date_time );\n\n        posix_time::ptime t = libcmis::parseDateTime( string() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #1\",\n                                      expected, t );\n\n        char toParse[50];\n",
                      "markdown": "`        posix_time::ptime expected( boost::date_time::not_a_date_time );\n\n        posix_time::ptime t = libcmis::parseDateTime( string() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Broken time string case failed #1\",\n                                      expected, t );\n\n        char toParse[50];\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-mockup-helpers.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-mockup-helpers.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 79,
                  "endLine": 572,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"testFolder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong type\", string( \"cmis:folder\" ), folder->getType( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !folder->getCreatedBy( ).empty( ) );\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"testFolder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong type\", string( \"cmis:folder\" ), folder->getType( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !folder->getCreatedBy( ).empty( ) );\n",
                      "markdown": "`    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"testFolder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong type\", string( \"cmis:folder\" ), folder->getType( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !folder->getCreatedBy( ).empty( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 57,
                  "endLine": 1299,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n",
                      "markdown": "`    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1279,
                  "startColumn": 57,
                  "endLine": 1279,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::getThumbnailUrlTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n\n    const string documentUrl = BASE_URL + \"/files/\" + documentId;\n",
                    "rendered": {
                      "text": "void GDriveTest::getThumbnailUrlTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n\n    const string documentUrl = BASE_URL + \"/files/\" + documentId;\n",
                      "markdown": "`void GDriveTest::getThumbnailUrlTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n\n    const string documentUrl = BASE_URL + \"/files/\" + documentId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1270,
                  "startColumn": 57,
                  "endLine": 1270,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::getRefreshTokenTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Refresh token does not match\",\n                                  string (\"mock-refresh-token\"),\n                                  session->getRefreshToken( ) );\n",
                    "rendered": {
                      "text": "void GDriveTest::getRefreshTokenTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Refresh token does not match\",\n                                  string (\"mock-refresh-token\"),\n                                  session->getRefreshToken( ) );\n",
                      "markdown": "`void GDriveTest::getRefreshTokenTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Refresh token does not match\",\n                                  string (\"mock-refresh-token\"),\n                                  session->getRefreshToken( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1203,
                  "startColumn": 57,
                  "endLine": 1203,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::updatePropertiesTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string documentUrl = BASE_URL + \"/files/\" + documentId;\n    curl_mockup_addResponse( documentUrl.c_str( ), \"\",\n",
                    "rendered": {
                      "text": "void GDriveTest::updatePropertiesTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string documentUrl = BASE_URL + \"/files/\" + documentId;\n    curl_mockup_addResponse( documentUrl.c_str( ), \"\",\n",
                      "markdown": "`void GDriveTest::updatePropertiesTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string documentUrl = BASE_URL + \"/files/\" + documentId;\n    curl_mockup_addResponse( documentUrl.c_str( ), \"\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1131,
                  "startColumn": 57,
                  "endLine": 1131,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::getContentStreamWithRenditionsTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n",
                    "rendered": {
                      "text": "void GDriveTest::getContentStreamWithRenditionsTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n",
                      "markdown": "`void GDriveTest::getContentStreamWithRenditionsTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1112,
                  "startColumn": 57,
                  "endLine": 1112,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::removeTreeTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string folderId( \"aFolderId\" );\n\n    const string folderUrl = BASE_URL + \"/files/\" + folderId;\n",
                    "rendered": {
                      "text": "void GDriveTest::removeTreeTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string folderId( \"aFolderId\" );\n\n    const string folderUrl = BASE_URL + \"/files/\" + folderId;\n",
                      "markdown": "`void GDriveTest::removeTreeTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string folderId( \"aFolderId\" );\n\n    const string folderUrl = BASE_URL + \"/files/\" + folderId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1073,
                  "startColumn": 57,
                  "endLine": 1073,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::createFolderTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string folderId( \"aFolderId\" );\n\n    const string folderUrl = BASE_URL + \"/files/\" + folderId;\n",
                    "rendered": {
                      "text": "void GDriveTest::createFolderTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string folderId( \"aFolderId\" );\n\n    const string folderUrl = BASE_URL + \"/files/\" + folderId;\n",
                      "markdown": "`void GDriveTest::createFolderTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string folderId( \"aFolderId\" );\n\n    const string folderUrl = BASE_URL + \"/files/\" + folderId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 57,
                  "endLine": 1021,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string folderId( \"aFolderId\" );\n\n",
                    "rendered": {
                      "text": "void GDriveTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string folderId( \"aFolderId\" );\n\n",
                      "markdown": "`void GDriveTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string folderId( \"aFolderId\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 988,
                  "startColumn": 57,
                  "endLine": 988,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::moveTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string sourceId( \"aFolderId\" );\n    const string desId( \"aNewFolderId\" );\n",
                    "rendered": {
                      "text": "void GDriveTest::moveTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string sourceId( \"aFolderId\" );\n    const string desId( \"aNewFolderId\" );\n",
                      "markdown": "`void GDriveTest::moveTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string sourceId( \"aFolderId\" );\n    const string desId( \"aNewFolderId\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 968,
                  "startColumn": 57,
                  "endLine": 968,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::deleteTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string objectId( \"aFileId\" );\n\n",
                    "rendered": {
                      "text": "void GDriveTest::deleteTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string objectId( \"aFileId\" );\n\n",
                      "markdown": "`void GDriveTest::deleteTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string objectId( \"aFileId\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 939,
                  "startColumn": 57,
                  "endLine": 939,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::checkInTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n",
                    "rendered": {
                      "text": "void GDriveTest::checkInTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n",
                      "markdown": "`void GDriveTest::checkInTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 923,
                  "startColumn": 57,
                  "endLine": 923,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::checkOutTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n",
                    "rendered": {
                      "text": "void GDriveTest::checkOutTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n",
                      "markdown": "`void GDriveTest::checkOutTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 902,
                  "startColumn": 57,
                  "endLine": 902,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    static const string folderId (\"aFolderId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/folder.json\", 200, true);\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    static const string folderId (\"aFolderId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/folder.json\", 200, true);\n",
                      "markdown": "`    curl_mockup_reset( );\n    static const string folderId (\"aFolderId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/folder.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 878,
                  "startColumn": 57,
                  "endLine": 878,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n",
                      "markdown": "`    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 57,
                  "endLine": 855,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::getObjectByPathMissingTest()\n{\n    // Mockup setup\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootChildUrl = BASE_URL + \"/files/root/children/\";\n    curl_mockup_addResponse ( rootChildUrl.c_str( ), \"q=title+=+'GDrive File'\",\n                              \"GET\", DATA_DIR \"/gdrive/root_child_missing.json\", 200, true );\n",
                    "rendered": {
                      "text": "void GDriveTest::getObjectByPathMissingTest()\n{\n    // Mockup setup\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootChildUrl = BASE_URL + \"/files/root/children/\";\n    curl_mockup_addResponse ( rootChildUrl.c_str( ), \"q=title+=+'GDrive File'\",\n                              \"GET\", DATA_DIR \"/gdrive/root_child_missing.json\", 200, true );\n",
                      "markdown": "`void GDriveTest::getObjectByPathMissingTest()\n{\n    // Mockup setup\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootChildUrl = BASE_URL + \"/files/root/children/\";\n    curl_mockup_addResponse ( rootChildUrl.c_str( ), \"q=title+=+'GDrive File'\",\n                              \"GET\", DATA_DIR \"/gdrive/root_child_missing.json\", 200, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 835,
                  "startColumn": 57,
                  "endLine": 835,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::getObjectByPathTest()\n{\n    // Mockup setup\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootChildUrl = BASE_URL + \"/files/root/children/\";\n    curl_mockup_addResponse ( rootChildUrl.c_str( ), \"q=title+=+'GDrive File'\",\n                              \"GET\", DATA_DIR \"/gdrive/root_child_search.json\", 200, true );\n",
                    "rendered": {
                      "text": "void GDriveTest::getObjectByPathTest()\n{\n    // Mockup setup\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootChildUrl = BASE_URL + \"/files/root/children/\";\n    curl_mockup_addResponse ( rootChildUrl.c_str( ), \"q=title+=+'GDrive File'\",\n                              \"GET\", DATA_DIR \"/gdrive/root_child_search.json\", 200, true );\n",
                      "markdown": "`void GDriveTest::getObjectByPathTest()\n{\n    // Mockup setup\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootChildUrl = BASE_URL + \"/files/root/children/\";\n    curl_mockup_addResponse ( rootChildUrl.c_str( ), \"q=title+=+'GDrive File'\",\n                              \"GET\", DATA_DIR \"/gdrive/root_child_search.json\", 200, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 57,
                  "endLine": 822,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\nvoid GDriveTest::getObjectByPathRootTest()\n{\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootUrl = BASE_URL + \"/files/root\";\n    curl_mockup_addResponse ( rootUrl.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/gdrive/folder.json\", 200, true);\n",
                    "rendered": {
                      "text": "\nvoid GDriveTest::getObjectByPathRootTest()\n{\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootUrl = BASE_URL + \"/files/root\";\n    curl_mockup_addResponse ( rootUrl.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/gdrive/folder.json\", 200, true);\n",
                      "markdown": "`\nvoid GDriveTest::getObjectByPathRootTest()\n{\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string rootUrl = BASE_URL + \"/files/root\";\n    curl_mockup_addResponse ( rootUrl.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/gdrive/folder.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 809,
                  "startColumn": 57,
                  "endLine": 809,
                  "endColumn": 65,
                  "snippet": {
                    "text": "{\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse ( url.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/gdrive/gdoc-file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse ( url.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/gdrive/gdoc-file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse ( url.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/gdrive/gdoc-file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 58,
                  "endLine": 795,
                  "endColumn": 66,
                  "snippet": {
                    "text": "{\n     curl_mockup_reset( );\n\n     GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n",
                    "rendered": {
                      "text": "{\n     curl_mockup_reset( );\n\n     GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n",
                      "markdown": "`{\n     curl_mockup_reset( );\n\n     GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 57,
                  "endLine": 783,
                  "endColumn": 65,
                  "snippet": {
                    "text": "{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string expectedId( \"cmis:document\" );\n    libcmis::ObjectTypePtr actual = session->getType( expectedId );\n",
                    "rendered": {
                      "text": "{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string expectedId( \"cmis:document\" );\n    libcmis::ObjectTypePtr actual = session->getType( expectedId );\n",
                      "markdown": "`{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string expectedId( \"cmis:document\" );\n    libcmis::ObjectTypePtr actual = session->getType( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 57,
                  "endLine": 734,
                  "endColumn": 65,
                  "snippet": {
                    "text": "{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId (\"aFolderId\");\n    string url = BASE_URL + \"/files/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n",
                    "rendered": {
                      "text": "{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId (\"aFolderId\");\n    string url = BASE_URL + \"/files/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n",
                      "markdown": "`{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId (\"aFolderId\");\n    string url = BASE_URL + \"/files/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 57,
                  "endLine": 693,
                  "endColumn": 65,
                  "snippet": {
                    "text": "{\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n",
                    "rendered": {
                      "text": "{\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n",
                      "markdown": "`{\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 57,
                  "endLine": 648,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n",
                    "rendered": {
                      "text": "void GDriveTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n",
                      "markdown": "`void GDriveTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n    const string uploadBaseUrl = \"https://www.googleapis.com/upload/drive/v2/files/\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 57,
                  "endLine": 616,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n",
                    "rendered": {
                      "text": "void GDriveTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n",
                      "markdown": "`void GDriveTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/files/\" + documentId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 57,
                  "endLine": 584,
                  "endColumn": 65,
                  "snippet": {
                    "text": "void GDriveTest::getDocumentParentsTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    static const string parentId( \"aFolderId\" );\n",
                    "rendered": {
                      "text": "void GDriveTest::getDocumentParentsTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    static const string parentId( \"aFolderId\" );\n",
                      "markdown": "`void GDriveTest::getDocumentParentsTest( )\n{\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    static const string parentId( \"aFolderId\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 57,
                  "endLine": 552,
                  "endColumn": 65,
                  "snippet": {
                    "text": "{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId( \"aFolderId\" );\n    static const string parentId( \"parentID\" );\n    string url = BASE_URL + \"/files/\" + folderId;\n",
                    "rendered": {
                      "text": "{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId( \"aFolderId\" );\n    static const string parentId( \"parentID\" );\n    string url = BASE_URL + \"/files/\" + folderId;\n",
                      "markdown": "`{\n    curl_mockup_reset( );\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId( \"aFolderId\" );\n    static const string parentId( \"parentID\" );\n    string url = BASE_URL + \"/files/\" + folderId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 57,
                  "endLine": 517,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n",
                      "markdown": "`    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/files/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/gdrive/document.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 57,
                  "endLine": 471,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n",
                    "rendered": {
                      "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n",
                      "markdown": "`    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 57,
                  "endLine": 425,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n",
                    "rendered": {
                      "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n",
                      "markdown": "`    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 57,
                  "endLine": 381,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string folderId(\"aFileId\");\n",
                    "rendered": {
                      "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string folderId(\"aFileId\");\n",
                      "markdown": "`    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string folderId(\"aFileId\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 57,
                  "endLine": 346,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n",
                    "rendered": {
                      "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n",
                      "markdown": "`    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 74,
                  "endLine": 297,
                  "endColumn": 82,
                  "snippet": {
                    "text": "                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n    string authRequestPin( curl_mockup_getRequestBody( CHALLENGE_URL.c_str(), empty.c_str( ),\n",
                    "rendered": {
                      "text": "                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n    string authRequestPin( curl_mockup_getRequestBody( CHALLENGE_URL.c_str(), empty.c_str( ),\n",
                      "markdown": "`                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n    string authRequestPin( curl_mockup_getRequestBody( CHALLENGE_URL.c_str(), empty.c_str( ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 53,
                  "endLine": 297,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n    string authRequestPin( curl_mockup_getRequestBody( CHALLENGE_URL.c_str(), empty.c_str( ),\n",
                    "rendered": {
                      "text": "                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n    string authRequestPin( curl_mockup_getRequestBody( CHALLENGE_URL.c_str(), empty.c_str( ),\n",
                      "markdown": "`                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n    string authRequestPin( curl_mockup_getRequestBody( CHALLENGE_URL.c_str(), empty.c_str( ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 68,
                  "endLine": 296,
                  "endColumn": 76,
                  "snippet": {
                    "text": "        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n",
                    "rendered": {
                      "text": "        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n",
                      "markdown": "`        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check request for pin code\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 31,
                  "endLine": 294,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n",
                    "rendered": {
                      "text": "                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n",
                      "markdown": "`                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 30,
                  "endLine": 292,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n",
                    "rendered": {
                      "text": "    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n",
                      "markdown": "`    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD2;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 22,
                  "endLine": 290,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n",
                    "rendered": {
                      "text": "                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n",
                      "markdown": "`                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 40,
                  "endLine": 289,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n",
                      "markdown": "`    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 23,
                  "endLine": 283,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    string authRequestEmail( curl_mockup_getRequestBody( LOGIN_URL2.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestEmail =\n        string ( \"Page=PasswordSeparationSignIn&continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Email=\") + USERNAME2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n",
                    "rendered": {
                      "text": "    string authRequestEmail( curl_mockup_getRequestBody( LOGIN_URL2.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestEmail =\n        string ( \"Page=PasswordSeparationSignIn&continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Email=\") + USERNAME2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n",
                      "markdown": "`    string authRequestEmail( curl_mockup_getRequestBody( LOGIN_URL2.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestEmail =\n        string ( \"Page=PasswordSeparationSignIn&continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Email=\") + USERNAME2;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 58,
                  "endLine": 276,
                  "endColumn": 66,
                  "snippet": {
                    "text": "{\n    libcmis::SessionFactory::setOAuth2AuthCodeProvider( lcl_authCodeFallback );\n\n    GDriveSessionPtr session = getTestSession( USERNAME2, PASSWORD2, true );\n    string empty;\n\n    // Check authentication request for email\n",
                    "rendered": {
                      "text": "{\n    libcmis::SessionFactory::setOAuth2AuthCodeProvider( lcl_authCodeFallback );\n\n    GDriveSessionPtr session = getTestSession( USERNAME2, PASSWORD2, true );\n    string empty;\n\n    // Check authentication request for email\n",
                      "markdown": "`{\n    libcmis::SessionFactory::setOAuth2AuthCodeProvider( lcl_authCodeFallback );\n\n    GDriveSessionPtr session = getTestSession( USERNAME2, PASSWORD2, true );\n    string empty;\n\n    // Check authentication request for email\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 74,
                  "endLine": 239,
                  "endColumn": 82,
                  "snippet": {
                    "text": "                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n    string codeRequest( curl_mockup_getRequestBody( APPROVAL_URL.c_str(),\n",
                    "rendered": {
                      "text": "                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n    string codeRequest( curl_mockup_getRequestBody( APPROVAL_URL.c_str(),\n",
                      "markdown": "`                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n    string codeRequest( curl_mockup_getRequestBody( APPROVAL_URL.c_str(),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 53,
                  "endLine": 239,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n    string codeRequest( curl_mockup_getRequestBody( APPROVAL_URL.c_str(),\n",
                    "rendered": {
                      "text": "                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n    string codeRequest( curl_mockup_getRequestBody( APPROVAL_URL.c_str(),\n",
                      "markdown": "`                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n    string codeRequest( curl_mockup_getRequestBody( APPROVAL_URL.c_str(),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 68,
                  "endLine": 238,
                  "endColumn": 76,
                  "snippet": {
                    "text": "        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n",
                    "rendered": {
                      "text": "        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n",
                      "markdown": "`        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n\n    // Check code request\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 31,
                  "endLine": 236,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n",
                    "rendered": {
                      "text": "                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n",
                      "markdown": "`                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Password\",\n                                  expectedAuthRequestPassword, authRequestPassword );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 30,
                  "endLine": 234,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n",
                    "rendered": {
                      "text": "    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n",
                      "markdown": "`    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Passwd=\") + PASSWORD;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 22,
                  "endLine": 232,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n",
                    "rendered": {
                      "text": "                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n",
                      "markdown": "`                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n        string ( \"continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 40,
                  "endLine": 231,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n",
                      "markdown": "`    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n                                  expectedAuthRequestEmail, authRequestEmail );\n\n    // Check authentication request for password\n    string authRequestPassword( curl_mockup_getRequestBody( LOGIN_URL.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestPassword =\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 23,
                  "endLine": 225,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    string authRequestEmail( curl_mockup_getRequestBody( LOGIN_URL2.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestEmail =\n        string ( \"Page=PasswordSeparationSignIn&continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Email=\") + USERNAME;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n",
                    "rendered": {
                      "text": "    string authRequestEmail( curl_mockup_getRequestBody( LOGIN_URL2.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestEmail =\n        string ( \"Page=PasswordSeparationSignIn&continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Email=\") + USERNAME;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n",
                      "markdown": "`    string authRequestEmail( curl_mockup_getRequestBody( LOGIN_URL2.c_str(), empty.c_str( ),\n                                                \"POST\" ) );\n    string expectedAuthRequestEmail =\n        string ( \"Page=PasswordSeparationSignIn&continue=redirectLink&scope=Scope&service=lso&GALX=cookie\"\n                 \"&Email=\") + USERNAME;\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong authentication request for Email\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 57,
                  "endLine": 218,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\nvoid GDriveTest::sessionAuthenticationTest( )\n{\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string empty;\n\n    // Check authentication request for email\n",
                    "rendered": {
                      "text": "\nvoid GDriveTest::sessionAuthenticationTest( )\n{\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string empty;\n\n    // Check authentication request for email\n",
                      "markdown": "`\nvoid GDriveTest::sessionAuthenticationTest( )\n{\n    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string empty;\n\n    // Check authentication request for email\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 68,
                  "endLine": 213,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_addResponse ( TOKEN_URL.c_str( ), empty.c_str( ), \"POST\",\n                              DATA_DIR \"/gdrive/token-response.json\", 200, true );\n\n    return GDriveSessionPtr( new GDriveSession( BASE_URL, username, password, oauth2, false ) );\n}\n\nvoid GDriveTest::sessionAuthenticationTest( )\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse ( TOKEN_URL.c_str( ), empty.c_str( ), \"POST\",\n                              DATA_DIR \"/gdrive/token-response.json\", 200, true );\n\n    return GDriveSessionPtr( new GDriveSession( BASE_URL, username, password, oauth2, false ) );\n}\n\nvoid GDriveTest::sessionAuthenticationTest( )\n",
                      "markdown": "`    curl_mockup_addResponse ( TOKEN_URL.c_str( ), empty.c_str( ), \"POST\",\n                              DATA_DIR \"/gdrive/token-response.json\", 200, true );\n\n    return GDriveSessionPtr( new GDriveSession( BASE_URL, username, password, oauth2, false ) );\n}\n\nvoid GDriveTest::sessionAuthenticationTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 25,
                  "endLine": 201,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    }\n    else\n    {\n        //authentication password,\n        curl_mockup_addResponse( LOGIN_URL.c_str( ), empty.c_str( ), \"POST\",\n                                 DATA_DIR \"/gdrive/approve.html\", 200, true);\n    }\n",
                    "rendered": {
                      "text": "    }\n    else\n    {\n        //authentication password,\n        curl_mockup_addResponse( LOGIN_URL.c_str( ), empty.c_str( ), \"POST\",\n                                 DATA_DIR \"/gdrive/approve.html\", 200, true);\n    }\n",
                      "markdown": "`    }\n    else\n    {\n        //authentication password,\n        curl_mockup_addResponse( LOGIN_URL.c_str( ), empty.c_str( ), \"POST\",\n                                 DATA_DIR \"/gdrive/approve.html\", 200, true);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 69,
                  "endLine": 169,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        GDriveSessionPtr getTestSession( string username, string password, bool with2FA = false );\n};\n\nGDriveSessionPtr GDriveTest::getTestSession( string username, string password, bool with2FA )\n{\n    libcmis::OAuth2DataPtr oauth2(\n        new libcmis::OAuth2Data( AUTH_URL, TOKEN_URL, SCOPE,\n",
                    "rendered": {
                      "text": "        GDriveSessionPtr getTestSession( string username, string password, bool with2FA = false );\n};\n\nGDriveSessionPtr GDriveTest::getTestSession( string username, string password, bool with2FA )\n{\n    libcmis::OAuth2DataPtr oauth2(\n        new libcmis::OAuth2Data( AUTH_URL, TOKEN_URL, SCOPE,\n",
                      "markdown": "`        GDriveSessionPtr getTestSession( string username, string password, bool with2FA = false );\n};\n\nGDriveSessionPtr GDriveTest::getTestSession( string username, string password, bool with2FA )\n{\n    libcmis::OAuth2DataPtr oauth2(\n        new libcmis::OAuth2Data( AUTH_URL, TOKEN_URL, SCOPE,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 65,
                  "endLine": 166,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        GDriveSessionPtr getTestSession( string username, string password, bool with2FA = false );\n};\n\nGDriveSessionPtr GDriveTest::getTestSession( string username, string password, bool with2FA )\n",
                    "rendered": {
                      "text": "        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        GDriveSessionPtr getTestSession( string username, string password, bool with2FA = false );\n};\n\nGDriveSessionPtr GDriveTest::getTestSession( string username, string password, bool with2FA )\n",
                      "markdown": "`        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        GDriveSessionPtr getTestSession( string username, string password, bool with2FA = false );\n};\n\nGDriveSessionPtr GDriveTest::getTestSession( string username, string password, bool with2FA )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 93,
                  "endLine": 79,
                  "endColumn": 101,
                  "snippet": {
                    "text": "\nnamespace\n{\n    char* lcl_authCodeFallback( const char* /*url*/, const char* /*username*/, const char* /*password*/ )\n    {\n        char *authCode = strdup( PIN );\n        return authCode;\n",
                    "rendered": {
                      "text": "\nnamespace\n{\n    char* lcl_authCodeFallback( const char* /*url*/, const char* /*username*/, const char* /*password*/ )\n    {\n        char *authCode = strdup( PIN );\n        return authCode;\n",
                      "markdown": "`\nnamespace\n{\n    char* lcl_authCodeFallback( const char* /*url*/, const char* /*username*/, const char* /*password*/ )\n    {\n        char *authCode = strdup( PIN );\n        return authCode;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 37,
                  "endLine": 64,
                  "endColumn": 45,
                  "snippet": {
                    "text": "static const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n",
                    "rendered": {
                      "text": "static const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n",
                      "markdown": "`static const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 20,
                  "endLine": 64,
                  "endColumn": 28,
                  "snippet": {
                    "text": "static const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n",
                    "rendered": {
                      "text": "static const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n",
                      "markdown": "`static const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 36,
                  "endLine": 62,
                  "endColumn": 44,
                  "snippet": {
                    "text": "static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\n",
                    "rendered": {
                      "text": "static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\n",
                      "markdown": "`static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 20,
                  "endLine": 62,
                  "endColumn": 28,
                  "snippet": {
                    "text": "static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\n",
                    "rendered": {
                      "text": "static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\n",
                      "markdown": "`static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string USERNAME2( \"mock-user2\" );\nstatic const string PASSWORD2( \"mock-password2\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-gdrive.cxx"
                },
                "region": {
                  "startLine": 1227,
                  "startColumn": 6,
                  "endLine": 1227,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    libcmis::PropertyPtr property( new libcmis::Property( it->second, values ) );\n    newProperties[ propertyName ] = property;\n\n    // Update the properties (method to test)\n    object->updateProperties( newProperties );\n\n    // Check that the sent request is OK\n",
                    "rendered": {
                      "text": "    libcmis::PropertyPtr property( new libcmis::Property( it->second, values ) );\n    newProperties[ propertyName ] = property;\n\n    // Update the properties (method to test)\n    object->updateProperties( newProperties );\n\n    // Check that the sent request is OK\n",
                      "markdown": "`    libcmis::PropertyPtr property( new libcmis::Property( it->second, values ) );\n    newProperties[ propertyName ] = property;\n\n    // Update the properties (method to test)\n    object->updateProperties( newProperties );\n\n    // Check that the sent request is OK\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-helpers.cxx"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 44,
                  "endLine": 71,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n\n        return XmlNodeRef( node, doc );\n    }\n",
                    "rendered": {
                      "text": "        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n\n        return XmlNodeRef( node, doc );\n    }\n",
                      "markdown": "`        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n\n        return XmlNodeRef( node, doc );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-helpers.cxx"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 54,
                  "endLine": 133,
                  "endColumn": 63,
                  "snippet": {
                    "text": "            xmlXPathFreeContext( xpathCtx );\n        }\n        else\n            throw libcmis::Exception( \"Failed to parse service document\" );\n\n        xmlFreeDoc( doc );\n\n",
                    "rendered": {
                      "text": "            xmlXPathFreeContext( xpathCtx );\n        }\n        else\n            throw libcmis::Exception( \"Failed to parse service document\" );\n\n        xmlFreeDoc( doc );\n\n",
                      "markdown": "`            xmlXPathFreeContext( xpathCtx );\n        }\n        else\n            throw libcmis::Exception( \"Failed to parse service document\" );\n\n        xmlFreeDoc( doc );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-helpers.cxx"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 34,
                  "endLine": 121,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n                    for ( int i = 0; i < nbResults; ++i )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlBufferPtr buf = xmlBufferCreate( );\n                        xmlNodeDump( buf, doc, node, 0, 0 );\n                        result += string( ( char * )xmlBufferContent( buf ) );\n",
                    "rendered": {
                      "text": "\n                    for ( int i = 0; i < nbResults; ++i )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlBufferPtr buf = xmlBufferCreate( );\n                        xmlNodeDump( buf, doc, node, 0, 0 );\n                        result += string( ( char * )xmlBufferContent( buf ) );\n",
                      "markdown": "`\n                    for ( int i = 0; i < nbResults; ++i )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlBufferPtr buf = xmlBufferCreate( );\n                        xmlNodeDump( buf, doc, node, 0, 0 );\n                        result += string( ( char * )xmlBufferContent( buf ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-helpers.cxx"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 11,
                  "endLine": 71,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n\n        return XmlNodeRef( node, doc );\n    }\n",
                    "rendered": {
                      "text": "        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n\n        return XmlNodeRef( node, doc );\n    }\n",
                      "markdown": "`        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n\n        return XmlNodeRef( node, doc );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-helpers.cxx"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 18,
                  "endLine": 68,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    XmlNodeRef getXmlNode( string str )\n    {\n        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n",
                    "rendered": {
                      "text": "\n    XmlNodeRef getXmlNode( string str )\n    {\n        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n",
                      "markdown": "`\n    XmlNodeRef getXmlNode( string str )\n    {\n        xmlNodePtr node = NULL;\n        const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( str.c_str( ), str.size( ), \"tester\", NULL, 0 ), xmlFreeDoc );\n        if ( bool( doc ) )\n            node = xmlDocGetRootElement( doc.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-helpers.cxx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "endLine": 43,
                  "endColumn": 23,
                  "snippet": {
                    "text": "{\n\n    XmlNodeRef::XmlNodeRef( xmlNodePtr node, boost::shared_ptr< xmlDoc > doc )\n        : m_node( node )\n        , m_doc( doc )\n    {\n    }\n",
                    "rendered": {
                      "text": "{\n\n    XmlNodeRef::XmlNodeRef( xmlNodePtr node, boost::shared_ptr< xmlDoc > doc )\n        : m_node( node )\n        , m_doc( doc )\n    {\n    }\n",
                      "markdown": "`{\n\n    XmlNodeRef::XmlNodeRef( xmlNodePtr node, boost::shared_ptr< xmlDoc > doc )\n        : m_node( node )\n        , m_doc( doc )\n    {\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 17,
                  "endLine": 86,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    CURLOPT_PROXYUSERPWD = CURLOPTTYPE_OBJECTPOINT + 6,\n    CURLOPT_PROXYAUTH = CURLOPTTYPE_LONG + 111,\n    CURLOPT_PROXYUSERNAME = CURLOPTTYPE_OBJECTPOINT + 175,\n    CURLOPT_PROXYPASSWORD = CURLOPTTYPE_OBJECTPOINT + 176,\n    CURLOPT_NOPROXY = CURLOPTTYPE_OBJECTPOINT + 177,\n    CURLOPT_SSL_VERIFYPEER = CURLOPTTYPE_LONG + 64,\n    CURLOPT_SSL_VERIFYHOST = CURLOPTTYPE_LONG + 81,\n",
                    "rendered": {
                      "text": "    CURLOPT_PROXYUSERPWD = CURLOPTTYPE_OBJECTPOINT + 6,\n    CURLOPT_PROXYAUTH = CURLOPTTYPE_LONG + 111,\n    CURLOPT_PROXYUSERNAME = CURLOPTTYPE_OBJECTPOINT + 175,\n    CURLOPT_PROXYPASSWORD = CURLOPTTYPE_OBJECTPOINT + 176,\n    CURLOPT_NOPROXY = CURLOPTTYPE_OBJECTPOINT + 177,\n    CURLOPT_SSL_VERIFYPEER = CURLOPTTYPE_LONG + 64,\n    CURLOPT_SSL_VERIFYHOST = CURLOPTTYPE_LONG + 81,\n",
                      "markdown": "`    CURLOPT_PROXYUSERPWD = CURLOPTTYPE_OBJECTPOINT + 6,\n    CURLOPT_PROXYAUTH = CURLOPTTYPE_LONG + 111,\n    CURLOPT_PROXYUSERNAME = CURLOPTTYPE_OBJECTPOINT + 175,\n    CURLOPT_PROXYPASSWORD = CURLOPTTYPE_OBJECTPOINT + 176,\n    CURLOPT_NOPROXY = CURLOPTTYPE_OBJECTPOINT + 177,\n    CURLOPT_SSL_VERIFYPEER = CURLOPTTYPE_LONG + 64,\n    CURLOPT_SSL_VERIFYHOST = CURLOPTTYPE_LONG + 81,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 12,
                  "endLine": 77,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    CURLOPT_URL =     CURLOPTTYPE_OBJECTPOINT + 2,\n    CURLOPT_HTTPAUTH = CURLOPTTYPE_LONG + 107,\n    CURLOPT_USERNAME = CURLOPTTYPE_OBJECTPOINT + 173,\n    CURLOPT_PASSWORD = CURLOPTTYPE_OBJECTPOINT + 174,\n    CURLOPT_USERPWD = CURLOPTTYPE_OBJECTPOINT + 5,\n    CURLOPT_ERRORBUFFER = CURLOPTTYPE_OBJECTPOINT + 10,\n    CURLOPT_FAILONERROR = CURLOPTTYPE_LONG + 45,\n",
                    "rendered": {
                      "text": "    CURLOPT_URL =     CURLOPTTYPE_OBJECTPOINT + 2,\n    CURLOPT_HTTPAUTH = CURLOPTTYPE_LONG + 107,\n    CURLOPT_USERNAME = CURLOPTTYPE_OBJECTPOINT + 173,\n    CURLOPT_PASSWORD = CURLOPTTYPE_OBJECTPOINT + 174,\n    CURLOPT_USERPWD = CURLOPTTYPE_OBJECTPOINT + 5,\n    CURLOPT_ERRORBUFFER = CURLOPTTYPE_OBJECTPOINT + 10,\n    CURLOPT_FAILONERROR = CURLOPTTYPE_LONG + 45,\n",
                      "markdown": "`    CURLOPT_URL =     CURLOPTTYPE_OBJECTPOINT + 2,\n    CURLOPT_HTTPAUTH = CURLOPTTYPE_LONG + 107,\n    CURLOPT_USERNAME = CURLOPTTYPE_OBJECTPOINT + 173,\n    CURLOPT_PASSWORD = CURLOPTTYPE_OBJECTPOINT + 174,\n    CURLOPT_USERPWD = CURLOPTTYPE_OBJECTPOINT + 5,\n    CURLOPT_ERRORBUFFER = CURLOPTTYPE_OBJECTPOINT + 10,\n    CURLOPT_FAILONERROR = CURLOPTTYPE_LONG + 45,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 27,
                  "endLine": 143,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  CURLINFO_LASTONE          = 42\n} CURLINFO;\n\nCURLcode curl_easy_getinfo( CURL *curl, long info, ... );\n\n#define LIBCURL_VERSION_MAJOR 7\n#define LIBCURL_VERSION_MINOR 26\n",
                    "rendered": {
                      "text": "  CURLINFO_LASTONE          = 42\n} CURLINFO;\n\nCURLcode curl_easy_getinfo( CURL *curl, long info, ... );\n\n#define LIBCURL_VERSION_MAJOR 7\n#define LIBCURL_VERSION_MINOR 26\n",
                      "markdown": "`  CURLINFO_LASTONE          = 42\n} CURLINFO;\n\nCURLcode curl_easy_getinfo( CURL *curl, long info, ... );\n\n#define LIBCURL_VERSION_MAJOR 7\n#define LIBCURL_VERSION_MINOR 26\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 21,
                  "endLine": 124,
                  "endColumn": 27,
                  "snippet": {
                    "text": "char *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\nstruct curl_certinfo\n{\n",
                    "rendered": {
                      "text": "char *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\nstruct curl_certinfo\n{\n",
                      "markdown": "`char *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\nstruct curl_certinfo\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 27,
                  "endLine": 123,
                  "endColumn": 33,
                  "snippet": {
                    "text": "char *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\nstruct curl_certinfo\n",
                    "rendered": {
                      "text": "char *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\nstruct curl_certinfo\n",
                      "markdown": "`char *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\nstruct curl_certinfo\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 25,
                  "endLine": 122,
                  "endColumn": 31,
                  "snippet": {
                    "text": "CURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\n",
                    "rendered": {
                      "text": "CURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\n",
                      "markdown": "`CURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\nvoid curl_easy_reset( CURL *curl );\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 23,
                  "endLine": 120,
                  "endColumn": 29,
                  "snippet": {
                    "text": "CURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\n",
                    "rendered": {
                      "text": "CURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\n",
                      "markdown": "`CURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\nCURLcode curl_easy_perform( CURL *curl );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 26,
                  "endLine": 119,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\n",
                    "rendered": {
                      "text": "\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\n",
                      "markdown": "`\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\nchar *curl_easy_unescape( CURL *handle, const char *string, int length, int *outlength );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 23,
                  "endLine": 118,
                  "endColumn": 29,
                  "snippet": {
                    "text": "CURLcode curl_global_init( long flags );\n\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\n",
                    "rendered": {
                      "text": "CURLcode curl_global_init( long flags );\n\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\n",
                      "markdown": "`CURLcode curl_global_init( long flags );\n\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\nchar *curl_unescape( const char *string, int length );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/mockup/curl/curl.h"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 117,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nvoid curl_free( void *p );\nCURLcode curl_global_init( long flags );\n\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\n",
                    "rendered": {
                      "text": "\nvoid curl_free( void *p );\nCURLcode curl_global_init( long flags );\n\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\n",
                      "markdown": "`\nvoid curl_free( void *p );\nCURLcode curl_global_init( long flags );\n\nCURL *curl_easy_init( void );\nvoid curl_easy_cleanup( CURL *curl );\nCURLcode curl_easy_setopt( CURL *curl, long option, ... );\nchar *curl_easy_escape( CURL *handle, const char *string, int length );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis-c/repository.h"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 73,
                  "endLine": 45,
                  "endColumn": 79,
                  "snippet": {
                    "text": "LIBCMIS_C_API libcmis_RepositoryPtr libcmis_vector_repository_get( libcmis_vector_Repository_Ptr vector, size_t i );\n\n\nLIBCMIS_C_API libcmis_RepositoryPtr libcmis_repository_create( xmlNodePtr node );\n\nLIBCMIS_C_API void libcmis_repository_free( libcmis_RepositoryPtr repository );\n\n",
                    "rendered": {
                      "text": "LIBCMIS_C_API libcmis_RepositoryPtr libcmis_vector_repository_get( libcmis_vector_Repository_Ptr vector, size_t i );\n\n\nLIBCMIS_C_API libcmis_RepositoryPtr libcmis_repository_create( xmlNodePtr node );\n\nLIBCMIS_C_API void libcmis_repository_free( libcmis_RepositoryPtr repository );\n\n",
                      "markdown": "`LIBCMIS_C_API libcmis_RepositoryPtr libcmis_vector_repository_get( libcmis_vector_Repository_Ptr vector, size_t i );\n\n\nLIBCMIS_C_API libcmis_RepositoryPtr libcmis_repository_create( xmlNodePtr node );\n\nLIBCMIS_C_API void libcmis_repository_free( libcmis_RepositoryPtr repository );\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-handler.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-handler.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-object-type.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-object-type.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-repository.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-repository.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-document.cxx"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 12,
                  "endLine": 87,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                                           string /*fileName*/, \n                                           bool /*overwrite*/ ) \n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n     // file uri + /$value\n",
                    "rendered": {
                      "text": "                                           string /*fileName*/, \n                                           bool /*overwrite*/ ) \n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n     // file uri + /$value\n",
                      "markdown": "`                                           string /*fileName*/, \n                                           bool /*overwrite*/ ) \n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n     // file uri + /$value\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.hxx"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 28,
                  "endLine": 48,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        std::map< std::string, std::string > m_others;\n\n    public:\n        AtomLink( xmlNodePtr node );\n\n        std::string getRel( ) const { return m_rel; }\n        std::string getType( ) const { return m_type; }\n",
                    "rendered": {
                      "text": "        std::map< std::string, std::string > m_others;\n\n    public:\n        AtomLink( xmlNodePtr node );\n\n        std::string getRel( ) const { return m_rel; }\n        std::string getType( ) const { return m_type; }\n",
                      "markdown": "`        std::map< std::string, std::string > m_others;\n\n    public:\n        AtomLink( xmlNodePtr node );\n\n        std::string getRel( ) const { return m_rel; }\n        std::string getType( ) const { return m_type; }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 11,
                  "endLine": 421,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    boost::posix_time::ptime now( boost::posix_time::second_clock::universal_time( ) );\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"atom:updated\" ), BAD_CAST( libcmis::writeDateTime( now ).c_str( ) ) );\n\n    if ( os.get( ) )\n    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmisra:content\" ) );\n        xmlTextWriterWriteElement( writer, BAD_CAST( \"cmisra:mediatype\" ), BAD_CAST( contentType.c_str() ) );\n",
                    "rendered": {
                      "text": "    boost::posix_time::ptime now( boost::posix_time::second_clock::universal_time( ) );\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"atom:updated\" ), BAD_CAST( libcmis::writeDateTime( now ).c_str( ) ) );\n\n    if ( os.get( ) )\n    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmisra:content\" ) );\n        xmlTextWriterWriteElement( writer, BAD_CAST( \"cmisra:mediatype\" ), BAD_CAST( contentType.c_str() ) );\n",
                      "markdown": "`    boost::posix_time::ptime now( boost::posix_time::second_clock::universal_time( ) );\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"atom:updated\" ), BAD_CAST( libcmis::writeDateTime( now ).c_str( ) ) );\n\n    if ( os.get( ) )\n    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmisra:content\" ) );\n        xmlTextWriterWriteElement( writer, BAD_CAST( \"cmisra:mediatype\" ), BAD_CAST( contentType.c_str() ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 64,
                  "endLine": 262,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n    const AtomLink* destChildrenLink = atomDestination->getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == destChildrenLink ) || ( getAllowableActions().get() &&\n            !getAllowableActions()->isAllowed( libcmis::ObjectAction::MoveObject ) ) )\n        throw libcmis::Exception( string( \"MoveObject not allowed on object \" ) + getId() );\n\n",
                    "rendered": {
                      "text": "\n    const AtomLink* destChildrenLink = atomDestination->getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == destChildrenLink ) || ( getAllowableActions().get() &&\n            !getAllowableActions()->isAllowed( libcmis::ObjectAction::MoveObject ) ) )\n        throw libcmis::Exception( string( \"MoveObject not allowed on object \" ) + getId() );\n\n",
                      "markdown": "`\n    const AtomLink* destChildrenLink = atomDestination->getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == destChildrenLink ) || ( getAllowableActions().get() &&\n            !getAllowableActions()->isAllowed( libcmis::ObjectAction::MoveObject ) ) )\n        throw libcmis::Exception( string( \"MoveObject not allowed on object \" ) + getId() );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 75,
                  "endLine": 255,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\nvoid AtomObject::move( boost::shared_ptr< libcmis::Folder > source, boost::shared_ptr< libcmis::Folder > destination )\n{\n    AtomFolder* atomDestination = dynamic_cast< AtomFolder* > ( destination.get() );\n\n    if ( NULL == atomDestination )\n        throw libcmis::Exception( string( \"Destination is not an AtomFolder\" ) );\n",
                    "rendered": {
                      "text": "\nvoid AtomObject::move( boost::shared_ptr< libcmis::Folder > source, boost::shared_ptr< libcmis::Folder > destination )\n{\n    AtomFolder* atomDestination = dynamic_cast< AtomFolder* > ( destination.get() );\n\n    if ( NULL == atomDestination )\n        throw libcmis::Exception( string( \"Destination is not an AtomFolder\" ) );\n",
                      "markdown": "`\nvoid AtomObject::move( boost::shared_ptr< libcmis::Folder > source, boost::shared_ptr< libcmis::Folder > destination )\n{\n    AtomFolder* atomDestination = dynamic_cast< AtomFolder* > ( destination.get() );\n\n    if ( NULL == atomDestination )\n        throw libcmis::Exception( string( \"Destination is not an AtomFolder\" ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 31,
                  "endLine": 229,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nvoid AtomObject::remove( bool allVersions )\n{\n    if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::DeleteObject ) )\n        throw libcmis::Exception( string( \"DeleteObject not allowed on object \" ) + getId() );\n\n    try\n",
                    "rendered": {
                      "text": "\nvoid AtomObject::remove( bool allVersions )\n{\n    if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::DeleteObject ) )\n        throw libcmis::Exception( string( \"DeleteObject not allowed on object \" ) + getId() );\n\n    try\n",
                      "markdown": "`\nvoid AtomObject::remove( bool allVersions )\n{\n    if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::DeleteObject ) )\n        throw libcmis::Exception( string( \"DeleteObject not allowed on object \" ) + getId() );\n\n    try\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 30,
                  "endLine": 103,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\nlibcmis::ObjectPtr AtomObject::updateProperties( const PropertyPtrMap& properties )\n{\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::UpdateProperties ) )\n        throw libcmis::Exception( string( \"UpdateProperties is not allowed on object \" ) + getId() );\n\n    // No need to send HTTP request if there is nothing to update\n",
                    "rendered": {
                      "text": "\nlibcmis::ObjectPtr AtomObject::updateProperties( const PropertyPtrMap& properties )\n{\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::UpdateProperties ) )\n        throw libcmis::Exception( string( \"UpdateProperties is not allowed on object \" ) + getId() );\n\n    // No need to send HTTP request if there is nothing to update\n",
                      "markdown": "`\nlibcmis::ObjectPtr AtomObject::updateProperties( const PropertyPtrMap& properties )\n{\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::UpdateProperties ) )\n        throw libcmis::Exception( string( \"UpdateProperties is not allowed on object \" ) + getId() );\n\n    // No need to send HTTP request if there is nothing to update\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 30,
                  "endLine": 428,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        xmlTextWriterStartElement(writer, BAD_CAST( \"cmisra:base64\" ) );\n\n        libcmis::EncodedData encoder( writer );\n        encoder.setEncoding( \"base64\" );\n        istream is( os->rdbuf( ) );\n        int bufLength = 1000;\n        char* buf = new char[ bufLength ];\n",
                    "rendered": {
                      "text": "        xmlTextWriterStartElement(writer, BAD_CAST( \"cmisra:base64\" ) );\n\n        libcmis::EncodedData encoder( writer );\n        encoder.setEncoding( \"base64\" );\n        istream is( os->rdbuf( ) );\n        int bufLength = 1000;\n        char* buf = new char[ bufLength ];\n",
                      "markdown": "`        xmlTextWriterStartElement(writer, BAD_CAST( \"cmisra:base64\" ) );\n\n        libcmis::EncodedData encoder( writer );\n        encoder.setEncoding( \"base64\" );\n        istream is( os->rdbuf( ) );\n        int bufLength = 1000;\n        char* buf = new char[ bufLength ];\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 60,
                  "endLine": 425,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmisra:content\" ) );\n        xmlTextWriterWriteElement( writer, BAD_CAST( \"cmisra:mediatype\" ), BAD_CAST( contentType.c_str() ) );\n        xmlTextWriterStartElement(writer, BAD_CAST( \"cmisra:base64\" ) );\n\n        libcmis::EncodedData encoder( writer );\n        encoder.setEncoding( \"base64\" );\n",
                    "rendered": {
                      "text": "    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmisra:content\" ) );\n        xmlTextWriterWriteElement( writer, BAD_CAST( \"cmisra:mediatype\" ), BAD_CAST( contentType.c_str() ) );\n        xmlTextWriterStartElement(writer, BAD_CAST( \"cmisra:base64\" ) );\n\n        libcmis::EncodedData encoder( writer );\n        encoder.setEncoding( \"base64\" );\n",
                      "markdown": "`    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmisra:content\" ) );\n        xmlTextWriterWriteElement( writer, BAD_CAST( \"cmisra:mediatype\" ), BAD_CAST( contentType.c_str() ) );\n        xmlTextWriterStartElement(writer, BAD_CAST( \"cmisra:base64\" ) );\n\n        libcmis::EncodedData encoder( writer );\n        encoder.setEncoding( \"base64\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 58,
                  "endLine": 107,
                  "snippet": {
                    "text": "    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::UpdateProperties ) )\n        throw libcmis::Exception( string( \"UpdateProperties is not allowed on object \" ) + getId() );\n\n    // No need to send HTTP request if there is nothing to update\n    if ( properties.empty( ) )\n    {\n        libcmis::ObjectPtr object;\n        if ( getBaseType( ) == \"cmis:document\" )\n",
                    "rendered": {
                      "text": "    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::UpdateProperties ) )\n        throw libcmis::Exception( string( \"UpdateProperties is not allowed on object \" ) + getId() );\n\n    // No need to send HTTP request if there is nothing to update\n    if ( properties.empty( ) )\n    {\n        libcmis::ObjectPtr object;\n        if ( getBaseType( ) == \"cmis:document\" )\n",
                      "markdown": "`    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::UpdateProperties ) )\n        throw libcmis::Exception( string( \"UpdateProperties is not allowed on object \" ) + getId() );\n\n    // No need to send HTTP request if there is nothing to update\n    if ( properties.empty( ) )\n    {\n        libcmis::ObjectPtr object;\n        if ( getBaseType( ) == \"cmis:document\" )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 30,
                  "endLine": 463,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    return link;\n}\n\nAtomLink::AtomLink( xmlNodePtr node ):\n    m_rel( ), m_type( ), m_id( ), m_href( ), m_others( )\n{\n    xmlAttrPtr prop = node->properties;\n",
                    "rendered": {
                      "text": "    return link;\n}\n\nAtomLink::AtomLink( xmlNodePtr node ):\n    m_rel( ), m_type( ), m_id( ), m_href( ), m_others( )\n{\n    xmlAttrPtr prop = node->properties;\n",
                      "markdown": "`    return link;\n}\n\nAtomLink::AtomLink( xmlNodePtr node ):\n    m_rel( ), m_type( ), m_id( ), m_href( ), m_others( )\n{\n    xmlAttrPtr prop = node->properties;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 31,
                  "endLine": 383,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        if ( xpathObj && xpathObj->nodesetval && xpathObj->nodesetval->nodeNr > 0 )\n        {\n            xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n            initializeFromNode( node );\n        }\n        xmlXPathFreeObject( xpathObj );\n    }\n",
                    "rendered": {
                      "text": "        if ( xpathObj && xpathObj->nodesetval && xpathObj->nodesetval->nodeNr > 0 )\n        {\n            xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n            initializeFromNode( node );\n        }\n        xmlXPathFreeObject( xpathObj );\n    }\n",
                      "markdown": "`        if ( xpathObj && xpathObj->nodesetval && xpathObj->nodesetval->nodeNr > 0 )\n        {\n            xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n            initializeFromNode( node );\n        }\n        xmlXPathFreeObject( xpathObj );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 22,
                  "endLine": 382,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        xpathObj = xmlXPathEvalExpression( BAD_CAST( \"//cmisra:object\" ), xpathCtx );\n        if ( xpathObj && xpathObj->nodesetval && xpathObj->nodesetval->nodeNr > 0 )\n        {\n            xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n            initializeFromNode( node );\n        }\n        xmlXPathFreeObject( xpathObj );\n",
                    "rendered": {
                      "text": "        xpathObj = xmlXPathEvalExpression( BAD_CAST( \"//cmisra:object\" ), xpathCtx );\n        if ( xpathObj && xpathObj->nodesetval && xpathObj->nodesetval->nodeNr > 0 )\n        {\n            xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n            initializeFromNode( node );\n        }\n        xmlXPathFreeObject( xpathObj );\n",
                      "markdown": "`        xpathObj = xmlXPathEvalExpression( BAD_CAST( \"//cmisra:object\" ), xpathCtx );\n        if ( xpathObj && xpathObj->nodesetval && xpathObj->nodesetval->nodeNr > 0 )\n        {\n            xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n            initializeFromNode( node );\n        }\n        xmlXPathFreeObject( xpathObj );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 42,
                  "endLine": 368,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                        m_renditions.push_back( rendition );\n                    }\n                    else\n                        m_links.push_back( node );\n                }\n                catch ( const libcmis::Exception& )\n                {\n",
                    "rendered": {
                      "text": "                        m_renditions.push_back( rendition );\n                    }\n                    else\n                        m_links.push_back( node );\n                }\n                catch ( const libcmis::Exception& )\n                {\n",
                      "markdown": "`                        m_renditions.push_back( rendition );\n                    }\n                    else\n                        m_links.push_back( node );\n                }\n                catch ( const libcmis::Exception& )\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 34,
                  "endLine": 342,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                try\n                {\n                    AtomLink link( node );\n                    // Add to renditions if alternate link\n                    if ( link.getRel( ) == \"alternate\" )\n                    {\n",
                    "rendered": {
                      "text": "                xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                try\n                {\n                    AtomLink link( node );\n                    // Add to renditions if alternate link\n                    if ( link.getRel( ) == \"alternate\" )\n                    {\n",
                      "markdown": "`                xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                try\n                {\n                    AtomLink link( node );\n                    // Add to renditions if alternate link\n                    if ( link.getRel( ) == \"alternate\" )\n                    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object.cxx"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 26,
                  "endLine": 339,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            int size = xpathObj->nodesetval->nodeNr;\n            for ( int i = 0; i < size; i++ )\n            {\n                xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                try\n                {\n                    AtomLink link( node );\n",
                    "rendered": {
                      "text": "            int size = xpathObj->nodesetval->nodeNr;\n            for ( int i = 0; i < size; i++ )\n            {\n                xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                try\n                {\n                    AtomLink link( node );\n",
                      "markdown": "`            int size = xpathObj->nodesetval->nodeNr;\n            for ( int i = 0; i < size; i++ )\n            {\n                xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                try\n                {\n                    AtomLink link( node );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/json-utils.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/json-utils.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object.cxx"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 41,
                  "endLine": 417,
                  "endColumn": 46,
                  "snippet": {
                    "text": "libcmis_AllowableActionsPtr libcmis_object_getAllowableActions( libcmis_ObjectPtr object )\n{\n    libcmis_AllowableActionsPtr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        result = new ( nothrow ) libcmis_allowable_actions( );\n        if ( result )\n",
                    "rendered": {
                      "text": "libcmis_AllowableActionsPtr libcmis_object_getAllowableActions( libcmis_ObjectPtr object )\n{\n    libcmis_AllowableActionsPtr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        result = new ( nothrow ) libcmis_allowable_actions( );\n        if ( result )\n",
                      "markdown": "`libcmis_AllowableActionsPtr libcmis_object_getAllowableActions( libcmis_ObjectPtr object )\n{\n    libcmis_AllowableActionsPtr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        result = new ( nothrow ) libcmis_allowable_actions( );\n        if ( result )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object.cxx"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 41,
                  "endLine": 404,
                  "endColumn": 46,
                  "snippet": {
                    "text": "libcmis_ObjectTypePtr libcmis_object_getTypeDescription( libcmis_ObjectPtr object )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        result = new ( nothrow ) libcmis_object_type( );\n        if ( result )\n",
                    "rendered": {
                      "text": "libcmis_ObjectTypePtr libcmis_object_getTypeDescription( libcmis_ObjectPtr object )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        result = new ( nothrow ) libcmis_object_type( );\n        if ( result )\n",
                      "markdown": "`libcmis_ObjectTypePtr libcmis_object_getTypeDescription( libcmis_ObjectPtr object )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        result = new ( nothrow ) libcmis_object_type( );\n        if ( result )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object.cxx"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 41,
                  "endLine": 349,
                  "endColumn": 46,
                  "snippet": {
                    "text": "libcmis_PropertyPtr libcmis_object_getProperty( libcmis_ObjectPtr object, const char* name )\n{\n    libcmis_PropertyPtr property = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        PropertyPtrMap& handles = object->handle->getProperties( );\n        PropertyPtrMap::iterator it = handles.find( lcl_stdString( name ) );\n",
                    "rendered": {
                      "text": "libcmis_PropertyPtr libcmis_object_getProperty( libcmis_ObjectPtr object, const char* name )\n{\n    libcmis_PropertyPtr property = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        PropertyPtrMap& handles = object->handle->getProperties( );\n        PropertyPtrMap::iterator it = handles.find( lcl_stdString( name ) );\n",
                      "markdown": "`libcmis_PropertyPtr libcmis_object_getProperty( libcmis_ObjectPtr object, const char* name )\n{\n    libcmis_PropertyPtr property = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        PropertyPtrMap& handles = object->handle->getProperties( );\n        PropertyPtrMap::iterator it = handles.find( lcl_stdString( name ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object.cxx"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 41,
                  "endLine": 328,
                  "endColumn": 46,
                  "snippet": {
                    "text": "libcmis_vector_property_Ptr libcmis_object_getProperties( libcmis_ObjectPtr object )\n{\n    libcmis_vector_property_Ptr properties = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        PropertyPtrMap& handles = object->handle->getProperties( );\n        properties = new ( nothrow ) libcmis_vector_property( );\n",
                    "rendered": {
                      "text": "libcmis_vector_property_Ptr libcmis_object_getProperties( libcmis_ObjectPtr object )\n{\n    libcmis_vector_property_Ptr properties = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        PropertyPtrMap& handles = object->handle->getProperties( );\n        properties = new ( nothrow ) libcmis_vector_property( );\n",
                      "markdown": "`libcmis_vector_property_Ptr libcmis_object_getProperties( libcmis_ObjectPtr object )\n{\n    libcmis_vector_property_Ptr properties = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        PropertyPtrMap& handles = object->handle->getProperties( );\n        properties = new ( nothrow ) libcmis_vector_property( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object.cxx"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 41,
                  "endLine": 210,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                                                           libcmis_ErrorPtr error )\n{\n    libcmis_vector_rendition_Ptr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "                                                           libcmis_ErrorPtr error )\n{\n    libcmis_vector_rendition_Ptr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`                                                           libcmis_ErrorPtr error )\n{\n    libcmis_vector_rendition_Ptr result = NULL;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object.cxx"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 10,
                  "endLine": 182,
                  "endColumn": 16,
                  "snippet": {
                    "text": "{\n    if ( object != NULL && object->handle != NULL )\n    {\n        tm time = boost::posix_time::to_tm( object->handle->getLastModificationDate( ) );\n        return mktime( &time );\n    }\n    else\n",
                    "rendered": {
                      "text": "{\n    if ( object != NULL && object->handle != NULL )\n    {\n        tm time = boost::posix_time::to_tm( object->handle->getLastModificationDate( ) );\n        return mktime( &time );\n    }\n    else\n",
                      "markdown": "`{\n    if ( object != NULL && object->handle != NULL )\n    {\n        tm time = boost::posix_time::to_tm( object->handle->getLastModificationDate( ) );\n        return mktime( &time );\n    }\n    else\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object.cxx"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 10,
                  "endLine": 161,
                  "endColumn": 16,
                  "snippet": {
                    "text": "{\n    if ( object != NULL && object->handle != NULL )\n    {\n        tm time = boost::posix_time::to_tm( object->handle->getCreationDate( ) );\n        return mktime( &time );\n    }\n    else\n",
                    "rendered": {
                      "text": "{\n    if ( object != NULL && object->handle != NULL )\n    {\n        tm time = boost::posix_time::to_tm( object->handle->getCreationDate( ) );\n        return mktime( &time );\n    }\n    else\n",
                      "markdown": "`{\n    if ( object != NULL && object->handle != NULL )\n    {\n        tm time = boost::posix_time::to_tm( object->handle->getCreationDate( ) );\n        return mktime( &time );\n    }\n    else\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 37,
                  "endLine": 382,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_object_type_toString( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->toString( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_object_type_toString( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->toString( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_object_type_toString( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->toString( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 37,
                  "endLine": 331,
                  "endColumn": 42,
                  "snippet": {
                    "text": "libcmis_object_type_ContentStreamAllowed libcmis_object_type_getContentStreamAllowed( libcmis_ObjectTypePtr type )\n{\n    libcmis_object_type_ContentStreamAllowed result = libcmis_NotAllowed;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        libcmis::ObjectType::ContentStreamAllowed value = type->handle->getContentStreamAllowed( );\n        result = libcmis_object_type_ContentStreamAllowed( value );\n",
                    "rendered": {
                      "text": "libcmis_object_type_ContentStreamAllowed libcmis_object_type_getContentStreamAllowed( libcmis_ObjectTypePtr type )\n{\n    libcmis_object_type_ContentStreamAllowed result = libcmis_NotAllowed;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        libcmis::ObjectType::ContentStreamAllowed value = type->handle->getContentStreamAllowed( );\n        result = libcmis_object_type_ContentStreamAllowed( value );\n",
                      "markdown": "`libcmis_object_type_ContentStreamAllowed libcmis_object_type_getContentStreamAllowed( libcmis_ObjectTypePtr type )\n{\n    libcmis_object_type_ContentStreamAllowed result = libcmis_NotAllowed;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        libcmis::ObjectType::ContentStreamAllowed value = type->handle->getContentStreamAllowed( );\n        result = libcmis_object_type_ContentStreamAllowed( value );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 37,
                  "endLine": 322,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_object_type_isVersionable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isVersionable( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_object_type_isVersionable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isVersionable( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_object_type_isVersionable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isVersionable( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 37,
                  "endLine": 313,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_object_type_isControllableACL( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isControllableACL( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_object_type_isControllableACL( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isControllableACL( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_object_type_isControllableACL( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isControllableACL( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 37,
                  "endLine": 304,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_object_type_isControllablePolicy( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isControllablePolicy( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_object_type_isControllablePolicy( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isControllablePolicy( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_object_type_isControllablePolicy( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isControllablePolicy( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 37,
                  "endLine": 295,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_object_type_isIncludedInSupertypeQuery( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isIncludedInSupertypeQuery( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_object_type_isIncludedInSupertypeQuery( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isIncludedInSupertypeQuery( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_object_type_isIncludedInSupertypeQuery( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isIncludedInSupertypeQuery( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 37,
                  "endLine": 286,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_object_type_isFulltextIndexed( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isFulltextIndexed( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_object_type_isFulltextIndexed( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isFulltextIndexed( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_object_type_isFulltextIndexed( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isFulltextIndexed( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 37,
                  "endLine": 277,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_object_type_isQueryable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isQueryable( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_object_type_isQueryable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isQueryable( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_object_type_isQueryable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isQueryable( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 37,
                  "endLine": 268,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_object_type_isFileable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isFileable( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_object_type_isFileable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isFileable( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_object_type_isFileable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isFileable( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 37,
                  "endLine": 259,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_object_type_isCreatable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isCreatable( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_object_type_isCreatable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isCreatable( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_object_type_isCreatable( libcmis_ObjectTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isCreatable( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 37,
                  "endLine": 226,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        libcmis_ObjectTypePtr type, libcmis_ErrorPtr error )\n{\n    libcmis_vector_object_type_Ptr children = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "        libcmis_ObjectTypePtr type, libcmis_ErrorPtr error )\n{\n    libcmis_vector_object_type_Ptr children = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`        libcmis_ObjectTypePtr type, libcmis_ErrorPtr error )\n{\n    libcmis_vector_object_type_Ptr children = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 37,
                  "endLine": 213,
                  "endColumn": 42,
                  "snippet": {
                    "text": "char* libcmis_object_type_getBaseTypeId( libcmis_ObjectTypePtr type )\n{\n    char* result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        result = strdup( type->handle->getBaseTypeId( ).c_str() );\n    }\n",
                    "rendered": {
                      "text": "char* libcmis_object_type_getBaseTypeId( libcmis_ObjectTypePtr type )\n{\n    char* result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        result = strdup( type->handle->getBaseTypeId( ).c_str() );\n    }\n",
                      "markdown": "`char* libcmis_object_type_getBaseTypeId( libcmis_ObjectTypePtr type )\n{\n    char* result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        result = strdup( type->handle->getBaseTypeId( ).c_str() );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 37,
                  "endLine": 201,
                  "endColumn": 42,
                  "snippet": {
                    "text": "char* libcmis_object_type_getParentTypeId( libcmis_ObjectTypePtr type )\n{\n    char* result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        result = strdup( type->handle->getParentTypeId( ).c_str() );\n    }\n",
                    "rendered": {
                      "text": "char* libcmis_object_type_getParentTypeId( libcmis_ObjectTypePtr type )\n{\n    char* result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        result = strdup( type->handle->getParentTypeId( ).c_str() );\n    }\n",
                      "markdown": "`char* libcmis_object_type_getParentTypeId( libcmis_ObjectTypePtr type )\n{\n    char* result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        result = strdup( type->handle->getParentTypeId( ).c_str() );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 37,
                  "endLine": 168,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`        libcmis_ErrorPtr error )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 37,
                  "endLine": 130,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`        libcmis_ErrorPtr error )\n{\n    libcmis_ObjectTypePtr result = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 37,
                  "endLine": 118,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_object_type_getDescription( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDescription( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_object_type_getDescription( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDescription( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_object_type_getDescription( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDescription( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 37,
                  "endLine": 109,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_object_type_getDisplayName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDisplayName( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_object_type_getDisplayName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDisplayName( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_object_type_getDisplayName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDisplayName( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 37,
                  "endLine": 100,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_object_type_getQueryName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getQueryName( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_object_type_getQueryName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getQueryName( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_object_type_getQueryName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getQueryName( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 37,
                  "endLine": 91,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_object_type_getLocalNamespace( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalNamespace( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_object_type_getLocalNamespace( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalNamespace( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_object_type_getLocalNamespace( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalNamespace( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 37,
                  "endLine": 82,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_object_type_getLocalName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalName( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_object_type_getLocalName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalName( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_object_type_getLocalName( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalName( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/object-type.cxx"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 37,
                  "endLine": 73,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_object_type_getId( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getId( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_object_type_getId( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getId( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_object_type_getId( libcmis_ObjectTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getId( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.ycm_extra_conf.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 15,
                  "endLine": 15,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# In jurisdictions that recognize copyright laws, the author or authors\n# of this software dedicate any and all copyright interest in the\n# software to the public domain. We make this dedication for the benefit\n# of the public at large and to the detriment of our heirs and\n# successors. We intend this dedication to be an overt act of\n# relinquishment in perpetuity of all present and future rights to this\n# software under copyright law.\n",
                    "rendered": {
                      "text": "# In jurisdictions that recognize copyright laws, the author or authors\n# of this software dedicate any and all copyright interest in the\n# software to the public domain. We make this dedication for the benefit\n# of the public at large and to the detriment of our heirs and\n# successors. We intend this dedication to be an overt act of\n# relinquishment in perpetuity of all present and future rights to this\n# software under copyright law.\n",
                      "markdown": "`# In jurisdictions that recognize copyright laws, the author or authors\n# of this software dedicate any and all copyright interest in the\n# software to the public domain. We make this dedication for the benefit\n# of the public at large and to the detriment of our heirs and\n# successors. We intend this dedication to be an overt act of\n# relinquishment in perpetuity of all present and future rights to this\n# software under copyright law.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/data/atom/test-document-relationships.xml"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 46,
                  "endLine": 157,
                  "endColumn": 52,
                  "snippet": {
                    "text": "queryName=\"cmis:changeToken\"/>\n        <cmis:propertyId displayName=\"Base Type Id\" localName=\"baseTypeId\" propertyDefinitionId=\"cmis:baseTypeId\" queryName=\"cmis:baseTypeId\">\n          <cmis:value>cmis:relationship</cmis:value>\n        </cmis:propertyId>\n        <cmis:propertyId displayName=\"Alfresco Node Ref\" localName=\"nodeRef\" propertyDefinitionId=\"alfcmis:nodeRef\" queryName=\"alfcmis:nodeRef\">\n          <cmis:value>75|workspace://SpacesStore/3885d9a2-0540-41ab-810a-38ccb1b160d6|workspace://SpacesStore/5d8908d9-1b4a-4265-b1de-5d7244fcea70|{http://www.alfresco.org/model/content/1.0}original</cmis:va",
                    "rendered": {
                      "text": "queryName=\"cmis:changeToken\"/>\n        <cmis:propertyId displayName=\"Base Type Id\" localName=\"baseTypeId\" propertyDefinitionId=\"cmis:baseTypeId\" queryName=\"cmis:baseTypeId\">\n          <cmis:value>cmis:relationship</cmis:value>\n        </cmis:propertyId>\n        <cmis:propertyId displayName=\"Alfresco Node Ref\" localName=\"nodeRef\" propertyDefinitionId=\"alfcmis:nodeRef\" queryName=\"alfcmis:nodeRef\">\n          <cmis:value>75|workspace://SpacesStore/3885d9a2-0540-41ab-810a-38ccb1b160d6|workspace://SpacesStore/5d8908d9-1b4a-4265-b1de-5d7244fcea70|{http://www.alfresco.org/model/content/1.0}original</cmis:va",
                      "markdown": "`queryName=\"cmis:changeToken\"/>\n        <cmis:propertyId displayName=\"Base Type Id\" localName=\"baseTypeId\" propertyDefinitionId=\"cmis:baseTypeId\" queryName=\"cmis:baseTypeId\">\n          <cmis:value>cmis:relationship</cmis:value>\n        </cmis:propertyId>\n        <cmis:propertyId displayName=\"Alfresco Node Ref\" localName=\"nodeRef\" propertyDefinitionId=\"alfcmis:nodeRef\" queryName=\"alfcmis:nodeRef\">\n          <cmis:value>75|workspace://SpacesStore/3885d9a2-0540-41ab-810a-38ccb1b160d6|workspace://SpacesStore/5d8908d9-1b4a-4265-b1de-5d7244fcea70|{http://www.alfresco.org/model/content/1.0}original</cmis:va`"
                    }
                  },
                  "sourceLanguage": "XML"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 79,
                  "endLine": 493,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"OneDrive Folder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !folder->getCreatedBy( ).empty( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"CreationDate is missing\", !folder->getCreationDate( ).is_not_a_date_time() );\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"OneDrive Folder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !folder->getCreatedBy( ).empty( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"CreationDate is missing\", !folder->getCreationDate( ).is_not_a_date_time() );\n",
                      "markdown": "`    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"OneDrive Folder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !folder->getCreatedBy( ).empty( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"CreationDate is missing\", !folder->getCreationDate( ).is_not_a_date_time() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 44,
                  "endLine": 301,
                  "endColumn": 49,
                  "snippet": {
                    "text": "     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string(\"cmis:folder\"),\n                                   actual->getBaseTypeId() );\n\n     CPPUNIT_ASSERT( actual->getParentType().get() == NULL );\n     CPPUNIT_ASSERT_EQUAL( string( \"cmis:folder\" ),\n                           actual->getBaseType()->getId() );\n\n",
                    "rendered": {
                      "text": "     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string(\"cmis:folder\"),\n                                   actual->getBaseTypeId() );\n\n     CPPUNIT_ASSERT( actual->getParentType().get() == NULL );\n     CPPUNIT_ASSERT_EQUAL( string( \"cmis:folder\" ),\n                           actual->getBaseType()->getId() );\n\n",
                      "markdown": "`     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string(\"cmis:folder\"),\n                                   actual->getBaseTypeId() );\n\n     CPPUNIT_ASSERT( actual->getParentType().get() == NULL );\n     CPPUNIT_ASSERT_EQUAL( string( \"cmis:folder\" ),\n                           actual->getBaseType()->getId() );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 44,
                  "endLine": 258,
                  "endColumn": 49,
                  "snippet": {
                    "text": "     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string(\"cmis:document\"),\n                                   actual->getBaseTypeId() );\n\n     CPPUNIT_ASSERT( actual->getParentType().get() == NULL );\n     CPPUNIT_ASSERT_EQUAL( string( \"cmis:document\" ),\n                           actual->getBaseType()->getId() );\n\n",
                    "rendered": {
                      "text": "     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string(\"cmis:document\"),\n                                   actual->getBaseTypeId() );\n\n     CPPUNIT_ASSERT( actual->getParentType().get() == NULL );\n     CPPUNIT_ASSERT_EQUAL( string( \"cmis:document\" ),\n                           actual->getBaseType()->getId() );\n\n",
                      "markdown": "`     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string(\"cmis:document\"),\n                                   actual->getBaseTypeId() );\n\n     CPPUNIT_ASSERT( actual->getParentType().get() == NULL );\n     CPPUNIT_ASSERT_EQUAL( string( \"cmis:document\" ),\n                           actual->getBaseType()->getId() );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 59,
                  "endLine": 749,
                  "endColumn": 67,
                  "snippet": {
                    "text": "void OneDriveTest::getObjectByPathTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"rightFile\" );\n    const string wrongDocumentId( \"wrongFile\" );\n    const string folderAId( \"folderA\" ); // root\n",
                    "rendered": {
                      "text": "void OneDriveTest::getObjectByPathTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"rightFile\" );\n    const string wrongDocumentId( \"wrongFile\" );\n    const string folderAId( \"folderA\" ); // root\n",
                      "markdown": "`void OneDriveTest::getObjectByPathTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"rightFile\" );\n    const string wrongDocumentId( \"wrongFile\" );\n    const string folderAId( \"folderA\" ); // root\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 706,
                  "startColumn": 59,
                  "endLine": 706,
                  "endColumn": 67,
                  "snippet": {
                    "text": "void OneDriveTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string folderId( \"aParentId\" );\n    const string filename( \"aFileName\" );\n",
                    "rendered": {
                      "text": "void OneDriveTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string folderId( \"aParentId\" );\n    const string filename( \"aFileName\" );\n",
                      "markdown": "`void OneDriveTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string documentId( \"aFileId\" );\n    const string folderId( \"aParentId\" );\n    const string filename( \"aFileName\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 59,
                  "endLine": 663,
                  "endColumn": 67,
                  "snippet": {
                    "text": "void OneDriveTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n\n",
                    "rendered": {
                      "text": "void OneDriveTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n\n",
                      "markdown": "`void OneDriveTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string documentId( \"aFileId\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 59,
                  "endLine": 631,
                  "endColumn": 67,
                  "snippet": {
                    "text": "void OneDriveTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/\" + documentId;\n",
                    "rendered": {
                      "text": "void OneDriveTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/\" + documentId;\n",
                      "markdown": "`void OneDriveTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    string url = BASE_URL + \"/\" + documentId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 59,
                  "endLine": 604,
                  "endColumn": 67,
                  "snippet": {
                    "text": "void OneDriveTest::getDocumentParentTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    static const string parentId( \"aParentId\" );\n",
                    "rendered": {
                      "text": "void OneDriveTest::getDocumentParentTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    static const string parentId( \"aParentId\" );\n",
                      "markdown": "`void OneDriveTest::getDocumentParentTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    static const string documentId( \"aFileId\" );\n    static const string parentId( \"aParentId\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 59,
                  "endLine": 575,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n",
                      "markdown": "`    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 59,
                  "endLine": 541,
                  "endColumn": 67,
                  "snippet": {
                    "text": "void OneDriveTest::moveTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string sourceId( \"aFolderId\" );\n    const string desId( \"aParentId\" );\n",
                    "rendered": {
                      "text": "void OneDriveTest::moveTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string sourceId( \"aFolderId\" );\n    const string desId( \"aParentId\" );\n",
                      "markdown": "`void OneDriveTest::moveTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string sourceId( \"aFolderId\" );\n    const string desId( \"aParentId\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 59,
                  "endLine": 504,
                  "endColumn": 67,
                  "snippet": {
                    "text": "{\n    curl_mockup_reset( );\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId (\"aFolderId\");\n    string url = BASE_URL + \"/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n",
                    "rendered": {
                      "text": "{\n    curl_mockup_reset( );\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId (\"aFolderId\");\n    string url = BASE_URL + \"/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n",
                      "markdown": "`{\n    curl_mockup_reset( );\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId (\"aFolderId\");\n    string url = BASE_URL + \"/\" + folderId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 59,
                  "endLine": 473,
                  "endColumn": 67,
                  "snippet": {
                    "text": "{\n    curl_mockup_reset( );\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId( \"aFolderId\" );\n    static const string parentId( \"aParentId\" );\n    string url = BASE_URL + \"/\" + folderId;\n",
                    "rendered": {
                      "text": "{\n    curl_mockup_reset( );\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId( \"aFolderId\" );\n    static const string parentId( \"aParentId\" );\n    string url = BASE_URL + \"/\" + folderId;\n",
                      "markdown": "`{\n    curl_mockup_reset( );\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    static const string folderId( \"aFolderId\" );\n    static const string parentId( \"aParentId\" );\n    string url = BASE_URL + \"/\" + folderId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 59,
                  "endLine": 451,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFolderId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/folder.json\", 200, true);\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFolderId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/folder.json\", 200, true);\n",
                      "markdown": "`    curl_mockup_reset( );\n    static const string objectId (\"aFolderId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/folder.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 59,
                  "endLine": 429,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n",
                      "markdown": "`    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 59,
                  "endLine": 390,
                  "endColumn": 67,
                  "snippet": {
                    "text": "void OneDriveTest::updatePropertiesTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string newObjectId( \"aNewFileId\" );\n\n",
                    "rendered": {
                      "text": "void OneDriveTest::updatePropertiesTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string newObjectId( \"aNewFileId\" );\n\n",
                      "markdown": "`void OneDriveTest::updatePropertiesTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    const string objectId( \"aFileId\" );\n    const string newObjectId( \"aNewFileId\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 59,
                  "endLine": 370,
                  "endColumn": 67,
                  "snippet": {
                    "text": "void OneDriveTest::deleteTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string objectId( \"aFileId\" );\n\n",
                    "rendered": {
                      "text": "void OneDriveTest::deleteTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string objectId( \"aFileId\" );\n\n",
                      "markdown": "`void OneDriveTest::deleteTest( )\n{\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    const string objectId( \"aFileId\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 59,
                  "endLine": 343,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n",
                      "markdown": "`    curl_mockup_reset( );\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse( url.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 59,
                  "endLine": 327,
                  "endColumn": 67,
                  "snippet": {
                    "text": "{\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse ( url.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse ( url.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId (\"aFileId\");\n\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string url = BASE_URL + \"/\" + objectId;\n    curl_mockup_addResponse ( url.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/onedrive/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 60,
                  "endLine": 287,
                  "endColumn": 68,
                  "snippet": {
                    "text": "{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n     libcmis::ObjectTypePtr actual = session->getType(\"cmis:folder\");\n\n",
                    "rendered": {
                      "text": "{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n     libcmis::ObjectTypePtr actual = session->getType(\"cmis:folder\");\n\n",
                      "markdown": "`{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n     libcmis::ObjectTypePtr actual = session->getType(\"cmis:folder\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 60,
                  "endLine": 244,
                  "endColumn": 68,
                  "snippet": {
                    "text": "{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n     libcmis::ObjectTypePtr actual = session->getType(\"cmis:document\");\n\n",
                    "rendered": {
                      "text": "{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n     libcmis::ObjectTypePtr actual = session->getType(\"cmis:document\");\n\n",
                      "markdown": "`{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n     libcmis::ObjectTypePtr actual = session->getType(\"cmis:document\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 60,
                  "endLine": 230,
                  "endColumn": 68,
                  "snippet": {
                    "text": "{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n",
                    "rendered": {
                      "text": "{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n",
                      "markdown": "`{\n     curl_mockup_reset( );\n\n     OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 59,
                  "endLine": 197,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n",
                    "rendered": {
                      "text": "    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n",
                      "markdown": "`    // We need to use the refresh key to get a new one.\n\n    curl_mockup_reset( );\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    curl_mockup_reset( );\n    static const string objectId(\"aFileId\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 59,
                  "endLine": 164,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\nvoid OneDriveTest::sessionAuthenticationTest( )\n{\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string empty;\n\n    // Check token request\n",
                    "rendered": {
                      "text": "\nvoid OneDriveTest::sessionAuthenticationTest( )\n{\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string empty;\n\n    // Check token request\n",
                      "markdown": "`\nvoid OneDriveTest::sessionAuthenticationTest( )\n{\n    OneDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string empty;\n\n    // Check token request\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 72,
                  "endLine": 159,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse ( TOKEN_URL.c_str( ), empty.c_str( ), \"POST\",\n                              DATA_DIR \"/onedrive/token-response.json\", 200, true );\n\n    return OneDriveSessionPtr( new OneDriveSession( BASE_URL, username, password, oauth2, false ) );\n}\n\nvoid OneDriveTest::sessionAuthenticationTest( )\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse ( TOKEN_URL.c_str( ), empty.c_str( ), \"POST\",\n                              DATA_DIR \"/onedrive/token-response.json\", 200, true );\n\n    return OneDriveSessionPtr( new OneDriveSession( BASE_URL, username, password, oauth2, false ) );\n}\n\nvoid OneDriveTest::sessionAuthenticationTest( )\n",
                      "markdown": "`    curl_mockup_addResponse ( TOKEN_URL.c_str( ), empty.c_str( ), \"POST\",\n                              DATA_DIR \"/onedrive/token-response.json\", 200, true );\n\n    return OneDriveSessionPtr( new OneDriveSession( BASE_URL, username, password, oauth2, false ) );\n}\n\nvoid OneDriveTest::sessionAuthenticationTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 21,
                  "endLine": 146,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( LOGIN_URL2.c_str( ), empty.c_str( ), \"POST\",\n                             DATA_DIR \"/gdrive/login2.html\", 200, true);\n\n    //authentication password\n    curl_mockup_addResponse( LOGIN_URL.c_str( ), empty.c_str( ), \"POST\",\n                             DATA_DIR \"/gdrive/approve.html\", 200, true);\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( LOGIN_URL2.c_str( ), empty.c_str( ), \"POST\",\n                             DATA_DIR \"/gdrive/login2.html\", 200, true);\n\n    //authentication password\n    curl_mockup_addResponse( LOGIN_URL.c_str( ), empty.c_str( ), \"POST\",\n                             DATA_DIR \"/gdrive/approve.html\", 200, true);\n\n",
                      "markdown": "`    curl_mockup_addResponse( LOGIN_URL2.c_str( ), empty.c_str( ), \"POST\",\n                             DATA_DIR \"/gdrive/login2.html\", 200, true);\n\n    //authentication password\n    curl_mockup_addResponse( LOGIN_URL.c_str( ), empty.c_str( ), \"POST\",\n                             DATA_DIR \"/gdrive/approve.html\", 200, true);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 73,
                  "endLine": 124,
                  "endColumn": 81,
                  "snippet": {
                    "text": "        OneDriveSessionPtr getTestSession( string username, string password );\n};\n\nOneDriveSessionPtr OneDriveTest::getTestSession( string username, string password )\n{\n    libcmis::OAuth2DataPtr oauth2(\n        new libcmis::OAuth2Data( AUTH_URL, TOKEN_URL, SCOPE,\n",
                    "rendered": {
                      "text": "        OneDriveSessionPtr getTestSession( string username, string password );\n};\n\nOneDriveSessionPtr OneDriveTest::getTestSession( string username, string password )\n{\n    libcmis::OAuth2DataPtr oauth2(\n        new libcmis::OAuth2Data( AUTH_URL, TOKEN_URL, SCOPE,\n",
                      "markdown": "`        OneDriveSessionPtr getTestSession( string username, string password );\n};\n\nOneDriveSessionPtr OneDriveTest::getTestSession( string username, string password )\n{\n    libcmis::OAuth2DataPtr oauth2(\n        new libcmis::OAuth2Data( AUTH_URL, TOKEN_URL, SCOPE,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 67,
                  "endLine": 121,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        OneDriveSessionPtr getTestSession( string username, string password );\n};\n\nOneDriveSessionPtr OneDriveTest::getTestSession( string username, string password )\n",
                    "rendered": {
                      "text": "        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        OneDriveSessionPtr getTestSession( string username, string password );\n};\n\nOneDriveSessionPtr OneDriveTest::getTestSession( string username, string password )\n",
                      "markdown": "`        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        OneDriveSessionPtr getTestSession( string username, string password );\n};\n\nOneDriveSessionPtr OneDriveTest::getTestSession( string username, string password )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 36,
                  "endLine": 61,
                  "endColumn": 44,
                  "snippet": {
                    "text": "static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n",
                    "rendered": {
                      "text": "static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n",
                      "markdown": "`static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 20,
                  "endLine": 61,
                  "endColumn": 28,
                  "snippet": {
                    "text": "static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n",
                    "rendered": {
                      "text": "static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n",
                      "markdown": "`static const string CLIENT_ID ( \"mock-id\" );\nstatic const string CLIENT_SECRET ( \"mock-secret\" );\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string LOGIN_URL (\"https://login/url\" );\nstatic const string LOGIN_URL2 (\"https://login2/url\" );\nstatic const string APPROVAL_URL (\"https://approval/url\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-onedrive.cxx"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 57,
                  "endLine": 131,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                                 REDIRECT_URI, CLIENT_ID, CLIENT_SECRET ));\n    curl_mockup_reset( );\n    string empty;\n    // login, authentication & approval are done manually at the moment, so I'll\n    // temporarily borrow them from gdrive\n    //login response\n    string loginIdentifier = string(\"scope=\") + SCOPE +\n",
                    "rendered": {
                      "text": "                                 REDIRECT_URI, CLIENT_ID, CLIENT_SECRET ));\n    curl_mockup_reset( );\n    string empty;\n    // login, authentication & approval are done manually at the moment, so I'll\n    // temporarily borrow them from gdrive\n    //login response\n    string loginIdentifier = string(\"scope=\") + SCOPE +\n",
                      "markdown": "`                                 REDIRECT_URI, CLIENT_ID, CLIENT_SECRET ));\n    curl_mockup_reset( );\n    string empty;\n    // login, authentication & approval are done manually at the moment, so I'll\n    // temporarily borrow them from gdrive\n    //login response\n    string loginIdentifier = string(\"scope=\") + SCOPE +\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 43,
                  "endLine": 856,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                    fallbackProvider( m_oauth2Handler->getAuthURL().c_str(), getUsername().c_str(), getPassword().c_str() ),\n                    free };\n                if ( code )\n                    authCode = string( code.get() );\n            }\n        }\n    }\n",
                    "rendered": {
                      "text": "                    fallbackProvider( m_oauth2Handler->getAuthURL().c_str(), getUsername().c_str(), getPassword().c_str() ),\n                    free };\n                if ( code )\n                    authCode = string( code.get() );\n            }\n        }\n    }\n",
                      "markdown": "`                    fallbackProvider( m_oauth2Handler->getAuthURL().c_str(), getUsername().c_str(), getPassword().c_str() ),\n                    free };\n                if ( code )\n                    authCode = string( code.get() );\n            }\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 68,
                  "endLine": 694,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n\n    // Set the proxy configuration if any\n    if ( !libcmis::SessionFactory::getProxy( ).empty() )\n",
                    "rendered": {
                      "text": "        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n\n    // Set the proxy configuration if any\n    if ( !libcmis::SessionFactory::getProxy( ).empty() )\n",
                      "markdown": "`        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n\n    // Set the proxy configuration if any\n    if ( !libcmis::SessionFactory::getProxy( ).empty() )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 65,
                  "endLine": 529,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n",
                    "rendered": {
                      "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n",
                      "markdown": "`    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 75,
                  "endLine": 526,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n",
                    "rendered": {
                      "text": "    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n",
                      "markdown": "`    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 65,
                  "endLine": 436,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n",
                    "rendered": {
                      "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n",
                      "markdown": "`    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 75,
                  "endLine": 433,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n",
                    "rendered": {
                      "text": "    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n",
                      "markdown": "`    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 65,
                  "endLine": 343,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n",
                    "rendered": {
                      "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n",
                      "markdown": "`    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 75,
                  "endLine": 340,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n",
                    "rendered": {
                      "text": "    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n",
                      "markdown": "`    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 65,
                  "endLine": 282,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    // fix Cloudoku too many redirects error\n    // note: though curl doc says -1 is the default for MAXREDIRS, the error i got\n",
                    "rendered": {
                      "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    // fix Cloudoku too many redirects error\n    // note: though curl doc says -1 is the default for MAXREDIRS, the error i got\n",
                      "markdown": "`    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    // fix Cloudoku too many redirects error\n    // note: though curl doc says -1 is the default for MAXREDIRS, the error i got\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 75,
                  "endLine": 279,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n",
                    "rendered": {
                      "text": "    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n",
                      "markdown": "`    libcmis::HttpResponsePtr response( new libcmis::HttpResponse( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEFUNCTION, lcl_bufferData );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEDATA, response->getData( ).get( ) );\n\n    curl_easy_setopt( m_curlHandle, CURLOPT_HEADERFUNCTION, &lcl_getHeaders );\n    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 42,
                  "endLine": 862,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    }\n    catch ( const CurlException& e )\n    {\n        // Thrown by getUsername() and getPassword() if user cancels the credentials request\n        throw e.getCmisException( );\n    }\n\n",
                    "rendered": {
                      "text": "    }\n    catch ( const CurlException& e )\n    {\n        // Thrown by getUsername() and getPassword() if user cancels the credentials request\n        throw e.getCmisException( );\n    }\n\n",
                      "markdown": "`    }\n    catch ( const CurlException& e )\n    {\n        // Thrown by getUsername() and getPassword() if user cancels the credentials request\n        throw e.getCmisException( );\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 103,
                  "endLine": 853,
                  "endColumn": 111,
                  "snippet": {
                    "text": "            if ( fallbackProvider != NULL )\n            {\n                unique_ptr< char, void (*)( void * ) > code{\n                    fallbackProvider( m_oauth2Handler->getAuthURL().c_str(), getUsername().c_str(), getPassword().c_str() ),\n                    free };\n                if ( code )\n                    authCode = string( code.get() );\n",
                    "rendered": {
                      "text": "            if ( fallbackProvider != NULL )\n            {\n                unique_ptr< char, void (*)( void * ) > code{\n                    fallbackProvider( m_oauth2Handler->getAuthURL().c_str(), getUsername().c_str(), getPassword().c_str() ),\n                    free };\n                if ( code )\n                    authCode = string( code.get() );\n",
                      "markdown": "`            if ( fallbackProvider != NULL )\n            {\n                unique_ptr< char, void (*)( void * ) > code{\n                    fallbackProvider( m_oauth2Handler->getAuthURL().c_str(), getUsername().c_str(), getPassword().c_str() ),\n                    free };\n                if ( code )\n                    authCode = string( code.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 57,
                  "endLine": 707,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        {\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYUSERNAME, proxyUser.c_str( ) );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYPASSWORD, proxyPass.c_str( ) );\n        }\n    }\n\n",
                    "rendered": {
                      "text": "        {\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYUSERNAME, proxyUser.c_str( ) );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYPASSWORD, proxyPass.c_str( ) );\n        }\n    }\n\n",
                      "markdown": "`        {\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYUSERNAME, proxyUser.c_str( ) );\n            curl_easy_setopt( m_curlHandle, CURLOPT_PROXYPASSWORD, proxyPass.c_str( ) );\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 61,
                  "endLine": 691,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n",
                    "rendered": {
                      "text": "    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n",
                      "markdown": "`    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 48,
                  "endLine": 691,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n",
                    "rendered": {
                      "text": "    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n",
                      "markdown": "`    {\n        curl_easy_setopt( m_curlHandle, CURLOPT_HTTPAUTH, m_authMethod );\n        curl_easy_setopt( m_curlHandle, CURLOPT_USERNAME, getUsername().c_str() );\n        curl_easy_setopt( m_curlHandle, CURLOPT_PASSWORD, getPassword().c_str() );\n    }\n\n    curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers_slist.get());\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 74,
                  "endLine": 655,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    libcmis::AuthProviderPtr authProvider = libcmis::SessionFactory::getAuthenticationProvider();\n    if ( authProvider && !m_authProvided && ( m_username.empty() || m_password.empty() ) )\n    {\n        m_authProvided = authProvider->authenticationQuery( m_username, m_password );\n        if ( !m_authProvided )\n        {\n            throw CurlException(\"User cancelled authentication request\", CURLE_OK);\n",
                    "rendered": {
                      "text": "    libcmis::AuthProviderPtr authProvider = libcmis::SessionFactory::getAuthenticationProvider();\n    if ( authProvider && !m_authProvided && ( m_username.empty() || m_password.empty() ) )\n    {\n        m_authProvided = authProvider->authenticationQuery( m_username, m_password );\n        if ( !m_authProvided )\n        {\n            throw CurlException(\"User cancelled authentication request\", CURLE_OK);\n",
                      "markdown": "`    libcmis::AuthProviderPtr authProvider = libcmis::SessionFactory::getAuthenticationProvider();\n    if ( authProvider && !m_authProvided && ( m_username.empty() || m_password.empty() ) )\n    {\n        m_authProvided = authProvider->authenticationQuery( m_username, m_password );\n        if ( !m_authProvided )\n        {\n            throw CurlException(\"User cancelled authentication request\", CURLE_OK);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 70,
                  "endLine": 653,
                  "endColumn": 78,
                  "snippet": {
                    "text": "{\n    // Check that we have the complete credentials\n    libcmis::AuthProviderPtr authProvider = libcmis::SessionFactory::getAuthenticationProvider();\n    if ( authProvider && !m_authProvided && ( m_username.empty() || m_password.empty() ) )\n    {\n        m_authProvided = authProvider->authenticationQuery( m_username, m_password );\n        if ( !m_authProvided )\n",
                    "rendered": {
                      "text": "{\n    // Check that we have the complete credentials\n    libcmis::AuthProviderPtr authProvider = libcmis::SessionFactory::getAuthenticationProvider();\n    if ( authProvider && !m_authProvided && ( m_username.empty() || m_password.empty() ) )\n    {\n        m_authProvided = authProvider->authenticationQuery( m_username, m_password );\n        if ( !m_authProvided )\n",
                      "markdown": "`{\n    // Check that we have the complete credentials\n    libcmis::AuthProviderPtr authProvider = libcmis::SessionFactory::getAuthenticationProvider();\n    if ( authProvider && !m_authProvided && ( m_username.empty() || m_password.empty() ) )\n    {\n        m_authProvided = authProvider->authenticationQuery( m_username, m_password );\n        if ( !m_authProvided )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 13,
                  "endLine": 265,
                  "endColumn": 21,
                  "snippet": {
                    "text": "string& HttpSession::getPassword( )\n{\n    checkCredentials( );\n    return m_password;\n}\n\nlibcmis::HttpResponsePtr HttpSession::httpGetRequest( string url )\n",
                    "rendered": {
                      "text": "string& HttpSession::getPassword( )\n{\n    checkCredentials( );\n    return m_password;\n}\n\nlibcmis::HttpResponsePtr HttpSession::httpGetRequest( string url )\n",
                      "markdown": "`string& HttpSession::getPassword( )\n{\n    checkCredentials( );\n    return m_password;\n}\n\nlibcmis::HttpResponsePtr HttpSession::httpGetRequest( string url )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 24,
                  "endLine": 262,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    return m_username;\n}\n\nstring& HttpSession::getPassword( )\n{\n    checkCredentials( );\n    return m_password;\n",
                    "rendered": {
                      "text": "    return m_username;\n}\n\nstring& HttpSession::getPassword( )\n{\n    checkCredentials( );\n    return m_password;\n",
                      "markdown": "`    return m_username;\n}\n\nstring& HttpSession::getPassword( )\n{\n    checkCredentials( );\n    return m_password;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 28,
                  "endLine": 232,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        m_no100Continue = copy.m_no100Continue;\n        m_oauth2Handler = copy.m_oauth2Handler;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_authProvided = copy.m_authProvided;\n        m_verbose = copy.m_verbose;\n        m_noHttpErrors = copy.m_noHttpErrors;\n",
                    "rendered": {
                      "text": "        m_no100Continue = copy.m_no100Continue;\n        m_oauth2Handler = copy.m_oauth2Handler;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_authProvided = copy.m_authProvided;\n        m_verbose = copy.m_verbose;\n        m_noHttpErrors = copy.m_noHttpErrors;\n",
                      "markdown": "`        m_no100Continue = copy.m_no100Continue;\n        m_oauth2Handler = copy.m_oauth2Handler;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_authProvided = copy.m_authProvided;\n        m_verbose = copy.m_verbose;\n        m_noHttpErrors = copy.m_noHttpErrors;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 10,
                  "endLine": 232,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        m_no100Continue = copy.m_no100Continue;\n        m_oauth2Handler = copy.m_oauth2Handler;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_authProvided = copy.m_authProvided;\n        m_verbose = copy.m_verbose;\n        m_noHttpErrors = copy.m_noHttpErrors;\n",
                    "rendered": {
                      "text": "        m_no100Continue = copy.m_no100Continue;\n        m_oauth2Handler = copy.m_oauth2Handler;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_authProvided = copy.m_authProvided;\n        m_verbose = copy.m_verbose;\n        m_noHttpErrors = copy.m_noHttpErrors;\n",
                      "markdown": "`        m_no100Continue = copy.m_no100Continue;\n        m_oauth2Handler = copy.m_oauth2Handler;\n        m_username = copy.m_username;\n        m_password = copy.m_password;\n        m_authProvided = copy.m_authProvided;\n        m_verbose = copy.m_verbose;\n        m_noHttpErrors = copy.m_noHttpErrors;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 6,
                  "endLine": 209,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( ),\n    m_password( ),\n    m_authProvided( false ),\n    m_verbose( false ),\n    m_noHttpErrors( false ),\n",
                    "rendered": {
                      "text": "    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( ),\n    m_password( ),\n    m_authProvided( false ),\n    m_verbose( false ),\n    m_noHttpErrors( false ),\n",
                      "markdown": "`    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( ),\n    m_password( ),\n    m_authProvided( false ),\n    m_verbose( false ),\n    m_noHttpErrors( false ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 23,
                  "endLine": 190,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    m_no100Continue( copy.m_no100Continue ),\n    m_oauth2Handler( copy.m_oauth2Handler ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_authProvided( copy.m_authProvided ),\n    m_verbose( copy.m_verbose ),\n    m_noHttpErrors( copy.m_noHttpErrors ),\n",
                    "rendered": {
                      "text": "    m_no100Continue( copy.m_no100Continue ),\n    m_oauth2Handler( copy.m_oauth2Handler ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_authProvided( copy.m_authProvided ),\n    m_verbose( copy.m_verbose ),\n    m_noHttpErrors( copy.m_noHttpErrors ),\n",
                      "markdown": "`    m_no100Continue( copy.m_no100Continue ),\n    m_oauth2Handler( copy.m_oauth2Handler ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_authProvided( copy.m_authProvided ),\n    m_verbose( copy.m_verbose ),\n    m_noHttpErrors( copy.m_noHttpErrors ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 6,
                  "endLine": 190,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    m_no100Continue( copy.m_no100Continue ),\n    m_oauth2Handler( copy.m_oauth2Handler ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_authProvided( copy.m_authProvided ),\n    m_verbose( copy.m_verbose ),\n    m_noHttpErrors( copy.m_noHttpErrors ),\n",
                    "rendered": {
                      "text": "    m_no100Continue( copy.m_no100Continue ),\n    m_oauth2Handler( copy.m_oauth2Handler ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_authProvided( copy.m_authProvided ),\n    m_verbose( copy.m_verbose ),\n    m_noHttpErrors( copy.m_noHttpErrors ),\n",
                      "markdown": "`    m_no100Continue( copy.m_no100Continue ),\n    m_oauth2Handler( copy.m_oauth2Handler ),\n    m_username( copy.m_username ),\n    m_password( copy.m_password ),\n    m_authProvided( copy.m_authProvided ),\n    m_verbose( copy.m_verbose ),\n    m_noHttpErrors( copy.m_noHttpErrors ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 16,
                  "endLine": 167,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( username ),\n    m_password( password ),\n    m_authProvided( false ),\n    m_verbose( verbose ),\n    m_noHttpErrors( false ),\n",
                    "rendered": {
                      "text": "    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( username ),\n    m_password( password ),\n    m_authProvided( false ),\n    m_verbose( verbose ),\n    m_noHttpErrors( false ),\n",
                      "markdown": "`    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( username ),\n    m_password( password ),\n    m_authProvided( false ),\n    m_verbose( verbose ),\n    m_noHttpErrors( false ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 6,
                  "endLine": 167,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( username ),\n    m_password( password ),\n    m_authProvided( false ),\n    m_verbose( verbose ),\n    m_noHttpErrors( false ),\n",
                    "rendered": {
                      "text": "    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( username ),\n    m_password( password ),\n    m_authProvided( false ),\n    m_verbose( verbose ),\n    m_noHttpErrors( false ),\n",
                      "markdown": "`    m_no100Continue( false ),\n    m_oauth2Handler( NULL ),\n    m_username( username ),\n    m_password( password ),\n    m_authProvided( false ),\n    m_verbose( verbose ),\n    m_noHttpErrors( false ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 50,
                  "endLine": 159,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    };\n}\n\nHttpSession::HttpSession( string username, string password, bool noSslCheck,\n                          libcmis::OAuth2DataPtr oauth2, bool verbose,\n                          libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    m_curlHandle( NULL ),\n",
                    "rendered": {
                      "text": "    };\n}\n\nHttpSession::HttpSession( string username, string password, bool noSslCheck,\n                          libcmis::OAuth2DataPtr oauth2, bool verbose,\n                          libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    m_curlHandle( NULL ),\n",
                      "markdown": "`    };\n}\n\nHttpSession::HttpSession( string username, string password, bool noSslCheck,\n                          libcmis::OAuth2DataPtr oauth2, bool verbose,\n                          libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    m_curlHandle( NULL ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 16,
                  "endLine": 92,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    {\n        curlioerr errCode = CURLIOE_OK;\n\n        switch ( cmd )\n        {\n            case CURLIOCMD_RESTARTREAD:\n                {\n",
                    "rendered": {
                      "text": "    {\n        curlioerr errCode = CURLIOE_OK;\n\n        switch ( cmd )\n        {\n            case CURLIOCMD_RESTARTREAD:\n                {\n",
                      "markdown": "`    {\n        curlioerr errCode = CURLIOE_OK;\n\n        switch ( cmd )\n        {\n            case CURLIOCMD_RESTARTREAD:\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 19,
                  "endLine": 285,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    // fix Cloudoku too many redirects error\n    // note: though curl doc says -1 is the default for MAXREDIRS, the error i got\n    // said it was 0\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n",
                    "rendered": {
                      "text": "    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    // fix Cloudoku too many redirects error\n    // note: though curl doc says -1 is the default for MAXREDIRS, the error i got\n    // said it was 0\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n",
                      "markdown": "`    curl_easy_setopt( m_curlHandle, CURLOPT_WRITEHEADER, response.get() );\n\n    // fix Cloudoku too many redirects error\n    // note: though curl doc says -1 is the default for MAXREDIRS, the error i got\n    // said it was 0\n    curl_easy_setopt( m_curlHandle, CURLOPT_MAXREDIRS, 20);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 31,
                  "endLine": 241,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        m_inOAuth2Authentication = copy.m_inOAuth2Authentication;\n        m_authMethod = copy.m_authMethod;\n\n        // Not sure how sharing curl handles is safe.\n        curl_global_init( CURL_GLOBAL_ALL );\n        m_curlHandle = curl_easy_init( );\n    }\n",
                    "rendered": {
                      "text": "        m_inOAuth2Authentication = copy.m_inOAuth2Authentication;\n        m_authMethod = copy.m_authMethod;\n\n        // Not sure how sharing curl handles is safe.\n        curl_global_init( CURL_GLOBAL_ALL );\n        m_curlHandle = curl_easy_init( );\n    }\n",
                      "markdown": "`        m_inOAuth2Authentication = copy.m_inOAuth2Authentication;\n        m_authMethod = copy.m_authMethod;\n\n        // Not sure how sharing curl handles is safe.\n        curl_global_init( CURL_GLOBAL_ALL );\n        m_curlHandle = curl_easy_init( );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.cxx"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 27,
                  "endLine": 199,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    m_inOAuth2Authentication( false ),\n    m_authMethod( copy.m_authMethod )\n{\n    // Not sure how sharing curl handles is safe.\n    curl_global_init( CURL_GLOBAL_ALL );\n    m_curlHandle = curl_easy_init( );\n}\n",
                    "rendered": {
                      "text": "    m_inOAuth2Authentication( false ),\n    m_authMethod( copy.m_authMethod )\n{\n    // Not sure how sharing curl handles is safe.\n    curl_global_init( CURL_GLOBAL_ALL );\n    m_curlHandle = curl_easy_init( );\n}\n",
                      "markdown": "`    m_inOAuth2Authentication( false ),\n    m_authMethod( copy.m_authMethod )\n{\n    // Not sure how sharing curl handles is safe.\n    curl_global_init( CURL_GLOBAL_ALL );\n    m_curlHandle = curl_easy_init( );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 41,
                  "endLine": 180,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                        throw SoapFault( node, this );\n                    }\n                    SoapResponsePtr response = createResponse( node, multipart );\n                    if ( NULL != response.get( ) )\n                        responses.push_back( response );\n                }\n            }\n",
                    "rendered": {
                      "text": "                        throw SoapFault( node, this );\n                    }\n                    SoapResponsePtr response = createResponse( node, multipart );\n                    if ( NULL != response.get( ) )\n                        responses.push_back( response );\n                }\n            }\n",
                      "markdown": "`                        throw SoapFault( node, this );\n                    }\n                    SoapResponsePtr response = createResponse( node, multipart );\n                    if ( NULL != response.get( ) )\n                        responses.push_back( response );\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 127,
                  "endLine": 161,
                  "endColumn": 132,
                  "snippet": {
                    "text": "        if ( bool( xpathCtx ) )\n        {\n            string bodyXPath( \"//soap-env:Body/*\" );\n            const boost::shared_ptr< xmlXPathObject > xpathObj( xmlXPathEvalExpression( BAD_CAST( bodyXPath.c_str() ), xpathCtx.get() ), xmlXPathFreeObject );\n\n            if ( bool( xpathObj ) )\n            {\n",
                    "rendered": {
                      "text": "        if ( bool( xpathCtx ) )\n        {\n            string bodyXPath( \"//soap-env:Body/*\" );\n            const boost::shared_ptr< xmlXPathObject > xpathObj( xmlXPathEvalExpression( BAD_CAST( bodyXPath.c_str() ), xpathCtx.get() ), xmlXPathFreeObject );\n\n            if ( bool( xpathObj ) )\n            {\n",
                      "markdown": "`        if ( bool( xpathCtx ) )\n        {\n            string bodyXPath( \"//soap-env:Body/*\" );\n            const boost::shared_ptr< xmlXPathObject > xpathObj( xmlXPathEvalExpression( BAD_CAST( bodyXPath.c_str() ), xpathCtx.get() ), xmlXPathFreeObject );\n\n            if ( bool( xpathObj ) )\n            {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 40,
                  "endLine": 155,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        for ( map< string, string >::iterator it = m_namespaces.begin( );\n              it != m_namespaces.end( ); ++it )\n        {\n            xmlXPathRegisterNs( xpathCtx.get(), BAD_CAST( it->first.c_str() ),  BAD_CAST( it->second.c_str( ) ) );\n        }\n\n        if ( bool( xpathCtx ) )\n",
                    "rendered": {
                      "text": "        for ( map< string, string >::iterator it = m_namespaces.begin( );\n              it != m_namespaces.end( ); ++it )\n        {\n            xmlXPathRegisterNs( xpathCtx.get(), BAD_CAST( it->first.c_str() ),  BAD_CAST( it->second.c_str( ) ) );\n        }\n\n        if ( bool( xpathCtx ) )\n",
                      "markdown": "`        for ( map< string, string >::iterator it = m_namespaces.begin( );\n              it != m_namespaces.end( ); ++it )\n        {\n            xmlXPathRegisterNs( xpathCtx.get(), BAD_CAST( it->first.c_str() ),  BAD_CAST( it->second.c_str( ) ) );\n        }\n\n        if ( bool( xpathCtx ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 49,
                  "endLine": 150,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    if ( bool( doc ) )\n    {\n        const boost::shared_ptr< xmlXPathContext > xpathCtx( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n        libcmis::registerSoapNamespaces( xpathCtx.get() );\n\n        for ( map< string, string >::iterator it = m_namespaces.begin( );\n              it != m_namespaces.end( ); ++it )\n",
                    "rendered": {
                      "text": "    if ( bool( doc ) )\n    {\n        const boost::shared_ptr< xmlXPathContext > xpathCtx( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n        libcmis::registerSoapNamespaces( xpathCtx.get() );\n\n        for ( map< string, string >::iterator it = m_namespaces.begin( );\n              it != m_namespaces.end( ); ++it )\n",
                      "markdown": "`    if ( bool( doc ) )\n    {\n        const boost::shared_ptr< xmlXPathContext > xpathCtx( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n        libcmis::registerSoapNamespaces( xpathCtx.get() );\n\n        for ( map< string, string >::iterator it = m_namespaces.begin( );\n              it != m_namespaces.end( ); ++it )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 84,
                  "endLine": 149,
                  "endColumn": 89,
                  "snippet": {
                    "text": "\n    if ( bool( doc ) )\n    {\n        const boost::shared_ptr< xmlXPathContext > xpathCtx( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n        libcmis::registerSoapNamespaces( xpathCtx.get() );\n\n        for ( map< string, string >::iterator it = m_namespaces.begin( );\n",
                    "rendered": {
                      "text": "\n    if ( bool( doc ) )\n    {\n        const boost::shared_ptr< xmlXPathContext > xpathCtx( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n        libcmis::registerSoapNamespaces( xpathCtx.get() );\n\n        for ( map< string, string >::iterator it = m_namespaces.begin( );\n",
                      "markdown": "`\n    if ( bool( doc ) )\n    {\n        const boost::shared_ptr< xmlXPathContext > xpathCtx( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n        libcmis::registerSoapNamespaces( xpathCtx.get() );\n\n        for ( map< string, string >::iterator it = m_namespaces.begin( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 13,
                  "endLine": 140,
                  "endColumn": 18,
                  "snippet": {
                    "text": "{\n    string xml;\n    RelatedPartPtr part = multipart.getPart( multipart.getStartId( ) );\n    if ( part.get() != NULL )\n        xml = part->getContent( );\n\n    vector< SoapResponsePtr > responses;\n",
                    "rendered": {
                      "text": "{\n    string xml;\n    RelatedPartPtr part = multipart.getPart( multipart.getStartId( ) );\n    if ( part.get() != NULL )\n        xml = part->getContent( );\n\n    vector< SoapResponsePtr > responses;\n",
                      "markdown": "`{\n    string xml;\n    RelatedPartPtr part = multipart.getPart( multipart.getStartId( ) );\n    if ( part.get() != NULL )\n        xml = part->getContent( );\n\n    vector< SoapResponsePtr > responses;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 49,
                  "endLine": 312,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsu:Created\" ) );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( createdStr.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Created\n",
                    "rendered": {
                      "text": "    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsu:Created\" ) );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( createdStr.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Created\n",
                      "markdown": "`    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsu:Created\" ) );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( createdStr.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Created\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 45,
                  "endLine": 311,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsu:Created\" ) );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( createdStr.c_str( ) ) );\n",
                    "rendered": {
                      "text": "\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsu:Created\" ) );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( createdStr.c_str( ) ) );\n",
                      "markdown": "`\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsu:Created\" ) );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( createdStr.c_str( ) ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 55,
                  "endLine": 309,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:UsernameToken\" ) );\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"wsse:Username\" ), BAD_CAST( username.c_str( ) ) );\n\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n",
                    "rendered": {
                      "text": "    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:UsernameToken\" ) );\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"wsse:Username\" ), BAD_CAST( username.c_str( ) ) );\n\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n",
                      "markdown": "`    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:UsernameToken\" ) );\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"wsse:Username\" ), BAD_CAST( username.c_str( ) ) );\n\n    xmlTextWriterStartElement( writer, BAD_CAST( \"wsse:Password\" ) );\n    xmlTextWriterWriteAttribute( writer, BAD_CAST( \"Type\" ), passTypeStr );\n    xmlTextWriterWriteRaw( writer, BAD_CAST( password.c_str( ) ) );\n    xmlTextWriterEndElement( writer ); // End of Password\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 121,
                  "endLine": 278,
                  "endColumn": 129,
                  "snippet": {
                    "text": "    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n    boost::posix_time::ptime created( boost::posix_time::second_clock::universal_time( ) );\n",
                    "rendered": {
                      "text": "    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n    boost::posix_time::ptime created( boost::posix_time::second_clock::universal_time( ) );\n",
                      "markdown": "`    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n    boost::posix_time::ptime created( boost::posix_time::second_clock::universal_time( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 99,
                  "endLine": 277,
                  "endColumn": 107,
                  "snippet": {
                    "text": "    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n",
                    "rendered": {
                      "text": "    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n",
                      "markdown": "`    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 46,
                  "endLine": 277,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n",
                    "rendered": {
                      "text": "    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n",
                      "markdown": "`    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 23,
                  "endLine": 277,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n",
                    "rendered": {
                      "text": "    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n",
                      "markdown": "`    xmlChar* wsseUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" );\n    xmlChar* wsuUrl = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" );\n\n    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 140,
                  "endLine": 264,
                  "endColumn": 148,
                  "snippet": {
                    "text": "                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n",
                    "rendered": {
                      "text": "                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n",
                      "markdown": "`                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 119,
                  "endLine": 264,
                  "endColumn": 127,
                  "snippet": {
                    "text": "                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n",
                    "rendered": {
                      "text": "                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n",
                      "markdown": "`                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 21,
                  "endLine": 264,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n",
                    "rendered": {
                      "text": "                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n",
                      "markdown": "`                </Timestamp>\n                <UsernameToken>\n                    <Username>admin</Username>\n                    <Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">admin</Password>\n                    <Created xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2012-06-14T09:20:29Z</Created>\n                </UsernameToken>\n            </Security>\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 74,
                  "endLine": 247,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    return m_multipart;\n}\n\nstring SoapRequest::createEnvelope( const string& username, const string& password )\n{\n    xmlBufferPtr buf = xmlBufferCreate( );\n    xmlTextWriterPtr writer = xmlNewTextWriterMemory( buf, 0 );\n",
                    "rendered": {
                      "text": "    return m_multipart;\n}\n\nstring SoapRequest::createEnvelope( const string& username, const string& password )\n{\n    xmlBufferPtr buf = xmlBufferCreate( );\n    xmlTextWriterPtr writer = xmlNewTextWriterMemory( buf, 0 );\n",
                      "markdown": "`    return m_multipart;\n}\n\nstring SoapRequest::createEnvelope( const string& username, const string& password )\n{\n    xmlBufferPtr buf = xmlBufferCreate( );\n    xmlTextWriterPtr writer = xmlNewTextWriterMemory( buf, 0 );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 48,
                  "endLine": 234,
                  "endColumn": 56,
                  "snippet": {
                    "text": "RelatedMultipart& SoapRequest::getMultipart( string& username, string& password )\n{\n    // Generate the envelope and add it to the multipart\n    string envelope = createEnvelope( username, password );\n    string name( \"root\" );\n    string type( \"application/xop+xml;charset=UTF-8;type=\\\"text/xml\\\"\" );\n    RelatedPartPtr envelopePart( new RelatedPart( name, type, envelope ) );\n",
                    "rendered": {
                      "text": "RelatedMultipart& SoapRequest::getMultipart( string& username, string& password )\n{\n    // Generate the envelope and add it to the multipart\n    string envelope = createEnvelope( username, password );\n    string name( \"root\" );\n    string type( \"application/xop+xml;charset=UTF-8;type=\\\"text/xml\\\"\" );\n    RelatedPartPtr envelopePart( new RelatedPart( name, type, envelope ) );\n",
                      "markdown": "`RelatedMultipart& SoapRequest::getMultipart( string& username, string& password )\n{\n    // Generate the envelope and add it to the multipart\n    string envelope = createEnvelope( username, password );\n    string name( \"root\" );\n    string type( \"application/xop+xml;charset=UTF-8;type=\\\"text/xml\\\"\" );\n    RelatedPartPtr envelopePart( new RelatedPart( name, type, envelope ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 71,
                  "endLine": 231,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    return detail;\n}\n\nRelatedMultipart& SoapRequest::getMultipart( string& username, string& password )\n{\n    // Generate the envelope and add it to the multipart\n    string envelope = createEnvelope( username, password );\n",
                    "rendered": {
                      "text": "    return detail;\n}\n\nRelatedMultipart& SoapRequest::getMultipart( string& username, string& password )\n{\n    // Generate the envelope and add it to the multipart\n    string envelope = createEnvelope( username, password );\n",
                      "markdown": "`    return detail;\n}\n\nRelatedMultipart& SoapRequest::getMultipart( string& username, string& password )\n{\n    // Generate the envelope and add it to the multipart\n    string envelope = createEnvelope( username, password );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.cxx"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 28,
                  "endLine": 280,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n    boost::posix_time::ptime created( boost::posix_time::second_clock::universal_time( ) );\n    boost::posix_time::ptime expires( created );\n    expires = expires + boost::gregorian::days( 1 );\n",
                    "rendered": {
                      "text": "    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n    boost::posix_time::ptime created( boost::posix_time::second_clock::universal_time( ) );\n    boost::posix_time::ptime expires( created );\n    expires = expires + boost::gregorian::days( 1 );\n",
                      "markdown": "`    // Use an unsecure password transmission (PasswordText) because some clients can't support the PasswordDigest.\n    xmlChar* passTypeStr = BAD_CAST( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\" );\n\n    // Created must be a UTC time with no more than 3 digits fractional seconds.\n    boost::posix_time::ptime created( boost::posix_time::second_clock::universal_time( ) );\n    boost::posix_time::ptime expires( created );\n    expires = expires + boost::gregorian::days( 1 );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object-type.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object-type.hxx"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 52,
                  "endLine": 41,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        WSSession* m_session;\n\n    public:\n        WSObjectType( WSSession* session, xmlNodePtr node );\n        WSObjectType( const WSObjectType& copy );\n        virtual ~WSObjectType( );\n\n",
                    "rendered": {
                      "text": "        WSSession* m_session;\n\n    public:\n        WSObjectType( WSSession* session, xmlNodePtr node );\n        WSObjectType( const WSObjectType& copy );\n        virtual ~WSObjectType( );\n\n",
                      "markdown": "`        WSSession* m_session;\n\n    public:\n        WSObjectType( WSSession* session, xmlNodePtr node );\n        WSObjectType( const WSObjectType& copy );\n        virtual ~WSObjectType( );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object-type.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.cxx"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 25,
                  "endLine": 80,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    loginPost += \"username=\";  \n    loginPost += string( username );\n    loginPost += \"&password=\";\n    loginPost += string( password );\n    loginPost += \"&action=Grant\";\n\n    istringstream loginIs( loginPost );\n",
                    "rendered": {
                      "text": "    loginPost += \"username=\";  \n    loginPost += string( username );\n    loginPost += \"&password=\";\n    loginPost += string( password );\n    loginPost += \"&action=Grant\";\n\n    istringstream loginIs( loginPost );\n",
                      "markdown": "`    loginPost += \"username=\";  \n    loginPost += string( username );\n    loginPost += \"&password=\";\n    loginPost += string( password );\n    loginPost += \"&action=Grant\";\n\n    istringstream loginIs( loginPost );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.cxx"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 19,
                  "endLine": 79,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    \n    loginPost += \"username=\";  \n    loginPost += string( username );\n    loginPost += \"&password=\";\n    loginPost += string( password );\n    loginPost += \"&action=Grant\";\n\n",
                    "rendered": {
                      "text": "    \n    loginPost += \"username=\";  \n    loginPost += string( username );\n    loginPost += \"&password=\";\n    loginPost += string( password );\n    loginPost += \"&action=Grant\";\n\n",
                      "markdown": "`    \n    loginPost += \"username=\";  \n    loginPost += string( username );\n    loginPost += \"&password=\";\n    loginPost += string( password );\n    loginPost += \"&action=Grant\";\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.cxx"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 78,
                  "endLine": 57,
                  "endColumn": 86,
                  "snippet": {
                    "text": "}\n\nstring OAuth2Providers::OAuth2Alfresco( HttpSession* session, const string& authUrl,\n                                        const string& username, const string& password )\n{\n    static const string CONTENT_TYPE( \"application/x-www-form-urlencoded\" );\n   \n",
                    "rendered": {
                      "text": "}\n\nstring OAuth2Providers::OAuth2Alfresco( HttpSession* session, const string& authUrl,\n                                        const string& username, const string& password )\n{\n    static const string CONTENT_TYPE( \"application/x-www-form-urlencoded\" );\n   \n",
                      "markdown": "`}\n\nstring OAuth2Providers::OAuth2Alfresco( HttpSession* session, const string& authUrl,\n                                        const string& username, const string& password )\n{\n    static const string CONTENT_TYPE( \"application/x-www-form-urlencoded\" );\n   \n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.cxx"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 81,
                  "endLine": 51,
                  "endColumn": 89,
                  "snippet": {
                    "text": "using namespace std;\n\nstring OAuth2Providers::OAuth2Dummy( HttpSession* /*session*/, const string& /*authUrl*/,\n                                     const string& /*username*/, const string& /*password*/ )\n{\n    return string( );\n}\n",
                    "rendered": {
                      "text": "using namespace std;\n\nstring OAuth2Providers::OAuth2Dummy( HttpSession* /*session*/, const string& /*authUrl*/,\n                                     const string& /*username*/, const string& /*password*/ )\n{\n    return string( );\n}\n",
                      "markdown": "`using namespace std;\n\nstring OAuth2Providers::OAuth2Dummy( HttpSession* /*session*/, const string& /*authUrl*/,\n                                     const string& /*username*/, const string& /*password*/ )\n{\n    return string( );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/object.cxx"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 31,
                  "endLine": 294,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    libcmis::ObjectTypePtr Object::getTypeDescription( )\n    {\n        if ( !m_typeDescription.get( ) && m_session != NULL )\n            m_typeDescription = m_session->getType( getType( ) );\n\n        return m_typeDescription;\n",
                    "rendered": {
                      "text": "\n    libcmis::ObjectTypePtr Object::getTypeDescription( )\n    {\n        if ( !m_typeDescription.get( ) && m_session != NULL )\n            m_typeDescription = m_session->getType( getType( ) );\n\n        return m_typeDescription;\n",
                      "markdown": "`\n    libcmis::ObjectTypePtr Object::getTypeDescription( )\n    {\n        if ( !m_typeDescription.get( ) && m_session != NULL )\n            m_typeDescription = m_session->getType( getType( ) );\n\n        return m_typeDescription;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/object.cxx"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 34,
                  "endLine": 94,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    {\n        // Even if node is NULL we'll have an empty doc, so no need\n        // to worry about it.\n        xmlDocPtr doc = wrapInDoc( node );\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc );\n\n        libcmis::registerNamespaces( xpathCtx );\n",
                    "rendered": {
                      "text": "    {\n        // Even if node is NULL we'll have an empty doc, so no need\n        // to worry about it.\n        xmlDocPtr doc = wrapInDoc( node );\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc );\n\n        libcmis::registerNamespaces( xpathCtx );\n",
                      "markdown": "`    {\n        // Even if node is NULL we'll have an empty doc, so no need\n        // to worry about it.\n        xmlDocPtr doc = wrapInDoc( node );\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc );\n\n        libcmis::registerNamespaces( xpathCtx );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/object.cxx"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 47,
                  "endLine": 90,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        return *this;\n    }\n\n    void Object::initializeFromNode( xmlNodePtr node )\n    {\n        // Even if node is NULL we'll have an empty doc, so no need\n        // to worry about it.\n",
                    "rendered": {
                      "text": "        return *this;\n    }\n\n    void Object::initializeFromNode( xmlNodePtr node )\n    {\n        // Even if node is NULL we'll have an empty doc, so no need\n        // to worry about it.\n",
                      "markdown": "`        return *this;\n    }\n\n    void Object::initializeFromNode( xmlNodePtr node )\n    {\n        // Even if node is NULL we'll have an empty doc, so no need\n        // to worry about it.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/object.cxx"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 27,
                  "endLine": 60,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        m_allowableActions( ),\n        m_renditions( )\n    {\n        initializeFromNode( node );\n    }\n\n    Object::Object( const Object& copy ) :\n",
                    "rendered": {
                      "text": "        m_allowableActions( ),\n        m_renditions( )\n    {\n        initializeFromNode( node );\n    }\n\n    Object::Object( const Object& copy ) :\n",
                      "markdown": "`        m_allowableActions( ),\n        m_renditions( )\n    {\n        initializeFromNode( node );\n    }\n\n    Object::Object( const Object& copy ) :\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/object.cxx"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 48,
                  "endLine": 51,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    {\n    }\n\n    Object::Object( Session* session, xmlNodePtr node ) :\n        m_session( session ),\n        m_typeDescription( ),\n        m_refreshTimestamp( 0 ),\n",
                    "rendered": {
                      "text": "    {\n    }\n\n    Object::Object( Session* session, xmlNodePtr node ) :\n        m_session( session ),\n        m_typeDescription( ),\n        m_refreshTimestamp( 0 ),\n",
                      "markdown": "`    {\n    }\n\n    Object::Object( Session* session, xmlNodePtr node ) :\n        m_session( session ),\n        m_typeDescription( ),\n        m_refreshTimestamp( 0 ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/object-type.cxx"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 27,
                  "endLine": 82,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        m_contentStreamAllowed( libcmis::ObjectType::Allowed ),\n        m_propertiesTypes( )\n    {\n        initializeFromNode( node );\n    }\n\n    ObjectType::ObjectType( const ObjectType& copy ) :\n",
                    "rendered": {
                      "text": "        m_contentStreamAllowed( libcmis::ObjectType::Allowed ),\n        m_propertiesTypes( )\n    {\n        initializeFromNode( node );\n    }\n\n    ObjectType::ObjectType( const ObjectType& copy ) :\n",
                      "markdown": "`        m_contentStreamAllowed( libcmis::ObjectType::Allowed ),\n        m_propertiesTypes( )\n    {\n        initializeFromNode( node );\n    }\n\n    ObjectType::ObjectType( const ObjectType& copy ) :\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/object-type.cxx"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 38,
                  "endLine": 61,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    {\n    }\n\n    ObjectType::ObjectType( xmlNodePtr node ) :\n        m_refreshTimestamp( 0 ),\n        m_id( ),\n        m_localName( ),\n",
                    "rendered": {
                      "text": "    {\n    }\n\n    ObjectType::ObjectType( xmlNodePtr node ) :\n        m_refreshTimestamp( 0 ),\n        m_id( ),\n        m_localName( ),\n",
                      "markdown": "`    {\n    }\n\n    ObjectType::ObjectType( xmlNodePtr node ) :\n        m_refreshTimestamp( 0 ),\n        m_id( ),\n        m_localName( ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-folder.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-folder.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-repositoryservice.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-repositoryservice.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-session.cxx"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 47,
                  "endLine": 87,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        {\n            m_inOAuth2Authentication = true;\n\n            m_oauth2Handler->setRefreshToken(m_password);\n            // Try to get new access tokens using the stored refreshtoken\n            m_oauth2Handler->refresh();\n            m_inOAuth2Authentication = false;\n",
                    "rendered": {
                      "text": "        {\n            m_inOAuth2Authentication = true;\n\n            m_oauth2Handler->setRefreshToken(m_password);\n            // Try to get new access tokens using the stored refreshtoken\n            m_oauth2Handler->refresh();\n            m_inOAuth2Authentication = false;\n",
                      "markdown": "`        {\n            m_inOAuth2Authentication = true;\n\n            m_oauth2Handler->setRefreshToken(m_password);\n            // Try to get new access tokens using the stored refreshtoken\n            m_oauth2Handler->refresh();\n            m_inOAuth2Authentication = false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-session.cxx"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 11,
                  "endLine": 81,
                  "endColumn": 19,
                  "snippet": {
                    "text": "void GDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "void GDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n        {\n",
                      "markdown": "`void GDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-session.cxx"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 26,
                  "endLine": 80,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nvoid GDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n",
                    "rendered": {
                      "text": "\nvoid GDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n",
                      "markdown": "`\nvoid GDriveSession::oauth2Authenticate()\n{\n    // treat the supplied password as refresh token\n    if (!m_password.empty())\n    {\n        try\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-session.cxx"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 46,
                  "endLine": 48,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction )\n\n{\n",
                    "rendered": {
                      "text": "                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction )\n\n{\n",
                      "markdown": "`                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n    BaseSession( baseUrl, string(), username, password, false,\n                 libcmis::OAuth2DataPtr(), verbose, initProtocolsFunction )\n\n{\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-session.cxx"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 38,
                  "endLine": 44,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nGDriveSession::GDriveSession ( string baseUrl,\n                               string username,\n                               string password,\n                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n",
                    "rendered": {
                      "text": "\nGDriveSession::GDriveSession ( string baseUrl,\n                               string username,\n                               string password,\n                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n",
                      "markdown": "`\nGDriveSession::GDriveSession ( string baseUrl,\n                               string username,\n                               string password,\n                               libcmis::OAuth2DataPtr oauth2,\n                               bool verbose,\n                               libcmis::CurlInitProtocolsFunction initProtocolsFunction) :\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 45,
                  "endLine": 193,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nvoid libcmis_property_setValues( libcmis_PropertyPtr property, const char** strValues, size_t size )\n{\n    if ( property != NULL && property->handle.get() != NULL )\n    {\n        vector< string > values;\n        for ( size_t i = 0; i < size; ++i )\n",
                    "rendered": {
                      "text": "\nvoid libcmis_property_setValues( libcmis_PropertyPtr property, const char** strValues, size_t size )\n{\n    if ( property != NULL && property->handle.get() != NULL )\n    {\n        vector< string > values;\n        for ( size_t i = 0; i < size; ++i )\n",
                      "markdown": "`\nvoid libcmis_property_setValues( libcmis_PropertyPtr property, const char** strValues, size_t size )\n{\n    if ( property != NULL && property->handle.get() != NULL )\n    {\n        vector< string > values;\n        for ( size_t i = 0; i < size; ++i )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 45,
                  "endLine": 180,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libcmis_vector_double_Ptr libcmis_property_getDoubles( libcmis_PropertyPtr property )\n{\n    libcmis_vector_double_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< double > handles = property->handle->getDoubles( );\n        values = new ( nothrow ) libcmis_vector_double( );\n",
                    "rendered": {
                      "text": "libcmis_vector_double_Ptr libcmis_property_getDoubles( libcmis_PropertyPtr property )\n{\n    libcmis_vector_double_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< double > handles = property->handle->getDoubles( );\n        values = new ( nothrow ) libcmis_vector_double( );\n",
                      "markdown": "`libcmis_vector_double_Ptr libcmis_property_getDoubles( libcmis_PropertyPtr property )\n{\n    libcmis_vector_double_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< double > handles = property->handle->getDoubles( );\n        values = new ( nothrow ) libcmis_vector_double( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 45,
                  "endLine": 166,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libcmis_vector_long_Ptr libcmis_property_getLongs( libcmis_PropertyPtr property )\n{\n    libcmis_vector_long_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< long > handles = property->handle->getLongs( );\n        values = new ( nothrow ) libcmis_vector_long( );\n",
                    "rendered": {
                      "text": "libcmis_vector_long_Ptr libcmis_property_getLongs( libcmis_PropertyPtr property )\n{\n    libcmis_vector_long_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< long > handles = property->handle->getLongs( );\n        values = new ( nothrow ) libcmis_vector_long( );\n",
                      "markdown": "`libcmis_vector_long_Ptr libcmis_property_getLongs( libcmis_PropertyPtr property )\n{\n    libcmis_vector_long_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< long > handles = property->handle->getLongs( );\n        values = new ( nothrow ) libcmis_vector_long( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 45,
                  "endLine": 152,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libcmis_vector_string_Ptr libcmis_property_getStrings( libcmis_PropertyPtr property )\n{\n    libcmis_vector_string_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< string > handles = property->handle->getStrings( );\n        values = new ( nothrow ) libcmis_vector_string( );\n",
                    "rendered": {
                      "text": "libcmis_vector_string_Ptr libcmis_property_getStrings( libcmis_PropertyPtr property )\n{\n    libcmis_vector_string_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< string > handles = property->handle->getStrings( );\n        values = new ( nothrow ) libcmis_vector_string( );\n",
                      "markdown": "`libcmis_vector_string_Ptr libcmis_property_getStrings( libcmis_PropertyPtr property )\n{\n    libcmis_vector_string_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< string > handles = property->handle->getStrings( );\n        values = new ( nothrow ) libcmis_vector_string( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 45,
                  "endLine": 138,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libcmis_vector_bool_Ptr libcmis_property_getBools( libcmis_PropertyPtr property )\n{\n    libcmis_vector_bool_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< bool > handles = property->handle->getBools( );\n        values = new ( nothrow ) libcmis_vector_bool( );\n",
                    "rendered": {
                      "text": "libcmis_vector_bool_Ptr libcmis_property_getBools( libcmis_PropertyPtr property )\n{\n    libcmis_vector_bool_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< bool > handles = property->handle->getBools( );\n        values = new ( nothrow ) libcmis_vector_bool( );\n",
                      "markdown": "`libcmis_vector_bool_Ptr libcmis_property_getBools( libcmis_PropertyPtr property )\n{\n    libcmis_vector_bool_Ptr values = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< bool > handles = property->handle->getBools( );\n        values = new ( nothrow ) libcmis_vector_bool( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 45,
                  "endLine": 124,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libcmis_vector_time_Ptr libcmis_property_getDateTimes( libcmis_PropertyPtr property )\n{\n    libcmis_vector_time_Ptr times = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< boost::posix_time::ptime > handles = property->handle->getDateTimes( );\n        times = new ( nothrow ) libcmis_vector_time( );\n",
                    "rendered": {
                      "text": "libcmis_vector_time_Ptr libcmis_property_getDateTimes( libcmis_PropertyPtr property )\n{\n    libcmis_vector_time_Ptr times = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< boost::posix_time::ptime > handles = property->handle->getDateTimes( );\n        times = new ( nothrow ) libcmis_vector_time( );\n",
                      "markdown": "`libcmis_vector_time_Ptr libcmis_property_getDateTimes( libcmis_PropertyPtr property )\n{\n    libcmis_vector_time_Ptr times = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        vector< boost::posix_time::ptime > handles = property->handle->getDateTimes( );\n        times = new ( nothrow ) libcmis_vector_time( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 45,
                  "endLine": 110,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libcmis_PropertyTypePtr libcmis_property_getPropertyType( libcmis_PropertyPtr property )\n{\n    libcmis_PropertyTypePtr type = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        libcmis::PropertyTypePtr handle = property->handle->getPropertyType( );\n        type = new ( nothrow ) libcmis_property_type( );\n",
                    "rendered": {
                      "text": "libcmis_PropertyTypePtr libcmis_property_getPropertyType( libcmis_PropertyPtr property )\n{\n    libcmis_PropertyTypePtr type = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        libcmis::PropertyTypePtr handle = property->handle->getPropertyType( );\n        type = new ( nothrow ) libcmis_property_type( );\n",
                      "markdown": "`libcmis_PropertyTypePtr libcmis_property_getPropertyType( libcmis_PropertyPtr property )\n{\n    libcmis_PropertyTypePtr type = NULL;\n    if ( property != NULL && property->handle.get( ) != NULL )\n    {\n        libcmis::PropertyTypePtr handle = property->handle->getPropertyType( );\n        type = new ( nothrow ) libcmis_property_type( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 37,
                  "endLine": 84,
                  "endColumn": 42,
                  "snippet": {
                    "text": "libcmis_PropertyPtr libcmis_property_create( libcmis_PropertyTypePtr type, const char** strValues, size_t size )\n{\n    libcmis_PropertyPtr property = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        property = new ( nothrow ) libcmis_property( );\n        if ( property )\n",
                    "rendered": {
                      "text": "libcmis_PropertyPtr libcmis_property_create( libcmis_PropertyTypePtr type, const char** strValues, size_t size )\n{\n    libcmis_PropertyPtr property = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        property = new ( nothrow ) libcmis_property( );\n        if ( property )\n",
                      "markdown": "`libcmis_PropertyPtr libcmis_property_create( libcmis_PropertyTypePtr type, const char** strValues, size_t size )\n{\n    libcmis_PropertyPtr property = NULL;\n    if ( type != NULL && type->handle.get( ) != NULL )\n    {\n        property = new ( nothrow ) libcmis_property( );\n        if ( property )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property.cxx"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 40,
                  "endLine": 74,
                  "endColumn": 45,
                  "snippet": {
                    "text": "void libcmis_vector_property_append( libcmis_vector_property_Ptr vector, libcmis_PropertyPtr item )\n{\n    if ( vector != NULL &&\n            item != NULL && item->handle.get( ) != NULL )\n    {\n        vector->handle.push_back( item->handle );\n    }\n",
                    "rendered": {
                      "text": "void libcmis_vector_property_append( libcmis_vector_property_Ptr vector, libcmis_PropertyPtr item )\n{\n    if ( vector != NULL &&\n            item != NULL && item->handle.get( ) != NULL )\n    {\n        vector->handle.push_back( item->handle );\n    }\n",
                      "markdown": "`void libcmis_vector_property_append( libcmis_vector_property_Ptr vector, libcmis_PropertyPtr item )\n{\n    if ( vector != NULL &&\n            item != NULL && item->handle.get( ) != NULL )\n    {\n        vector->handle.push_back( item->handle );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 43,
                  "endLine": 196,
                  "endColumn": 48,
                  "snippet": {
                    "text": "void libcmis_property_type_update( libcmis_PropertyTypePtr propDef,\n                                   libcmis_vector_object_type_Ptr types )\n{\n    if ( propDef != NULL && propDef->handle.get( ) != NULL && types != NULL )\n    {\n        std::vector< libcmis::ObjectTypePtr > typesHandle = types->handle;\n        propDef->handle->update( typesHandle );\n",
                    "rendered": {
                      "text": "void libcmis_property_type_update( libcmis_PropertyTypePtr propDef,\n                                   libcmis_vector_object_type_Ptr types )\n{\n    if ( propDef != NULL && propDef->handle.get( ) != NULL && types != NULL )\n    {\n        std::vector< libcmis::ObjectTypePtr > typesHandle = types->handle;\n        propDef->handle->update( typesHandle );\n",
                      "markdown": "`void libcmis_property_type_update( libcmis_PropertyTypePtr propDef,\n                                   libcmis_vector_object_type_Ptr types )\n{\n    if ( propDef != NULL && propDef->handle.get( ) != NULL && types != NULL )\n    {\n        std::vector< libcmis::ObjectTypePtr > typesHandle = types->handle;\n        propDef->handle->update( typesHandle );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 37,
                  "endLine": 188,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_property_type_isOpenChoice( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isOpenChoice( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_property_type_isOpenChoice( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isOpenChoice( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_property_type_isOpenChoice( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isOpenChoice( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 37,
                  "endLine": 179,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_property_type_isOrderable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isOrderable( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_property_type_isOrderable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isOrderable( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_property_type_isOrderable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isOrderable( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 37,
                  "endLine": 170,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_property_type_isQueryable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isQueryable( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_property_type_isQueryable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isQueryable( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_property_type_isQueryable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isQueryable( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 37,
                  "endLine": 161,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_property_type_isRequired( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isRequired( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_property_type_isRequired( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isRequired( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_property_type_isRequired( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isRequired( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 37,
                  "endLine": 152,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_property_type_isInherited( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isInherited( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_property_type_isInherited( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isInherited( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_property_type_isInherited( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isInherited( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 37,
                  "endLine": 143,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_property_type_isUpdatable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isUpdatable( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_property_type_isUpdatable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isUpdatable( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_property_type_isUpdatable( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isUpdatable( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 37,
                  "endLine": 134,
                  "endColumn": 42,
                  "snippet": {
                    "text": "bool libcmis_property_type_isMultiValued( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isMultiValued( );\n    return value;\n}\n",
                    "rendered": {
                      "text": "bool libcmis_property_type_isMultiValued( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isMultiValued( );\n    return value;\n}\n",
                      "markdown": "`bool libcmis_property_type_isMultiValued( libcmis_PropertyTypePtr type )\n{\n    bool value = false;\n    if ( type != NULL && type->handle.get( ) != NULL )\n        value = type->handle->isMultiValued( );\n    return value;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 37,
                  "endLine": 124,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_property_type_getXmlType( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getXmlType( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_property_type_getXmlType( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getXmlType( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_property_type_getXmlType( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getXmlType( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 37,
                  "endLine": 115,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nlibcmis_property_type_Type libcmis_property_type_getType( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return libcmis_property_type_Type( type->handle->getType( ) );\n    else\n        return libcmis_String;\n",
                    "rendered": {
                      "text": "\nlibcmis_property_type_Type libcmis_property_type_getType( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return libcmis_property_type_Type( type->handle->getType( ) );\n    else\n        return libcmis_String;\n",
                      "markdown": "`\nlibcmis_property_type_Type libcmis_property_type_getType( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return libcmis_property_type_Type( type->handle->getType( ) );\n    else\n        return libcmis_String;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 37,
                  "endLine": 106,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_property_type_getQueryName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getQueryName( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_property_type_getQueryName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getQueryName( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_property_type_getQueryName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getQueryName( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 37,
                  "endLine": 97,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_property_type_getDisplayName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDisplayName( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_property_type_getDisplayName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDisplayName( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_property_type_getDisplayName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getDisplayName( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 37,
                  "endLine": 88,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_property_type_getLocalNamespace( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalNamespace( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_property_type_getLocalNamespace( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalNamespace( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_property_type_getLocalNamespace( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalNamespace( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 37,
                  "endLine": 79,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_property_type_getLocalName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalName( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_property_type_getLocalName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalName( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_property_type_getLocalName( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getLocalName( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/property-type.cxx"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 37,
                  "endLine": 70,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nchar* libcmis_property_type_getId( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getId( ).c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "\nchar* libcmis_property_type_getId( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getId( ).c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`\nchar* libcmis_property_type_getId( libcmis_PropertyTypePtr type )\n{\n    if ( type != NULL && type->handle.get( ) != NULL )\n        return strdup( type->handle->getId( ).c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/NEWS"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 42,
                  "endLine": 76,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n  * Fixed a crash when server response did not contain cmis:baseTypeId\n    property (tdf#90351)\n  * Removed the requirement for non-empty password when using HTTP\n    authentication credentials\n  * Fixed build with boost 1.60 and gcc 5\n  * Fixed a few problems found by Coverity\n",
                    "rendered": {
                      "text": "\n  * Fixed a crash when server response did not contain cmis:baseTypeId\n    property (tdf#90351)\n  * Removed the requirement for non-empty password when using HTTP\n    authentication credentials\n  * Fixed build with boost 1.60 and gcc 5\n  * Fixed a few problems found by Coverity\n",
                      "markdown": "`\n  * Fixed a crash when server response did not contain cmis:baseTypeId\n    property (tdf#90351)\n  * Removed the requirement for non-empty password when using HTTP\n    authentication credentials\n  * Fixed build with boost 1.60 and gcc 5\n  * Fixed a few problems found by Coverity\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/NEWS"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 13,
                  "endLine": 20,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  * AtomPub binding\n    * Handle all the authentication methods that can be handled by\n      libcurl like Basic, NTLM...\n    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n",
                    "rendered": {
                      "text": "  * AtomPub binding\n    * Handle all the authentication methods that can be handled by\n      libcurl like Basic, NTLM...\n    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n",
                      "markdown": "`  * AtomPub binding\n    * Handle all the authentication methods that can be handled by\n      libcurl like Basic, NTLM...\n    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/NEWS"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 37,
                  "endLine": 24,
                  "snippet": {
                    "text": "    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n    * Object properties can be updated\n    * Query object types\n    * Creation of folders and documents\n    * Deletion of folders and documents\n",
                    "rendered": {
                      "text": "    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n    * Object properties can be updated\n    * Query object types\n    * Creation of folders and documents\n    * Deletion of folders and documents\n",
                      "markdown": "`    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n    * Object properties can be updated\n    * Query object types\n    * Creation of folders and documents\n    * Deletion of folders and documents\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/NEWS"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 12,
                  "endLine": 20,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  * AtomPub binding\n    * Handle all the authentication methods that can be handled by\n      libcurl like Basic, NTLM...\n    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n",
                    "rendered": {
                      "text": "  * AtomPub binding\n    * Handle all the authentication methods that can be handled by\n      libcurl like Basic, NTLM...\n    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n",
                      "markdown": "`  * AtomPub binding\n    * Handle all the authentication methods that can be handled by\n      libcurl like Basic, NTLM...\n    * Decode base64 encoded content sent by SharePoint\n    * Set the content of a document\n    * Query nodes by path\n    * Get the allowable actions for a node\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/data/gdrive/login1.html"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 42,
                  "endLine": 5,
                  "endColumn": 50,
                  "snippet": {
                    "text": "<html lang=\"en\">\n<body>\n<form novalidate=\"\" id=\"gaia_loginform\" action=\"https://login2/url\" method=\"post\">\n  <input name=\"Page\" type=\"hidden\" value=\"PasswordSeparationSignIn\">\n  <input name=\"continue\" id=\"continue\" value=\"redirectLink&amp;scope=Scope\" type=\"hidden\">\n  <input name=\"service\" id=\"service\" value=\"lso\" type=\"hidden\">\n  <input name=\"GALX\" value=\"cookie\" type=\"hidden\">\n",
                    "rendered": {
                      "text": "<html lang=\"en\">\n<body>\n<form novalidate=\"\" id=\"gaia_loginform\" action=\"https://login2/url\" method=\"post\">\n  <input name=\"Page\" type=\"hidden\" value=\"PasswordSeparationSignIn\">\n  <input name=\"continue\" id=\"continue\" value=\"redirectLink&amp;scope=Scope\" type=\"hidden\">\n  <input name=\"service\" id=\"service\" value=\"lso\" type=\"hidden\">\n  <input name=\"GALX\" value=\"cookie\" type=\"hidden\">\n",
                      "markdown": "`<html lang=\"en\">\n<body>\n<form novalidate=\"\" id=\"gaia_loginform\" action=\"https://login2/url\" method=\"post\">\n  <input name=\"Page\" type=\"hidden\" value=\"PasswordSeparationSignIn\">\n  <input name=\"continue\" id=\"continue\" value=\"redirectLink&amp;scope=Scope\" type=\"hidden\">\n  <input name=\"service\" id=\"service\" value=\"lso\" type=\"hidden\">\n  <input name=\"GALX\" value=\"cookie\" type=\"hidden\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/session-factory.cxx"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 64,
                  "endLine": 162,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    {\n        vector< RepositoryPtr > repos;\n\n        Session* session = createSession( bindingUrl, username, password,\n                                          string(), false, OAuth2DataPtr(), verbose );\n        if ( session != NULL )\n        {\n",
                    "rendered": {
                      "text": "    {\n        vector< RepositoryPtr > repos;\n\n        Session* session = createSession( bindingUrl, username, password,\n                                          string(), false, OAuth2DataPtr(), verbose );\n        if ( session != NULL )\n        {\n",
                      "markdown": "`    {\n        vector< RepositoryPtr > repos;\n\n        Session* session = createSession( bindingUrl, username, password,\n                                          string(), false, OAuth2DataPtr(), verbose );\n        if ( session != NULL )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/session-factory.cxx"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 36,
                  "endLine": 158,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    }\n\n    vector< RepositoryPtr > SessionFactory::getRepositories( string bindingUrl,\n            string username, string password, bool verbose )\n    {\n        vector< RepositoryPtr > repos;\n\n",
                    "rendered": {
                      "text": "    }\n\n    vector< RepositoryPtr > SessionFactory::getRepositories( string bindingUrl,\n            string username, string password, bool verbose )\n    {\n        vector< RepositoryPtr > repos;\n\n",
                      "markdown": "`    }\n\n    vector< RepositoryPtr > SessionFactory::getRepositories( string bindingUrl,\n            string username, string password, bool verbose )\n    {\n        vector< RepositoryPtr > repos;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/session-factory.cxx"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 26,
                  "endLine": 109,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    }\n                    // Could be SharePoint - needs NTLM authentication\n                    session = new SharePointSession( bindingUrl, username,\n                          password, verbose, g_CurlInitProtocolsFunction);\n                }\n\n                // Try the CMIS cases: we need to autodetect the binding type\n",
                    "rendered": {
                      "text": "                    }\n                    // Could be SharePoint - needs NTLM authentication\n                    session = new SharePointSession( bindingUrl, username,\n                          password, verbose, g_CurlInitProtocolsFunction);\n                }\n\n                // Try the CMIS cases: we need to autodetect the binding type\n",
                      "markdown": "`                    }\n                    // Could be SharePoint - needs NTLM authentication\n                    session = new SharePointSession( bindingUrl, username,\n                          password, verbose, g_CurlInitProtocolsFunction);\n                }\n\n                // Try the CMIS cases: we need to autodetect the binding type\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/session-factory.cxx"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 51,
                  "endLine": 92,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            {\n                libcmis::HttpResponsePtr response;\n                boost::shared_ptr< HttpSession> httpSession(\n                        new HttpSession( username, password,\n                                         noSslCheck, oauth2, verbose,\n                                         g_CurlInitProtocolsFunction) );\n\n",
                    "rendered": {
                      "text": "            {\n                libcmis::HttpResponsePtr response;\n                boost::shared_ptr< HttpSession> httpSession(\n                        new HttpSession( username, password,\n                                         noSslCheck, oauth2, verbose,\n                                         g_CurlInitProtocolsFunction) );\n\n",
                      "markdown": "`            {\n                libcmis::HttpResponsePtr response;\n                boost::shared_ptr< HttpSession> httpSession(\n                        new HttpSession( username, password,\n                                         noSslCheck, oauth2, verbose,\n                                         g_CurlInitProtocolsFunction) );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/session-factory.cxx"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 69,
                  "endLine": 84,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            }\n            else if ( bindingUrl == \"https://graph.microsoft.com/v1.0\" )\n            {\n                session = new OneDriveSession( bindingUrl, username, password,\n                                               oauth2, verbose,\n                                               g_CurlInitProtocolsFunction);\n            }\n",
                    "rendered": {
                      "text": "            }\n            else if ( bindingUrl == \"https://graph.microsoft.com/v1.0\" )\n            {\n                session = new OneDriveSession( bindingUrl, username, password,\n                                               oauth2, verbose,\n                                               g_CurlInitProtocolsFunction);\n            }\n",
                      "markdown": "`            }\n            else if ( bindingUrl == \"https://graph.microsoft.com/v1.0\" )\n            {\n                session = new OneDriveSession( bindingUrl, username, password,\n                                               oauth2, verbose,\n                                               g_CurlInitProtocolsFunction);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/session-factory.cxx"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 67,
                  "endLine": 77,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            // Try the special cases based on the binding URL\n            if ( bindingUrl == \"https://www.googleapis.com/drive/v3\" )\n            {\n                session = new GDriveSession( bindingUrl, username, password,\n                                             oauth2, verbose,\n                                             g_CurlInitProtocolsFunction);\n\n",
                    "rendered": {
                      "text": "            // Try the special cases based on the binding URL\n            if ( bindingUrl == \"https://www.googleapis.com/drive/v3\" )\n            {\n                session = new GDriveSession( bindingUrl, username, password,\n                                             oauth2, verbose,\n                                             g_CurlInitProtocolsFunction);\n\n",
                      "markdown": "`            // Try the special cases based on the binding URL\n            if ( bindingUrl == \"https://www.googleapis.com/drive/v3\" )\n            {\n                session = new GDriveSession( bindingUrl, username, password,\n                                             oauth2, verbose,\n                                             g_CurlInitProtocolsFunction);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/session-factory.cxx"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 19,
                  "endLine": 67,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    }\n\n    Session* SessionFactory::createSession( string bindingUrl, string username,\n            string password, string repository, bool noSslCheck,\n            libcmis::OAuth2DataPtr oauth2, bool verbose )\n    {\n        Session* session = NULL;\n",
                    "rendered": {
                      "text": "    }\n\n    Session* SessionFactory::createSession( string bindingUrl, string username,\n            string password, string repository, bool noSslCheck,\n            libcmis::OAuth2DataPtr oauth2, bool verbose )\n    {\n        Session* session = NULL;\n",
                      "markdown": "`    }\n\n    Session* SessionFactory::createSession( string bindingUrl, string username,\n            string password, string repository, bool noSslCheck,\n            libcmis::OAuth2DataPtr oauth2, bool verbose )\n    {\n        Session* session = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.hxx"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 73,
                  "endLine": 134,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n",
                    "rendered": {
                      "text": "        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n",
                      "markdown": "`        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.hxx"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 72,
                  "endLine": 134,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n",
                    "rendered": {
                      "text": "        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n",
                      "markdown": "`        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.hxx"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 39,
                  "endLine": 134,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n",
                    "rendered": {
                      "text": "        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n",
                      "markdown": "`        std::string createPartId( const std::string& name );\n};\n\n/** Extract stream from xs:base64Binary node using either xop:Include or base64 encoded data.\n  */\nboost::shared_ptr< std::istream > getStreamFromNode( xmlNodePtr node, RelatedMultipart& multipart );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-object-type.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-object-type.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object.cxx"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 67,
                  "endLine": 108,
                  "endColumn": 72,
                  "snippet": {
                    "text": "void WSObject::refresh( )\n{\n    libcmis::ObjectPtr object = m_session->getObject( getId( ) );\n    const WSObject* const other = dynamic_cast< WSObject* >( object.get( ) );\n    if ( other != NULL )\n        *this = *other;\n}\n",
                    "rendered": {
                      "text": "void WSObject::refresh( )\n{\n    libcmis::ObjectPtr object = m_session->getObject( getId( ) );\n    const WSObject* const other = dynamic_cast< WSObject* >( object.get( ) );\n    if ( other != NULL )\n        *this = *other;\n}\n",
                      "markdown": "`void WSObject::refresh( )\n{\n    libcmis::ObjectPtr object = m_session->getObject( getId( ) );\n    const WSObject* const other = dynamic_cast< WSObject* >( object.get( ) );\n    if ( other != NULL )\n        *this = *other;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object.cxx"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 58,
                  "endLine": 86,
                  "snippet": {
                    "text": "libcmis::ObjectPtr WSObject::updateProperties(\n        const PropertyPtrMap& properties )\n{\n    // No need to send HTTP request if there is nothing to update\n    if ( properties.empty( ) )\n    {\n        libcmis::ObjectPtr object;\n        if ( getBaseType( ) == \"cmis:document\" )\n",
                    "rendered": {
                      "text": "libcmis::ObjectPtr WSObject::updateProperties(\n        const PropertyPtrMap& properties )\n{\n    // No need to send HTTP request if there is nothing to update\n    if ( properties.empty( ) )\n    {\n        libcmis::ObjectPtr object;\n        if ( getBaseType( ) == \"cmis:document\" )\n",
                      "markdown": "`libcmis::ObjectPtr WSObject::updateProperties(\n        const PropertyPtrMap& properties )\n{\n    // No need to send HTTP request if there is nothing to update\n    if ( properties.empty( ) )\n    {\n        libcmis::ObjectPtr object;\n        if ( getBaseType( ) == \"cmis:document\" )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object.cxx"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 29,
                  "endLine": 44,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n\nWSObject::WSObject( WSSession* session, xmlNodePtr node ) :\n    libcmis::Object( session, node )\n{\n}\n\n",
                    "rendered": {
                      "text": "\n\nWSObject::WSObject( WSSession* session, xmlNodePtr node ) :\n    libcmis::Object( session, node )\n{\n}\n\n",
                      "markdown": "`\n\nWSObject::WSObject( WSSession* session, xmlNodePtr node ) :\n    libcmis::Object( session, node )\n{\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object.cxx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 50,
                  "endLine": 43,
                  "endColumn": 56,
                  "snippet": {
                    "text": "}\n\n\nWSObject::WSObject( WSSession* session, xmlNodePtr node ) :\n    libcmis::Object( session, node )\n{\n}\n",
                    "rendered": {
                      "text": "}\n\n\nWSObject::WSObject( WSSession* session, xmlNodePtr node ) :\n    libcmis::Object( session, node )\n{\n}\n",
                      "markdown": "`}\n\n\nWSObject::WSObject( WSSession* session, xmlNodePtr node ) :\n    libcmis::Object( session, node )\n{\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/folder.cxx"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 35,
                  "endLine": 46,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    \n    libcmis::FolderPtr Folder::getFolderParent( )\n    {\n        if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetFolderParent ) )\n            throw libcmis::Exception( string( \"GetFolderParent not allowed on node \" ) + getId() );\n\n        if ( m_session == NULL )\n",
                    "rendered": {
                      "text": "    \n    libcmis::FolderPtr Folder::getFolderParent( )\n    {\n        if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetFolderParent ) )\n            throw libcmis::Exception( string( \"GetFolderParent not allowed on node \" ) + getId() );\n\n        if ( m_session == NULL )\n",
                      "markdown": "`    \n    libcmis::FolderPtr Folder::getFolderParent( )\n    {\n        if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetFolderParent ) )\n            throw libcmis::Exception( string( \"GetFolderParent not allowed on node \" ) + getId() );\n\n        if ( m_session == NULL )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/folder.cxx"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 77,
                  "endLine": 47,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    libcmis::FolderPtr Folder::getFolderParent( )\n    {\n        if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetFolderParent ) )\n            throw libcmis::Exception( string( \"GetFolderParent not allowed on node \" ) + getId() );\n\n        if ( m_session == NULL )\n            throw libcmis::Exception( string( \"Session not defined on the object... weird!\" ) );\n",
                    "rendered": {
                      "text": "    libcmis::FolderPtr Folder::getFolderParent( )\n    {\n        if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetFolderParent ) )\n            throw libcmis::Exception( string( \"GetFolderParent not allowed on node \" ) + getId() );\n\n        if ( m_session == NULL )\n            throw libcmis::Exception( string( \"Session not defined on the object... weird!\" ) );\n",
                      "markdown": "`    libcmis::FolderPtr Folder::getFolderParent( )\n    {\n        if ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetFolderParent ) )\n            throw libcmis::Exception( string( \"GetFolderParent not allowed on node \" ) + getId() );\n\n        if ( m_session == NULL )\n            throw libcmis::Exception( string( \"Session not defined on the object... weird!\" ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.hxx"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 67,
                  "endLine": 54,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    public:\n        WSSession( const std::string& bindingUrl, const std::string& repositoryId,\n                   const std::string& username, const std::string& password,\n                   bool noSslCheck = false,\n                   libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                   bool verbose = false );\n",
                    "rendered": {
                      "text": "\n    public:\n        WSSession( const std::string& bindingUrl, const std::string& repositoryId,\n                   const std::string& username, const std::string& password,\n                   bool noSslCheck = false,\n                   libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                   bool verbose = false );\n",
                      "markdown": "`\n    public:\n        WSSession( const std::string& bindingUrl, const std::string& repositoryId,\n                   const std::string& username, const std::string& password,\n                   bool noSslCheck = false,\n                   libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                   bool verbose = false );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.hxx"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 39,
                  "endLine": 75,
                  "endColumn": 43,
                  "snippet": {
                    "text": "          */\n        SoapResponseFactory& getResponseFactory( ) { return m_responseFactory; }\n\n        /** Try hard to get a WSDL file at the given URL (tries to add ?wsdl if needed)\n          */\n        std::string getWsdl( std::string url, libcmis::HttpResponsePtr response );\n\n",
                    "rendered": {
                      "text": "          */\n        SoapResponseFactory& getResponseFactory( ) { return m_responseFactory; }\n\n        /** Try hard to get a WSDL file at the given URL (tries to add ?wsdl if needed)\n          */\n        std::string getWsdl( std::string url, libcmis::HttpResponsePtr response );\n\n",
                      "markdown": "`          */\n        SoapResponseFactory& getResponseFactory( ) { return m_responseFactory; }\n\n        /** Try hard to get a WSDL file at the given URL (tries to add ?wsdl if needed)\n          */\n        std::string getWsdl( std::string url, libcmis::HttpResponsePtr response );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.hxx"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 19,
                  "endLine": 81,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        std::vector< SoapResponsePtr > soapRequest( std::string& url, SoapRequest& request );\n\n        /** Get the service location URL given its name.\n          */\n        std::string getServiceUrl( std::string name );\n\n",
                    "rendered": {
                      "text": "\n        std::vector< SoapResponsePtr > soapRequest( std::string& url, SoapRequest& request );\n\n        /** Get the service location URL given its name.\n          */\n        std::string getServiceUrl( std::string name );\n\n",
                      "markdown": "`\n        std::vector< SoapResponsePtr > soapRequest( std::string& url, SoapRequest& request );\n\n        /** Get the service location URL given its name.\n          */\n        std::string getServiceUrl( std::string name );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-document.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-document.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 61,
                  "endLine": 88,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n\n        // Register the Service Document namespaces\n        libcmis::registerNamespaces( xpathCtx );\n",
                    "rendered": {
                      "text": "        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n\n        // Register the Service Document namespaces\n        libcmis::registerNamespaces( xpathCtx );\n",
                      "markdown": "`        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n\n        // Register the Service Document namespaces\n        libcmis::registerNamespaces( xpathCtx );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 51,
                  "endLine": 84,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    if ( bool( doc ) )\n    {\n        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n",
                    "rendered": {
                      "text": "    if ( bool( doc ) )\n    {\n        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n",
                      "markdown": "`    if ( bool( doc ) )\n    {\n        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 53,
                  "endLine": 51,
                  "endColumn": 61,
                  "snippet": {
                    "text": "AtomPubSession::AtomPubSession( string atomPubUrl, string repositoryId,\n        string username, string password, bool noSslCheck,\n        libcmis::OAuth2DataPtr oauth2, bool verbose ) :\n    BaseSession( atomPubUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_repository( )\n{\n    libcmis::HttpResponsePtr response;\n",
                    "rendered": {
                      "text": "AtomPubSession::AtomPubSession( string atomPubUrl, string repositoryId,\n        string username, string password, bool noSslCheck,\n        libcmis::OAuth2DataPtr oauth2, bool verbose ) :\n    BaseSession( atomPubUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_repository( )\n{\n    libcmis::HttpResponsePtr response;\n",
                      "markdown": "`AtomPubSession::AtomPubSession( string atomPubUrl, string repositoryId,\n        string username, string password, bool noSslCheck,\n        libcmis::OAuth2DataPtr oauth2, bool verbose ) :\n    BaseSession( atomPubUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_repository( )\n{\n    libcmis::HttpResponsePtr response;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 32,
                  "endLine": 49,
                  "endColumn": 40,
                  "snippet": {
                    "text": "using namespace std;\n\nAtomPubSession::AtomPubSession( string atomPubUrl, string repositoryId,\n        string username, string password, bool noSslCheck,\n        libcmis::OAuth2DataPtr oauth2, bool verbose ) :\n    BaseSession( atomPubUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_repository( )\n",
                    "rendered": {
                      "text": "using namespace std;\n\nAtomPubSession::AtomPubSession( string atomPubUrl, string repositoryId,\n        string username, string password, bool noSslCheck,\n        libcmis::OAuth2DataPtr oauth2, bool verbose ) :\n    BaseSession( atomPubUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_repository( )\n",
                      "markdown": "`using namespace std;\n\nAtomPubSession::AtomPubSession( string atomPubUrl, string repositoryId,\n        string username, string password, bool noSslCheck,\n        libcmis::OAuth2DataPtr oauth2, bool verbose ) :\n    BaseSession( atomPubUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_repository( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 74,
                  "endLine": 332,
                  "endColumn": 80,
                  "snippet": {
                    "text": "                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    libcmis::ObjectTypePtr type( new AtomObjectType( this, node ) );\n                    children.push_back( type );\n                }\n            }\n",
                    "rendered": {
                      "text": "                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    libcmis::ObjectTypePtr type( new AtomObjectType( this, node ) );\n                    children.push_back( type );\n                }\n            }\n",
                      "markdown": "`                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    libcmis::ObjectTypePtr type( new AtomObjectType( this, node ) );\n                    children.push_back( type );\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 30,
                  "endLine": 331,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                int size = xpathObj->nodesetval->nodeNr;\n                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    libcmis::ObjectTypePtr type( new AtomObjectType( this, node ) );\n                    children.push_back( type );\n                }\n",
                    "rendered": {
                      "text": "                int size = xpathObj->nodesetval->nodeNr;\n                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    libcmis::ObjectTypePtr type( new AtomObjectType( this, node ) );\n                    children.push_back( type );\n                }\n",
                      "markdown": "`                int size = xpathObj->nodesetval->nodeNr;\n                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    libcmis::ObjectTypePtr type( new AtomObjectType( this, node ) );\n                    children.push_back( type );\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 28,
                  "endLine": 282,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        if ( ( e.getErrorCode( ) == CURLE_HTTP_RETURNED_ERROR ) &&\n             ( e.getHttpStatus( ) == 404 ) )\n        {\n            string msg = \"No node corresponding to path: \";\n            msg += path;\n            throw libcmis::Exception( msg, \"objectNotFound\" );\n        }\n",
                    "rendered": {
                      "text": "        if ( ( e.getErrorCode( ) == CURLE_HTTP_RETURNED_ERROR ) &&\n             ( e.getHttpStatus( ) == 404 ) )\n        {\n            string msg = \"No node corresponding to path: \";\n            msg += path;\n            throw libcmis::Exception( msg, \"objectNotFound\" );\n        }\n",
                      "markdown": "`        if ( ( e.getErrorCode( ) == CURLE_HTTP_RETURNED_ERROR ) &&\n             ( e.getHttpStatus( ) == 404 ) )\n        {\n            string msg = \"No node corresponding to path: \";\n            msg += path;\n            throw libcmis::Exception( msg, \"objectNotFound\" );\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 61,
                  "endLine": 216,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                }\n                else if ( res == RESULT_DOCUMENT || baseType == \"cmis:document\" )\n                {\n                    cmisObject.reset( new AtomDocument( this, node ) );\n                }\n                else\n                {\n",
                    "rendered": {
                      "text": "                }\n                else if ( res == RESULT_DOCUMENT || baseType == \"cmis:document\" )\n                {\n                    cmisObject.reset( new AtomDocument( this, node ) );\n                }\n                else\n                {\n",
                      "markdown": "`                }\n                else if ( res == RESULT_DOCUMENT || baseType == \"cmis:document\" )\n                {\n                    cmisObject.reset( new AtomDocument( this, node ) );\n                }\n                else\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 59,
                  "endLine": 212,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n                if ( res == RESULT_FOLDER || baseType == \"cmis:folder\" )\n                {\n                    cmisObject.reset( new AtomFolder( this, node ) );\n                }\n                else if ( res == RESULT_DOCUMENT || baseType == \"cmis:document\" )\n                {\n",
                    "rendered": {
                      "text": "                xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n                if ( res == RESULT_FOLDER || baseType == \"cmis:folder\" )\n                {\n                    cmisObject.reset( new AtomFolder( this, node ) );\n                }\n                else if ( res == RESULT_DOCUMENT || baseType == \"cmis:document\" )\n                {\n",
                      "markdown": "`                xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n                if ( res == RESULT_FOLDER || baseType == \"cmis:folder\" )\n                {\n                    cmisObject.reset( new AtomFolder( this, node ) );\n                }\n                else if ( res == RESULT_DOCUMENT || baseType == \"cmis:document\" )\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 26,
                  "endLine": 209,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                string baseTypeReq = \"//atom:entry[1]//cmis:propertyId[@propertyDefinitionId='cmis:baseTypeId']/cmis:value/text()\";\n                string baseType = libcmis::getXPathValue( xpathCtx, baseTypeReq );\n\n                xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n                if ( res == RESULT_FOLDER || baseType == \"cmis:folder\" )\n                {\n                    cmisObject.reset( new AtomFolder( this, node ) );\n",
                    "rendered": {
                      "text": "                string baseTypeReq = \"//atom:entry[1]//cmis:propertyId[@propertyDefinitionId='cmis:baseTypeId']/cmis:value/text()\";\n                string baseType = libcmis::getXPathValue( xpathCtx, baseTypeReq );\n\n                xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n                if ( res == RESULT_FOLDER || baseType == \"cmis:folder\" )\n                {\n                    cmisObject.reset( new AtomFolder( this, node ) );\n",
                      "markdown": "`                string baseTypeReq = \"//atom:entry[1]//cmis:propertyId[@propertyDefinitionId='cmis:baseTypeId']/cmis:value/text()\";\n                string baseType = libcmis::getXPathValue( xpathCtx, baseTypeReq );\n\n                xmlNodePtr node = xpathObj->nodesetval->nodeTab[0];\n                if ( res == RESULT_FOLDER || baseType == \"cmis:folder\" )\n                {\n                    cmisObject.reset( new AtomFolder( this, node ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 50,
                  "endLine": 131,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        xmlXPathFreeContext( xpathCtx );\n    }\n    else\n        throw libcmis::Exception( \"Failed to parse service document\" );\n}\n\nvoid AtomPubSession::initialize( libcmis::HttpResponsePtr response )\n",
                    "rendered": {
                      "text": "        xmlXPathFreeContext( xpathCtx );\n    }\n    else\n        throw libcmis::Exception( \"Failed to parse service document\" );\n}\n\nvoid AtomPubSession::initialize( libcmis::HttpResponsePtr response )\n",
                      "markdown": "`        xmlXPathFreeContext( xpathCtx );\n    }\n    else\n        throw libcmis::Exception( \"Failed to parse service document\" );\n}\n\nvoid AtomPubSession::initialize( libcmis::HttpResponsePtr response )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 53,
                  "endLine": 86,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n\n",
                    "rendered": {
                      "text": "        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n\n",
                      "markdown": "`        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.cxx"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 40,
                  "endLine": 83,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    if ( bool( doc ) )\n    {\n        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n",
                    "rendered": {
                      "text": "\n    if ( bool( doc ) )\n    {\n        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n",
                      "markdown": "`\n    if ( bool( doc ) )\n    {\n        // Check that we have an AtomPub service document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"service\" ) ) )\n            throw libcmis::Exception( \"Not an atompub service document\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 24,
                  "endLine": 574,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    string unescape( const string& str )\n    {\n        std::unique_ptr< char, void(*)( void* ) > unescaped{ curl_easy_unescape( NULL, str.c_str(), str.length(), NULL ), curl_free };\n        return unescaped.get();\n    }\n}\n",
                    "rendered": {
                      "text": "    string unescape( const string& str )\n    {\n        std::unique_ptr< char, void(*)( void* ) > unescaped{ curl_easy_unescape( NULL, str.c_str(), str.length(), NULL ), curl_free };\n        return unescaped.get();\n    }\n}\n",
                      "markdown": "`    string unescape( const string& str )\n    {\n        std::unique_ptr< char, void(*)( void* ) > unescaped{ curl_easy_unescape( NULL, str.c_str(), str.length(), NULL ), curl_free };\n        return unescaped.get();\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 22,
                  "endLine": 568,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    string escape( const string& str )\n    {\n        std::unique_ptr< char, void(*)( void* ) > escaped{ curl_easy_escape( NULL, str.c_str(), str.length() ), curl_free };\n        return escaped.get();\n    }\n\n    string unescape( const string& str )\n",
                    "rendered": {
                      "text": "    string escape( const string& str )\n    {\n        std::unique_ptr< char, void(*)( void* ) > escaped{ curl_easy_escape( NULL, str.c_str(), str.length() ), curl_free };\n        return escaped.get();\n    }\n\n    string unescape( const string& str )\n",
                      "markdown": "`    string escape( const string& str )\n    {\n        std::unique_ptr< char, void(*)( void* ) > escaped{ curl_easy_escape( NULL, str.c_str(), str.length() ), curl_free };\n        return escaped.get();\n    }\n\n    string unescape( const string& str )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 47,
                  "endLine": 297,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        m_data( )\n    {\n        m_stream.reset( new stringstream( ) );\n        m_data.reset( new EncodedData( m_stream.get( ) ) );\n    }\n\n    void registerNamespaces( xmlXPathContextPtr xpathCtx )\n",
                    "rendered": {
                      "text": "        m_data( )\n    {\n        m_stream.reset( new stringstream( ) );\n        m_data.reset( new EncodedData( m_stream.get( ) ) );\n    }\n\n    void registerNamespaces( xmlXPathContextPtr xpathCtx )\n",
                      "markdown": "`        m_data( )\n    {\n        m_stream.reset( new stringstream( ) );\n        m_data.reset( new EncodedData( m_stream.get( ) ) );\n    }\n\n    void registerNamespaces( xmlXPathContextPtr xpathCtx )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 27,
                  "endLine": 523,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    {\n        stringstream stream;\n        EncodedData data( &stream );\n        data.setEncoding( \"base64\" );\n        data.encode( ( void * )str.c_str( ), size_t( 1 ), str.size() );\n        data.finish( );\n        return stream.str();\n",
                    "rendered": {
                      "text": "    {\n        stringstream stream;\n        EncodedData data( &stream );\n        data.setEncoding( \"base64\" );\n        data.encode( ( void * )str.c_str( ), size_t( 1 ), str.size() );\n        data.finish( );\n        return stream.str();\n",
                      "markdown": "`    {\n        stringstream stream;\n        EncodedData data( &stream );\n        data.setEncoding( \"base64\" );\n        data.encode( ( void * )str.c_str( ), size_t( 1 ), str.size() );\n        data.finish( );\n        return stream.str();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 39,
                  "endLine": 172,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n            {\n",
                    "rendered": {
                      "text": "    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n            {\n",
                      "markdown": "`    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n            {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 37,
                  "endLine": 171,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n",
                    "rendered": {
                      "text": "\n    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n",
                      "markdown": "`\n    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 39,
                  "endLine": 161,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    void EncodedData::encode( void* buf, size_t size, size_t nmemb )\n    {\n        m_decode = false;\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            encodeBase64( ( const char* )buf, size * nmemb );\n        }\n",
                    "rendered": {
                      "text": "    void EncodedData::encode( void* buf, size_t size, size_t nmemb )\n    {\n        m_decode = false;\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            encodeBase64( ( const char* )buf, size * nmemb );\n        }\n",
                      "markdown": "`    void EncodedData::encode( void* buf, size_t size, size_t nmemb )\n    {\n        m_decode = false;\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            encodeBase64( ( const char* )buf, size * nmemb );\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 39,
                  "endLine": 150,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    void EncodedData::decode( void* buf, size_t size, size_t nmemb )\n    {\n        m_decode = true;\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            decodeBase64( ( const char* )buf, size * nmemb );\n        }\n",
                    "rendered": {
                      "text": "    void EncodedData::decode( void* buf, size_t size, size_t nmemb )\n    {\n        m_decode = true;\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            decodeBase64( ( const char* )buf, size * nmemb );\n        }\n",
                      "markdown": "`    void EncodedData::decode( void* buf, size_t size, size_t nmemb )\n    {\n        m_decode = true;\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            decodeBase64( ( const char* )buf, size * nmemb );\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 60,
                  "endLine": 459,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        string str;\n        if ( !time.is_special( ) )\n        {\n            str = boost::posix_time::to_iso_extended_string( time );\n            str += \"Z\";\n        }\n        return str;\n",
                    "rendered": {
                      "text": "        string str;\n        if ( !time.is_special( ) )\n        {\n            str = boost::posix_time::to_iso_extended_string( time );\n            str += \"Z\";\n        }\n        return str;\n",
                      "markdown": "`        string str;\n        if ( !time.is_special( ) )\n        {\n            str = boost::posix_time::to_iso_extended_string( time );\n            str += \"Z\";\n        }\n        return str;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 50,
                  "endLine": 454,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        return t;\n    }\n\n    string writeDateTime( boost::posix_time::ptime time )\n    {\n        string str;\n        if ( !time.is_special( ) )\n",
                    "rendered": {
                      "text": "        return t;\n    }\n\n    string writeDateTime( boost::posix_time::ptime time )\n    {\n        string str;\n        if ( !time.is_special( ) )\n",
                      "markdown": "`        return t;\n    }\n\n    string writeDateTime( boost::posix_time::ptime time )\n    {\n        string str;\n        if ( !time.is_special( ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 40,
                  "endLine": 398,
                  "snippet": {
                    "text": "\n        size_t teePos = dateTimeStr.find( 'T' );\n        if ( teePos == string::npos || teePos == dateTimeStr.size() - 1 )\n            return t; // obviously not a time\n\n        string noTzStr = dateTimeStr.substr( 0, teePos + 1 );\n        string timeStr = dateTimeStr.substr( teePos + 1 );\n\n",
                    "rendered": {
                      "text": "\n        size_t teePos = dateTimeStr.find( 'T' );\n        if ( teePos == string::npos || teePos == dateTimeStr.size() - 1 )\n            return t; // obviously not a time\n\n        string noTzStr = dateTimeStr.substr( 0, teePos + 1 );\n        string timeStr = dateTimeStr.substr( teePos + 1 );\n\n",
                      "markdown": "`\n        size_t teePos = dateTimeStr.find( 'T' );\n        if ( teePos == string::npos || teePos == dateTimeStr.size() - 1 )\n            return t; // obviously not a time\n\n        string noTzStr = dateTimeStr.substr( 0, teePos + 1 );\n        string timeStr = dateTimeStr.substr( teePos + 1 );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 40,
                  "endLine": 394,
                  "snippet": {
                    "text": "        boost::posix_time::time_duration tzOffset( boost::posix_time::duration_from_string( \"+00:00\" ) );\n\n        if ( dateTimeStr.empty( ) )\n            return t; // obviously not a time\n\n        size_t teePos = dateTimeStr.find( 'T' );\n        if ( teePos == string::npos || teePos == dateTimeStr.size() - 1 )\n            return t; // obviously not a time\n",
                    "rendered": {
                      "text": "        boost::posix_time::time_duration tzOffset( boost::posix_time::duration_from_string( \"+00:00\" ) );\n\n        if ( dateTimeStr.empty( ) )\n            return t; // obviously not a time\n\n        size_t teePos = dateTimeStr.find( 'T' );\n        if ( teePos == string::npos || teePos == dateTimeStr.size() - 1 )\n            return t; // obviously not a time\n",
                      "markdown": "`        boost::posix_time::time_duration tzOffset( boost::posix_time::duration_from_string( \"+00:00\" ) );\n\n        if ( dateTimeStr.empty( ) )\n            return t; // obviously not a time\n\n        size_t teePos = dateTimeStr.find( 'T' );\n        if ( teePos == string::npos || teePos == dateTimeStr.size() - 1 )\n            return t; // obviously not a time\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 18,
                  "endLine": 389,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    boost::posix_time::ptime parseDateTime( const string& dateTimeStr )\n    {\n        boost::posix_time::ptime t( boost::date_time::not_a_date_time );\n        // Get the time zone offset\n        boost::posix_time::time_duration tzOffset( boost::posix_time::duration_from_string( \"+00:00\" ) );\n\n        if ( dateTimeStr.empty( ) )\n",
                    "rendered": {
                      "text": "    boost::posix_time::ptime parseDateTime( const string& dateTimeStr )\n    {\n        boost::posix_time::ptime t( boost::date_time::not_a_date_time );\n        // Get the time zone offset\n        boost::posix_time::time_duration tzOffset( boost::posix_time::duration_from_string( \"+00:00\" ) );\n\n        if ( dateTimeStr.empty( ) )\n",
                      "markdown": "`    boost::posix_time::ptime parseDateTime( const string& dateTimeStr )\n    {\n        boost::posix_time::ptime t( boost::date_time::not_a_date_time );\n        // Get the time zone offset\n        boost::posix_time::time_duration tzOffset( boost::posix_time::duration_from_string( \"+00:00\" ) );\n\n        if ( dateTimeStr.empty( ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/xml-utils.cxx"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 36,
                  "endLine": 171,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n",
                    "rendered": {
                      "text": "\n    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n",
                      "markdown": "`\n    void EncodedData::finish( )\n    {\n        // Flushes the last bytes in base64 encoding / decoding if any\n        if ( 0 == m_encoding.compare( \"base64\" ) )\n        {\n            if ( m_decode && ( m_pendingValue != 0 || m_pendingRank != 0 || m_missingBytes != 0 ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-object.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-object.hxx"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 3,
                  "endLine": 39,
                  "endColumn": 8,
                  "snippet": {
                    "text": "/** Class representing an object for Google Drive protocol.\n\n    This class overrides quite a number of its parent class methods to\n    git the Google Drive API into the libcmis API.\n\n    In order to reuse more of the base Object class, this class needs\n    to map the main properties (like id, name, etc) to CMIS property\n",
                    "rendered": {
                      "text": "/** Class representing an object for Google Drive protocol.\n\n    This class overrides quite a number of its parent class methods to\n    git the Google Drive API into the libcmis API.\n\n    In order to reuse more of the base Object class, this class needs\n    to map the main properties (like id, name, etc) to CMIS property\n",
                      "markdown": "`/** Class representing an object for Google Drive protocol.\n\n    This class overrides quite a number of its parent class methods to\n    git the Google Drive API into the libcmis API.\n\n    In order to reuse more of the base Object class, this class needs\n    to map the main properties (like id, name, etc) to CMIS property\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-object.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-document.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-document.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 40,
                  "endLine": 235,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_SessionPtr session = libcmis_createSession(\n            bindingUrl, NULL, username, password, false, NULL, verbose, error );\n    libcmis_vector_Repository_Ptr repositories = libcmis_session_getRepositories( session );\n    libcmis_session_free( session );\n    return repositories;\n",
                    "rendered": {
                      "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_SessionPtr session = libcmis_createSession(\n            bindingUrl, NULL, username, password, false, NULL, verbose, error );\n    libcmis_vector_Repository_Ptr repositories = libcmis_session_getRepositories( session );\n    libcmis_session_free( session );\n    return repositories;\n",
                      "markdown": "`        libcmis_ErrorPtr error )\n{\n    libcmis_SessionPtr session = libcmis_createSession(\n            bindingUrl, NULL, username, password, false, NULL, verbose, error );\n    libcmis_vector_Repository_Ptr repositories = libcmis_session_getRepositories( session );\n    libcmis_session_free( session );\n    return repositories;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 14,
                  "endLine": 230,
                  "endColumn": 22,
                  "snippet": {
                    "text": "libcmis_vector_Repository_Ptr libcmis_getRepositories(\n        char* bindingUrl,\n        char* username,\n        char* password,\n        bool  verbose,\n        libcmis_ErrorPtr error )\n{\n",
                    "rendered": {
                      "text": "libcmis_vector_Repository_Ptr libcmis_getRepositories(\n        char* bindingUrl,\n        char* username,\n        char* password,\n        bool  verbose,\n        libcmis_ErrorPtr error )\n{\n",
                      "markdown": "`libcmis_vector_Repository_Ptr libcmis_getRepositories(\n        char* bindingUrl,\n        char* username,\n        char* password,\n        bool  verbose,\n        libcmis_ErrorPtr error )\n{\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 30,
                  "endLine": 202,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        libcmis::Session* handle = libcmis::SessionFactory::createSession(\n                createString( bindingUrl ),\n                createString( username ),\n                createString( password ),\n                createString( repositoryId ), noSslCheck, oauth2Handle, verbose );\n        session = new libcmis_session( );\n        session->handle = handle;\n",
                    "rendered": {
                      "text": "        libcmis::Session* handle = libcmis::SessionFactory::createSession(\n                createString( bindingUrl ),\n                createString( username ),\n                createString( password ),\n                createString( repositoryId ), noSslCheck, oauth2Handle, verbose );\n        session = new libcmis_session( );\n        session->handle = handle;\n",
                      "markdown": "`        libcmis::Session* handle = libcmis::SessionFactory::createSession(\n                createString( bindingUrl ),\n                createString( username ),\n                createString( password ),\n                createString( repositoryId ), noSslCheck, oauth2Handle, verbose );\n        session = new libcmis_session( );\n        session->handle = handle;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 14,
                  "endLine": 185,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        char* bindingUrl,\n        char* repositoryId,\n        char* username,\n        char* password,\n        bool noSslCheck,\n        libcmis_OAuth2DataPtr oauth2,\n        bool  verbose,\n",
                    "rendered": {
                      "text": "        char* bindingUrl,\n        char* repositoryId,\n        char* username,\n        char* password,\n        bool noSslCheck,\n        libcmis_OAuth2DataPtr oauth2,\n        bool  verbose,\n",
                      "markdown": "`        char* bindingUrl,\n        char* repositoryId,\n        char* username,\n        char* password,\n        bool noSslCheck,\n        libcmis_OAuth2DataPtr oauth2,\n        bool  verbose,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 8,
                  "endLine": 89,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n        // Update the username and password with the input\n        username = user;\n        password = pass;\n\n        return result;\n    }\n",
                    "rendered": {
                      "text": "\n        // Update the username and password with the input\n        username = user;\n        password = pass;\n\n        return result;\n    }\n",
                      "markdown": "`\n        // Update the username and password with the input\n        username = user;\n        password = pass;\n\n        return result;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 35,
                  "endLine": 87,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n        bool result = m_callback( user, pass );\n\n        // Update the username and password with the input\n        username = user;\n        password = pass;\n\n",
                    "rendered": {
                      "text": "\n        bool result = m_callback( user, pass );\n\n        // Update the username and password with the input\n        username = user;\n        password = pass;\n\n",
                      "markdown": "`\n        bool result = m_callback( user, pass );\n\n        // Update the username and password with the input\n        username = user;\n        password = pass;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 22,
                  "endLine": 82,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        strncpy(user, username.c_str( ), sizeof( user ) );\n        user[CRED_MAX_LEN - 1] = '\\0';\n        char pass[CRED_MAX_LEN];\n        strncpy(pass, password.c_str( ), sizeof( pass ) );\n        pass[CRED_MAX_LEN - 1] = '\\0';\n\n        bool result = m_callback( user, pass );\n",
                    "rendered": {
                      "text": "        strncpy(user, username.c_str( ), sizeof( user ) );\n        user[CRED_MAX_LEN - 1] = '\\0';\n        char pass[CRED_MAX_LEN];\n        strncpy(pass, password.c_str( ), sizeof( pass ) );\n        pass[CRED_MAX_LEN - 1] = '\\0';\n\n        bool result = m_callback( user, pass );\n",
                      "markdown": "`        strncpy(user, username.c_str( ), sizeof( user ) );\n        user[CRED_MAX_LEN - 1] = '\\0';\n        char pass[CRED_MAX_LEN];\n        strncpy(pass, password.c_str( ), sizeof( pass ) );\n        pass[CRED_MAX_LEN - 1] = '\\0';\n\n        bool result = m_callback( user, pass );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 50,
                  "endLine": 74,
                  "endColumn": 58,
                  "snippet": {
                    "text": "         * big enough for practical purposes.\n         *\n         * It might be a better idea to change the callback's signature\n         * to bool ( * )( char** username, char** password )\n         * and make it the callee's responsibility to reallocate the\n         * strings if it needs to.\n         */\n",
                    "rendered": {
                      "text": "         * big enough for practical purposes.\n         *\n         * It might be a better idea to change the callback's signature\n         * to bool ( * )( char** username, char** password )\n         * and make it the callee's responsibility to reallocate the\n         * strings if it needs to.\n         */\n",
                      "markdown": "`         * big enough for practical purposes.\n         *\n         * It might be a better idea to change the callback's signature\n         * to bool ( * )( char** username, char** password )\n         * and make it the callee's responsibility to reallocate the\n         * strings if it needs to.\n         */\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 55,
                  "endLine": 68,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n         * the passed values as defaults in some dialog or so). But then\n         * there is no guarantee that the new username/password will\n         * not be longer than the present one, in which case it will\n         * not fit into the available space! For now, use a buffer size\n         * big enough for practical purposes.\n",
                    "rendered": {
                      "text": "        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n         * the passed values as defaults in some dialog or so). But then\n         * there is no guarantee that the new username/password will\n         * not be longer than the present one, in which case it will\n         * not fit into the available space! For now, use a buffer size\n         * big enough for practical purposes.\n",
                      "markdown": "`        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n         * the passed values as defaults in some dialog or so). But then\n         * there is no guarantee that the new username/password will\n         * not be longer than the present one, in which case it will\n         * not fit into the available space! For now, use a buffer size\n         * big enough for practical purposes.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 44,
                  "endLine": 66,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n         * the passed values as defaults in some dialog or so). But then\n         * there is no guarantee that the new username/password will\n         * not be longer than the present one, in which case it will\n",
                    "rendered": {
                      "text": "    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n         * the passed values as defaults in some dialog or so). But then\n         * there is no guarantee that the new username/password will\n         * not be longer than the present one, in which case it will\n",
                      "markdown": "`    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n         * the passed values as defaults in some dialog or so). But then\n         * there is no guarantee that the new username/password will\n         * not be longer than the present one, in which case it will\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 77,
                  "endLine": 63,
                  "endColumn": 85,
                  "snippet": {
                    "text": "            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n",
                    "rendered": {
                      "text": "            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n",
                      "markdown": "`            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        /* NOTE: As I understand this, the callback is responsible for\n         * filling the correct username and password (possibly using\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/session-factory.cxx"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 72,
                  "endLine": 60,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            }\n            virtual ~WrapperAuthProvider( ) { };\n\n            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n",
                    "rendered": {
                      "text": "            }\n            virtual ~WrapperAuthProvider( ) { };\n\n            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n",
                      "markdown": "`            }\n            virtual ~WrapperAuthProvider( ) { };\n\n            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool WrapperAuthProvider::authenticationQuery( string& username, string& password )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/repository.cxx"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 53,
                  "endLine": 179,
                  "endColumn": 58,
                  "snippet": {
                    "text": "char* libcmis_repository_getPrincipalAnyone( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getPrincipalAnyone( ).get( ) != NULL )\n        return strdup( repository->handle->getPrincipalAnyone( )->c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "char* libcmis_repository_getPrincipalAnyone( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getPrincipalAnyone( ).get( ) != NULL )\n        return strdup( repository->handle->getPrincipalAnyone( )->c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`char* libcmis_repository_getPrincipalAnyone( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getPrincipalAnyone( ).get( ) != NULL )\n        return strdup( repository->handle->getPrincipalAnyone( )->c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/repository.cxx"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 56,
                  "endLine": 169,
                  "endColumn": 61,
                  "snippet": {
                    "text": "char* libcmis_repository_getPrincipalAnonymous( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getPrincipalAnonymous( ).get( ) != NULL )\n        return strdup( repository->handle->getPrincipalAnonymous( )->c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "char* libcmis_repository_getPrincipalAnonymous( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getPrincipalAnonymous( ).get( ) != NULL )\n        return strdup( repository->handle->getPrincipalAnonymous( )->c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`char* libcmis_repository_getPrincipalAnonymous( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getPrincipalAnonymous( ).get( ) != NULL )\n        return strdup( repository->handle->getPrincipalAnonymous( )->c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/repository.cxx"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 51,
                  "endLine": 159,
                  "endColumn": 56,
                  "snippet": {
                    "text": "char* libcmis_repository_getThinClientUri( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getThinClientUri( ).get( ) != NULL )\n        return strdup( repository->handle->getThinClientUri( )->c_str( ) );\n    else\n        return NULL;\n",
                    "rendered": {
                      "text": "char* libcmis_repository_getThinClientUri( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getThinClientUri( ).get( ) != NULL )\n        return strdup( repository->handle->getThinClientUri( )->c_str( ) );\n    else\n        return NULL;\n",
                      "markdown": "`char* libcmis_repository_getThinClientUri( libcmis_RepositoryPtr repository )\n{\n    if ( repository != NULL && repository->handle != NULL &&\n            repository->handle->getThinClientUri( ).get( ) != NULL )\n        return strdup( repository->handle->getThinClientUri( )->c_str( ) );\n    else\n        return NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/repository.cxx"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 75,
                  "endLine": 70,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n    if ( repository )\n    {\n        libcmis::RepositoryPtr handle( new ( nothrow ) libcmis::Repository( node ) );\n        repository->handle = handle;\n    }\n\n",
                    "rendered": {
                      "text": "\n    if ( repository )\n    {\n        libcmis::RepositoryPtr handle( new ( nothrow ) libcmis::Repository( node ) );\n        repository->handle = handle;\n    }\n\n",
                      "markdown": "`\n    if ( repository )\n    {\n        libcmis::RepositoryPtr handle( new ( nothrow ) libcmis::Repository( node ) );\n        repository->handle = handle;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/repository.cxx"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 59,
                  "endLine": 64,
                  "endColumn": 65,
                  "snippet": {
                    "text": "}\n\n\nlibcmis_RepositoryPtr libcmis_repository_create( xmlNodePtr node )\n{\n    libcmis_RepositoryPtr repository = new ( nothrow ) libcmis_repository( );\n\n",
                    "rendered": {
                      "text": "}\n\n\nlibcmis_RepositoryPtr libcmis_repository_create( xmlNodePtr node )\n{\n    libcmis_RepositoryPtr repository = new ( nothrow ) libcmis_repository( );\n\n",
                      "markdown": "`}\n\n\nlibcmis_RepositoryPtr libcmis_repository_create( xmlNodePtr node )\n{\n    libcmis_RepositoryPtr repository = new ( nothrow ) libcmis_repository( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 13,
                  "endLine": 8,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# The contents of this file are subject to the Mozilla Public License Version\n# 1.1 (the \"License\"); you may not use this file except in compliance with\n# the License or as specified alternatively below. You may obtain a copy of\n# the License at http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": "# The contents of this file are subject to the Mozilla Public License Version\n# 1.1 (the \"License\"); you may not use this file except in compliance with\n# the License or as specified alternatively below. You may obtain a copy of\n# the License at http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "`# The contents of this file are subject to the Mozilla Public License Version\n# 1.1 (the \"License\"); you may not use this file except in compliance with\n# the License or as specified alternatively below. You may obtain a copy of\n# the License at http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 132,
                  "endLine": 136,
                  "endColumn": 137,
                  "snippet": {
                    "text": "doc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# Cleanup the test folder to remove all traces of the tests\ncmis_client delete $test_folder_id\n",
                    "rendered": {
                      "text": "doc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# Cleanup the test folder to remove all traces of the tests\ncmis_client delete $test_folder_id\n",
                      "markdown": "`doc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# Cleanup the test folder to remove all traces of the tests\ncmis_client delete $test_folder_id\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 118,
                  "endLine": 136,
                  "endColumn": 124,
                  "snippet": {
                    "text": "doc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# Cleanup the test folder to remove all traces of the tests\ncmis_client delete $test_folder_id\n",
                    "rendered": {
                      "text": "doc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# Cleanup the test folder to remove all traces of the tests\ncmis_client delete $test_folder_id\n",
                      "markdown": "`doc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# Cleanup the test folder to remove all traces of the tests\ncmis_client delete $test_folder_id\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 55,
                  "endLine": 133,
                  "endColumn": 60,
                  "snippet": {
                    "text": "doc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n",
                    "rendered": {
                      "text": "doc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n",
                      "markdown": "`doc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 41,
                  "endLine": 133,
                  "endColumn": 47,
                  "snippet": {
                    "text": "doc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n",
                    "rendered": {
                      "text": "doc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n",
                      "markdown": "`doc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n\n# TODO Checkin the document\ndoc1_checkIn=`cmis_client --input-file $file_path --input-type $file_mime --message checkin_message checkin $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 154,
                  "endLine": 130,
                  "endColumn": 159,
                  "snippet": {
                    "text": "# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n",
                    "rendered": {
                      "text": "# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n",
                      "markdown": "`# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 140,
                  "endLine": 130,
                  "endColumn": 146,
                  "snippet": {
                    "text": "# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n",
                    "rendered": {
                      "text": "# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n",
                      "markdown": "`# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\ndoc1_pwc=`cmis_client checkout $doc1_id | grep '^Id:' | cut -d ' ' -f 2`\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 40,
                  "endLine": 129,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\n",
                    "rendered": {
                      "text": "\n# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\n",
                      "markdown": "`\n# Create a versionable document\nfile_path=NEWS\nfile_mime=`file --mime-type $file_path | cut -d ' ' -f 2`\ndoc1_id=`cmis_client --object-type $versionable_type --input-file $file_path --input-type $file_mime create-document $test_folder_id doc_1 | grep '^Id:' | cut -d ' ' -f 2`\n\n# Checkout the document\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 84,
                  "endLine": 122,
                  "endColumn": 89,
                  "snippet": {
                    "text": "\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\ntest_folder_id=`cmis_client create-folder $ROOT_ID $test_folder_name | grep '^Id:' | cut -d ' ' -f 2`\n\n# Get a Versionable document type, not alway cmis:document for all servers\nversionable_type=`get_versionable_type \"cmis:document\"`\n",
                    "rendered": {
                      "text": "\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\ntest_folder_id=`cmis_client create-folder $ROOT_ID $test_folder_name | grep '^Id:' | cut -d ' ' -f 2`\n\n# Get a Versionable document type, not alway cmis:document for all servers\nversionable_type=`get_versionable_type \"cmis:document\"`\n",
                      "markdown": "`\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\ntest_folder_id=`cmis_client create-folder $ROOT_ID $test_folder_name | grep '^Id:' | cut -d ' ' -f 2`\n\n# Get a Versionable document type, not alway cmis:document for all servers\nversionable_type=`get_versionable_type \"cmis:document\"`\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 70,
                  "endLine": 122,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\ntest_folder_id=`cmis_client create-folder $ROOT_ID $test_folder_name | grep '^Id:' | cut -d ' ' -f 2`\n\n# Get a Versionable document type, not alway cmis:document for all servers\nversionable_type=`get_versionable_type \"cmis:document\"`\n",
                    "rendered": {
                      "text": "\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\ntest_folder_id=`cmis_client create-folder $ROOT_ID $test_folder_name | grep '^Id:' | cut -d ' ' -f 2`\n\n# Get a Versionable document type, not alway cmis:document for all servers\nversionable_type=`get_versionable_type \"cmis:document\"`\n",
                      "markdown": "`\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\ntest_folder_id=`cmis_client create-folder $ROOT_ID $test_folder_name | grep '^Id:' | cut -d ' ' -f 2`\n\n# Get a Versionable document type, not alway cmis:document for all servers\nversionable_type=`get_versionable_type \"cmis:document\"`\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 46,
                  "endLine": 118,
                  "endColumn": 51,
                  "snippet": {
                    "text": "}\n\n#First get the Root Id\nROOT_ID=`cmis_client show-root | grep '^Id:' | cut -d ' ' -f 2`\n\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\n",
                    "rendered": {
                      "text": "}\n\n#First get the Root Id\nROOT_ID=`cmis_client show-root | grep '^Id:' | cut -d ' ' -f 2`\n\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\n",
                      "markdown": "`}\n\n#First get the Root Id\nROOT_ID=`cmis_client show-root | grep '^Id:' | cut -d ' ' -f 2`\n\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 32,
                  "endLine": 118,
                  "endColumn": 38,
                  "snippet": {
                    "text": "}\n\n#First get the Root Id\nROOT_ID=`cmis_client show-root | grep '^Id:' | cut -d ' ' -f 2`\n\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\n",
                    "rendered": {
                      "text": "}\n\n#First get the Root Id\nROOT_ID=`cmis_client show-root | grep '^Id:' | cut -d ' ' -f 2`\n\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\n",
                      "markdown": "`}\n\n#First get the Root Id\nROOT_ID=`cmis_client show-root | grep '^Id:' | cut -d ' ' -f 2`\n\n# Create a test folder\ntest_folder_name=$BASE_FOLDER\"/test-$$\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 124,
                  "endLine": 105,
                  "endColumn": 129,
                  "snippet": {
                    "text": "        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n",
                    "rendered": {
                      "text": "        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n",
                      "markdown": "`        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 93,
                  "endLine": 105,
                  "endColumn": 99,
                  "snippet": {
                    "text": "        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n",
                    "rendered": {
                      "text": "        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n",
                      "markdown": "`        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 53,
                  "endLine": 105,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n",
                    "rendered": {
                      "text": "        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n",
                      "markdown": "`        versionable_type=$test_type\n    else\n        # Otherwise, loop over its children\n        children=`cmis_client type-by-id $test_type | sed -n -e '/Children type/,/^[^ ]/ p' | grep -e '^\\ ' | tr '()' '\\t' | cut -f 2`\n        for type_id in $children; do\n            versionable_type=`get_versionable_type $type_id`\n            if test \"z$versionable_type\" != \"z\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 73,
                  "endLine": 100,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    test_type=$1\n\n    # Is test_type versionable?\n    versionable=`cmis_client type-by-id $test_type | grep ^Versionable: | cut -d ' ' -f 2`\n    if test \"z$versionable\" == \"z1\"; then\n        versionable_type=$test_type\n    else\n",
                    "rendered": {
                      "text": "    test_type=$1\n\n    # Is test_type versionable?\n    versionable=`cmis_client type-by-id $test_type | grep ^Versionable: | cut -d ' ' -f 2`\n    if test \"z$versionable\" == \"z1\"; then\n        versionable_type=$test_type\n    else\n",
                      "markdown": "`    test_type=$1\n\n    # Is test_type versionable?\n    versionable=`cmis_client type-by-id $test_type | grep ^Versionable: | cut -d ' ' -f 2`\n    if test \"z$versionable\" == \"z1\"; then\n        versionable_type=$test_type\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 52,
                  "endLine": 100,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    test_type=$1\n\n    # Is test_type versionable?\n    versionable=`cmis_client type-by-id $test_type | grep ^Versionable: | cut -d ' ' -f 2`\n    if test \"z$versionable\" == \"z1\"; then\n        versionable_type=$test_type\n    else\n",
                    "rendered": {
                      "text": "    test_type=$1\n\n    # Is test_type versionable?\n    versionable=`cmis_client type-by-id $test_type | grep ^Versionable: | cut -d ' ' -f 2`\n    if test \"z$versionable\" == \"z1\"; then\n        versionable_type=$test_type\n    else\n",
                      "markdown": "`    test_type=$1\n\n    # Is test_type versionable?\n    versionable=`cmis_client type-by-id $test_type | grep ^Versionable: | cut -d ' ' -f 2`\n    if test \"z$versionable\" == \"z1\"; then\n        versionable_type=$test_type\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/cmis-test.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 33,
                  "endLine": 21,
                  "endColumn": 38,
                  "snippet": {
                    "text": "#\n# All Rights Reserved.\n#\n# For minor contributions see the git repository.\n#\n# Alternatively, the contents of this file may be used under the terms of\n# either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": "#\n# All Rights Reserved.\n#\n# For minor contributions see the git repository.\n#\n# Alternatively, the contents of this file may be used under the terms of\n# either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "`#\n# All Rights Reserved.\n#\n# For minor contributions see the git repository.\n#\n# Alternatively, the contents of this file may be used under the terms of\n# either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/repository.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/repository.hxx"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 84,
                  "endLine": 113,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\n        private:\n\n            static std::map< Capability, std::string > parseCapabilities( xmlNodePtr node );\n    };\n    \n    typedef boost::shared_ptr< Repository > RepositoryPtr;\n",
                    "rendered": {
                      "text": "\n        private:\n\n            static std::map< Capability, std::string > parseCapabilities( xmlNodePtr node );\n    };\n    \n    typedef boost::shared_ptr< Repository > RepositoryPtr;\n",
                      "markdown": "`\n        private:\n\n            static std::map< Capability, std::string > parseCapabilities( xmlNodePtr node );\n    };\n    \n    typedef boost::shared_ptr< Repository > RepositoryPtr;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/repository.hxx"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 34,
                  "endLine": 87,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            void initializeFromNode( xmlNodePtr node );\n\n        public:\n            Repository( xmlNodePtr node );\n            virtual ~Repository( ) { };\n\n            std::string getId( ) const;\n",
                    "rendered": {
                      "text": "            void initializeFromNode( xmlNodePtr node );\n\n        public:\n            Repository( xmlNodePtr node );\n            virtual ~Repository( ) { };\n\n            std::string getId( ) const;\n",
                      "markdown": "`            void initializeFromNode( xmlNodePtr node );\n\n        public:\n            Repository( xmlNodePtr node );\n            virtual ~Repository( ) { };\n\n            std::string getId( ) const;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/repository.hxx"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 47,
                  "endLine": 84,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            std::map< Capability, std::string > m_capabilities ;\n\n            Repository( );\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n            Repository( xmlNodePtr node );\n",
                    "rendered": {
                      "text": "            std::map< Capability, std::string > m_capabilities ;\n\n            Repository( );\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n            Repository( xmlNodePtr node );\n",
                      "markdown": "`            std::map< Capability, std::string > m_capabilities ;\n\n            Repository( );\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n            Repository( xmlNodePtr node );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/repository.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object-type.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object-type.hxx"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 34,
                  "endLine": 86,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n        public:\n\n            ObjectType( xmlNodePtr node );\n            ObjectType( const ObjectType& copy );\n            virtual ~ObjectType() { }\n\n",
                    "rendered": {
                      "text": "\n        public:\n\n            ObjectType( xmlNodePtr node );\n            ObjectType( const ObjectType& copy );\n            virtual ~ObjectType() { }\n\n",
                      "markdown": "`\n        public:\n\n            ObjectType( xmlNodePtr node );\n            ObjectType( const ObjectType& copy );\n            virtual ~ObjectType() { }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object-type.hxx"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 47,
                  "endLine": 82,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            std::map< std::string, libcmis::PropertyTypePtr > m_propertiesTypes;\n\n            ObjectType( );\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n\n",
                    "rendered": {
                      "text": "            std::map< std::string, libcmis::PropertyTypePtr > m_propertiesTypes;\n\n            ObjectType( );\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n\n",
                      "markdown": "`            std::map< std::string, libcmis::PropertyTypePtr > m_propertiesTypes;\n\n            ObjectType( );\n            void initializeFromNode( xmlNodePtr node );\n\n        public:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/object-type.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/folder.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/folder.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/rendition.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/rendition.hxx"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 33,
                  "endLine": 65,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n            /** Parse an XML node of type cmisRenditionType\n              */\n            Rendition( xmlNodePtr node );\n            ~Rendition( );\n            \n            bool isThumbnail( );\n",
                    "rendered": {
                      "text": "\n            /** Parse an XML node of type cmisRenditionType\n              */\n            Rendition( xmlNodePtr node );\n            ~Rendition( );\n            \n            bool isThumbnail( );\n",
                      "markdown": "`\n            /** Parse an XML node of type cmisRenditionType\n              */\n            Rendition( xmlNodePtr node );\n            ~Rendition( );\n            \n            bool isThumbnail( );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/rendition.hxx"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 28,
                  "endLine": 63,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                       long length = -1, long width = -1, long height = -1,\n                       std::string renditionDocumentId = std::string( ) );\n\n            /** Parse an XML node of type cmisRenditionType\n              */\n            Rendition( xmlNodePtr node );\n            ~Rendition( );\n",
                    "rendered": {
                      "text": "                       long length = -1, long width = -1, long height = -1,\n                       std::string renditionDocumentId = std::string( ) );\n\n            /** Parse an XML node of type cmisRenditionType\n              */\n            Rendition( xmlNodePtr node );\n            ~Rendition( );\n",
                      "markdown": "`                       long length = -1, long width = -1, long height = -1,\n                       std::string renditionDocumentId = std::string( ) );\n\n            /** Parse an XML node of type cmisRenditionType\n              */\n            Rendition( xmlNodePtr node );\n            ~Rendition( );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/rendition.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/xmlserializable.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/inc/libcmis/xmlserializable.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-repositoryservice.cxx"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 47,
                  "endLine": 129,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetTypeChildrenResponse* response = dynamic_cast< GetTypeChildrenResponse* >( resp );\n        if ( response != NULL )\n            children = response->getChildren( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetTypeChildrenResponse* response = dynamic_cast< GetTypeChildrenResponse* >( resp );\n        if ( response != NULL )\n            children = response->getChildren( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetTypeChildrenResponse* response = dynamic_cast< GetTypeChildrenResponse* >( resp );\n        if ( response != NULL )\n            children = response->getChildren( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-repositoryservice.cxx"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 47,
                  "endLine": 112,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetTypeDefinitionResponse* response = dynamic_cast< GetTypeDefinitionResponse* >( resp );\n        if ( response != NULL )\n            type = response->getType( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetTypeDefinitionResponse* response = dynamic_cast< GetTypeDefinitionResponse* >( resp );\n        if ( response != NULL )\n            type = response->getType( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetTypeDefinitionResponse* response = dynamic_cast< GetTypeDefinitionResponse* >( resp );\n        if ( response != NULL )\n            type = response->getType( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-repositoryservice.cxx"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 47,
                  "endLine": 95,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetRepositoryInfoResponse* response = dynamic_cast< GetRepositoryInfoResponse* >( resp );\n        if ( response != NULL )\n            repository = response->getRepository( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetRepositoryInfoResponse* response = dynamic_cast< GetRepositoryInfoResponse* >( resp );\n        if ( response != NULL )\n            repository = response->getRepository( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetRepositoryInfoResponse* response = dynamic_cast< GetRepositoryInfoResponse* >( resp );\n        if ( response != NULL )\n            repository = response->getRepository( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-repositoryservice.cxx"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 103,
                  "endLine": 78,
                  "endColumn": 108,
                  "snippet": {
                    "text": "\n    if ( responses.size() == 1 )\n    {\n       GetRepositoriesResponse* response = dynamic_cast< GetRepositoriesResponse* >( responses.front( ).get( ) );\n       if ( response != NULL )\n       {\n           repositories = response->getRepositories();\n",
                    "rendered": {
                      "text": "\n    if ( responses.size() == 1 )\n    {\n       GetRepositoriesResponse* response = dynamic_cast< GetRepositoriesResponse* >( responses.front( ).get( ) );\n       if ( response != NULL )\n       {\n           repositories = response->getRepositories();\n",
                      "markdown": "`\n    if ( responses.size() == 1 )\n    {\n       GetRepositoriesResponse* response = dynamic_cast< GetRepositoriesResponse* >( responses.front( ).get( ) );\n       if ( response != NULL )\n       {\n           repositories = response->getRepositories();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object.hxx"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 48,
                  "endLine": 42,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        WSObject( WSSession* session );\n\n    public:\n        WSObject( WSSession* session, xmlNodePtr node );\n        WSObject( const WSObject& copy );\n        virtual ~WSObject( );\n\n",
                    "rendered": {
                      "text": "        WSObject( WSSession* session );\n\n    public:\n        WSObject( WSSession* session, xmlNodePtr node );\n        WSObject( const WSObject& copy );\n        virtual ~WSObject( );\n\n",
                      "markdown": "`        WSObject( WSSession* session );\n\n    public:\n        WSObject( WSSession* session, xmlNodePtr node );\n        WSObject( const WSObject& copy );\n        virtual ~WSObject( );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 36,
                  "endLine": 433,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n\n                        if ( cmisDoc.get() )\n                            versions.push_back( cmisDoc );\n                        xmlFreeDoc( entryDoc );\n                    }\n",
                    "rendered": {
                      "text": "                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n\n                        if ( cmisDoc.get() )\n                            versions.push_back( cmisDoc );\n                        xmlFreeDoc( entryDoc );\n                    }\n",
                      "markdown": "`                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n\n                        if ( cmisDoc.get() )\n                            versions.push_back( cmisDoc );\n                        xmlFreeDoc( entryDoc );\n                    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 31,
                  "endLine": 392,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nvector< libcmis::DocumentPtr > AtomDocument::getAllVersions( )\n{\n    if ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetAllVersions ) )\n        throw libcmis::Exception( string( \"GetAllVersions not allowed on node \" ) + getId() );\n\n",
                    "rendered": {
                      "text": "\nvector< libcmis::DocumentPtr > AtomDocument::getAllVersions( )\n{\n    if ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetAllVersions ) )\n        throw libcmis::Exception( string( \"GetAllVersions not allowed on node \" ) + getId() );\n\n",
                      "markdown": "`\nvector< libcmis::DocumentPtr > AtomDocument::getAllVersions( )\n{\n    if ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetAllVersions ) )\n        throw libcmis::Exception( string( \"GetAllVersions not allowed on node \" ) + getId() );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 33,
                  "endLine": 321,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                            const PropertyPtrMap& properties,\n                            boost::shared_ptr< ostream > stream, string contentType, string )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CheckIn ) ) )\n        throw libcmis::Exception( string( \"CanCheckIn not allowed on document \" ) + getId() );\n\n    string urlPattern = getInfosUrl( );\n",
                    "rendered": {
                      "text": "                            const PropertyPtrMap& properties,\n                            boost::shared_ptr< ostream > stream, string contentType, string )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CheckIn ) ) )\n        throw libcmis::Exception( string( \"CanCheckIn not allowed on document \" ) + getId() );\n\n    string urlPattern = getInfosUrl( );\n",
                      "markdown": "`                            const PropertyPtrMap& properties,\n                            boost::shared_ptr< ostream > stream, string contentType, string )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CheckIn ) ) )\n        throw libcmis::Exception( string( \"CanCheckIn not allowed on document \" ) + getId() );\n\n    string urlPattern = getInfosUrl( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 33,
                  "endLine": 296,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nvoid AtomDocument::cancelCheckout( )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CancelCheckOut ) ) )\n        throw libcmis::Exception( string( \"CanCancelCheckout not allowed on document \" ) + getId() );\n\n    string url = getInfosUrl( );\n",
                    "rendered": {
                      "text": "\nvoid AtomDocument::cancelCheckout( )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CancelCheckOut ) ) )\n        throw libcmis::Exception( string( \"CanCancelCheckout not allowed on document \" ) + getId() );\n\n    string url = getInfosUrl( );\n",
                      "markdown": "`\nvoid AtomDocument::cancelCheckout( )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CancelCheckOut ) ) )\n        throw libcmis::Exception( string( \"CanCancelCheckout not allowed on document \" ) + getId() );\n\n    string url = getInfosUrl( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 13,
                  "endLine": 288,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    xmlFreeDoc( doc );\n\n    libcmis::DocumentPtr pwc = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !pwc.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a document: \" ) + created->getId( ) );\n\n    return pwc;\n",
                    "rendered": {
                      "text": "    xmlFreeDoc( doc );\n\n    libcmis::DocumentPtr pwc = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !pwc.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a document: \" ) + created->getId( ) );\n\n    return pwc;\n",
                      "markdown": "`    xmlFreeDoc( doc );\n\n    libcmis::DocumentPtr pwc = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !pwc.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a document: \" ) + created->getId( ) );\n\n    return pwc;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 33,
                  "endLine": 232,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nlibcmis::DocumentPtr AtomDocument::checkOut( )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CheckOut ) ) )\n        throw libcmis::Exception( string( \"CanCheckout not allowed on document \" ) + getId() );\n    \n    xmlBufferPtr buf = xmlBufferCreate( );\n",
                    "rendered": {
                      "text": "\nlibcmis::DocumentPtr AtomDocument::checkOut( )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CheckOut ) ) )\n        throw libcmis::Exception( string( \"CanCheckout not allowed on document \" ) + getId() );\n    \n    xmlBufferPtr buf = xmlBufferCreate( );\n",
                      "markdown": "`\nlibcmis::DocumentPtr AtomDocument::checkOut( )\n{\n    if ( ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::CheckOut ) ) )\n        throw libcmis::Exception( string( \"CanCheckout not allowed on document \" ) + getId() );\n    \n    xmlBufferPtr buf = xmlBufferCreate( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 30,
                  "endLine": 149,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n        throw libcmis::Exception( string( \"SetContentStream is not allowed on document \" ) + getId() );\n\n    string overwriteStr( \"false\" );\n",
                    "rendered": {
                      "text": "    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n        throw libcmis::Exception( string( \"SetContentStream is not allowed on document \" ) + getId() );\n\n    string overwriteStr( \"false\" );\n",
                      "markdown": "`    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n        throw libcmis::Exception( string( \"SetContentStream is not allowed on document \" ) + getId() );\n\n    string overwriteStr( \"false\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 12,
                  "endLine": 146,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nvoid AtomDocument::setContentStream( boost::shared_ptr< ostream > os, string contentType, string fileName, bool overwrite )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n",
                    "rendered": {
                      "text": "\nvoid AtomDocument::setContentStream( boost::shared_ptr< ostream > os, string contentType, string fileName, bool overwrite )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n",
                      "markdown": "`\nvoid AtomDocument::setContentStream( boost::shared_ptr< ostream > os, string contentType, string fileName, bool overwrite )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 30,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\nboost::shared_ptr< istream > AtomDocument::getContentStream( string /*streamId*/ )\n{\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n        throw libcmis::Exception( string( \"GetContentStream is not allowed on document \" ) + getId() );\n\n    boost::shared_ptr< istream > stream;\n",
                    "rendered": {
                      "text": "\nboost::shared_ptr< istream > AtomDocument::getContentStream( string /*streamId*/ )\n{\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n        throw libcmis::Exception( string( \"GetContentStream is not allowed on document \" ) + getId() );\n\n    boost::shared_ptr< istream > stream;\n",
                      "markdown": "`\nboost::shared_ptr< istream > AtomDocument::getContentStream( string /*streamId*/ )\n{\n    if ( getAllowableActions().get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetContentStream ) )\n        throw libcmis::Exception( string( \"GetContentStream is not allowed on document \" ) + getId() );\n\n    boost::shared_ptr< istream > stream;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 31,
                  "endLine": 106,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n\n                    if ( folder.get() )\n                        parents.push_back( folder );\n                    xmlFreeDoc( entryDoc );\n                }\n",
                    "rendered": {
                      "text": "                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n\n                    if ( folder.get() )\n                        parents.push_back( folder );\n                    xmlFreeDoc( entryDoc );\n                }\n",
                      "markdown": "`                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n\n                    if ( folder.get() )\n                        parents.push_back( folder );\n                    xmlFreeDoc( entryDoc );\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 36,
                  "endLine": 71,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    AtomLink* parentsLink = getLink( \"up\", \"\" );\n\n    if ( ( NULL == parentsLink ) ||\n            ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetObjectParents ) ) )\n        throw libcmis::Exception( string( \"GetObjectParents not allowed on node \" ) + getId() );\n\n    vector< libcmis::FolderPtr > parents;\n",
                    "rendered": {
                      "text": "    AtomLink* parentsLink = getLink( \"up\", \"\" );\n\n    if ( ( NULL == parentsLink ) ||\n            ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetObjectParents ) ) )\n        throw libcmis::Exception( string( \"GetObjectParents not allowed on node \" ) + getId() );\n\n    vector< libcmis::FolderPtr > parents;\n",
                      "markdown": "`    AtomLink* parentsLink = getLink( \"up\", \"\" );\n\n    if ( ( NULL == parentsLink ) ||\n            ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetObjectParents ) ) )\n        throw libcmis::Exception( string( \"GetObjectParents not allowed on node \" ) + getId() );\n\n    vector< libcmis::FolderPtr > parents;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 32,
                  "endLine": 219,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        }\n        catch ( const CurlException& e )\n        {\n            // SharePoint wants base64 encoded content... let's try to figure out\n            // if we falled in that case.\n            if ( !tryBase64 && e.getHttpStatus() == 400 )\n                tryBase64 = true;\n",
                    "rendered": {
                      "text": "        }\n        catch ( const CurlException& e )\n        {\n            // SharePoint wants base64 encoded content... let's try to figure out\n            // if we falled in that case.\n            if ( !tryBase64 && e.getHttpStatus() == 400 )\n                tryBase64 = true;\n",
                      "markdown": "`        }\n        catch ( const CurlException& e )\n        {\n            // SharePoint wants base64 encoded content... let's try to figure out\n            // if we falled in that case.\n            if ( !tryBase64 && e.getHttpStatus() == 400 )\n                tryBase64 = true;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 38,
                  "endLine": 188,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                // Encode the content\n                stringstream* encodedIn = new stringstream( );\n                libcmis::EncodedData encoder( encodedIn );\n                encoder.setEncoding( \"base64\" );\n\n                int bufLength = 1000;\n                char* buf = new char[ bufLength ];\n",
                    "rendered": {
                      "text": "                // Encode the content\n                stringstream* encodedIn = new stringstream( );\n                libcmis::EncodedData encoder( encodedIn );\n                encoder.setEncoding( \"base64\" );\n\n                int bufLength = 1000;\n                char* buf = new char[ bufLength ];\n",
                      "markdown": "`                // Encode the content\n                stringstream* encodedIn = new stringstream( );\n                libcmis::EncodedData encoder( encodedIn );\n                encoder.setEncoding( \"base64\" );\n\n                int bufLength = 1000;\n                char* buf = new char[ bufLength ];\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 33,
                  "endLine": 374,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        throw e.getCmisException( );\n    }\n    \n    // Get the returned entry and update using it\n    string respBuf = response->getStream( )->str( );\n    xmlDocPtr doc = xmlReadMemory( respBuf.c_str(), respBuf.size(), checkInUrl.c_str(), NULL, 0 );\n    if ( NULL == doc )\n",
                    "rendered": {
                      "text": "        throw e.getCmisException( );\n    }\n    \n    // Get the returned entry and update using it\n    string respBuf = response->getStream( )->str( );\n    xmlDocPtr doc = xmlReadMemory( respBuf.c_str(), respBuf.size(), checkInUrl.c_str(), NULL, 0 );\n    if ( NULL == doc )\n",
                      "markdown": "`        throw e.getCmisException( );\n    }\n    \n    // Get the returned entry and update using it\n    string respBuf = response->getStream( )->str( );\n    xmlDocPtr doc = xmlReadMemory( respBuf.c_str(), respBuf.size(), checkInUrl.c_str(), NULL, 0 );\n    if ( NULL == doc )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 64,
                  "endLine": 429,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n\n",
                    "rendered": {
                      "text": "                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n\n",
                      "markdown": "`                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 34,
                  "endLine": 428,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                    int size = xpathObj->nodesetval->nodeNr;\n                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n",
                    "rendered": {
                      "text": "                    int size = xpathObj->nodesetval->nodeNr;\n                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n",
                      "markdown": "`                    int size = xpathObj->nodesetval->nodeNr;\n                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n                        libcmis::DocumentPtr cmisDoc = boost::dynamic_pointer_cast< libcmis::Document >( cmisObject );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 72,
                  "endLine": 394,
                  "endColumn": 78,
                  "snippet": {
                    "text": "{\n    if ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetAllVersions ) )\n        throw libcmis::Exception( string( \"GetAllVersions not allowed on node \" ) + getId() );\n\n    vector< libcmis::DocumentPtr > versions;\n    const AtomLink* link = getLink( \"version-history\", string( ) );\n",
                    "rendered": {
                      "text": "{\n    if ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetAllVersions ) )\n        throw libcmis::Exception( string( \"GetAllVersions not allowed on node \" ) + getId() );\n\n    vector< libcmis::DocumentPtr > versions;\n    const AtomLink* link = getLink( \"version-history\", string( ) );\n",
                      "markdown": "`{\n    if ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetAllVersions ) )\n        throw libcmis::Exception( string( \"GetAllVersions not allowed on node \" ) + getId() );\n\n    vector< libcmis::DocumentPtr > versions;\n    const AtomLink* link = getLink( \"version-history\", string( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 31,
                  "endLine": 219,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        }\n        catch ( const CurlException& e )\n        {\n            // SharePoint wants base64 encoded content... let's try to figure out\n            // if we falled in that case.\n            if ( !tryBase64 && e.getHttpStatus() == 400 )\n                tryBase64 = true;\n",
                    "rendered": {
                      "text": "        }\n        catch ( const CurlException& e )\n        {\n            // SharePoint wants base64 encoded content... let's try to figure out\n            // if we falled in that case.\n            if ( !tryBase64 && e.getHttpStatus() == 400 )\n                tryBase64 = true;\n",
                      "markdown": "`        }\n        catch ( const CurlException& e )\n        {\n            // SharePoint wants base64 encoded content... let's try to figure out\n            // if we falled in that case.\n            if ( !tryBase64 && e.getHttpStatus() == 400 )\n                tryBase64 = true;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 60,
                  "endLine": 102,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n\n",
                    "rendered": {
                      "text": "                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n\n",
                      "markdown": "`                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 30,
                  "endLine": 101,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                int size = xpathObj->nodesetval->nodeNr;\n                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n",
                    "rendered": {
                      "text": "                int size = xpathObj->nodesetval->nodeNr;\n                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n",
                      "markdown": "`                int size = xpathObj->nodesetval->nodeNr;\n                for ( int i = 0; i < size; i++ )\n                {\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                    libcmis::ObjectPtr object = getSession()->createObjectFromEntryDoc( entryDoc );\n                    libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-document.cxx"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 74,
                  "endLine": 72,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n    if ( ( NULL == parentsLink ) ||\n            ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetObjectParents ) ) )\n        throw libcmis::Exception( string( \"GetObjectParents not allowed on node \" ) + getId() );\n\n    vector< libcmis::FolderPtr > parents;\n    \n",
                    "rendered": {
                      "text": "\n    if ( ( NULL == parentsLink ) ||\n            ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetObjectParents ) ) )\n        throw libcmis::Exception( string( \"GetObjectParents not allowed on node \" ) + getId() );\n\n    vector< libcmis::FolderPtr > parents;\n    \n",
                      "markdown": "`\n    if ( ( NULL == parentsLink ) ||\n            ( getAllowableActions( ).get() && !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetObjectParents ) ) )\n        throw libcmis::Exception( string( \"GetObjectParents not allowed on node \" ) + getId() );\n\n    vector< libcmis::FolderPtr > parents;\n    \n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-navigationservice.cxx"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 47,
                  "endLine": 94,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetChildrenResponse* response = dynamic_cast< GetChildrenResponse* >( resp );\n        if ( response != NULL )\n            children = response->getChildren( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetChildrenResponse* response = dynamic_cast< GetChildrenResponse* >( resp );\n        if ( response != NULL )\n            children = response->getChildren( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetChildrenResponse* response = dynamic_cast< GetChildrenResponse* >( resp );\n        if ( response != NULL )\n            children = response->getChildren( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-navigationservice.cxx"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 47,
                  "endLine": 77,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectParentsResponse* response = dynamic_cast< GetObjectParentsResponse* >( resp );\n        if ( response != NULL )\n            parents = response->getParents( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectParentsResponse* response = dynamic_cast< GetObjectParentsResponse* >( resp );\n        if ( response != NULL )\n            parents = response->getParents( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectParentsResponse* response = dynamic_cast< GetObjectParentsResponse* >( resp );\n        if ( response != NULL )\n            parents = response->getParents( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-folder.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-folder.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object-type.cxx"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 73,
                  "endLine": 69,
                  "endColumn": 78,
                  "snippet": {
                    "text": "void WSObjectType::refresh( )\n{\n    libcmis::ObjectTypePtr type = m_session->getType( m_id );\n    const WSObjectType* const other = dynamic_cast< WSObjectType* >( type.get( ) );\n    if ( other != NULL )\n        *this = *other;\n}\n",
                    "rendered": {
                      "text": "void WSObjectType::refresh( )\n{\n    libcmis::ObjectTypePtr type = m_session->getType( m_id );\n    const WSObjectType* const other = dynamic_cast< WSObjectType* >( type.get( ) );\n    if ( other != NULL )\n        *this = *other;\n}\n",
                      "markdown": "`void WSObjectType::refresh( )\n{\n    libcmis::ObjectTypePtr type = m_session->getType( m_id );\n    const WSObjectType* const other = dynamic_cast< WSObjectType* >( type.get( ) );\n    if ( other != NULL )\n        *this = *other;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object-type.cxx"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 24,
                  "endLine": 34,
                  "endColumn": 30,
                  "snippet": {
                    "text": "using namespace std;\n\nWSObjectType::WSObjectType( WSSession* session, xmlNodePtr node ) :\n    libcmis::ObjectType( node ),\n    m_session( session )\n{\n}\n",
                    "rendered": {
                      "text": "using namespace std;\n\nWSObjectType::WSObjectType( WSSession* session, xmlNodePtr node ) :\n    libcmis::ObjectType( node ),\n    m_session( session )\n{\n}\n",
                      "markdown": "`using namespace std;\n\nWSObjectType::WSObjectType( WSSession* session, xmlNodePtr node ) :\n    libcmis::ObjectType( node ),\n    m_session( session )\n{\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-object-type.cxx"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 58,
                  "endLine": 33,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nusing namespace std;\n\nWSObjectType::WSObjectType( WSSession* session, xmlNodePtr node ) :\n    libcmis::ObjectType( node ),\n    m_session( session )\n{\n",
                    "rendered": {
                      "text": "\nusing namespace std;\n\nWSObjectType::WSObjectType( WSSession* session, xmlNodePtr node ) :\n    libcmis::ObjectType( node ),\n    m_session( session )\n{\n",
                      "markdown": "`\nusing namespace std;\n\nWSObjectType::WSObjectType( WSSession* session, xmlNodePtr node ) :\n    libcmis::ObjectType( node ),\n    m_session( session )\n{\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-utils.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-utils.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.cxx"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 47,
                  "endLine": 231,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CreateFolderResponse* response = dynamic_cast< CreateFolderResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CreateFolderResponse* response = dynamic_cast< CreateFolderResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CreateFolderResponse* response = dynamic_cast< CreateFolderResponse* >( resp );\n        if ( response != NULL )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.cxx"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 47,
                  "endLine": 210,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CreateFolderResponse* response = dynamic_cast< CreateFolderResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CreateFolderResponse* response = dynamic_cast< CreateFolderResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CreateFolderResponse* response = dynamic_cast< CreateFolderResponse* >( resp );\n        if ( response != NULL )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.cxx"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 47,
                  "endLine": 185,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetContentStreamResponse* response = dynamic_cast< GetContentStreamResponse* >( resp );\n        if ( response != NULL )\n            stream = response->getStream( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetContentStreamResponse* response = dynamic_cast< GetContentStreamResponse* >( resp );\n        if ( response != NULL )\n            stream = response->getStream( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetContentStreamResponse* response = dynamic_cast< GetContentStreamResponse* >( resp );\n        if ( response != NULL )\n            stream = response->getStream( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.cxx"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 47,
                  "endLine": 162,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        DeleteTreeResponse* response = dynamic_cast< DeleteTreeResponse* >( resp );\n        if ( response != NULL )\n            failedIds = response->getFailedIds( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        DeleteTreeResponse* response = dynamic_cast< DeleteTreeResponse* >( resp );\n        if ( response != NULL )\n            failedIds = response->getFailedIds( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        DeleteTreeResponse* response = dynamic_cast< DeleteTreeResponse* >( resp );\n        if ( response != NULL )\n            failedIds = response->getFailedIds( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.cxx"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 47,
                  "endLine": 135,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        UpdatePropertiesResponse* response = dynamic_cast< UpdatePropertiesResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        UpdatePropertiesResponse* response = dynamic_cast< UpdatePropertiesResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        UpdatePropertiesResponse* response = dynamic_cast< UpdatePropertiesResponse* >( resp );\n        if ( response != NULL )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.cxx"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 47,
                  "endLine": 113,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetRenditionsResponse* response = dynamic_cast< GetRenditionsResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetRenditionsResponse* response = dynamic_cast< GetRenditionsResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetRenditionsResponse* response = dynamic_cast< GetRenditionsResponse* >( resp );\n        if ( response != NULL )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.cxx"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 47,
                  "endLine": 95,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectResponse* response = dynamic_cast< GetObjectResponse* >( resp );\n        if ( response != NULL )\n            object = response->getObject( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectResponse* response = dynamic_cast< GetObjectResponse* >( resp );\n        if ( response != NULL )\n            object = response->getObject( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectResponse* response = dynamic_cast< GetObjectResponse* >( resp );\n        if ( response != NULL )\n            object = response->getObject( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-objectservice.cxx"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 47,
                  "endLine": 78,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectResponse* response = dynamic_cast< GetObjectResponse* >( resp );\n        if ( response != NULL )\n            object = response->getObject( );\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectResponse* response = dynamic_cast< GetObjectResponse* >( resp );\n        if ( response != NULL )\n            object = response->getObject( );\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetObjectResponse* response = dynamic_cast< GetObjectResponse* >( resp );\n        if ( response != NULL )\n            object = response->getObject( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-object-type.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-object-type.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-allowable-actions.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-allowable-actions.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-utils.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-utils.hxx"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 54,
                  "endLine": 51,
                  "snippet": {
                    "text": "        // Parse a SharePoint property value to CMIS values\n        static std::vector< std::string > parseSharePointProperty( std::string key, Json jsonValue );\n\n        // Checks if a response came from a SharePoint service\n        static bool isSharePoint( std::string response );\n};\n\n#endif\n",
                    "rendered": {
                      "text": "        // Parse a SharePoint property value to CMIS values\n        static std::vector< std::string > parseSharePointProperty( std::string key, Json jsonValue );\n\n        // Checks if a response came from a SharePoint service\n        static bool isSharePoint( std::string response );\n};\n\n#endif\n",
                      "markdown": "`        // Parse a SharePoint property value to CMIS values\n        static std::vector< std::string > parseSharePointProperty( std::string key, Json jsonValue );\n\n        // Checks if a response came from a SharePoint service\n        static bool isSharePoint( std::string response );\n};\n\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-utils.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/base-session.hxx"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 55,
                  "endLine": 60,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        std::vector< libcmis::RepositoryPtr > m_repositories;\n    public:\n        BaseSession( std::string sBindingUrl, std::string repository,\n                     std::string username, std::string password,\n                     bool noSslCheck = false,\n                     libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(), bool verbose = false,\n                     libcmis::CurlInitProtocolsFunction = nullptr);\n",
                    "rendered": {
                      "text": "        std::vector< libcmis::RepositoryPtr > m_repositories;\n    public:\n        BaseSession( std::string sBindingUrl, std::string repository,\n                     std::string username, std::string password,\n                     bool noSslCheck = false,\n                     libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(), bool verbose = false,\n                     libcmis::CurlInitProtocolsFunction = nullptr);\n",
                      "markdown": "`        std::vector< libcmis::RepositoryPtr > m_repositories;\n    public:\n        BaseSession( std::string sBindingUrl, std::string repository,\n                     std::string username, std::string password,\n                     bool noSslCheck = false,\n                     libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(), bool verbose = false,\n                     libcmis::CurlInitProtocolsFunction = nullptr);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/base-session.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/base-session.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.hxx"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 87,
                  "endLine": 45,
                  "endColumn": 95,
                  "snippet": {
                    "text": "        static std::string OAuth2Dummy( HttpSession* session, const std::string& authUrl,\n                                       const std::string& username, const std::string& password );\n        static std::string OAuth2Alfresco( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\n        static OAuth2Parser getOAuth2Parser( const std::string& baseUrl );\n\n",
                    "rendered": {
                      "text": "        static std::string OAuth2Dummy( HttpSession* session, const std::string& authUrl,\n                                       const std::string& username, const std::string& password );\n        static std::string OAuth2Alfresco( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\n        static OAuth2Parser getOAuth2Parser( const std::string& baseUrl );\n\n",
                      "markdown": "`        static std::string OAuth2Dummy( HttpSession* session, const std::string& authUrl,\n                                       const std::string& username, const std::string& password );\n        static std::string OAuth2Alfresco( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\n        static OAuth2Parser getOAuth2Parser( const std::string& baseUrl );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.hxx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 87,
                  "endLine": 43,
                  "endColumn": 95,
                  "snippet": {
                    "text": "{\n    public :\n        static std::string OAuth2Dummy( HttpSession* session, const std::string& authUrl,\n                                       const std::string& username, const std::string& password );\n        static std::string OAuth2Alfresco( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\n",
                    "rendered": {
                      "text": "{\n    public :\n        static std::string OAuth2Dummy( HttpSession* session, const std::string& authUrl,\n                                       const std::string& username, const std::string& password );\n        static std::string OAuth2Alfresco( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\n",
                      "markdown": "`{\n    public :\n        static std::string OAuth2Dummy( HttpSession* session, const std::string& authUrl,\n                                       const std::string& username, const std::string& password );\n        static std::string OAuth2Alfresco( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.hxx"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 87,
                  "endLine": 37,
                  "endColumn": 95,
                  "snippet": {
                    "text": "class HttpSession;\n\ntypedef std::string ( *OAuth2Parser ) ( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\nclass OAuth2Providers\n{\n",
                    "rendered": {
                      "text": "class HttpSession;\n\ntypedef std::string ( *OAuth2Parser ) ( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\nclass OAuth2Providers\n{\n",
                      "markdown": "`class HttpSession;\n\ntypedef std::string ( *OAuth2Parser ) ( HttpSession* session, const std::string& authUrl, \n                                       const std::string& username, const std::string& password );\n\nclass OAuth2Providers\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/oauth2-providers.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-folder.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-folder.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 45,
                  "endLine": 341,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    try\n    {\n        failed = new libcmis_vector_string( );\n        if ( folder != NULL && folder->handle.get( ) != NULL )\n        {\n            libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n            if ( folder )\n",
                    "rendered": {
                      "text": "    try\n    {\n        failed = new libcmis_vector_string( );\n        if ( folder != NULL && folder->handle.get( ) != NULL )\n        {\n            libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n            if ( folder )\n",
                      "markdown": "`    try\n    {\n        failed = new libcmis_vector_string( );\n        if ( folder != NULL && folder->handle.get( ) != NULL )\n        {\n            libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n            if ( folder )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 41,
                  "endLine": 268,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_DocumentPtr created = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n",
                    "rendered": {
                      "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_DocumentPtr created = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n",
                      "markdown": "`        libcmis_ErrorPtr error )\n{\n    libcmis_DocumentPtr created = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 37,
                  "endLine": 224,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                    for ( size_t i = 0; i < size; ++i )\n                    {\n                        libcmis::PropertyPtr property = properties->handle[i];\n                        if ( property.get( ) != NULL )\n                        {\n                            string id = property->getPropertyType( )->getId( );\n                            mappedProperties.insert( pair< string, libcmis::PropertyPtr >( id, property ) );\n",
                    "rendered": {
                      "text": "                    for ( size_t i = 0; i < size; ++i )\n                    {\n                        libcmis::PropertyPtr property = properties->handle[i];\n                        if ( property.get( ) != NULL )\n                        {\n                            string id = property->getPropertyType( )->getId( );\n                            mappedProperties.insert( pair< string, libcmis::PropertyPtr >( id, property ) );\n",
                      "markdown": "`                    for ( size_t i = 0; i < size; ++i )\n                    {\n                        libcmis::PropertyPtr property = properties->handle[i];\n                        if ( property.get( ) != NULL )\n                        {\n                            string id = property->getPropertyType( )->getId( );\n                            mappedProperties.insert( pair< string, libcmis::PropertyPtr >( id, property ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 41,
                  "endLine": 210,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_FolderPtr result = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n",
                    "rendered": {
                      "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_FolderPtr result = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n",
                      "markdown": "`        libcmis_ErrorPtr error )\n{\n    libcmis_FolderPtr result = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 41,
                  "endLine": 195,
                  "endColumn": 46,
                  "snippet": {
                    "text": "bool libcmis_folder_isRootFolder( libcmis_FolderPtr folder )\n{\n    bool isRoot = false;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n",
                    "rendered": {
                      "text": "bool libcmis_folder_isRootFolder( libcmis_FolderPtr folder )\n{\n    bool isRoot = false;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n",
                      "markdown": "`bool libcmis_folder_isRootFolder( libcmis_FolderPtr folder )\n{\n    bool isRoot = false;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 41,
                  "endLine": 182,
                  "endColumn": 46,
                  "snippet": {
                    "text": "char* libcmis_folder_getPath( libcmis_FolderPtr folder )\n{\n    char* path = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n",
                    "rendered": {
                      "text": "char* libcmis_folder_getPath( libcmis_FolderPtr folder )\n{\n    char* path = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n",
                      "markdown": "`char* libcmis_folder_getPath( libcmis_FolderPtr folder )\n{\n    char* path = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folderHandle = dynamic_pointer_cast< libcmis::Folder >( folder->handle );\n        if ( folder )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 41,
                  "endLine": 146,
                  "endColumn": 46,
                  "snippet": {
                    "text": "libcmis_vector_object_Ptr libcmis_folder_getChildren( libcmis_FolderPtr folder, libcmis_ErrorPtr error )\n{\n    libcmis_vector_object_Ptr result = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "libcmis_vector_object_Ptr libcmis_folder_getChildren( libcmis_FolderPtr folder, libcmis_ErrorPtr error )\n{\n    libcmis_vector_object_Ptr result = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`libcmis_vector_object_Ptr libcmis_folder_getChildren( libcmis_FolderPtr folder, libcmis_ErrorPtr error )\n{\n    libcmis_vector_object_Ptr result = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 27,
                  "endLine": 115,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            if ( folder )\n            {\n                libcmis::FolderPtr handle = folderHandle->getFolderParent( );\n                if ( handle.get( ) != NULL )\n                {\n                    parent = new libcmis_folder( );\n                    parent->handle = handle;\n",
                    "rendered": {
                      "text": "            if ( folder )\n            {\n                libcmis::FolderPtr handle = folderHandle->getFolderParent( );\n                if ( handle.get( ) != NULL )\n                {\n                    parent = new libcmis_folder( );\n                    parent->handle = handle;\n",
                      "markdown": "`            if ( folder )\n            {\n                libcmis::FolderPtr handle = folderHandle->getFolderParent( );\n                if ( handle.get( ) != NULL )\n                {\n                    parent = new libcmis_folder( );\n                    parent->handle = handle;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 41,
                  "endLine": 107,
                  "endColumn": 46,
                  "snippet": {
                    "text": "libcmis_FolderPtr libcmis_folder_getParent( libcmis_FolderPtr folder, libcmis_ErrorPtr error )\n{\n    libcmis_FolderPtr parent = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "libcmis_FolderPtr libcmis_folder_getParent( libcmis_FolderPtr folder, libcmis_ErrorPtr error )\n{\n    libcmis_FolderPtr parent = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`libcmis_FolderPtr libcmis_folder_getParent( libcmis_FolderPtr folder, libcmis_ErrorPtr error )\n{\n    libcmis_FolderPtr parent = NULL;\n    if ( folder != NULL && folder->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 19,
                  "endLine": 86,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr handle = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        if ( handle.get( ) != NULL )\n        {\n            folder = new ( nothrow ) libcmis_folder( );\n            if ( folder )\n",
                    "rendered": {
                      "text": "    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr handle = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        if ( handle.get( ) != NULL )\n        {\n            folder = new ( nothrow ) libcmis_folder( );\n            if ( folder )\n",
                      "markdown": "`    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr handle = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        if ( handle.get( ) != NULL )\n        {\n            folder = new ( nothrow ) libcmis_folder( );\n            if ( folder )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 41,
                  "endLine": 83,
                  "endColumn": 46,
                  "snippet": {
                    "text": "{\n    libcmis_FolderPtr folder = NULL;\n\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr handle = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        if ( handle.get( ) != NULL )\n",
                    "rendered": {
                      "text": "{\n    libcmis_FolderPtr folder = NULL;\n\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr handle = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        if ( handle.get( ) != NULL )\n",
                      "markdown": "`{\n    libcmis_FolderPtr folder = NULL;\n\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr handle = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        if ( handle.get( ) != NULL )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 25,
                  "endLine": 73,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        isFolder = folder.get( ) != NULL;\n    }\n    return isFolder;\n}\n",
                    "rendered": {
                      "text": "    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        isFolder = folder.get( ) != NULL;\n    }\n    return isFolder;\n}\n",
                      "markdown": "`    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        isFolder = folder.get( ) != NULL;\n    }\n    return isFolder;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/folder.cxx"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 41,
                  "endLine": 70,
                  "endColumn": 46,
                  "snippet": {
                    "text": "bool libcmis_is_folder( libcmis_ObjectPtr object )\n{\n    bool isFolder = false;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        isFolder = folder.get( ) != NULL;\n",
                    "rendered": {
                      "text": "bool libcmis_is_folder( libcmis_ObjectPtr object )\n{\n    bool isFolder = false;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        isFolder = folder.get( ) != NULL;\n",
                      "markdown": "`bool libcmis_is_folder( libcmis_ObjectPtr object )\n{\n    bool isFolder = false;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( object->handle );\n        isFolder = folder.get( ) != NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/configure.ac"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 11,
                  "endLine": 154,
                  "snippet": {
                    "text": "\tCXXFLAGS=\"$CXXFLAGS -Wall -pedantic -Weffc++ -Wshadow -Wendif-labels -Wextra -Wsign-promo -Woverloaded-virtual -Wnon-virtual-dtor -Wsign-promo\"\n])\n\n# Check for curl\nPKG_CHECK_MODULES(CURL, [libcurl >= 7.29])\nAC_SUBST(CURL_CFLAGS)\nAC_SUBST(CURL_LIBS)\n\n",
                    "rendered": {
                      "text": "\tCXXFLAGS=\"$CXXFLAGS -Wall -pedantic -Weffc++ -Wshadow -Wendif-labels -Wextra -Wsign-promo -Woverloaded-virtual -Wnon-virtual-dtor -Wsign-promo\"\n])\n\n# Check for curl\nPKG_CHECK_MODULES(CURL, [libcurl >= 7.29])\nAC_SUBST(CURL_CFLAGS)\nAC_SUBST(CURL_LIBS)\n\n",
                      "markdown": "`\tCXXFLAGS=\"$CXXFLAGS -Wall -pedantic -Weffc++ -Wshadow -Wendif-labels -Wextra -Wsign-promo -Woverloaded-virtual -Wnon-virtual-dtor -Wsign-promo\"\n])\n\n# Check for curl\nPKG_CHECK_MODULES(CURL, [libcurl >= 7.29])\nAC_SUBST(CURL_CFLAGS)\nAC_SUBST(CURL_LIBS)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 38,
                  "endLine": 727,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    }\n\n    {\n        SharePointObject copy( session.get( ) );\n        copy = *object;\n        CPPUNIT_ASSERT_EQUAL( object->m_refreshTimestamp, copy.m_refreshTimestamp );\n    }\n",
                    "rendered": {
                      "text": "    }\n\n    {\n        SharePointObject copy( session.get( ) );\n        copy = *object;\n        CPPUNIT_ASSERT_EQUAL( object->m_refreshTimestamp, copy.m_refreshTimestamp );\n    }\n",
                      "markdown": "`    }\n\n    {\n        SharePointObject copy( session.get( ) );\n        copy = *object;\n        CPPUNIT_ASSERT_EQUAL( object->m_refreshTimestamp, copy.m_refreshTimestamp );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 79,
                  "endLine": 516,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"SharePointFolder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n}\n\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"SharePointFolder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n}\n\n",
                      "markdown": "`    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong folder name\", string( \"SharePointFolder\" ), folder->getName( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), folder->getBaseType( ) );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", folder->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !folder->isRootFolder() );\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 712,
                  "startColumn": 61,
                  "endLine": 712,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 61,
                  "endLine": 670,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    static const string fileUrl( \"http://base/_api/Web/getFileByServerRelativeUrl('/SharePointFile')\" );\n    static string authorUrl( \"http://base/_api/Web/aFileId/Author\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    curl_mockup_addResponse( fileUrl.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n    curl_mockup_addResponse( folderUrl.c_str( ), \"\",\n",
                    "rendered": {
                      "text": "    static const string fileUrl( \"http://base/_api/Web/getFileByServerRelativeUrl('/SharePointFile')\" );\n    static string authorUrl( \"http://base/_api/Web/aFileId/Author\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    curl_mockup_addResponse( fileUrl.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n    curl_mockup_addResponse( folderUrl.c_str( ), \"\",\n",
                      "markdown": "`    static const string fileUrl( \"http://base/_api/Web/getFileByServerRelativeUrl('/SharePointFile')\" );\n    static string authorUrl( \"http://base/_api/Web/aFileId/Author\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    curl_mockup_addResponse( fileUrl.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n    curl_mockup_addResponse( folderUrl.c_str( ), \"\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 61,
                  "endLine": 642,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    static const string fileId ( \"http://base/_api/Web/aFileId\" );\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = fileId + \"/Author\";\n    string folderPropUrl = folderId + \"/Properties\";\n    string moveUrl = fileId + \"/moveto(newurl='/SharePointFolder/SharePointFile',flags=1)\";\n",
                    "rendered": {
                      "text": "    static const string fileId ( \"http://base/_api/Web/aFileId\" );\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = fileId + \"/Author\";\n    string folderPropUrl = folderId + \"/Properties\";\n    string moveUrl = fileId + \"/moveto(newurl='/SharePointFolder/SharePointFile',flags=1)\";\n",
                      "markdown": "`    static const string fileId ( \"http://base/_api/Web/aFileId\" );\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = fileId + \"/Author\";\n    string folderPropUrl = folderId + \"/Properties\";\n    string moveUrl = fileId + \"/moveto(newurl='/SharePointFolder/SharePointFile',flags=1)\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 61,
                  "endLine": 599,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string fileId( \"http://base/_api/Web/aFileId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string folderPropUrl = folderId + \"/Properties\";\n    string newDocUrl = folderId + \"/files/add(overwrite=true,url='NewDoc')\";\n",
                    "rendered": {
                      "text": "{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string fileId( \"http://base/_api/Web/aFileId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string folderPropUrl = folderId + \"/Properties\";\n    string newDocUrl = folderId + \"/files/add(overwrite=true,url='NewDoc')\";\n",
                      "markdown": "`{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string fileId( \"http://base/_api/Web/aFileId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string folderPropUrl = folderId + \"/Properties\";\n    string newDocUrl = folderId + \"/files/add(overwrite=true,url='NewDoc')\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 61,
                  "endLine": 573,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string parentId( \"http://base/_api/Web/rootFolderId\" );\n    static const string newFolderUrl ( \"http://base/_api/Web/folders/add('/SharePointFolder')\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string folderPropUrl = folderId + \"/Properties\";\n    string parentFolderPropUrl = parentId + \"/Properties\";\n",
                    "rendered": {
                      "text": "    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string parentId( \"http://base/_api/Web/rootFolderId\" );\n    static const string newFolderUrl ( \"http://base/_api/Web/folders/add('/SharePointFolder')\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string folderPropUrl = folderId + \"/Properties\";\n    string parentFolderPropUrl = parentId + \"/Properties\";\n",
                      "markdown": "`    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string parentId( \"http://base/_api/Web/rootFolderId\" );\n    static const string newFolderUrl ( \"http://base/_api/Web/folders/add('/SharePointFolder')\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string folderPropUrl = folderId + \"/Properties\";\n    string parentFolderPropUrl = parentId + \"/Properties\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 61,
                  "endLine": 524,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string authorUrl( \"http://base/_api/Web/aFileId/Author\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string filesUrl = folderId + \"/Files\";\n    string foldersUrl = folderId + \"/Folders\";\n",
                    "rendered": {
                      "text": "{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string authorUrl( \"http://base/_api/Web/aFileId/Author\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string filesUrl = folderId + \"/Files\";\n    string foldersUrl = folderId + \"/Folders\";\n",
                      "markdown": "`{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string authorUrl( \"http://base/_api/Web/aFileId/Author\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string filesUrl = folderId + \"/Files\";\n    string foldersUrl = folderId + \"/Folders\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 61,
                  "endLine": 492,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string parentId( \"http://base/_api/Web/rootFolderId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string parentUrl = folderId + \"/ParentFolder\";\n    string folderPropUrl = folderId + \"/Properties\";\n",
                    "rendered": {
                      "text": "{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string parentId( \"http://base/_api/Web/rootFolderId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string parentUrl = folderId + \"/ParentFolder\";\n    string folderPropUrl = folderId + \"/Properties\";\n",
                      "markdown": "`{\n    static const string folderId( \"http://base/_api/Web/aFolderId\" );\n    static const string parentId( \"http://base/_api/Web/rootFolderId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n\n    string parentUrl = folderId + \"/ParentFolder\";\n    string folderPropUrl = folderId + \"/Properties\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 61,
                  "endLine": 460,
                  "endColumn": 69,
                  "snippet": {
                    "text": "void SharePointTest::getAllVersionsTest( )\n{\n    static const string objectId( \"http://base/_api/Web/aFileId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string versionsUrl = objectId + \"/Versions\";\n    string objectV1Url = versionsUrl +\"(1)\";\n",
                    "rendered": {
                      "text": "void SharePointTest::getAllVersionsTest( )\n{\n    static const string objectId( \"http://base/_api/Web/aFileId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string versionsUrl = objectId + \"/Versions\";\n    string objectV1Url = versionsUrl +\"(1)\";\n",
                      "markdown": "`void SharePointTest::getAllVersionsTest( )\n{\n    static const string objectId( \"http://base/_api/Web/aFileId\" );\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string versionsUrl = objectId + \"/Versions\";\n    string objectV1Url = versionsUrl +\"(1)\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 61,
                  "endLine": 431,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string expectedContent( \"Test content stream\" );\n    string putUrl = objectId + \"/%24value\";\n",
                    "rendered": {
                      "text": "{\n    static const string objectId( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string expectedContent( \"Test content stream\" );\n    string putUrl = objectId + \"/%24value\";\n",
                      "markdown": "`{\n    static const string objectId( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string expectedContent( \"Test content stream\" );\n    string putUrl = objectId + \"/%24value\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 61,
                  "endLine": 406,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    static const string checkOutUrl = objectId + \"/checkout\";\n    static const string cancelCheckOutUrl = objectId + \"/undocheckout\";\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    curl_mockup_addResponse( objectId.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true );\n    curl_mockup_addResponse( authorUrl.c_str( ), \"\",\n",
                    "rendered": {
                      "text": "    static const string checkOutUrl = objectId + \"/checkout\";\n    static const string cancelCheckOutUrl = objectId + \"/undocheckout\";\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    curl_mockup_addResponse( objectId.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true );\n    curl_mockup_addResponse( authorUrl.c_str( ), \"\",\n",
                      "markdown": "`    static const string checkOutUrl = objectId + \"/checkout\";\n    static const string cancelCheckOutUrl = objectId + \"/undocheckout\";\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    curl_mockup_addResponse( objectId.c_str( ), \"\",\n                             \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true );\n    curl_mockup_addResponse( authorUrl.c_str( ), \"\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 61,
                  "endLine": 367,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string putUrl = objectId + \"/%24value\";\n\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string putUrl = objectId + \"/%24value\";\n\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string putUrl = objectId + \"/%24value\";\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 61,
                  "endLine": 334,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string expectedContent( \"Test content stream\" );\n    string downloadUrl = objectId + \"/%24value\";\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string expectedContent( \"Test content stream\" );\n    string downloadUrl = objectId + \"/%24value\";\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    string expectedContent( \"Test content stream\" );\n    string downloadUrl = objectId + \"/%24value\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 61,
                  "endLine": 304,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 61,
                  "endLine": 281,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFolderId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string folderPropUrl = objectId + \"/Properties\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/folder.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFolderId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string folderPropUrl = objectId + \"/Properties\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/folder.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFolderId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string folderPropUrl = objectId + \"/Properties\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/folder.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 61,
                  "endLine": 259,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 61,
                  "endLine": 228,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 61,
                  "endLine": 208,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 61,
                  "endLine": 175,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 61,
                  "endLine": 157,
                  "endColumn": 69,
                  "snippet": {
                    "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                    "rendered": {
                      "text": "{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n",
                      "markdown": "`{\n    static const string objectId ( \"http://base/_api/Web/aFileId\" );\n\n    SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n    string authorUrl = objectId + \"/Author\";\n    curl_mockup_addResponse ( objectId.c_str( ), \"\",\n                              \"GET\", DATA_DIR \"/sharepoint/file.json\", 200, true);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 62,
                  "endLine": 143,
                  "endColumn": 70,
                  "snippet": {
                    "text": "{\n     curl_mockup_reset( );\n\n     SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n",
                    "rendered": {
                      "text": "{\n     curl_mockup_reset( );\n\n     SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n",
                      "markdown": "`{\n     curl_mockup_reset( );\n\n     SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );\n\n     CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 62,
                  "endLine": 135,
                  "endColumn": 70,
                  "snippet": {
                    "text": "{\n     curl_mockup_reset( );\n\n     SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     CPPUNIT_ASSERT_MESSAGE( \"setRepository should never fail\", session->setRepository( \"Anything\" ));\n}\n\n",
                    "rendered": {
                      "text": "{\n     curl_mockup_reset( );\n\n     SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     CPPUNIT_ASSERT_MESSAGE( \"setRepository should never fail\", session->setRepository( \"Anything\" ));\n}\n\n",
                      "markdown": "`{\n     curl_mockup_reset( );\n\n     SharePointSessionPtr session = getTestSession( USERNAME, PASSWORD );\n     CPPUNIT_ASSERT_MESSAGE( \"setRepository should never fail\", session->setRepository( \"Anything\" ));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 76,
                  "endLine": 128,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                             DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n\n    return SharePointSessionPtr( new SharePointSession( BASE_URL, username, password, false ) );\n}\n\nvoid SharePointTest::setRepositoryTest( )\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                             DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n\n    return SharePointSessionPtr( new SharePointSession( BASE_URL, username, password, false ) );\n}\n\nvoid SharePointTest::setRepositoryTest( )\n",
                      "markdown": "`    curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                             DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n\n    return SharePointSessionPtr( new SharePointSession( BASE_URL, username, password, false ) );\n}\n\nvoid SharePointTest::setRepositoryTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 77,
                  "endLine": 119,
                  "endColumn": 85,
                  "snippet": {
                    "text": "        SharePointSessionPtr getTestSession( string username, string password );\n};\n\nSharePointSessionPtr SharePointTest::getTestSession( string username, string password )\n{\n    curl_mockup_reset( );\n    curl_mockup_addResponse( BASE_URL.c_str( ), \"\", \"GET\", \"\", 401, false );\n",
                    "rendered": {
                      "text": "        SharePointSessionPtr getTestSession( string username, string password );\n};\n\nSharePointSessionPtr SharePointTest::getTestSession( string username, string password )\n{\n    curl_mockup_reset( );\n    curl_mockup_addResponse( BASE_URL.c_str( ), \"\", \"GET\", \"\", 401, false );\n",
                      "markdown": "`        SharePointSessionPtr getTestSession( string username, string password );\n};\n\nSharePointSessionPtr SharePointTest::getTestSession( string username, string password )\n{\n    curl_mockup_reset( );\n    curl_mockup_addResponse( BASE_URL.c_str( ), \"\", \"GET\", \"\", 401, false );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 69,
                  "endLine": 116,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        SharePointSessionPtr getTestSession( string username, string password );\n};\n\nSharePointSessionPtr SharePointTest::getTestSession( string username, string password )\n",
                    "rendered": {
                      "text": "        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        SharePointSessionPtr getTestSession( string username, string password );\n};\n\nSharePointSessionPtr SharePointTest::getTestSession( string username, string password )\n",
                      "markdown": "`        CPPUNIT_TEST_SUITE_END( );\n\n    private:\n        SharePointSessionPtr getTestSession( string username, string password );\n};\n\nSharePointSessionPtr SharePointTest::getTestSession( string username, string password )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 36,
                  "endLine": 57,
                  "endColumn": 44,
                  "snippet": {
                    "text": "using namespace libcmis;\n\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string BASE_URL( \"http://base/_api/Web\" );\nstatic const string CONTEXTINFO_URL( \"http://base/_api/contextinfo\" );\n\n",
                    "rendered": {
                      "text": "using namespace libcmis;\n\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string BASE_URL( \"http://base/_api/Web\" );\nstatic const string CONTEXTINFO_URL( \"http://base/_api/contextinfo\" );\n\n",
                      "markdown": "`using namespace libcmis;\n\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string BASE_URL( \"http://base/_api/Web\" );\nstatic const string CONTEXTINFO_URL( \"http://base/_api/contextinfo\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-sharepoint.cxx"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 20,
                  "endLine": 57,
                  "endColumn": 28,
                  "snippet": {
                    "text": "using namespace libcmis;\n\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string BASE_URL( \"http://base/_api/Web\" );\nstatic const string CONTEXTINFO_URL( \"http://base/_api/contextinfo\" );\n\n",
                    "rendered": {
                      "text": "using namespace libcmis;\n\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string BASE_URL( \"http://base/_api/Web\" );\nstatic const string CONTEXTINFO_URL( \"http://base/_api/contextinfo\" );\n\n",
                      "markdown": "`using namespace libcmis;\n\nstatic const string USERNAME( \"mock-user\" );\nstatic const string PASSWORD( \"mock-password\" );\nstatic const string BASE_URL( \"http://base/_api/Web\" );\nstatic const string CONTEXTINFO_URL( \"http://base/_api/contextinfo\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 63,
                  "endLine": 547,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    string partId = ids.front( );\n\n    RelatedPartPtr part = multipart.getPart( partId );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing stream related part\", part.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Content not properly attached\", content, part->getContent( ) );\n\n    stringstream expectedXml;\n",
                    "rendered": {
                      "text": "    string partId = ids.front( );\n\n    RelatedPartPtr part = multipart.getPart( partId );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing stream related part\", part.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Content not properly attached\", content, part->getContent( ) );\n\n    stringstream expectedXml;\n",
                      "markdown": "`    string partId = ids.front( );\n\n    RelatedPartPtr part = multipart.getPart( partId );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing stream related part\", part.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Content not properly attached\", content, part->getContent( ) );\n\n    stringstream expectedXml;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 77,
                  "endLine": 441,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content\", rootContent, actualRoot->getContent( ) );\n    \n    RelatedPartPtr actualPart2 = multipart.getPart( part2Cid );\n    CPPUNIT_ASSERT_MESSAGE( \"No part corresponding to part2 cid\", actualPart2.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong part2 part content type\", part2Type, actualPart2->getContentType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong part2 part content\", part2Content, actualPart2->getContent( ) );\n}\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content\", rootContent, actualRoot->getContent( ) );\n    \n    RelatedPartPtr actualPart2 = multipart.getPart( part2Cid );\n    CPPUNIT_ASSERT_MESSAGE( \"No part corresponding to part2 cid\", actualPart2.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong part2 part content type\", part2Type, actualPart2->getContentType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong part2 part content\", part2Content, actualPart2->getContent( ) );\n}\n",
                      "markdown": "`    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content\", rootContent, actualRoot->getContent( ) );\n    \n    RelatedPartPtr actualPart2 = multipart.getPart( part2Cid );\n    CPPUNIT_ASSERT_MESSAGE( \"No part corresponding to part2 cid\", actualPart2.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong part2 part content type\", part2Type, actualPart2->getContentType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong part2 part content\", part2Content, actualPart2->getContent( ) );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 75,
                  "endLine": 436,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of parts parsed\", size_t( 2 ), cids.size( ) );\n\n    RelatedPartPtr actualRoot = multipart.getPart( rootCid );\n    CPPUNIT_ASSERT_MESSAGE( \"No part corresponding to root cid\", actualRoot.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content type\", rootType, actualRoot->getContentType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content\", rootContent, actualRoot->getContent( ) );\n    \n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of parts parsed\", size_t( 2 ), cids.size( ) );\n\n    RelatedPartPtr actualRoot = multipart.getPart( rootCid );\n    CPPUNIT_ASSERT_MESSAGE( \"No part corresponding to root cid\", actualRoot.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content type\", rootType, actualRoot->getContentType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content\", rootContent, actualRoot->getContent( ) );\n    \n",
                      "markdown": "`    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of parts parsed\", size_t( 2 ), cids.size( ) );\n\n    RelatedPartPtr actualRoot = multipart.getPart( rootCid );\n    CPPUNIT_ASSERT_MESSAGE( \"No part corresponding to root cid\", actualRoot.get( ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content type\", rootType, actualRoot->getContentType( ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong root part content\", rootContent, actualRoot->getContent( ) );\n    \n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 73,
                  "endLine": 315,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong detail string\", string( \"Some Error Message\" ), e.getFaultstring() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong detail string\", string( \"Client\" ), e.getFaultcode() );\n        CPPUNIT_ASSERT_MESSAGE( \"Wrong fault detail created\",\n                dynamic_cast< TestFaultDetail* >( e.getDetail( ).front( ).get( ) ) != NULL );\n    }\n}\n\n",
                    "rendered": {
                      "text": "        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong detail string\", string( \"Some Error Message\" ), e.getFaultstring() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong detail string\", string( \"Client\" ), e.getFaultcode() );\n        CPPUNIT_ASSERT_MESSAGE( \"Wrong fault detail created\",\n                dynamic_cast< TestFaultDetail* >( e.getDetail( ).front( ).get( ) ) != NULL );\n    }\n}\n\n",
                      "markdown": "`        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong detail string\", string( \"Some Error Message\" ), e.getFaultstring() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong detail string\", string( \"Client\" ), e.getFaultcode() );\n        CPPUNIT_ASSERT_MESSAGE( \"Wrong fault detail created\",\n                dynamic_cast< TestFaultDetail* >( e.getDetail( ).front( ).get( ) ) != NULL );\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 61,
                  "endLine": 236,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n    vector< SoapFaultDetailPtr > actual = factory.parseFaultDetail( test::getXmlNode( xml ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Wrong fault detail created\",\n            dynamic_cast< TestFaultDetail* >( actual.front( ).get( ) ) != NULL );\n}\n\nvoid SoapTest::parseResponseTest( )\n",
                    "rendered": {
                      "text": "\n    vector< SoapFaultDetailPtr > actual = factory.parseFaultDetail( test::getXmlNode( xml ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Wrong fault detail created\",\n            dynamic_cast< TestFaultDetail* >( actual.front( ).get( ) ) != NULL );\n}\n\nvoid SoapTest::parseResponseTest( )\n",
                      "markdown": "`\n    vector< SoapFaultDetailPtr > actual = factory.parseFaultDetail( test::getXmlNode( xml ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Wrong fault detail created\",\n            dynamic_cast< TestFaultDetail* >( actual.front( ).get( ) ) != NULL );\n}\n\nvoid SoapTest::parseResponseTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 91,
                  "endLine": 197,
                  "endColumn": 96,
                  "snippet": {
                    "text": "    RelatedMultipart multipart; // Multipart won't be used in that test\n\n    SoapResponsePtr actual = factory.createResponse( test::getXmlNode( xml ), multipart );\n    CPPUNIT_ASSERT_MESSAGE( \"Wrong response created\", dynamic_cast< TestResponse* >( actual.get( ) ) != NULL );\n}\n\nvoid SoapTest::parseFaultDetailEmptyTest( )\n",
                    "rendered": {
                      "text": "    RelatedMultipart multipart; // Multipart won't be used in that test\n\n    SoapResponsePtr actual = factory.createResponse( test::getXmlNode( xml ), multipart );\n    CPPUNIT_ASSERT_MESSAGE( \"Wrong response created\", dynamic_cast< TestResponse* >( actual.get( ) ) != NULL );\n}\n\nvoid SoapTest::parseFaultDetailEmptyTest( )\n",
                      "markdown": "`    RelatedMultipart multipart; // Multipart won't be used in that test\n\n    SoapResponsePtr actual = factory.createResponse( test::getXmlNode( xml ), multipart );\n    CPPUNIT_ASSERT_MESSAGE( \"Wrong response created\", dynamic_cast< TestResponse* >( actual.get( ) ) != NULL );\n}\n\nvoid SoapTest::parseFaultDetailEmptyTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 20,
                  "endLine": 512,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    \n    stringstream buf;\n    buf << \"<stream>\" << dataContent << \"</stream>\";\n    test::XmlNodeRef node = test::getXmlNode( buf.str( ) );\n\n    // Run the tested method\n    boost::shared_ptr< istream > stream = getStreamFromNode( node, multipart );\n",
                    "rendered": {
                      "text": "    \n    stringstream buf;\n    buf << \"<stream>\" << dataContent << \"</stream>\";\n    test::XmlNodeRef node = test::getXmlNode( buf.str( ) );\n\n    // Run the tested method\n    boost::shared_ptr< istream > stream = getStreamFromNode( node, multipart );\n",
                      "markdown": "`    \n    stringstream buf;\n    buf << \"<stream>\" << dataContent << \"</stream>\";\n    test::XmlNodeRef node = test::getXmlNode( buf.str( ) );\n\n    // Run the tested method\n    boost::shared_ptr< istream > stream = getStreamFromNode( node, multipart );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 18,
                  "endLine": 507,
                  "snippet": {
                    "text": "\n    RelatedMultipart multipart( body, contentType );\n\n    // Create test node\n    string dataContent = \"U29tZSB0cmFuc2ZlcmVkIGNvbnRlbnQ=\";\n    string expectedContent = \"Some transfered content\";\n    \n    stringstream buf;\n",
                    "rendered": {
                      "text": "\n    RelatedMultipart multipart( body, contentType );\n\n    // Create test node\n    string dataContent = \"U29tZSB0cmFuc2ZlcmVkIGNvbnRlbnQ=\";\n    string expectedContent = \"Some transfered content\";\n    \n    stringstream buf;\n",
                      "markdown": "`\n    RelatedMultipart multipart( body, contentType );\n\n    // Create test node\n    string dataContent = \"U29tZSB0cmFuc2ZlcmVkIGNvbnRlbnQ=\";\n    string expectedContent = \"Some transfered content\";\n    \n    stringstream buf;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 20,
                  "endLine": 478,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    buf << \"<stream>\"\n        << \"  <xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\" << dataCidEncoded << \"\\\"/>\"\n        << \"</stream>\";\n    test::XmlNodeRef node = test::getXmlNode( buf.str( ) );\n\n    // Run the tested method\n    boost::shared_ptr< istream > stream = getStreamFromNode( node, multipart );\n",
                    "rendered": {
                      "text": "    buf << \"<stream>\"\n        << \"  <xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\" << dataCidEncoded << \"\\\"/>\"\n        << \"</stream>\";\n    test::XmlNodeRef node = test::getXmlNode( buf.str( ) );\n\n    // Run the tested method\n    boost::shared_ptr< istream > stream = getStreamFromNode( node, multipart );\n",
                      "markdown": "`    buf << \"<stream>\"\n        << \"  <xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\" << dataCidEncoded << \"\\\"/>\"\n        << \"</stream>\";\n    test::XmlNodeRef node = test::getXmlNode( buf.str( ) );\n\n    // Run the tested method\n    boost::shared_ptr< istream > stream = getStreamFromNode( node, multipart );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 18,
                  "endLine": 474,
                  "snippet": {
                    "text": "\n    RelatedMultipart multipart( body, contentType );\n\n    // Create test node\n    stringstream buf;\n    buf << \"<stream>\"\n        << \"  <xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\" << dataCidEncoded << \"\\\"/>\"\n        << \"</stream>\";\n",
                    "rendered": {
                      "text": "\n    RelatedMultipart multipart( body, contentType );\n\n    // Create test node\n    stringstream buf;\n    buf << \"<stream>\"\n        << \"  <xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\" << dataCidEncoded << \"\\\"/>\"\n        << \"</stream>\";\n",
                      "markdown": "`\n    RelatedMultipart multipart( body, contentType );\n\n    // Create test node\n    stringstream buf;\n    buf << \"<stream>\"\n        << \"  <xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\" << dataCidEncoded << \"\\\"/>\"\n        << \"</stream>\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-soap.cxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-decoder.cxx"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 33,
                  "endLine": 36,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n#include <libcmis/xml-utils.hxx>\n\n#define BASE64_ENCODING string( \"base64\" )\n\nusing namespace std;\n\n",
                    "rendered": {
                      "text": "\n#include <libcmis/xml-utils.hxx>\n\n#define BASE64_ENCODING string( \"base64\" )\n\nusing namespace std;\n\n",
                      "markdown": "`\n#include <libcmis/xml-utils.hxx>\n\n#define BASE64_ENCODING string( \"base64\" )\n\nusing namespace std;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 55,
                  "endLine": 304,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointBadAuthTest( )\n",
                    "rendered": {
                      "text": "            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointBadAuthTest( )\n",
                      "markdown": "`            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointBadAuthTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 55,
                  "endLine": 288,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointDefaultAuthTest( )\n",
                    "rendered": {
                      "text": "            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointDefaultAuthTest( )\n",
                      "markdown": "`            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointDefaultAuthTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 53,
                  "endLine": 277,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a OneDriveSession\",\n            dynamic_cast< OneDriveSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointTest( )\n",
                    "rendered": {
                      "text": "            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a OneDriveSession\",\n            dynamic_cast< OneDriveSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointTest( )\n",
                      "markdown": "`            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a OneDriveSession\",\n            dynamic_cast< OneDriveSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionSharePointTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 51,
                  "endLine": 259,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a GDriveSession\",\n            dynamic_cast< GDriveSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionOneDriveTest( )\n",
                    "rendered": {
                      "text": "            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a GDriveSession\",\n            dynamic_cast< GDriveSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionOneDriveTest( )\n",
                      "markdown": "`            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a GDriveSession\",\n            dynamic_cast< GDriveSession* >( session.get() ) != NULL );\n}\n\nvoid FactoryTest::createSessionOneDriveTest( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 47,
                  "endLine": 222,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            BINDING_WS, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a WSSession\",\n            dynamic_cast< WSSession* >( session.get() ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"More than one request for the binding\",\n            int( 1 ), curl_mockup_getRequestsCount( BINDING_WS.c_str( ), \"\", \"GET\" ) );\n}\n",
                    "rendered": {
                      "text": "            BINDING_WS, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a WSSession\",\n            dynamic_cast< WSSession* >( session.get() ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"More than one request for the binding\",\n            int( 1 ), curl_mockup_getRequestsCount( BINDING_WS.c_str( ), \"\", \"GET\" ) );\n}\n",
                      "markdown": "`            BINDING_WS, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a WSSession\",\n            dynamic_cast< WSSession* >( session.get() ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"More than one request for the binding\",\n            int( 1 ), curl_mockup_getRequestsCount( BINDING_WS.c_str( ), \"\", \"GET\" ) );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 52,
                  "endLine": 191,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            BINDING_ATOM, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not an AtomPubSession\",\n            dynamic_cast< AtomPubSession* >( session.get() ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"More than one request for the binding\",\n            int( 1 ), curl_mockup_getRequestsCount( BINDING_ATOM.c_str( ), \"\", \"GET\" ) );\n}\n",
                    "rendered": {
                      "text": "            BINDING_ATOM, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not an AtomPubSession\",\n            dynamic_cast< AtomPubSession* >( session.get() ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"More than one request for the binding\",\n            int( 1 ), curl_mockup_getRequestsCount( BINDING_ATOM.c_str( ), \"\", \"GET\" ) );\n}\n",
                      "markdown": "`            BINDING_ATOM, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not an AtomPubSession\",\n            dynamic_cast< AtomPubSession* >( session.get() ) != NULL );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"More than one request for the binding\",\n            int( 1 ), curl_mockup_getRequestsCount( BINDING_ATOM.c_str( ), \"\", \"GET\" ) );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 49,
                  "endLine": 333,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_BAD, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Session should be NULL\", !session );\n}\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_BAD, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Session should be NULL\", !session );\n}\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_BAD, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Session should be NULL\", !session );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 56,
                  "endLine": 330,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( BINDING_BAD, \"\", \"GET\",\n                             \"<p>Some non CMIS content</p>\", 200, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_BAD, SERVER_USERNAME, SERVER_PASSWORD,\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( BINDING_BAD, \"\", \"GET\",\n                             \"<p>Some non CMIS content</p>\", 200, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_BAD, SERVER_USERNAME, SERVER_PASSWORD,\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( BINDING_BAD, \"\", \"GET\",\n                             \"<p>Some non CMIS content</p>\", 200, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_BAD, SERVER_USERNAME, SERVER_PASSWORD,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 47,
                  "endLine": 314,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    try\n    {\n        libcmis::SessionFactory::createSession(\n                BINDING_ATOM, \"Bad user\", \"Bad Password\",\n                SERVER_REPOSITORY );\n        CPPUNIT_FAIL( \"Should throw exception\" );\n    }\n",
                    "rendered": {
                      "text": "    try\n    {\n        libcmis::SessionFactory::createSession(\n                BINDING_ATOM, \"Bad user\", \"Bad Password\",\n                SERVER_REPOSITORY );\n        CPPUNIT_FAIL( \"Should throw exception\" );\n    }\n",
                      "markdown": "`    try\n    {\n        libcmis::SessionFactory::createSession(\n                BINDING_ATOM, \"Bad user\", \"Bad Password\",\n                SERVER_REPOSITORY );\n        CPPUNIT_FAIL( \"Should throw exception\" );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 56,
                  "endLine": 301,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 56,
                  "endLine": 298,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                             DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                             DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n",
                      "markdown": "`    curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                             DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 56,
                  "endLine": 285,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    lcl_init_mockup_sharepoint( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n",
                    "rendered": {
                      "text": "    lcl_init_mockup_sharepoint( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n",
                      "markdown": "`    lcl_init_mockup_sharepoint( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_SHAREPOINT, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a SharePoint Session\",\n            dynamic_cast< SharePointSession* >( session.get() ) != NULL );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 54,
                  "endLine": 273,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    libcmis::SessionFactory::setOAuth2AuthCodeProvider( authCodeFallback );\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_ONEDRIVE, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a OneDriveSession\",\n",
                    "rendered": {
                      "text": "\n    libcmis::SessionFactory::setOAuth2AuthCodeProvider( authCodeFallback );\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_ONEDRIVE, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a OneDriveSession\",\n",
                      "markdown": "`\n    libcmis::SessionFactory::setOAuth2AuthCodeProvider( authCodeFallback );\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_ONEDRIVE, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a OneDriveSession\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 52,
                  "endLine": 255,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                                 OAUTH_CLIENT_ID, OAUTH_CLIENT_SECRET ));\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_GDRIVE, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a GDriveSession\",\n",
                    "rendered": {
                      "text": "                                 OAUTH_CLIENT_ID, OAUTH_CLIENT_SECRET ));\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_GDRIVE, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a GDriveSession\",\n",
                      "markdown": "`                                 OAUTH_CLIENT_ID, OAUTH_CLIENT_SECRET ));\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_GDRIVE, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY, false,\n            oauth2Data ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a GDriveSession\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 48,
                  "endLine": 219,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    lcl_init_mockup_ws( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_WS, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a WSSession\",\n            dynamic_cast< WSSession* >( session.get() ) != NULL );\n",
                    "rendered": {
                      "text": "    lcl_init_mockup_ws( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_WS, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a WSSession\",\n            dynamic_cast< WSSession* >( session.get() ) != NULL );\n",
                      "markdown": "`    lcl_init_mockup_ws( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_WS, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a WSSession\",\n            dynamic_cast< WSSession* >( session.get() ) != NULL );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 47,
                  "endLine": 203,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    try\n    {\n        libcmis::SessionFactory::createSession(\n                BINDING_ATOM, \"Bad user\", \"Bad Password\",\n                SERVER_REPOSITORY );\n        CPPUNIT_FAIL( \"Should throw exception\" );\n    }\n",
                    "rendered": {
                      "text": "    try\n    {\n        libcmis::SessionFactory::createSession(\n                BINDING_ATOM, \"Bad user\", \"Bad Password\",\n                SERVER_REPOSITORY );\n        CPPUNIT_FAIL( \"Should throw exception\" );\n    }\n",
                      "markdown": "`    try\n    {\n        libcmis::SessionFactory::createSession(\n                BINDING_ATOM, \"Bad user\", \"Bad Password\",\n                SERVER_REPOSITORY );\n        CPPUNIT_FAIL( \"Should throw exception\" );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 50,
                  "endLine": 188,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    lcl_init_mockup_atom( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_ATOM, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not an AtomPubSession\",\n            dynamic_cast< AtomPubSession* >( session.get() ) != NULL );\n",
                    "rendered": {
                      "text": "    lcl_init_mockup_atom( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_ATOM, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not an AtomPubSession\",\n            dynamic_cast< AtomPubSession* >( session.get() ) != NULL );\n",
                      "markdown": "`    lcl_init_mockup_atom( );\n\n    unique_ptr< libcmis::Session > session( libcmis::SessionFactory::createSession(\n            BINDING_ATOM, SERVER_USERNAME, SERVER_PASSWORD,\n            SERVER_REPOSITORY ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not an AtomPubSession\",\n            dynamic_cast< AtomPubSession* >( session.get() ) != NULL );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 60,
                  "endLine": 148,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                 DATA_DIR \"/sharepoint/auth-resp.json\", 200, true );\n        curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n}\n\n",
                    "rendered": {
                      "text": "                                 DATA_DIR \"/sharepoint/auth-resp.json\", 200, true );\n        curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n}\n\n",
                      "markdown": "`                                 DATA_DIR \"/sharepoint/auth-resp.json\", 200, true );\n        curl_mockup_addResponse( CONTEXTINFO_URL.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/sharepoint/xdigest.json\", 200, true );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 89,
                  "endLine": 133,
                  "endColumn": 97,
                  "snippet": {
                    "text": "                                  DATA_DIR \"/gdrive/token-response.json\", 200, true );\n    }\n\n    char* authCodeFallback( const char* /*url*/, const char* /*username*/, const char* /*password*/ )\n    {\n        char *authCode = strdup( \"authCode\" );\n        return authCode;\n",
                    "rendered": {
                      "text": "                                  DATA_DIR \"/gdrive/token-response.json\", 200, true );\n    }\n\n    char* authCodeFallback( const char* /*url*/, const char* /*username*/, const char* /*password*/ )\n    {\n        char *authCode = strdup( \"authCode\" );\n        return authCode;\n",
                      "markdown": "`                                  DATA_DIR \"/gdrive/token-response.json\", 200, true );\n    }\n\n    char* authCodeFallback( const char* /*url*/, const char* /*username*/, const char* /*password*/ )\n    {\n        char *authCode = strdup( \"authCode\" );\n        return authCode;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 25,
                  "endLine": 121,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        curl_mockup_addResponse( GDRIVE_LOGIN_URL2.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/gdrive/login2.html\", 200, true);\n\n        //authentication password,\n        curl_mockup_addResponse( GDRIVE_LOGIN_URL.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/gdrive/approve.html\", 200, true);\n\n",
                    "rendered": {
                      "text": "        curl_mockup_addResponse( GDRIVE_LOGIN_URL2.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/gdrive/login2.html\", 200, true);\n\n        //authentication password,\n        curl_mockup_addResponse( GDRIVE_LOGIN_URL.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/gdrive/approve.html\", 200, true);\n\n",
                      "markdown": "`        curl_mockup_addResponse( GDRIVE_LOGIN_URL2.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/gdrive/login2.html\", 200, true);\n\n        //authentication password,\n        curl_mockup_addResponse( GDRIVE_LOGIN_URL.c_str( ), \"\", \"POST\",\n                                 DATA_DIR \"/gdrive/approve.html\", 200, true);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 60,
                  "endLine": 101,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        curl_mockup_reset( );\n        curl_mockup_addResponse( BINDING_ATOM.c_str( ), \"\", \"GET\",\n                                 DATA_DIR \"/atom/workspaces.xml\" );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n\n    void lcl_init_mockup_gdrive( )\n",
                    "rendered": {
                      "text": "        curl_mockup_reset( );\n        curl_mockup_addResponse( BINDING_ATOM.c_str( ), \"\", \"GET\",\n                                 DATA_DIR \"/atom/workspaces.xml\" );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n\n    void lcl_init_mockup_gdrive( )\n",
                      "markdown": "`        curl_mockup_reset( );\n        curl_mockup_addResponse( BINDING_ATOM.c_str( ), \"\", \"GET\",\n                                 DATA_DIR \"/atom/workspaces.xml\" );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n\n    void lcl_init_mockup_gdrive( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 60,
                  "endLine": 93,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                 DATA_DIR \"/ws/CMISWS-Service.wsdl\" );\n        test::addWsResponse( string( BINDING_WS + \"/services/RepositoryService\" ).c_str(),\n                                 DATA_DIR \"/ws/repositories.http\" );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n\n    void lcl_init_mockup_atom( )\n",
                    "rendered": {
                      "text": "                                 DATA_DIR \"/ws/CMISWS-Service.wsdl\" );\n        test::addWsResponse( string( BINDING_WS + \"/services/RepositoryService\" ).c_str(),\n                                 DATA_DIR \"/ws/repositories.http\" );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n\n    void lcl_init_mockup_atom( )\n",
                      "markdown": "`                                 DATA_DIR \"/ws/CMISWS-Service.wsdl\" );\n        test::addWsResponse( string( BINDING_WS + \"/services/RepositoryService\" ).c_str(),\n                                 DATA_DIR \"/ws/repositories.http\" );\n        curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    }\n\n    void lcl_init_mockup_atom( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-factory.cxx"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 15,
                  "endLine": 66,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#define BINDING_ONEDRIVE  string ( \"https://graph.microsoft.com/v1.0\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\n#define OAUTH_CLIENT_ID  string ( \"mock-id\" )\n#define OAUTH_CLIENT_SECRET  string ( \"mock-secret\" )\n",
                    "rendered": {
                      "text": "#define BINDING_ONEDRIVE  string ( \"https://graph.microsoft.com/v1.0\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\n#define OAUTH_CLIENT_ID  string ( \"mock-id\" )\n#define OAUTH_CLIENT_SECRET  string ( \"mock-secret\" )\n",
                      "markdown": "`#define BINDING_ONEDRIVE  string ( \"https://graph.microsoft.com/v1.0\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\n#define OAUTH_CLIENT_ID  string ( \"mock-id\" )\n#define OAUTH_CLIENT_SECRET  string ( \"mock-secret\" )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-helpers.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-helpers.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1437,
                  "startColumn": 38,
                  "endLine": 1437,
                  "endColumn": 43,
                  "snippet": {
                    "text": "void WSTest::versioningServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    VersioningService service( session.get() );\n\n    {\n        VersioningService copy( service );\n",
                    "rendered": {
                      "text": "void WSTest::versioningServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    VersioningService service( session.get() );\n\n    {\n        VersioningService copy( service );\n",
                      "markdown": "`void WSTest::versioningServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    VersioningService service( session.get() );\n\n    {\n        VersioningService copy( service );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1418,
                  "startColumn": 34,
                  "endLine": 1418,
                  "endColumn": 39,
                  "snippet": {
                    "text": "void WSTest::objectServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    ObjectService service( session.get() );\n\n    {\n        ObjectService copy( service );\n",
                    "rendered": {
                      "text": "void WSTest::objectServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    ObjectService service( session.get() );\n\n    {\n        ObjectService copy( service );\n",
                      "markdown": "`void WSTest::objectServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    ObjectService service( session.get() );\n\n    {\n        ObjectService copy( service );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 38,
                  "endLine": 1399,
                  "endColumn": 43,
                  "snippet": {
                    "text": "void WSTest::repositoryServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    RepositoryService service( session.get() );\n\n    {\n        RepositoryService copy( service );\n",
                    "rendered": {
                      "text": "void WSTest::repositoryServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    RepositoryService service( session.get() );\n\n    {\n        RepositoryService copy( service );\n",
                      "markdown": "`void WSTest::repositoryServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    RepositoryService service( session.get() );\n\n    {\n        RepositoryService copy( service );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 38,
                  "endLine": 1380,
                  "endColumn": 43,
                  "snippet": {
                    "text": "void WSTest::navigationServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    NavigationService service( session.get() );\n\n    {\n        NavigationService copy( service );\n",
                    "rendered": {
                      "text": "void WSTest::navigationServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    NavigationService service( session.get() );\n\n    {\n        NavigationService copy( service );\n",
                      "markdown": "`void WSTest::navigationServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    NavigationService service( session.get() );\n\n    {\n        NavigationService copy( service );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1248,
                  "startColumn": 72,
                  "endLine": 1248,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    libcmis::DocumentPtr pwc = document->checkOut( );\n\n    // Check that we have a PWC\n    CPPUNIT_ASSERT_MESSAGE( \"Missing returned Private Working Copy\", pwc.get( ) != NULL );\n\n    PropertyPtrMap::iterator it = pwc->getProperties( ).find( string( \"cmis:isVersionSeriesCheckedOut\" ) );\n    vector< bool > values = it->second->getBools( );\n",
                    "rendered": {
                      "text": "    libcmis::DocumentPtr pwc = document->checkOut( );\n\n    // Check that we have a PWC\n    CPPUNIT_ASSERT_MESSAGE( \"Missing returned Private Working Copy\", pwc.get( ) != NULL );\n\n    PropertyPtrMap::iterator it = pwc->getProperties( ).find( string( \"cmis:isVersionSeriesCheckedOut\" ) );\n    vector< bool > values = it->second->getBools( );\n",
                      "markdown": "`    libcmis::DocumentPtr pwc = document->checkOut( );\n\n    // Check that we have a PWC\n    CPPUNIT_ASSERT_MESSAGE( \"Missing returned Private Working Copy\", pwc.get( ) != NULL );\n\n    PropertyPtrMap::iterator it = pwc->getProperties( ).find( string( \"cmis:isVersionSeriesCheckedOut\" ) );\n    vector< bool > values = it->second->getBools( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1243,
                  "startColumn": 76,
                  "endLine": 1243,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n",
                    "rendered": {
                      "text": "\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n",
                      "markdown": "`\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1142,
                  "startColumn": 76,
                  "endLine": 1142,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    string destFolderId = \"valid-object\";\n    libcmis::FolderPtr src = document->getParents( ).front( );\n",
                    "rendered": {
                      "text": "\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    string destFolderId = \"valid-object\";\n    libcmis::FolderPtr src = document->getParents( ).front( );\n",
                      "markdown": "`\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    string destFolderId = \"valid-object\";\n    libcmis::FolderPtr src = document->getParents( ).front( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1108,
                  "startColumn": 70,
                  "endLine": 1108,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    string id = \"valid-object\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n\n    vector<string> failed = folder->removeTree( true, libcmis::UnfileObjects::Delete, false );\n\n",
                    "rendered": {
                      "text": "\n    string id = \"valid-object\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n\n    vector<string> failed = folder->removeTree( true, libcmis::UnfileObjects::Delete, false );\n\n",
                      "markdown": "`\n    string id = \"valid-object\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n\n    vector<string> failed = folder->removeTree( true, libcmis::UnfileObjects::Delete, false );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1081,
                  "startColumn": 76,
                  "endLine": 1081,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    // Run the tested method. Here we delete the object with all its versions\n    document->remove( true );\n",
                    "rendered": {
                      "text": "\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    // Run the tested method. Here we delete the object with all its versions\n    document->remove( true );\n",
                      "markdown": "`\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    // Run the tested method. Here we delete the object with all its versions\n    document->remove( true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 64,
                  "endLine": 321,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr expected = session->getType( id );\n    WSObjectType* type = dynamic_cast< WSObjectType* >( expected.get( ) );\n\n    {\n        WSObjectType copy( *type );\n",
                    "rendered": {
                      "text": "    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr expected = session->getType( id );\n    WSObjectType* type = dynamic_cast< WSObjectType* >( expected.get( ) );\n\n    {\n        WSObjectType copy( *type );\n",
                      "markdown": "`    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr expected = session->getType( id );\n    WSObjectType* type = dynamic_cast< WSObjectType* >( expected.get( ) );\n\n    {\n        WSObjectType copy( *type );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1457,
                  "startColumn": 26,
                  "endLine": 1457,
                  "endColumn": 34,
                  "snippet": {
                    "text": "{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n    session->m_password = password;\n\n    string buf;\n    test::loadFromFile( DATA_DIR \"/ws/CMISWS-Service.wsdl\", buf );\n",
                    "rendered": {
                      "text": "{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n    session->m_password = password;\n\n    string buf;\n    test::loadFromFile( DATA_DIR \"/ws/CMISWS-Service.wsdl\", buf );\n",
                      "markdown": "`{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n    session->m_password = password;\n\n    string buf;\n    test::loadFromFile( DATA_DIR \"/ws/CMISWS-Service.wsdl\", buf );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1457,
                  "startColumn": 15,
                  "endLine": 1457,
                  "endColumn": 23,
                  "snippet": {
                    "text": "{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n    session->m_password = password;\n\n    string buf;\n    test::loadFromFile( DATA_DIR \"/ws/CMISWS-Service.wsdl\", buf );\n",
                    "rendered": {
                      "text": "{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n    session->m_password = password;\n\n    string buf;\n    test::loadFromFile( DATA_DIR \"/ws/CMISWS-Service.wsdl\", buf );\n",
                      "markdown": "`{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n    session->m_password = password;\n\n    string buf;\n    test::loadFromFile( DATA_DIR \"/ws/CMISWS-Service.wsdl\", buf );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1453,
                  "startColumn": 61,
                  "endLine": 1453,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    }\n}\n\nWSSessionPtr WSTest::getTestSession( string username, string password, bool noRepos )\n{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n",
                    "rendered": {
                      "text": "    }\n}\n\nWSSessionPtr WSTest::getTestSession( string username, string password, bool noRepos )\n{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n",
                      "markdown": "`    }\n}\n\nWSSessionPtr WSTest::getTestSession( string username, string password, bool noRepos )\n{\n    WSSessionPtr session( new WSSession( ) );\n    session->m_username = username;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1436,
                  "startColumn": 67,
                  "endLine": 1436,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\nvoid WSTest::versioningServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    VersioningService service( session.get() );\n\n    {\n",
                    "rendered": {
                      "text": "\nvoid WSTest::versioningServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    VersioningService service( session.get() );\n\n    {\n",
                      "markdown": "`\nvoid WSTest::versioningServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    VersioningService service( session.get() );\n\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1417,
                  "startColumn": 67,
                  "endLine": 1417,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\nvoid WSTest::objectServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    ObjectService service( session.get() );\n\n    {\n",
                    "rendered": {
                      "text": "\nvoid WSTest::objectServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    ObjectService service( session.get() );\n\n    {\n",
                      "markdown": "`\nvoid WSTest::objectServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    ObjectService service( session.get() );\n\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1398,
                  "startColumn": 67,
                  "endLine": 1398,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\nvoid WSTest::repositoryServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    RepositoryService service( session.get() );\n\n    {\n",
                    "rendered": {
                      "text": "\nvoid WSTest::repositoryServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    RepositoryService service( session.get() );\n\n    {\n",
                      "markdown": "`\nvoid WSTest::repositoryServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    RepositoryService service( session.get() );\n\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1379,
                  "startColumn": 67,
                  "endLine": 1379,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\nvoid WSTest::navigationServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    NavigationService service( session.get() );\n\n    {\n",
                    "rendered": {
                      "text": "\nvoid WSTest::navigationServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    NavigationService service( session.get() );\n\n    {\n",
                      "markdown": "`\nvoid WSTest::navigationServiceCopyTest()\n{\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    NavigationService service( session.get() );\n\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1353,
                  "startColumn": 67,
                  "endLine": 1353,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/get-versions.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a document\n    string id = \"test-document\";\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/get-versions.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a document\n    string id = \"test-document\";\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/get-versions.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a document\n    string id = \"test-document\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1348,
                  "startColumn": 56,
                  "endLine": 1348,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getAllVersionsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/get-versions.http\" );\n",
                    "rendered": {
                      "text": "void WSTest::getAllVersionsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/get-versions.http\" );\n",
                      "markdown": "`void WSTest::getAllVersionsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/get-versions.http\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1298,
                  "startColumn": 67,
                  "endLine": 1298,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/checked-in.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/checkin.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a checked out document\n    string id = \"working-copy\";\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/checked-in.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/checkin.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a checked out document\n    string id = \"working-copy\";\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/checked-in.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/checkin.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a checked out document\n    string id = \"working-copy\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1292,
                  "startColumn": 56,
                  "endLine": 1292,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::checkInTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\", \"<cmism:objectId>working-copy</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/checked-in.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n",
                    "rendered": {
                      "text": "void WSTest::checkInTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\", \"<cmism:objectId>working-copy</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/checked-in.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n",
                      "markdown": "`void WSTest::checkInTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\", \"<cmism:objectId>working-copy</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/checked-in.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1271,
                  "startColumn": 67,
                  "endLine": 1271,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/cancel-checkout.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a checked out document\n    string id = \"working-copy\";\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/cancel-checkout.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a checked out document\n    string id = \"working-copy\";\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/cancel-checkout.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // First get a checked out document\n    string id = \"working-copy\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1266,
                  "startColumn": 56,
                  "endLine": 1266,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::cancelCheckOutTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/cancel-checkout.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n",
                    "rendered": {
                      "text": "void WSTest::cancelCheckOutTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/cancel-checkout.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n",
                      "markdown": "`void WSTest::cancelCheckOutTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/cancel-checkout.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1239,
                  "startColumn": 67,
                  "endLine": 1239,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/checkout.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/checkout.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/VersioningService\", DATA_DIR \"/ws/checkout.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1233,
                  "startColumn": 56,
                  "endLine": 1233,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::checkOutTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\", \"<cmism:objectId>working-copy</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n",
                    "rendered": {
                      "text": "void WSTest::checkOutTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\", \"<cmism:objectId>working-copy</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n",
                      "markdown": "`void WSTest::checkOutTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:objectId>test-document</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/working-copy.http\", \"<cmism:objectId>working-copy</cmism:objectId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1175,
                  "startColumn": 68,
                  "endLine": 1175,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1173,
                  "startColumn": 56,
                  "endLine": 1173,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                         \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n",
                    "rendered": {
                      "text": "                         \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n",
                      "markdown": "`                         \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1138,
                  "startColumn": 67,
                  "endLine": 1138,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/move-object.http\", \"<cmism:moveObject \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/move-object.http\", \"<cmism:moveObject \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/move-object.http\", \"<cmism:moveObject \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1131,
                  "startColumn": 56,
                  "endLine": 1131,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::moveTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\", \"<cmism:typeId>cmis:folder</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n",
                    "rendered": {
                      "text": "void WSTest::moveTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\", \"<cmism:typeId>cmis:folder</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n",
                      "markdown": "`void WSTest::moveTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\", \"<cmism:typeId>cmis:folder</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1104,
                  "startColumn": 67,
                  "endLine": 1104,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-tree.http\", \"<cmism:deleteTree \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"valid-object\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-tree.http\", \"<cmism:deleteTree \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"valid-object\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-tree.http\", \"<cmism:deleteTree \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"valid-object\";\n    libcmis::ObjectPtr object = session->getObject( id );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1099,
                  "startColumn": 56,
                  "endLine": 1099,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::deleteFolderTreeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-tree.http\", \"<cmism:deleteTree \" );\n",
                    "rendered": {
                      "text": "void WSTest::deleteFolderTreeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-tree.http\", \"<cmism:deleteTree \" );\n",
                      "markdown": "`void WSTest::deleteFolderTreeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-tree.http\", \"<cmism:deleteTree \" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1077,
                  "startColumn": 67,
                  "endLine": 1077,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-object.http\", \"<cmism:deleteObject \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-object.http\", \"<cmism:deleteObject \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-object.http\", \"<cmism:deleteObject \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 56,
                  "endLine": 1072,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::deleteDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-object.http\", \"<cmism:deleteObject \" );\n",
                    "rendered": {
                      "text": "void WSTest::deleteDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-object.http\", \"<cmism:deleteObject \" );\n",
                      "markdown": "`void WSTest::deleteDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/delete-object.http\", \"<cmism:deleteObject \" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 67,
                  "endLine": 994,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 989,
                  "startColumn": 56,
                  "endLine": 989,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-document.http\", \"<cmism:createDocument \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n",
                    "rendered": {
                      "text": "void WSTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-document.http\", \"<cmism:createDocument \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n",
                      "markdown": "`void WSTest::createDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-document.http\", \"<cmism:createDocument \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 931,
                  "startColumn": 68,
                  "endLine": 931,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder-bad-type.http\", \"<cmism:createFolder \" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder-bad-type.http\", \"<cmism:createFolder \" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder-bad-type.http\", \"<cmism:createFolder \" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 926,
                  "startColumn": 56,
                  "endLine": 926,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::createFolderBadTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder-bad-type.http\", \"<cmism:createFolder \" );\n",
                    "rendered": {
                      "text": "void WSTest::createFolderBadTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder-bad-type.http\", \"<cmism:createFolder \" );\n",
                      "markdown": "`void WSTest::createFolderBadTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder-bad-type.http\", \"<cmism:createFolder \" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 68,
                  "endLine": 869,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder.http\", \"<cmism:createFolder \" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder.http\", \"<cmism:createFolder \" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder.http\", \"<cmism:createFolder \" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 56,
                  "endLine": 864,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::createFolderTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder.http\", \"<cmism:createFolder \" );\n",
                    "rendered": {
                      "text": "void WSTest::createFolderTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder.http\", \"<cmism:createFolder \" );\n",
                      "markdown": "`void WSTest::createFolderTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/root-folder.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/create-folder.http\", \"<cmism:createFolder \" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 68,
                  "endLine": 842,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 840,
                  "startColumn": 56,
                  "endLine": 840,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 68,
                  "endLine": 791,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Values for the test\n    string id = \"test-document\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 56,
                  "endLine": 789,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/update-properties.http\", \"<cmism:updateProperties \" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 67,
                  "endLine": 765,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-renditions.http\", \"<cmism:getRenditions \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-renditions.http\", \"<cmism:getRenditions \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-renditions.http\", \"<cmism:getRenditions \" );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 56,
                  "endLine": 760,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getRenditionsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-renditions.http\", \"<cmism:getRenditions \" );\n",
                    "rendered": {
                      "text": "void WSTest::getRenditionsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-renditions.http\", \"<cmism:getRenditions \" );\n",
                      "markdown": "`void WSTest::getRenditionsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-renditions.http\", \"<cmism:getRenditions \" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 67,
                  "endLine": 709,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/set-content-stream.http\", \"<cmism:setContentStream \" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/set-content-stream.http\", \"<cmism:setContentStream \" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/set-content-stream.http\", \"<cmism:setContentStream \" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 56,
                  "endLine": 703,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/set-content-stream.http\", \"<cmism:setContentStream \" );\n",
                    "rendered": {
                      "text": "void WSTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/set-content-stream.http\", \"<cmism:setContentStream \" );\n",
                      "markdown": "`void WSTest::setContentStreamTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/set-content-stream.http\", \"<cmism:setContentStream \" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 67,
                  "endLine": 678,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-content-stream.http\", \"<cmism:getContentStream \" );\n\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-content-stream.http\", \"<cmism:getContentStream \" );\n\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-content-stream.http\", \"<cmism:getContentStream \" );\n\n\n    WSSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 56,
                  "endLine": 672,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-content-stream.http\", \"<cmism:getContentStream \" );\n",
                    "rendered": {
                      "text": "void WSTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-content-stream.http\", \"<cmism:getContentStream \" );\n",
                      "markdown": "`void WSTest::getContentStreamTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\", \"<cmism:getObject \" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/get-content-stream.http\", \"<cmism:getContentStream \" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 68,
                  "endLine": 634,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/root-children.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n\n    string id = \"root-folder\";\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/root-children.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n\n    string id = \"root-folder\";\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/root-children.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n\n    string id = \"root-folder\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 56,
                  "endLine": 629,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getChildrenTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\", \"<cmism:typeId>cmis:folder</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/root-children.http\" );\n",
                    "rendered": {
                      "text": "void WSTest::getChildrenTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\", \"<cmism:typeId>cmis:folder</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/root-children.http\" );\n",
                      "markdown": "`void WSTest::getChildrenTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\", \"<cmism:typeId>cmis:folder</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\", \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/root-children.http\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 605,
                  "startColumn": 68,
                  "endLine": 605,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    vector< libcmis::FolderPtr > actual = session->getNavigationService().\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    vector< libcmis::FolderPtr > actual = session->getNavigationService().\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"test-document\";\n    vector< libcmis::FolderPtr > actual = session->getNavigationService().\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 56,
                  "endLine": 601,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getDocumentParentsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n\n",
                    "rendered": {
                      "text": "void WSTest::getDocumentParentsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n\n",
                      "markdown": "`void WSTest::getDocumentParentsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/NavigationService\", DATA_DIR \"/ws/test-document-parents.http\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 68,
                  "endLine": 572,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/getbypath-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string path = \"/some/invalid/path\";\n    try\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/getbypath-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string path = \"/some/invalid/path\";\n    try\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/getbypath-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string path = \"/some/invalid/path\";\n    try\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 56,
                  "endLine": 569,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getByPathInvalidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/getbypath-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                    "rendered": {
                      "text": "void WSTest::getByPathInvalidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/getbypath-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                      "markdown": "`void WSTest::getByPathInvalidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/getbypath-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 68,
                  "endLine": 547,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string path = \"/Valid Object\";\n    libcmis::ObjectPtr actual = session->getObjectByPath( path );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string path = \"/Valid Object\";\n    libcmis::ObjectPtr actual = session->getObjectByPath( path );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string path = \"/Valid Object\";\n    libcmis::ObjectPtr actual = session->getObjectByPath( path );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 56,
                  "endLine": 543,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getByPathValidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n",
                    "rendered": {
                      "text": "void WSTest::getByPathValidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n",
                      "markdown": "`void WSTest::getByPathValidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 68,
                  "endLine": 516,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Run the method under test\n    string expectedId( \"valid-object\" );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Run the method under test\n    string expectedId( \"valid-object\" );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Run the method under test\n    string expectedId( \"valid-object\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 56,
                  "endLine": 512,
                  "endColumn": 64,
                  "snippet": {
                    "text": "{\n    // Setup the mockup\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n",
                    "rendered": {
                      "text": "{\n    // Setup the mockup\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n",
                      "markdown": "`{\n    // Setup the mockup\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 68,
                  "endLine": 473,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 56,
                  "endLine": 469,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n\n",
                    "rendered": {
                      "text": "void WSTest::getDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n\n",
                      "markdown": "`void WSTest::getDocumentTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-docLevel2.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document.http\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 68,
                  "endLine": 443,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Run the tested method\n    string expectedId( \"valid-object\" );\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Run the tested method\n    string expectedId( \"valid-object\" );\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    // Run the tested method\n    string expectedId( \"valid-object\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 56,
                  "endLine": 439,
                  "endColumn": 64,
                  "snippet": {
                    "text": "{\n    // Setup the mockup\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n",
                    "rendered": {
                      "text": "{\n    // Setup the mockup\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n",
                      "markdown": "`{\n    // Setup the mockup\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/valid-object.http\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 68,
                  "endLine": 415,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                         DATA_DIR \"/ws/type-document.http\",\n                         \"<cmism:typeId>cmis:document</cmism:typeId>\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"cmis:document\";\n    libcmis::ObjectTypePtr actual = session->getType( id );\n",
                    "rendered": {
                      "text": "                         DATA_DIR \"/ws/type-document.http\",\n                         \"<cmism:typeId>cmis:document</cmism:typeId>\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"cmis:document\";\n    libcmis::ObjectTypePtr actual = session->getType( id );\n",
                      "markdown": "`                         DATA_DIR \"/ws/type-document.http\",\n                         \"<cmism:typeId>cmis:document</cmism:typeId>\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"cmis:document\";\n    libcmis::ObjectTypePtr actual = session->getType( id );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 56,
                  "endLine": 407,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getTypeChildrenTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/typechildren-document.http\",\n                         \"<cmism:getTypeChildren \");\n",
                    "rendered": {
                      "text": "void WSTest::getTypeChildrenTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/typechildren-document.http\",\n                         \"<cmism:getTypeChildren \");\n",
                      "markdown": "`void WSTest::getTypeChildrenTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/typechildren-document.http\",\n                         \"<cmism:getTypeChildren \");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 68,
                  "endLine": 380,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                         DATA_DIR \"/ws/type-document.http\",\n                         \"<cmism:typeId>cmis:document</cmism:typeId>\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"DocumentLevel2\";\n    libcmis::ObjectTypePtr actual = session->getType( id );\n",
                    "rendered": {
                      "text": "                         DATA_DIR \"/ws/type-document.http\",\n                         \"<cmism:typeId>cmis:document</cmism:typeId>\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"DocumentLevel2\";\n    libcmis::ObjectTypePtr actual = session->getType( id );\n",
                      "markdown": "`                         DATA_DIR \"/ws/type-document.http\",\n                         \"<cmism:typeId>cmis:document</cmism:typeId>\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n\n    string id = \"DocumentLevel2\";\n    libcmis::ObjectTypePtr actual = session->getType( id );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 56,
                  "endLine": 369,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getTypeParentsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\",\n                         \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n",
                    "rendered": {
                      "text": "void WSTest::getTypeParentsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\",\n                         \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n",
                      "markdown": "`void WSTest::getTypeParentsTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\",\n                         \"<cmism:typeId>DocumentLevel2</cmism:typeId>\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 68,
                  "endLine": 345,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"bad_type\" );\n    try\n    {\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"bad_type\" );\n    try\n    {\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"bad_type\" );\n    try\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 56,
                  "endLine": 342,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getUnexistantTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                    "rendered": {
                      "text": "void WSTest::getUnexistantTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                      "markdown": "`void WSTest::getUnexistantTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 68,
                  "endLine": 318,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr expected = session->getType( id );\n    WSObjectType* type = dynamic_cast< WSObjectType* >( expected.get( ) );\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr expected = session->getType( id );\n    WSObjectType* type = dynamic_cast< WSObjectType* >( expected.get( ) );\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr expected = session->getType( id );\n    WSObjectType* type = dynamic_cast< WSObjectType* >( expected.get( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 56,
                  "endLine": 315,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::objectTypeCopyTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                    "rendered": {
                      "text": "void WSTest::objectTypeCopyTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                      "markdown": "`void WSTest::objectTypeCopyTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 68,
                  "endLine": 293,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"DocumentLevel2\" );\n    libcmis::ObjectTypePtr actual = session->getType( id );\n\n",
                    "rendered": {
                      "text": "    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"DocumentLevel2\" );\n    libcmis::ObjectTypePtr actual = session->getType( id );\n\n",
                      "markdown": "`    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"DocumentLevel2\" );\n    libcmis::ObjectTypePtr actual = session->getType( id );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 56,
                  "endLine": 289,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getTypeRefreshTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\" );\n\n",
                    "rendered": {
                      "text": "void WSTest::getTypeRefreshTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\" );\n\n",
                      "markdown": "`void WSTest::getTypeRefreshTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\",\n                         DATA_DIR \"/ws/type-docLevel2.http\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 68,
                  "endLine": 270,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr actual = session->getType( id );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr actual = session->getType( id );\n\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string id( \"cmis:folder\" );\n    libcmis::ObjectTypePtr actual = session->getType( id );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 56,
                  "endLine": 267,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                    "rendered": {
                      "text": "void WSTest::getTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                      "markdown": "`void WSTest::getTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/type-folder.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 68,
                  "endLine": 243,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string badId = \"bad\";\n    try\n    {\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string badId = \"bad\";\n    try\n    {\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string badId = \"bad\";\n    try\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 56,
                  "endLine": 240,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getRepositoryInfosBadTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                    "rendered": {
                      "text": "void WSTest::getRepositoryInfosBadTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                      "markdown": "`void WSTest::getRepositoryInfosBadTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos-bad.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 68,
                  "endLine": 224,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string validId = \"mock\";\n    libcmis::RepositoryPtr actual = session->getRepositoryService().getRepositoryInfo( validId );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Root folder is wrong\", string( \"root-folder\" ), actual->getRootId( ) );\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string validId = \"mock\";\n    libcmis::RepositoryPtr actual = session->getRepositoryService().getRepositoryInfo( validId );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Root folder is wrong\", string( \"root-folder\" ), actual->getRootId( ) );\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    string validId = \"mock\";\n    libcmis::RepositoryPtr actual = session->getRepositoryService().getRepositoryInfo( validId );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Root folder is wrong\", string( \"root-folder\" ), actual->getRootId( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 56,
                  "endLine": 221,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getRepositoryInfosTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                    "rendered": {
                      "text": "void WSTest::getRepositoryInfosTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                      "markdown": "`void WSTest::getRepositoryInfosTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repository-infos.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 68,
                  "endLine": 208,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repositories.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    map< string, string > actual = session->getRepositoryService().getRepositories( );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ), actual.size( ) );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repositories.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    map< string, string > actual = session->getRepositoryService().getRepositories( );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ), actual.size( ) );\n\n",
                      "markdown": "`    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repositories.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n    map< string, string > actual = session->getRepositoryService().getRepositories( );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ), actual.size( ) );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 56,
                  "endLine": 205,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void WSTest::getRepositoriesTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repositories.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                    "rendered": {
                      "text": "void WSTest::getRepositoriesTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repositories.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n",
                      "markdown": "`void WSTest::getRepositoriesTest()\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n    test::addWsResponse( \"http://mockup/ws/services/RepositoryService\", DATA_DIR \"/ws/repositories.http\" );\n\n    WSSessionPtr session  = getTestSession( SERVER_USERNAME, SERVER_PASSWORD, true );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 61,
                  "endLine": 197,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        CPPUNIT_TEST_SUITE_END( );\n\n        libcmis::RepositoryPtr getTestRepository( );\n        WSSessionPtr getTestSession( string username, string password, bool noRepos = false );\n};\n\nCPPUNIT_TEST_SUITE_REGISTRATION( WSTest );\n",
                    "rendered": {
                      "text": "        CPPUNIT_TEST_SUITE_END( );\n\n        libcmis::RepositoryPtr getTestRepository( );\n        WSSessionPtr getTestSession( string username, string password, bool noRepos = false );\n};\n\nCPPUNIT_TEST_SUITE_REGISTRATION( WSTest );\n",
                      "markdown": "`        CPPUNIT_TEST_SUITE_END( );\n\n        libcmis::RepositoryPtr getTestRepository( );\n        WSSessionPtr getTestSession( string username, string password, bool noRepos = false );\n};\n\nCPPUNIT_TEST_SUITE_REGISTRATION( WSTest );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 15,
                  "endLine": 55,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#define SERVER_URL string( \"http://mockup/ws\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\nusing namespace std;\nusing libcmis::PropertyPtrMap;\n",
                    "rendered": {
                      "text": "#define SERVER_URL string( \"http://mockup/ws\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\nusing namespace std;\nusing libcmis::PropertyPtrMap;\n",
                      "markdown": "`#define SERVER_URL string( \"http://mockup/ws\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\nusing namespace std;\nusing libcmis::PropertyPtrMap;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 11,
                  "endLine": 88,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        string requestStr = test::getXmlNodeAsString( xml, \"/soap-env:Envelope/soap-env:Body/child::*\" );\n\n        // Obfuscate the xop:Include ids\n        string xopSearch = \"<xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\";\n        size_t pos = requestStr.find( xopSearch );\n        if ( pos != string::npos )\n",
                    "rendered": {
                      "text": "\n        string requestStr = test::getXmlNodeAsString( xml, \"/soap-env:Envelope/soap-env:Body/child::*\" );\n\n        // Obfuscate the xop:Include ids\n        string xopSearch = \"<xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\";\n        size_t pos = requestStr.find( xopSearch );\n        if ( pos != string::npos )\n",
                      "markdown": "`\n        string requestStr = test::getXmlNodeAsString( xml, \"/soap-env:Envelope/soap-env:Body/child::*\" );\n\n        // Obfuscate the xop:Include ids\n        string xopSearch = \"<xop:Include xmlns:xop=\\\"http://www.w3.org/2004/08/xop/include\\\" href=\\\"cid:\";\n        size_t pos = requestStr.find( xopSearch );\n        if ( pos != string::npos )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 51,
                  "endLine": 1022,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    libcmis::PropertyPtr typeProperty( new libcmis::Property( it->second, typeValues ) );\n    props.insert( pair< string, libcmis::PropertyPtr >( string( \"cmis:objectTypeId\" ), typeProperty ) );\n\n    // Make the mockup able to send the response to update the object\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/created-document.http\", \"<cmism:getObject \" );\n\n    // Actually send the document creation request\n",
                    "rendered": {
                      "text": "    libcmis::PropertyPtr typeProperty( new libcmis::Property( it->second, typeValues ) );\n    props.insert( pair< string, libcmis::PropertyPtr >( string( \"cmis:objectTypeId\" ), typeProperty ) );\n\n    // Make the mockup able to send the response to update the object\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/created-document.http\", \"<cmism:getObject \" );\n\n    // Actually send the document creation request\n",
                      "markdown": "`    libcmis::PropertyPtr typeProperty( new libcmis::Property( it->second, typeValues ) );\n    props.insert( pair< string, libcmis::PropertyPtr >( string( \"cmis:objectTypeId\" ), typeProperty ) );\n\n    // Make the mockup able to send the response to update the object\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/created-document.http\", \"<cmism:getObject \" );\n\n    // Actually send the document creation request\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 35,
                  "endLine": 849,
                  "snippet": {
                    "text": "    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n\n    // Just leave the map empty and update\n    PropertyPtrMap emptyProperties;\n    libcmis::ObjectPtr updated = object->updateProperties( emptyProperties );\n\n    // Check that no HTTP request was sent\n",
                    "rendered": {
                      "text": "    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n\n    // Just leave the map empty and update\n    PropertyPtrMap emptyProperties;\n    libcmis::ObjectPtr updated = object->updateProperties( emptyProperties );\n\n    // Check that no HTTP request was sent\n",
                      "markdown": "`    string id = \"test-document\";\n    libcmis::ObjectPtr object = session->getObject( id );\n\n    // Just leave the map empty and update\n    PropertyPtrMap emptyProperties;\n    libcmis::ObjectPtr updated = object->updateProperties( emptyProperties );\n\n    // Check that no HTTP request was sent\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 6,
                  "endLine": 812,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    // Change the object response to provide the updated values\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document-updated.http\", \"<cmism:getObject \" );\n\n    // Update the properties (method to test)\n    libcmis::ObjectPtr updated = object->updateProperties( newProperties );\n\n    // Check the sent request\n",
                    "rendered": {
                      "text": "    // Change the object response to provide the updated values\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document-updated.http\", \"<cmism:getObject \" );\n\n    // Update the properties (method to test)\n    libcmis::ObjectPtr updated = object->updateProperties( newProperties );\n\n    // Check the sent request\n",
                      "markdown": "`    // Change the object response to provide the updated values\n    test::addWsResponse( \"http://mockup/ws/services/ObjectService\", DATA_DIR \"/ws/test-document-updated.http\", \"<cmism:getObject \" );\n\n    // Update the properties (method to test)\n    libcmis::ObjectPtr updated = object->updateProperties( newProperties );\n\n    // Check the sent request\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1440,
                  "startColumn": 31,
                  "endLine": 1440,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    VersioningService service( session.get() );\n\n    {\n        VersioningService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n",
                    "rendered": {
                      "text": "    VersioningService service( session.get() );\n\n    {\n        VersioningService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n",
                      "markdown": "`    VersioningService service( session.get() );\n\n    {\n        VersioningService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1421,
                  "startColumn": 27,
                  "endLine": 1421,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ObjectService service( session.get() );\n\n    {\n        ObjectService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n",
                    "rendered": {
                      "text": "    ObjectService service( session.get() );\n\n    {\n        ObjectService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n",
                      "markdown": "`    ObjectService service( session.get() );\n\n    {\n        ObjectService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1402,
                  "startColumn": 31,
                  "endLine": 1402,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    RepositoryService service( session.get() );\n\n    {\n        RepositoryService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n",
                    "rendered": {
                      "text": "    RepositoryService service( session.get() );\n\n    {\n        RepositoryService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n",
                      "markdown": "`    RepositoryService service( session.get() );\n\n    {\n        RepositoryService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-ws.cxx"
                },
                "region": {
                  "startLine": 1383,
                  "startColumn": 31,
                  "endLine": 1383,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    NavigationService service( session.get() );\n\n    {\n        NavigationService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n",
                    "rendered": {
                      "text": "    NavigationService service( session.get() );\n\n    {\n        NavigationService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n",
                      "markdown": "`    NavigationService service( session.get() );\n\n    {\n        NavigationService copy( service );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Session not copied\", service.m_session, copy.m_session );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"URL not copied\", service.m_url, copy.m_url );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1218,
                  "startColumn": 76,
                  "endLine": 1218,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    string destFolderId = \"valid-object\";\n    libcmis::FolderPtr src = document->getParents( ).front( );\n",
                    "rendered": {
                      "text": "    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    string destFolderId = \"valid-object\";\n    libcmis::FolderPtr src = document->getParents( ).front( );\n",
                      "markdown": "`    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    string destFolderId = \"valid-object\";\n    libcmis::FolderPtr src = document->getParents( ).front( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 72,
                  "endLine": 1114,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing returned Private Working Copy\", pwc.get( ) != NULL );\n\n    PropertyPtrMap::iterator it = pwc->getProperties( ).find( string( \"cmis:isVersionSeriesCheckedOut\" ) );\n    vector< bool > values = it->second->getBools( );\n",
                    "rendered": {
                      "text": "\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing returned Private Working Copy\", pwc.get( ) != NULL );\n\n    PropertyPtrMap::iterator it = pwc->getProperties( ).find( string( \"cmis:isVersionSeriesCheckedOut\" ) );\n    vector< bool > values = it->second->getBools( );\n",
                      "markdown": "`\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n    CPPUNIT_ASSERT_MESSAGE( \"Missing returned Private Working Copy\", pwc.get( ) != NULL );\n\n    PropertyPtrMap::iterator it = pwc->getProperties( ).find( string( \"cmis:isVersionSeriesCheckedOut\" ) );\n    vector< bool > values = it->second->getBools( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1110,
                  "startColumn": 76,
                  "endLine": 1110,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n",
                    "rendered": {
                      "text": "    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n",
                      "markdown": "`    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    libcmis::DocumentPtr pwc = document->checkOut( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1089,
                  "startColumn": 70,
                  "endLine": 1089,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"valid-object\" );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n\n    folder->removeTree( );\n\n",
                    "rendered": {
                      "text": "    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"valid-object\" );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n\n    folder->removeTree( );\n\n",
                      "markdown": "`    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"valid-object\" );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n\n    folder->removeTree( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 76,
                  "endLine": 1069,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    document->remove( );\n\n",
                    "rendered": {
                      "text": "    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    document->remove( );\n\n",
                      "markdown": "`    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n\n    document->remove( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 79,
                  "endLine": 514,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Folder should have only one path\",\n                                  size_t(1), actual->getPaths( ).size() );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), actual->getBaseType( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", actual->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !actual->isRootFolder() );\n\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !actual->getCreatedBy( ).empty( ) );\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Folder should have only one path\",\n                                  size_t(1), actual->getPaths( ).size() );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), actual->getBaseType( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", actual->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !actual->isRootFolder() );\n\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !actual->getCreatedBy( ).empty( ) );\n",
                      "markdown": "`    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Folder should have only one path\",\n                                  size_t(1), actual->getPaths( ).size() );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong base type\", string( \"cmis:folder\" ), actual->getBaseType( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Missing folder parent\", actual->getFolderParent( ).get( ) );\n    CPPUNIT_ASSERT_MESSAGE( \"Not a root folder\", !actual->isRootFolder() );\n\n    CPPUNIT_ASSERT_MESSAGE( \"CreatedBy is missing\", !actual->getCreatedBy( ).empty( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 100,
                  "endLine": 313,
                  "endColumn": 105,
                  "snippet": {
                    "text": "        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n        TestCertValidationHandler* handler_impl = static_cast< TestCertValidationHandler* >( handler.get( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of certificates provided\", size_t( 1 ), handler_impl->m_chain.size( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Bad certificate provided\", badCert, handler_impl->m_chain.front() );\n    }\n",
                    "rendered": {
                      "text": "        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n        TestCertValidationHandler* handler_impl = static_cast< TestCertValidationHandler* >( handler.get( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of certificates provided\", size_t( 1 ), handler_impl->m_chain.size( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Bad certificate provided\", badCert, handler_impl->m_chain.front() );\n    }\n",
                      "markdown": "`        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n        TestCertValidationHandler* handler_impl = static_cast< TestCertValidationHandler* >( handler.get( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of certificates provided\", size_t( 1 ), handler_impl->m_chain.size( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Bad certificate provided\", badCert, handler_impl->m_chain.front() );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1250,
                  "startColumn": 26,
                  "endLine": 1250,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    session->parseServiceDocument( buf );\n\n    session->m_username = username;\n    session->m_password = password;\n\n    return session;\n}\n",
                    "rendered": {
                      "text": "    session->parseServiceDocument( buf );\n\n    session->m_username = username;\n    session->m_password = password;\n\n    return session;\n}\n",
                      "markdown": "`    session->parseServiceDocument( buf );\n\n    session->m_username = username;\n    session->m_password = password;\n\n    return session;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1250,
                  "startColumn": 15,
                  "endLine": 1250,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    session->parseServiceDocument( buf );\n\n    session->m_username = username;\n    session->m_password = password;\n\n    return session;\n}\n",
                    "rendered": {
                      "text": "    session->parseServiceDocument( buf );\n\n    session->m_username = username;\n    session->m_password = password;\n\n    return session;\n}\n",
                      "markdown": "`    session->parseServiceDocument( buf );\n\n    session->m_username = username;\n    session->m_password = password;\n\n    return session;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 68,
                  "endLine": 1242,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    curl_mockup_HttpRequest_free( request );\n}\n\nAtomPubSessionPtr AtomTest::getTestSession( string username, string password )\n{\n    AtomPubSessionPtr session( new AtomPubSession( ) );\n    string buf;\n",
                    "rendered": {
                      "text": "    curl_mockup_HttpRequest_free( request );\n}\n\nAtomPubSessionPtr AtomTest::getTestSession( string username, string password )\n{\n    AtomPubSessionPtr session( new AtomPubSession( ) );\n    string buf;\n",
                      "markdown": "`    curl_mockup_HttpRequest_free( request );\n}\n\nAtomPubSessionPtr AtomTest::getTestSession( string username, string password )\n{\n    AtomPubSessionPtr session( new AtomPubSession( ) );\n    string buf;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 72,
                  "endLine": 1215,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=valid-object\", \"POST\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=valid-object\", \"POST\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=valid-object\", \"POST\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1213,
                  "startColumn": 56,
                  "endLine": 1213,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=valid-object\", \"POST\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=valid-object\", \"POST\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=valid-object\", \"POST\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1191,
                  "startColumn": 72,
                  "endLine": 1191,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/versions\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/get-versions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a document\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/versions\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/get-versions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a document\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/versions\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/get-versions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a document\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1189,
                  "startColumn": 56,
                  "endLine": 1189,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/versions\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/get-versions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/versions\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/get-versions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/versions\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/get-versions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1152,
                  "startColumn": 72,
                  "endLine": 1152,
                  "endColumn": 80,
                  "snippet": {
                    "text": "           \"Location: http://mockup/mock/id?id=valid-object\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a checked out document\n    libcmis::ObjectPtr object = session->getObject( \"working-copy\" );\n",
                    "rendered": {
                      "text": "           \"Location: http://mockup/mock/id?id=valid-object\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a checked out document\n    libcmis::ObjectPtr object = session->getObject( \"working-copy\" );\n",
                      "markdown": "`           \"Location: http://mockup/mock/id?id=valid-object\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a checked out document\n    libcmis::ObjectPtr object = session->getObject( \"working-copy\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1150,
                  "startColumn": 56,
                  "endLine": 1150,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"GET\", DATA_DIR \"/atom/working-copy.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"PUT\", DATA_DIR \"/atom/test-document.xml\", 200, true,\n           \"Location: http://mockup/mock/id?id=valid-object\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"GET\", DATA_DIR \"/atom/working-copy.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"PUT\", DATA_DIR \"/atom/test-document.xml\", 200, true,\n           \"Location: http://mockup/mock/id?id=valid-object\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"GET\", DATA_DIR \"/atom/working-copy.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"PUT\", DATA_DIR \"/atom/test-document.xml\", 200, true,\n           \"Location: http://mockup/mock/id?id=valid-object\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 72,
                  "endLine": 1129,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a checked out document\n    libcmis::ObjectPtr object = session->getObject( \"working-copy\" );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a checked out document\n    libcmis::ObjectPtr object = session->getObject( \"working-copy\" );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // First get a checked out document\n    libcmis::ObjectPtr object = session->getObject( \"working-copy\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1127,
                  "startColumn": 56,
                  "endLine": 1127,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"GET\", DATA_DIR \"/atom/working-copy.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"DELETE\", \"\", 204, false );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"GET\", DATA_DIR \"/atom/working-copy.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"DELETE\", \"\", 204, false );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"GET\", DATA_DIR \"/atom/working-copy.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=working-copy\", \"DELETE\", \"\", 204, false );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1107,
                  "startColumn": 72,
                  "endLine": 1107,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/checkedout\", \"\", \"POST\", DATA_DIR \"/atom/working-copy.xml\", 201 );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/checkedout\", \"\", \"POST\", DATA_DIR \"/atom/working-copy.xml\", 201 );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/checkedout\", \"\", \"POST\", DATA_DIR \"/atom/working-copy.xml\", 201 );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 56,
                  "endLine": 1105,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/checkedout\", \"\", \"POST\", DATA_DIR \"/atom/working-copy.xml\", 201 );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/checkedout\", \"\", \"POST\", DATA_DIR \"/atom/working-copy.xml\", 201 );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/checkedout\", \"\", \"POST\", DATA_DIR \"/atom/working-copy.xml\", 201 );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 72,
                  "endLine": 1086,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"valid-object\" );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"valid-object\" );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"valid-object\" );\n    libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( object.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1084,
                  "startColumn": 56,
                  "endLine": 1084,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/descendants\", \"id=valid-object\", \"DELETE\", \"\", 204, false );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/descendants\", \"id=valid-object\", \"DELETE\", \"\", 204, false );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/descendants\", \"id=valid-object\", \"DELETE\", \"\", 204, false );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1066,
                  "startColumn": 72,
                  "endLine": 1066,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"DELETE\", \"\", 204, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"DELETE\", \"\", 204, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"DELETE\", \"\", 204, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::Document* document = dynamic_cast< libcmis::Document* >( object.get() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1064,
                  "startColumn": 56,
                  "endLine": 1064,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"DELETE\", \"\", 204, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"DELETE\", \"\", 204, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"DELETE\", \"\", 204, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 72,
                  "endLine": 994,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 56,
                  "endLine": 992,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 929,
                  "startColumn": 72,
                  "endLine": 929,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 56,
                  "endLine": 927,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 72,
                  "endLine": 868,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr parent = session->getRootFolder( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 866,
                  "startColumn": 56,
                  "endLine": 866,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=root-folder\", \"POST\", DATA_DIR \"/atom/create-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=root-folder\", \"POST\", DATA_DIR \"/atom/create-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/children\", \"id=root-folder\", \"POST\", DATA_DIR \"/atom/create-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 72,
                  "endLine": 842,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 840,
                  "startColumn": 56,
                  "endLine": 840,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 72,
                  "endLine": 794,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"PUT\", DATA_DIR \"/atom/test-document-updated.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"PUT\", DATA_DIR \"/atom/test-document-updated.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"PUT\", DATA_DIR \"/atom/test-document-updated.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 56,
                  "endLine": 792,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"PUT\", DATA_DIR \"/atom/test-document-updated.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"PUT\", DATA_DIR \"/atom/test-document-updated.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"PUT\", DATA_DIR \"/atom/test-document-updated.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 72,
                  "endLine": 760,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 56,
                  "endLine": 758,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"PUT\", \"Updated\", 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 72,
                  "endLine": 731,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"GET\", expectedContent.c_str( ), 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"GET\", expectedContent.c_str( ), 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"GET\", expectedContent.c_str( ), 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 729,
                  "startColumn": 56,
                  "endLine": 729,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n    string expectedContent( \"Some content stream\" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"GET\", expectedContent.c_str( ), 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "\n    string expectedContent( \"Some content stream\" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"GET\", expectedContent.c_str( ), 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`\n    string expectedContent( \"Some content stream\" );\n    curl_mockup_addResponse( \"http://mockup/mock/content/data.txt\", \"id=test-document\", \"GET\", expectedContent.c_str( ), 0, false );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 72,
                  "endLine": 703,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n    libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 56,
                  "endLine": 701,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 72,
                  "endLine": 675,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    vector< libcmis::ObjectPtr > children = session->getRootFolder()->getChildren( );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of children\", size_t( 5 ), children.size() );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    vector< libcmis::ObjectPtr > children = session->getRootFolder()->getChildren( );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of children\", size_t( 5 ), children.size() );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    vector< libcmis::ObjectPtr > children = session->getRootFolder()->getChildren( );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of children\", size_t( 5 ), children.size() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 56,
                  "endLine": 673,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 72,
                  "endLine": 650,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/allowableactions\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/allowable-actions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/allowableactions\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/allowable-actions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/allowableactions\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/allowable-actions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 56,
                  "endLine": 648,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object-noactions.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/allowableactions\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/allowable-actions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object-noactions.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/allowableactions\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/allowable-actions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object-noactions.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/allowableactions\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/allowable-actions.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 72,
                  "endLine": 628,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 56,
                  "endLine": 626,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 72,
                  "endLine": 600,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 56,
                  "endLine": 598,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 72,
                  "endLine": 577,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 56,
                  "endLine": 575,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void AtomTest::getByPathInvalidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "void AtomTest::getByPathInvalidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`void AtomTest::getByPathInvalidTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 72,
                  "endLine": 565,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr actual = session->getObjectByPath( string( \"/Valid Object\" ) );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr actual = session->getObjectByPath( string( \"/Valid Object\" ) );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectPtr actual = session->getObjectByPath( string( \"/Valid Object\" ) );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 56,
                  "endLine": 563,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/path\", \"path=/Valid Object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/path\", \"path=/Valid Object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/path\", \"path=/Valid Object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 72,
                  "endLine": 543,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string id( \"bad_object\" );\n    try\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string id( \"bad_object\" );\n    try\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string id( \"bad_object\" );\n    try\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 56,
                  "endLine": 541,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void AtomTest::getUnexistantObjectTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "void AtomTest::getUnexistantObjectTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`void AtomTest::getUnexistantObjectTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 72,
                  "endLine": 531,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr actual = session->getFolder( \"test-document\" );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr actual = session->getFolder( \"test-document\" );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::FolderPtr actual = session->getFolder( \"test-document\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 56,
                  "endLine": 529,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 72,
                  "endLine": 501,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::FolderPtr actual = session->getFolder( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 56,
                  "endLine": 499,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=root-folder\", \"GET\", DATA_DIR \"/atom/root-folder.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 72,
                  "endLine": 468,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 56,
                  "endLine": 466,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document-relationships.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document-relationships.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document-relationships.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 72,
                  "endLine": 436,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"test-document\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 56,
                  "endLine": 434,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=test-document\", \"GET\", DATA_DIR \"/atom/test-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 72,
                  "endLine": 421,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"valid-object\" );\n    libcmis::ObjectPtr actual = session->getObject( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 56,
                  "endLine": 419,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/id\", \"id=valid-object\", \"GET\", DATA_DIR \"/atom/valid-object.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 72,
                  "endLine": 406,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/types\", \"typeId=cmis:document\", \"GET\", DATA_DIR \"/atom/typechildren-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectTypePtr actual = session->getType( \"cmis:document\" );\n    vector< libcmis::ObjectTypePtr > children = actual->getChildren( );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/types\", \"typeId=cmis:document\", \"GET\", DATA_DIR \"/atom/typechildren-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectTypePtr actual = session->getType( \"cmis:document\" );\n    vector< libcmis::ObjectTypePtr > children = actual->getChildren( );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/types\", \"typeId=cmis:document\", \"GET\", DATA_DIR \"/atom/typechildren-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectTypePtr actual = session->getType( \"cmis:document\" );\n    vector< libcmis::ObjectTypePtr > children = actual->getChildren( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 56,
                  "endLine": 404,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel1\", \"GET\", DATA_DIR \"/atom/type-docLevel1.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/types\", \"typeId=cmis:document\", \"GET\", DATA_DIR \"/atom/typechildren-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel1\", \"GET\", DATA_DIR \"/atom/type-docLevel1.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/types\", \"typeId=cmis:document\", \"GET\", DATA_DIR \"/atom/typechildren-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel1\", \"GET\", DATA_DIR \"/atom/type-docLevel1.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/types\", \"typeId=cmis:document\", \"GET\", DATA_DIR \"/atom/typechildren-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 72,
                  "endLine": 390,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectTypePtr actual = session->getType( \"DocumentLevel2\" );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectTypePtr actual = session->getType( \"DocumentLevel2\" );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    libcmis::ObjectTypePtr actual = session->getType( \"DocumentLevel2\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 56,
                  "endLine": 388,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel1\", \"GET\", DATA_DIR \"/atom/type-docLevel1.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel1\", \"GET\", DATA_DIR \"/atom/type-docLevel1.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel2\", \"GET\", DATA_DIR \"/atom/type-docLevel2.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=DocumentLevel1\", \"GET\", DATA_DIR \"/atom/type-docLevel1.xml\" );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:document\", \"GET\", DATA_DIR \"/atom/type-document.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 72,
                  "endLine": 367,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 56,
                  "endLine": 365,
                  "endColumn": 64,
                  "snippet": {
                    "text": "void AtomTest::getUnexistantTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "void AtomTest::getUnexistantTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`void AtomTest::getUnexistantTypeTest( )\n{\n    curl_mockup_reset( );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 72,
                  "endLine": 354,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"cmis:folder\" );\n    libcmis::ObjectTypePtr actual = session->getType( expectedId );\n",
                    "rendered": {
                      "text": "    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"cmis:folder\" );\n    libcmis::ObjectTypePtr actual = session->getType( expectedId );\n",
                      "markdown": "`    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string expectedId( \"cmis:folder\" );\n    libcmis::ObjectTypePtr actual = session->getType( expectedId );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 56,
                  "endLine": 352,
                  "endColumn": 64,
                  "snippet": {
                    "text": "{\n    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "{\n    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`{\n    curl_mockup_reset( );\n    curl_mockup_addResponse( \"http://mockup/mock/type\", \"id=cmis:folder\", \"GET\", DATA_DIR \"/atom/type-folder.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSessionPtr session = getTestSession( SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 83,
                  "endLine": 341,
                  "endColumn": 91,
                  "snippet": {
                    "text": "    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n    vector< libcmis::RepositoryPtr > actual = session.getRepositories( );\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ), actual.size( ) );\n",
                    "rendered": {
                      "text": "    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n    vector< libcmis::RepositoryPtr > actual = session.getRepositories( );\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ), actual.size( ) );\n",
                      "markdown": "`    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n    vector< libcmis::RepositoryPtr > actual = session.getRepositories( );\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of repositories\", size_t( 1 ), actual.size( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 91,
                  "endLine": 324,
                  "endColumn": 99,
                  "snippet": {
                    "text": "        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        try\n        {\n            AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n            CPPUNIT_FAIL( \"Should raise an exception saying the user didn't validate the SSL certificate\" );\n        }\n        catch ( const libcmis::Exception& e )\n",
                    "rendered": {
                      "text": "        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        try\n        {\n            AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n            CPPUNIT_FAIL( \"Should raise an exception saying the user didn't validate the SSL certificate\" );\n        }\n        catch ( const libcmis::Exception& e )\n",
                      "markdown": "`        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        try\n        {\n            AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n            CPPUNIT_FAIL( \"Should raise an exception saying the user didn't validate the SSL certificate\" );\n        }\n        catch ( const libcmis::Exception& e )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 87,
                  "endLine": 311,
                  "endColumn": 95,
                  "snippet": {
                    "text": "    {\n        libcmis::CertValidationHandlerPtr handler( new TestCertValidationHandler( false ) );\n        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n        TestCertValidationHandler* handler_impl = static_cast< TestCertValidationHandler* >( handler.get( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of certificates provided\", size_t( 1 ), handler_impl->m_chain.size( ) );\n",
                    "rendered": {
                      "text": "    {\n        libcmis::CertValidationHandlerPtr handler( new TestCertValidationHandler( false ) );\n        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n        TestCertValidationHandler* handler_impl = static_cast< TestCertValidationHandler* >( handler.get( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of certificates provided\", size_t( 1 ), handler_impl->m_chain.size( ) );\n",
                      "markdown": "`    {\n        libcmis::CertValidationHandlerPtr handler( new TestCertValidationHandler( false ) );\n        libcmis::SessionFactory::setCertificateValidationHandler( handler );\n        AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n        TestCertValidationHandler* handler_impl = static_cast< TestCertValidationHandler* >( handler.get( ) );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong number of certificates provided\", size_t( 1 ), handler_impl->m_chain.size( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 56,
                  "endLine": 302,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string badCert( \"A really invalid SSL Certificate\" );\n    curl_mockup_setSSLBadCertificate( badCert.c_str() );\n",
                    "rendered": {
                      "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string badCert( \"A really invalid SSL Certificate\" );\n    curl_mockup_setSSLBadCertificate( badCert.c_str() );\n",
                      "markdown": "`    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string badCert( \"A really invalid SSL Certificate\" );\n    curl_mockup_setSSLBadCertificate( badCert.c_str() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 56,
                  "endLine": 267,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n\n    // Test cancelled authentication\n",
                    "rendered": {
                      "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n\n    // Test cancelled authentication\n",
                      "markdown": "`    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n\n    // Test cancelled authentication\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 83,
                  "endLine": 251,
                  "endColumn": 91,
                  "snippet": {
                    "text": "\n    libcmis::SessionFactory::setProxySettings( proxy, noProxy, proxyUser, proxyPass );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Proxy not set\", proxy, string( curl_mockup_getProxy( session.m_curlHandle ) ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"NoProxy not set\", noProxy, string( curl_mockup_getNoProxy( session.m_curlHandle ) ) );\n",
                    "rendered": {
                      "text": "\n    libcmis::SessionFactory::setProxySettings( proxy, noProxy, proxyUser, proxyPass );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Proxy not set\", proxy, string( curl_mockup_getProxy( session.m_curlHandle ) ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"NoProxy not set\", noProxy, string( curl_mockup_getNoProxy( session.m_curlHandle ) ) );\n",
                      "markdown": "`\n    libcmis::SessionFactory::setProxySettings( proxy, noProxy, proxyUser, proxyPass );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Proxy not set\", proxy, string( curl_mockup_getProxy( session.m_curlHandle ) ) );\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"NoProxy not set\", noProxy, string( curl_mockup_getNoProxy( session.m_curlHandle ) ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 56,
                  "endLine": 242,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string proxy( \"proxy\" );\n    string noProxy( \"noProxy\" );\n",
                    "rendered": {
                      "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string proxy( \"proxy\" );\n    string noProxy( \"noProxy\" );\n",
                      "markdown": "`    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    string proxy( \"proxy\" );\n    string noProxy( \"noProxy\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 56,
                  "endLine": 224,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n",
                    "rendered": {
                      "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n",
                      "markdown": "`    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    try\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 83,
                  "endLine": 186,
                  "endColumn": 91,
                  "snippet": {
                    "text": "    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Check for the mandatory collection URLs\n    CPPUNIT_ASSERT_MESSAGE( \"root collection URL missing\",\n",
                    "rendered": {
                      "text": "    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Check for the mandatory collection URLs\n    CPPUNIT_ASSERT_MESSAGE( \"root collection URL missing\",\n",
                      "markdown": "`    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n    // Check for the mandatory collection URLs\n    CPPUNIT_ASSERT_MESSAGE( \"root collection URL missing\",\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 56,
                  "endLine": 184,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                    "rendered": {
                      "text": "    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n",
                      "markdown": "`    // Response showing one mock repository\n    curl_mockup_reset( );\n    curl_mockup_setResponse( DATA_DIR \"/atom/workspaces.xml\" );\n    curl_mockup_setCredentials( SERVER_USERNAME, SERVER_PASSWORD );\n\n    AtomPubSession session( SERVER_URL, SERVER_REPOSITORY, SERVER_USERNAME, SERVER_PASSWORD );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 30,
                  "endLine": 156,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n        }\n};\n",
                    "rendered": {
                      "text": "\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n        }\n};\n",
                      "markdown": "`\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n        }\n};\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 12,
                  "endLine": 156,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n        }\n};\n",
                    "rendered": {
                      "text": "\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n        }\n};\n",
                      "markdown": "`\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n        }\n};\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 61,
                  "endLine": 154,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    public:\n        TestAuthProvider( bool fail ) : m_fail( fail ) { }\n\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n",
                    "rendered": {
                      "text": "    public:\n        TestAuthProvider( bool fail ) : m_fail( fail ) { }\n\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n",
                      "markdown": "`    public:\n        TestAuthProvider( bool fail ) : m_fail( fail ) { }\n\n        bool authenticationQuery( std::string&, std::string& password )\n        {\n            password = SERVER_PASSWORD;\n            return !m_fail;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 78,
                  "endLine": 144,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        CPPUNIT_TEST( moveTest );\n        CPPUNIT_TEST_SUITE_END( );\n\n        AtomPubSessionPtr getTestSession( string username = string( ), string password = string( ) );\n};\n\nclass TestAuthProvider : public libcmis::AuthProvider\n",
                    "rendered": {
                      "text": "        CPPUNIT_TEST( moveTest );\n        CPPUNIT_TEST_SUITE_END( );\n\n        AtomPubSessionPtr getTestSession( string username = string( ), string password = string( ) );\n};\n\nclass TestAuthProvider : public libcmis::AuthProvider\n",
                      "markdown": "`        CPPUNIT_TEST( moveTest );\n        CPPUNIT_TEST_SUITE_END( );\n\n        AtomPubSessionPtr getTestSession( string username = string( ), string password = string( ) );\n};\n\nclass TestAuthProvider : public libcmis::AuthProvider\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "endLine": 39,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#define SERVER_URL string( \"http://mockup/binding\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\n#if defined __clang__\n#pragma clang diagnostic push\n",
                    "rendered": {
                      "text": "#define SERVER_URL string( \"http://mockup/binding\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\n#if defined __clang__\n#pragma clang diagnostic push\n",
                      "markdown": "`#define SERVER_URL string( \"http://mockup/binding\" )\n#define SERVER_REPOSITORY string( \"mock\" )\n#define SERVER_USERNAME \"tester\"\n#define SERVER_PASSWORD \"somepass\"\n\n#if defined __clang__\n#pragma clang diagnostic push\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1171,
                  "startColumn": 157,
                  "endLine": 1171,
                  "endColumn": 163,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_MESSAGE( \"PUT request not sent\", request );\n\n    string actualContent = test::getXmlNodeAsString( request->body, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content><cmisra:mediatype>text/plain</cmisra:mediatype><cmisra:base64>U29tZSBOZXcgY29udGVudCB0byBjaGVjayBpbg==</cmisra:base64></cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong content sent\", expectedContent, actualContent );\n\n    // Still needs to test that checkin request parameters were OK\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_MESSAGE( \"PUT request not sent\", request );\n\n    string actualContent = test::getXmlNodeAsString( request->body, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content><cmisra:mediatype>text/plain</cmisra:mediatype><cmisra:base64>U29tZSBOZXcgY29udGVudCB0byBjaGVjayBpbg==</cmisra:base64></cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong content sent\", expectedContent, actualContent );\n\n    // Still needs to test that checkin request parameters were OK\n",
                      "markdown": "`    CPPUNIT_ASSERT_MESSAGE( \"PUT request not sent\", request );\n\n    string actualContent = test::getXmlNodeAsString( request->body, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content><cmisra:mediatype>text/plain</cmisra:mediatype><cmisra:base64>U29tZSBOZXcgY29udGVudCB0byBjaGVjayBpbg==</cmisra:base64></cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong content sent\", expectedContent, actualContent );\n\n    // Still needs to test that checkin request parameters were OK\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1171,
                  "startColumn": 101,
                  "endLine": 1171,
                  "endColumn": 107,
                  "snippet": {
                    "text": "    CPPUNIT_ASSERT_MESSAGE( \"PUT request not sent\", request );\n\n    string actualContent = test::getXmlNodeAsString( request->body, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content><cmisra:mediatype>text/plain</cmisra:mediatype><cmisra:base64>U29tZSBOZXcgY29udGVudCB0byBjaGVjayBpbg==</cmisra:base64></cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong content sent\", expectedContent, actualContent );\n\n    // Still needs to test that checkin request parameters were OK\n",
                    "rendered": {
                      "text": "    CPPUNIT_ASSERT_MESSAGE( \"PUT request not sent\", request );\n\n    string actualContent = test::getXmlNodeAsString( request->body, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content><cmisra:mediatype>text/plain</cmisra:mediatype><cmisra:base64>U29tZSBOZXcgY29udGVudCB0byBjaGVjayBpbg==</cmisra:base64></cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong content sent\", expectedContent, actualContent );\n\n    // Still needs to test that checkin request parameters were OK\n",
                      "markdown": "`    CPPUNIT_ASSERT_MESSAGE( \"PUT request not sent\", request );\n\n    string actualContent = test::getXmlNodeAsString( request->body, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content><cmisra:mediatype>text/plain</cmisra:mediatype><cmisra:base64>U29tZSBOZXcgY29udGVudCB0byBjaGVjayBpbg==</cmisra:base64></cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong content sent\", expectedContent, actualContent );\n\n    // Still needs to test that checkin request parameters were OK\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 73,
                  "endLine": 1038,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    string actualContent = test::getXmlNodeAsString( request, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content>\"\n                                \"<cmisra:mediatype>text/plain</cmisra:mediatype>\"\n                                \"<cmisra:base64>U29tZSBjb250ZW50</cmisra:base64>\"\n                             \"</cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong request content sent\", expectedContent, actualContent );\n\n",
                    "rendered": {
                      "text": "    string actualContent = test::getXmlNodeAsString( request, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content>\"\n                                \"<cmisra:mediatype>text/plain</cmisra:mediatype>\"\n                                \"<cmisra:base64>U29tZSBjb250ZW50</cmisra:base64>\"\n                             \"</cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong request content sent\", expectedContent, actualContent );\n\n",
                      "markdown": "`    string actualContent = test::getXmlNodeAsString( request, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content>\"\n                                \"<cmisra:mediatype>text/plain</cmisra:mediatype>\"\n                                \"<cmisra:base64>U29tZSBjb250ZW50</cmisra:base64>\"\n                             \"</cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong request content sent\", expectedContent, actualContent );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 41,
                  "endLine": 1038,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    string actualContent = test::getXmlNodeAsString( request, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content>\"\n                                \"<cmisra:mediatype>text/plain</cmisra:mediatype>\"\n                                \"<cmisra:base64>U29tZSBjb250ZW50</cmisra:base64>\"\n                             \"</cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong request content sent\", expectedContent, actualContent );\n\n",
                    "rendered": {
                      "text": "    string actualContent = test::getXmlNodeAsString( request, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content>\"\n                                \"<cmisra:mediatype>text/plain</cmisra:mediatype>\"\n                                \"<cmisra:base64>U29tZSBjb250ZW50</cmisra:base64>\"\n                             \"</cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong request content sent\", expectedContent, actualContent );\n\n",
                      "markdown": "`    string actualContent = test::getXmlNodeAsString( request, \"/atom:entry/cmisra:content\" );\n    string expectedContent = \"<cmisra:content>\"\n                                \"<cmisra:mediatype>text/plain</cmisra:mediatype>\"\n                                \"<cmisra:base64>U29tZSBjb250ZW50</cmisra:base64>\"\n                             \"</cmisra:content>\";\n    CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong request content sent\", expectedContent, actualContent );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 847,
                  "startColumn": 35,
                  "endLine": 848,
                  "snippet": {
                    "text": "    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n\n    // Just leave the map empty and update\n    PropertyPtrMap emptyProperties;\n    libcmis::ObjectPtr updated = object->updateProperties( emptyProperties );\n\n    // Check that no HTTP request was sent\n",
                    "rendered": {
                      "text": "    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n\n    // Just leave the map empty and update\n    PropertyPtrMap emptyProperties;\n    libcmis::ObjectPtr updated = object->updateProperties( emptyProperties );\n\n    // Check that no HTTP request was sent\n",
                      "markdown": "`    // Values for the test\n    libcmis::ObjectPtr object = session->getObject( \"test-document\" );\n\n    // Just leave the map empty and update\n    PropertyPtrMap emptyProperties;\n    libcmis::ObjectPtr updated = object->updateProperties( emptyProperties );\n\n    // Check that no HTTP request was sent\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 811,
                  "startColumn": 6,
                  "endLine": 811,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    libcmis::PropertyPtr property( new libcmis::Property( it->second, values ) );\n    newProperties[ propertyName ] = property;\n\n    // Update the properties (method to test)\n    libcmis::ObjectPtr updated = object->updateProperties( newProperties );\n\n    // Check that the proper request has been send\n",
                    "rendered": {
                      "text": "    libcmis::PropertyPtr property( new libcmis::Property( it->second, values ) );\n    newProperties[ propertyName ] = property;\n\n    // Update the properties (method to test)\n    libcmis::ObjectPtr updated = object->updateProperties( newProperties );\n\n    // Check that the proper request has been send\n",
                      "markdown": "`    libcmis::PropertyPtr property( new libcmis::Property( it->second, values ) );\n    newProperties[ propertyName ] = property;\n\n    // Update the properties (method to test)\n    libcmis::ObjectPtr updated = object->updateProperties( newProperties );\n\n    // Check that the proper request has been send\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 27,
                  "endLine": 588,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    {\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong error type\", string( \"objectNotFound\" ), e.getType() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong exception message\",\n                string( \"No node corresponding to path: /some/invalid/path\" ), string( e.what() ) );\n    }\n\n}\n",
                    "rendered": {
                      "text": "    {\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong error type\", string( \"objectNotFound\" ), e.getType() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong exception message\",\n                string( \"No node corresponding to path: /some/invalid/path\" ), string( e.what() ) );\n    }\n\n}\n",
                      "markdown": "`    {\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong error type\", string( \"objectNotFound\" ), e.getType() );\n        CPPUNIT_ASSERT_EQUAL_MESSAGE( \"Wrong exception message\",\n                string( \"No node corresponding to path: /some/invalid/path\" ), string( e.what() ) );\n    }\n\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/test-atom.cxx"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 33,
                  "endLine": 215,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            !session.getAtomRepository()->getUriTemplate( UriTemplate::Query ).empty() );\n\n    // Check that the root id is defined\n    CPPUNIT_ASSERT_MESSAGE( \"Root node ID is missing\",\n            !session.getRootId().empty() );\n}\n\n",
                    "rendered": {
                      "text": "            !session.getAtomRepository()->getUriTemplate( UriTemplate::Query ).empty() );\n\n    // Check that the root id is defined\n    CPPUNIT_ASSERT_MESSAGE( \"Root node ID is missing\",\n            !session.getRootId().empty() );\n}\n\n",
                      "markdown": "`            !session.getAtomRepository()->getUriTemplate( UriTemplate::Query ).empty() );\n\n    // Check that the root id is defined\n    CPPUNIT_ASSERT_MESSAGE( \"Root node ID is missing\",\n            !session.getRootId().empty() );\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 68,
                  "endLine": 710,
                  "endColumn": 73,
                  "snippet": {
                    "text": "  #if   BOOST_VERSION <= 105500\n  boost::coroutines::coroutine<int(int)> coro; coro.get();\n  #else\n  boost::coroutines::asymmetric_coroutine<int>::pull_type coro; coro.get();\n  #endif\n  ])\nfi\n",
                    "rendered": {
                      "text": "  #if   BOOST_VERSION <= 105500\n  boost::coroutines::coroutine<int(int)> coro; coro.get();\n  #else\n  boost::coroutines::asymmetric_coroutine<int>::pull_type coro; coro.get();\n  #endif\n  ])\nfi\n",
                      "markdown": "`  #if   BOOST_VERSION <= 105500\n  boost::coroutines::coroutine<int(int)> coro; coro.get();\n  #else\n  boost::coroutines::asymmetric_coroutine<int>::pull_type coro; coro.get();\n  #endif\n  ])\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 51,
                  "endLine": 708,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t  [\n  #include <boost/version.hpp>\n  #if   BOOST_VERSION <= 105500\n  boost::coroutines::coroutine<int(int)> coro; coro.get();\n  #else\n  boost::coroutines::asymmetric_coroutine<int>::pull_type coro; coro.get();\n  #endif\n",
                    "rendered": {
                      "text": "\t\t  [\n  #include <boost/version.hpp>\n  #if   BOOST_VERSION <= 105500\n  boost::coroutines::coroutine<int(int)> coro; coro.get();\n  #else\n  boost::coroutines::asymmetric_coroutine<int>::pull_type coro; coro.get();\n  #endif\n",
                      "markdown": "`\t\t  [\n  #include <boost/version.hpp>\n  #if   BOOST_VERSION <= 105500\n  boost::coroutines::coroutine<int(int)> coro; coro.get();\n  #else\n  boost::coroutines::asymmetric_coroutine<int>::pull_type coro; coro.get();\n  #endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 1164,
                  "startColumn": 40,
                  "endLine": 1164,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# Look for Boost.Thread.  For the documentation of PREFERRED-RT-OPT, see the\n# documentation of BOOST_FIND_LIB above.\nBOOST_DEFUN([Thread],\n[dnl Having the pthread flag is required at least on GCC3 where\ndnl boost/thread.hpp would complain if we try to compile without\ndnl -pthread on GNU/Linux.\nAC_REQUIRE([_BOOST_PTHREAD_FLAG])dnl\n",
                    "rendered": {
                      "text": "# Look for Boost.Thread.  For the documentation of PREFERRED-RT-OPT, see the\n# documentation of BOOST_FIND_LIB above.\nBOOST_DEFUN([Thread],\n[dnl Having the pthread flag is required at least on GCC3 where\ndnl boost/thread.hpp would complain if we try to compile without\ndnl -pthread on GNU/Linux.\nAC_REQUIRE([_BOOST_PTHREAD_FLAG])dnl\n",
                      "markdown": "`# Look for Boost.Thread.  For the documentation of PREFERRED-RT-OPT, see the\n# documentation of BOOST_FIND_LIB above.\nBOOST_DEFUN([Thread],\n[dnl Having the pthread flag is required at least on GCC3 where\ndnl boost/thread.hpp would complain if we try to compile without\ndnl -pthread on GNU/Linux.\nAC_REQUIRE([_BOOST_PTHREAD_FLAG])dnl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 33,
                  "endLine": 386,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  # Find the proper debug variant depending on what we've been asked to find.\n  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n      boost_rt_d=`echo \"$boost_rtopt\" | sed 's/\\(s*g*\\)\\(p*n*\\)/\\1\\2/'`;; #(\n    (*) boost_rt_d='-d';;\n  esac\n",
                    "rendered": {
                      "text": "  # Find the proper debug variant depending on what we've been asked to find.\n  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n      boost_rt_d=`echo \"$boost_rtopt\" | sed 's/\\(s*g*\\)\\(p*n*\\)/\\1\\2/'`;; #(\n    (*) boost_rt_d='-d';;\n  esac\n",
                      "markdown": "`  # Find the proper debug variant depending on what we've been asked to find.\n  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n      boost_rt_d=`echo \"$boost_rtopt\" | sed 's/\\(s*g*\\)\\(p*n*\\)/\\1\\2/'`;; #(\n    (*) boost_rt_d='-d';;\n  esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 40,
                  "endLine": 164,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    shift\n    for boost_dir\n    do\n    # Without --layout=system, Boost (or at least some versions) installs\n    # itself in <prefix>/include/boost-<version>.  This inner loop helps to\n    # find headers in such directories.\n    #\n",
                    "rendered": {
                      "text": "    shift\n    for boost_dir\n    do\n    # Without --layout=system, Boost (or at least some versions) installs\n    # itself in <prefix>/include/boost-<version>.  This inner loop helps to\n    # find headers in such directories.\n    #\n",
                      "markdown": "`    shift\n    for boost_dir\n    do\n    # Without --layout=system, Boost (or at least some versions) installs\n    # itself in <prefix>/include/boost-<version>.  This inner loop helps to\n    # find headers in such directories.\n    #\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 31,
                  "endLine": 66,
                  "endColumn": 39,
                  "snippet": {
                    "text": "AC_LANG_PREPROC_REQUIRE()dnl\nAC_REQUIRE([AC_PROG_SED])dnl\nAC_LANG_CONFTEST([AC_LANG_SOURCE([[$2]])])\nAS_IF([dnl eval is necessary to expand ac_cpp.\ndnl Ultrix and Pyramid sh refuse to redirect output of eval, so use subshell.\ndnl Beware of Windows end-of-lines, for instance if we are running\ndnl some Windows programs under Wine.  In that case, boost/version.hpp\n",
                    "rendered": {
                      "text": "AC_LANG_PREPROC_REQUIRE()dnl\nAC_REQUIRE([AC_PROG_SED])dnl\nAC_LANG_CONFTEST([AC_LANG_SOURCE([[$2]])])\nAS_IF([dnl eval is necessary to expand ac_cpp.\ndnl Ultrix and Pyramid sh refuse to redirect output of eval, so use subshell.\ndnl Beware of Windows end-of-lines, for instance if we are running\ndnl some Windows programs under Wine.  In that case, boost/version.hpp\n",
                      "markdown": "`AC_LANG_PREPROC_REQUIRE()dnl\nAC_REQUIRE([AC_PROG_SED])dnl\nAC_LANG_CONFTEST([AC_LANG_SOURCE([[$2]])])\nAS_IF([dnl eval is necessary to expand ac_cpp.\ndnl Ultrix and Pyramid sh refuse to redirect output of eval, so use subshell.\ndnl Beware of Windows end-of-lines, for instance if we are running\ndnl some Windows programs under Wine.  In that case, boost/version.hpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 31,
                  "endLine": 29,
                  "endColumn": 35,
                  "snippet": {
                    "text": "], [#\n], [])])\n\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n",
                    "rendered": {
                      "text": "], [#\n], [])])\n\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n",
                      "markdown": "`], [#\n], [])])\n\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 1364,
                  "startColumn": 9,
                  "endLine": 1364,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    boost_pthreads__save_LIBS=$LIBS\n    LIBS=\"$LIBS $boost_pthread_flag\"\n    AC_LINK_IFELSE([],\n      [if grep \".*$boost_pthread_flag\" conftest.err; then\n         echo \"This flag seems to have triggered warnings\" >&AS_MESSAGE_LOG_FD\n       else\n         boost_pthread_ok=:; boost_cv_pthread_flag=$boost_pthread_flag\n",
                    "rendered": {
                      "text": "    boost_pthreads__save_LIBS=$LIBS\n    LIBS=\"$LIBS $boost_pthread_flag\"\n    AC_LINK_IFELSE([],\n      [if grep \".*$boost_pthread_flag\" conftest.err; then\n         echo \"This flag seems to have triggered warnings\" >&AS_MESSAGE_LOG_FD\n       else\n         boost_pthread_ok=:; boost_cv_pthread_flag=$boost_pthread_flag\n",
                      "markdown": "`    boost_pthreads__save_LIBS=$LIBS\n    LIBS=\"$LIBS $boost_pthread_flag\"\n    AC_LINK_IFELSE([],\n      [if grep \".*$boost_pthread_flag\" conftest.err; then\n         echo \"This flag seems to have triggered warnings\" >&AS_MESSAGE_LOG_FD\n       else\n         boost_pthread_ok=:; boost_cv_pthread_flag=$boost_pthread_flag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 1,
                  "endLine": 757,
                  "endColumn": 7,
                  "snippet": {
                    "text": "BOOST_DEFUN([Filesystem],\n[# Do we have to check for Boost.System?  This link-time dependency was\n# added as of 1.35.0.  If we have a version <1.35, we must not attempt to\n# find Boost.System as it didn't exist by then.\nif test $boost_major_version -ge 135; then\n  BOOST_SYSTEM([$1])\nfi # end of the Boost.System check.\n",
                    "rendered": {
                      "text": "BOOST_DEFUN([Filesystem],\n[# Do we have to check for Boost.System?  This link-time dependency was\n# added as of 1.35.0.  If we have a version <1.35, we must not attempt to\n# find Boost.System as it didn't exist by then.\nif test $boost_major_version -ge 135; then\n  BOOST_SYSTEM([$1])\nfi # end of the Boost.System check.\n",
                      "markdown": "`BOOST_DEFUN([Filesystem],\n[# Do we have to check for Boost.System?  This link-time dependency was\n# added as of 1.35.0.  If we have a version <1.35, we must not attempt to\n# find Boost.System as it didn't exist by then.\nif test $boost_major_version -ge 135; then\n  BOOST_SYSTEM([$1])\nfi # end of the Boost.System check.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 1,
                  "endLine": 572,
                  "endColumn": 7,
                  "snippet": {
                    "text": "BOOST_DEFUN([Chrono],\n[# Do we have to check for Boost.System?  This link-time dependency was\n# added as of 1.35.0.  If we have a version <1.35, we must not attempt to\n# find Boost.System as it didn't exist by then.\nif test $boost_major_version -ge 135; then\n  BOOST_SYSTEM([$1])\nfi # end of the Boost.System check.\n",
                    "rendered": {
                      "text": "BOOST_DEFUN([Chrono],\n[# Do we have to check for Boost.System?  This link-time dependency was\n# added as of 1.35.0.  If we have a version <1.35, we must not attempt to\n# find Boost.System as it didn't exist by then.\nif test $boost_major_version -ge 135; then\n  BOOST_SYSTEM([$1])\nfi # end of the Boost.System check.\n",
                      "markdown": "`BOOST_DEFUN([Chrono],\n[# Do we have to check for Boost.System?  This link-time dependency was\n# added as of 1.35.0.  If we have a version <1.35, we must not attempt to\n# find Boost.System as it didn't exist by then.\nif test $boost_major_version -ge 135; then\n  BOOST_SYSTEM([$1])\nfi # end of the Boost.System check.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 36,
                  "endLine": 457,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        (*?*:*s*) # Yes (Non empty boost_ldpath + s in rt opt)\n          Boost_lib_LIBS=\"$boost_ldpath/lib$boost_lib.$libext\"\n          test -e \"$Boost_lib_LIBS\" || continue;; #(\n        (*) # No: use -lboost_foo to find the shared library.\n          Boost_lib_LIBS=\"-l$boost_lib\";;\n      esac\n      boost_save_LIBS=$LIBS\n",
                    "rendered": {
                      "text": "        (*?*:*s*) # Yes (Non empty boost_ldpath + s in rt opt)\n          Boost_lib_LIBS=\"$boost_ldpath/lib$boost_lib.$libext\"\n          test -e \"$Boost_lib_LIBS\" || continue;; #(\n        (*) # No: use -lboost_foo to find the shared library.\n          Boost_lib_LIBS=\"-l$boost_lib\";;\n      esac\n      boost_save_LIBS=$LIBS\n",
                      "markdown": "`        (*?*:*s*) # Yes (Non empty boost_ldpath + s in rt opt)\n          Boost_lib_LIBS=\"$boost_ldpath/lib$boost_lib.$libext\"\n          test -e \"$Boost_lib_LIBS\" || continue;; #(\n        (*) # No: use -lboost_foo to find the shared library.\n          Boost_lib_LIBS=\"-l$boost_lib\";;\n      esac\n      boost_save_LIBS=$LIBS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 19,
                  "endLine": 447,
                  "endColumn": 25,
                  "snippet": {
                    "text": "             /opt/local/lib* /usr/local/lib* /opt/lib* /usr/lib* \\\n             \"$with_boost\" C:/Boost/lib /lib*\n    do\n      # Don't waste time with directories that don't exist.\n      if test x\"$boost_ldpath\" != x && test ! -e \"$boost_ldpath\"; then\n        continue\n      fi\n",
                    "rendered": {
                      "text": "             /opt/local/lib* /usr/local/lib* /opt/lib* /usr/lib* \\\n             \"$with_boost\" C:/Boost/lib /lib*\n    do\n      # Don't waste time with directories that don't exist.\n      if test x\"$boost_ldpath\" != x && test ! -e \"$boost_ldpath\"; then\n        continue\n      fi\n",
                      "markdown": "`             /opt/local/lib* /usr/local/lib* /opt/lib* /usr/lib* \\\n             \"$with_boost\" C:/Boost/lib /lib*\n    do\n      # Don't waste time with directories that don't exist.\n      if test x\"$boost_ldpath\" != x && test ! -e \"$boost_ldpath\"; then\n        continue\n      fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 39,
                  "endLine": 387,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n      boost_rt_d=`echo \"$boost_rtopt\" | sed 's/\\(s*g*\\)\\(p*n*\\)/\\1\\2/'`;; #(\n    (*) boost_rt_d='-d';;\n  esac\n  # If the PREFERRED-RT-OPT are not empty, prepend a `-'.\n",
                    "rendered": {
                      "text": "  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n      boost_rt_d=`echo \"$boost_rtopt\" | sed 's/\\(s*g*\\)\\(p*n*\\)/\\1\\2/'`;; #(\n    (*) boost_rt_d='-d';;\n  esac\n  # If the PREFERRED-RT-OPT are not empty, prepend a `-'.\n",
                      "markdown": "`  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n      boost_rt_d=`echo \"$boost_rtopt\" | sed 's/\\(s*g*\\)\\(p*n*\\)/\\1\\2/'`;; #(\n    (*) boost_rt_d='-d';;\n  esac\n  # If the PREFERRED-RT-OPT are not empty, prepend a `-'.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 3,
                  "endLine": 383,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  if test $enable_static_boost = yes; then\n    boost_rtopt=\"s$boost_rtopt\"\n  fi\n  # Find the proper debug variant depending on what we've been asked to find.\n  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n",
                    "rendered": {
                      "text": "  if test $enable_static_boost = yes; then\n    boost_rtopt=\"s$boost_rtopt\"\n  fi\n  # Find the proper debug variant depending on what we've been asked to find.\n  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n",
                      "markdown": "`  if test $enable_static_boost = yes; then\n    boost_rtopt=\"s$boost_rtopt\"\n  fi\n  # Find the proper debug variant depending on what we've been asked to find.\n  case $boost_rtopt in #(\n    (*d*) boost_rt_d=$boost_rtopt;; #(\n    (*[[sgpn]]*) # Insert the `d' at the right place (in between `sg' and `pn')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 33,
                  "endLine": 370,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# according to the user's PREFERRED-RT-OPT.  For each library name, we\n# prefer to use the ones that carry the tag (toolset name).  Each\n# library is searched through the various standard paths were Boost is\n# usually installed.  If we can't find the standard variants, we try\n# to enforce -mt (for instance on MacOSX, libboost_thread.dylib\n# doesn't exist but there's -obviously- libboost_thread-mt.dylib).\nAC_DEFUN([_BOOST_FIND_LIBS],\n",
                    "rendered": {
                      "text": "# according to the user's PREFERRED-RT-OPT.  For each library name, we\n# prefer to use the ones that carry the tag (toolset name).  Each\n# library is searched through the various standard paths were Boost is\n# usually installed.  If we can't find the standard variants, we try\n# to enforce -mt (for instance on MacOSX, libboost_thread.dylib\n# doesn't exist but there's -obviously- libboost_thread-mt.dylib).\nAC_DEFUN([_BOOST_FIND_LIBS],\n",
                      "markdown": "`# according to the user's PREFERRED-RT-OPT.  For each library name, we\n# prefer to use the ones that carry the tag (toolset name).  Each\n# library is searched through the various standard paths were Boost is\n# usually installed.  If we can't find the standard variants, we try\n# to enforce -mt (for instance on MacOSX, libboost_thread.dylib\n# doesn't exist but there's -obviously- libboost_thread-mt.dylib).\nAC_DEFUN([_BOOST_FIND_LIBS],\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 24,
                  "endLine": 333,
                  "endColumn": 30,
                  "snippet": {
                    "text": "               [_BOOST_FIND_LIBS($@)])\ncase $Boost_lib in #(\n  (no) _AC_MSG_LOG_CONFTEST\n    AC_MSG_ERROR([cannot find the flags to link with Boost $1])\n    ;;\nesac\nAC_SUBST(AS_TR_CPP([BOOST_$1_LDFLAGS]), [$Boost_lib_LDFLAGS])dnl\n",
                    "rendered": {
                      "text": "               [_BOOST_FIND_LIBS($@)])\ncase $Boost_lib in #(\n  (no) _AC_MSG_LOG_CONFTEST\n    AC_MSG_ERROR([cannot find the flags to link with Boost $1])\n    ;;\nesac\nAC_SUBST(AS_TR_CPP([BOOST_$1_LDFLAGS]), [$Boost_lib_LDFLAGS])dnl\n",
                      "markdown": "`               [_BOOST_FIND_LIBS($@)])\ncase $Boost_lib in #(\n  (no) _AC_MSG_LOG_CONFTEST\n    AC_MSG_ERROR([cannot find the flags to link with Boost $1])\n    ;;\nesac\nAC_SUBST(AS_TR_CPP([BOOST_$1_LDFLAGS]), [$Boost_lib_LDFLAGS])dnl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 41,
                  "endLine": 282,
                  "endColumn": 47,
                  "snippet": {
                    "text": "AC_CHECK_HEADER([$1],\n  [m4_default([$3], [AC_DEFINE(AS_TR_CPP([HAVE_$1]), [1],\n                               [Define to 1 if you have <$1>])])],\n  [m4_default([$2], [AC_MSG_ERROR([cannot find $1])])])\nCPPFLAGS=$boost_save_CPPFLAGS\nAC_LANG_POP([C++])dnl\nfi\n",
                    "rendered": {
                      "text": "AC_CHECK_HEADER([$1],\n  [m4_default([$3], [AC_DEFINE(AS_TR_CPP([HAVE_$1]), [1],\n                               [Define to 1 if you have <$1>])])],\n  [m4_default([$2], [AC_MSG_ERROR([cannot find $1])])])\nCPPFLAGS=$boost_save_CPPFLAGS\nAC_LANG_POP([C++])dnl\nfi\n",
                      "markdown": "`AC_CHECK_HEADER([$1],\n  [m4_default([$3], [AC_DEFINE(AS_TR_CPP([HAVE_$1]), [1],\n                               [Define to 1 if you have <$1>])])],\n  [m4_default([$2], [AC_MSG_ERROR([cannot find $1])])])\nCPPFLAGS=$boost_save_CPPFLAGS\nAC_LANG_POP([C++])dnl\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 55,
                  "endLine": 234,
                  "endColumn": 60,
                  "snippet": {
                    "text": "boost-lib-version = BOOST_LIB_VERSION],\n    [boost_cv_lib_version=`cat conftest.i`])])\n    # e.g. \"134\" for 1_34_1 or \"135\" for 1_35\n    boost_major_version=`echo \"$boost_cv_lib_version\" | sed 's/_//;s/_.*//'`\n    case $boost_major_version in #(\n      '' | *[[!0-9]]*)\n        AC_MSG_ERROR([invalid value: boost_major_version='$boost_major_version'])\n",
                    "rendered": {
                      "text": "boost-lib-version = BOOST_LIB_VERSION],\n    [boost_cv_lib_version=`cat conftest.i`])])\n    # e.g. \"134\" for 1_34_1 or \"135\" for 1_35\n    boost_major_version=`echo \"$boost_cv_lib_version\" | sed 's/_//;s/_.*//'`\n    case $boost_major_version in #(\n      '' | *[[!0-9]]*)\n        AC_MSG_ERROR([invalid value: boost_major_version='$boost_major_version'])\n",
                      "markdown": "`boost-lib-version = BOOST_LIB_VERSION],\n    [boost_cv_lib_version=`cat conftest.i`])])\n    # e.g. \"134\" for 1_34_1 or \"135\" for 1_35\n    boost_major_version=`echo \"$boost_cv_lib_version\" | sed 's/_//;s/_.*//'`\n    case $boost_major_version in #(\n      '' | *[[!0-9]]*)\n        AC_MSG_ERROR([invalid value: boost_major_version='$boost_major_version'])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 28,
                  "endLine": 211,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    ])\n    case $boost_cv_inc_path in #(\n      no)\n        boost_errmsg=\"cannot find Boost headers version >= $boost_version_req_string\"\n        m4_if([$2], [],  [AC_MSG_ERROR([$boost_errmsg])],\n                        [AC_MSG_NOTICE([$boost_errmsg])])\n        $2\n",
                    "rendered": {
                      "text": "    ])\n    case $boost_cv_inc_path in #(\n      no)\n        boost_errmsg=\"cannot find Boost headers version >= $boost_version_req_string\"\n        m4_if([$2], [],  [AC_MSG_ERROR([$boost_errmsg])],\n                        [AC_MSG_NOTICE([$boost_errmsg])])\n        $2\n",
                      "markdown": "`    ])\n    case $boost_cv_inc_path in #(\n      no)\n        boost_errmsg=\"cannot find Boost headers version >= $boost_version_req_string\"\n        m4_if([$2], [],  [AC_MSG_ERROR([$boost_errmsg])],\n                        [AC_MSG_NOTICE([$boost_errmsg])])\n        $2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 40,
                  "endLine": 174,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    #\n    # I didn't indent this loop on purpose (to avoid over-indented code)\n    boost_layout_system_search_list=`cd \"$boost_dir\" 2>/dev/null \\\n        && ls -1 | \"${GREP}\" '^boost-' | sort -rn -t- -k2 \\\n        && echo .`\n    for boost_inc in $boost_layout_system_search_list\n    do\n",
                    "rendered": {
                      "text": "    #\n    # I didn't indent this loop on purpose (to avoid over-indented code)\n    boost_layout_system_search_list=`cd \"$boost_dir\" 2>/dev/null \\\n        && ls -1 | \"${GREP}\" '^boost-' | sort -rn -t- -k2 \\\n        && echo .`\n    for boost_inc in $boost_layout_system_search_list\n    do\n",
                      "markdown": "`    #\n    # I didn't indent this loop on purpose (to avoid over-indented code)\n    boost_layout_system_search_list=`cd \"$boost_dir\" 2>/dev/null \\\n        && ls -1 | \"${GREP}\" '^boost-' | sort -rn -t- -k2 \\\n        && echo .`\n    for boost_inc in $boost_layout_system_search_list\n    do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 5,
                  "endLine": 166,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    do\n    # Without --layout=system, Boost (or at least some versions) installs\n    # itself in <prefix>/include/boost-<version>.  This inner loop helps to\n    # find headers in such directories.\n    #\n    # Any ${boost_dir}/boost-x_xx directories are searched in reverse version\n    # order followed by ${boost_dir}.  The final '.' is a sentinel for\n",
                    "rendered": {
                      "text": "    do\n    # Without --layout=system, Boost (or at least some versions) installs\n    # itself in <prefix>/include/boost-<version>.  This inner loop helps to\n    # find headers in such directories.\n    #\n    # Any ${boost_dir}/boost-x_xx directories are searched in reverse version\n    # order followed by ${boost_dir}.  The final '.' is a sentinel for\n",
                      "markdown": "`    do\n    # Without --layout=system, Boost (or at least some versions) installs\n    # itself in <prefix>/include/boost-<version>.  This inner loop helps to\n    # find headers in such directories.\n    #\n    # Any ${boost_dir}/boost-x_xx directories are searched in reverse version\n    # order followed by ${boost_dir}.  The final '.' is a sentinel for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 92,
                  "endColumn": 7,
                  "snippet": {
                    "text": "dnl So get rid of the # and empty lines, and glue the remaining ones together.\n(eval \"$ac_cpp conftest.$ac_ext\") 2>&AS_MESSAGE_LOG_FD |\n  grep -v '#' |\n  grep -v '^[[[:space:]]]*$' |\n  tr -d '\\r' |\n  tr -s '\\n' ' ' |\n  $SED -n -e \"$1\" >conftest.i 2>&1],\n",
                    "rendered": {
                      "text": "dnl So get rid of the # and empty lines, and glue the remaining ones together.\n(eval \"$ac_cpp conftest.$ac_ext\") 2>&AS_MESSAGE_LOG_FD |\n  grep -v '#' |\n  grep -v '^[[[:space:]]]*$' |\n  tr -d '\\r' |\n  tr -s '\\n' ' ' |\n  $SED -n -e \"$1\" >conftest.i 2>&1],\n",
                      "markdown": "`dnl So get rid of the # and empty lines, and glue the remaining ones together.\n(eval \"$ac_cpp conftest.$ac_ext\") 2>&AS_MESSAGE_LOG_FD |\n  grep -v '#' |\n  grep -v '^[[[:space:]]]*$' |\n  tr -d '\\r' |\n  tr -s '\\n' ' ' |\n  $SED -n -e \"$1\" >conftest.i 2>&1],\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 7,
                  "snippet": {
                    "text": "dnl\ndnl So get rid of the # and empty lines, and glue the remaining ones together.\n(eval \"$ac_cpp conftest.$ac_ext\") 2>&AS_MESSAGE_LOG_FD |\n  grep -v '#' |\n  grep -v '^[[[:space:]]]*$' |\n  tr -d '\\r' |\n  tr -s '\\n' ' ' |\n",
                    "rendered": {
                      "text": "dnl\ndnl So get rid of the # and empty lines, and glue the remaining ones together.\n(eval \"$ac_cpp conftest.$ac_ext\") 2>&AS_MESSAGE_LOG_FD |\n  grep -v '#' |\n  grep -v '^[[[:space:]]]*$' |\n  tr -d '\\r' |\n  tr -s '\\n' ' ' |\n",
                      "markdown": "`dnl\ndnl So get rid of the # and empty lines, and glue the remaining ones together.\n(eval \"$ac_cpp conftest.$ac_ext\") 2>&AS_MESSAGE_LOG_FD |\n  grep -v '#' |\n  grep -v '^[[[:space:]]]*$' |\n  tr -d '\\r' |\n  tr -s '\\n' ' ' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 31,
                  "endLine": 66,
                  "endColumn": 39,
                  "snippet": {
                    "text": "AC_LANG_PREPROC_REQUIRE()dnl\nAC_REQUIRE([AC_PROG_SED])dnl\nAC_LANG_CONFTEST([AC_LANG_SOURCE([[$2]])])\nAS_IF([dnl eval is necessary to expand ac_cpp.\ndnl Ultrix and Pyramid sh refuse to redirect output of eval, so use subshell.\ndnl Beware of Windows end-of-lines, for instance if we are running\ndnl some Windows programs under Wine.  In that case, boost/version.hpp\n",
                    "rendered": {
                      "text": "AC_LANG_PREPROC_REQUIRE()dnl\nAC_REQUIRE([AC_PROG_SED])dnl\nAC_LANG_CONFTEST([AC_LANG_SOURCE([[$2]])])\nAS_IF([dnl eval is necessary to expand ac_cpp.\ndnl Ultrix and Pyramid sh refuse to redirect output of eval, so use subshell.\ndnl Beware of Windows end-of-lines, for instance if we are running\ndnl some Windows programs under Wine.  In that case, boost/version.hpp\n",
                      "markdown": "`AC_LANG_PREPROC_REQUIRE()dnl\nAC_REQUIRE([AC_PROG_SED])dnl\nAC_LANG_CONFTEST([AC_LANG_SOURCE([[$2]])])\nAS_IF([dnl eval is necessary to expand ac_cpp.\ndnl Ultrix and Pyramid sh refuse to redirect output of eval, so use subshell.\ndnl Beware of Windows end-of-lines, for instance if we are running\ndnl some Windows programs under Wine.  In that case, boost/version.hpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n# This file provides several macros to use the various Boost libraries.\n# The first macro is BOOST_REQUIRE.  It will simply check if it's possible to\n# find the Boost headers of a given (optional) minimum version and it will\n# define BOOST_CPPFLAGS accordingly.  It will add an option --with-boost to\n# your configure so that users can specify non standard locations.\n# If the user's environment contains BOOST_ROOT and --with-boost was not\n",
                    "rendered": {
                      "text": "\n# This file provides several macros to use the various Boost libraries.\n# The first macro is BOOST_REQUIRE.  It will simply check if it's possible to\n# find the Boost headers of a given (optional) minimum version and it will\n# define BOOST_CPPFLAGS accordingly.  It will add an option --with-boost to\n# your configure so that users can specify non standard locations.\n# If the user's environment contains BOOST_ROOT and --with-boost was not\n",
                      "markdown": "`\n# This file provides several macros to use the various Boost libraries.\n# The first macro is BOOST_REQUIRE.  It will simply check if it's possible to\n# find the Boost headers of a given (optional) minimum version and it will\n# define BOOST_CPPFLAGS accordingly.  It will add an option --with-boost to\n# your configure so that users can specify non standard locations.\n# If the user's environment contains BOOST_ROOT and --with-boost was not\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 3,
                  "endLine": 31,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n# ------ #\n# README #\n",
                    "rendered": {
                      "text": "\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n# ------ #\n# README #\n",
                      "markdown": "`\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n# ------ #\n# README #\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 41,
                  "endLine": 30,
                  "endColumn": 49,
                  "snippet": {
                    "text": "], [])])\n\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n# ------ #\n",
                    "rendered": {
                      "text": "], [])])\n\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n# ------ #\n",
                      "markdown": "`], [])])\n\n# Original sources can be found at http://github.com/tsuna/boost.m4\n# You can fetch the latest version of the script by doing:\n#   wget http://github.com/tsuna/boost.m4/raw/master/build-aux/boost.m4\n\n# ------ #\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/boost.m4"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 15,
                  "endLine": 13,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# License, version 3 (\"GPLv3\"):\n#\n# If you convey this file as part of a work that contains a\n# configuration script generated by Autoconf, you may do so under\n# terms of your choice.\n#\n# This program is distributed in the hope that it will be useful,\n",
                    "rendered": {
                      "text": "# License, version 3 (\"GPLv3\"):\n#\n# If you convey this file as part of a work that contains a\n# configuration script generated by Autoconf, you may do so under\n# terms of your choice.\n#\n# This program is distributed in the hope that it will be useful,\n",
                      "markdown": "`# License, version 3 (\"GPLv3\"):\n#\n# If you convey this file as part of a work that contains a\n# configuration script generated by Autoconf, you may do so under\n# terms of your choice.\n#\n# This program is distributed in the hope that it will be useful,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-property.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-property.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/allowable-actions.cxx"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 50,
                  "endLine": 138,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    {\n    }\n\n    AllowableActions::AllowableActions( xmlNodePtr node ) :\n        m_states( )\n    {\n        for ( xmlNodePtr child = node->children; child; child = child->next )\n",
                    "rendered": {
                      "text": "    {\n    }\n\n    AllowableActions::AllowableActions( xmlNodePtr node ) :\n        m_states( )\n    {\n        for ( xmlNodePtr child = node->children; child; child = child->next )\n",
                      "markdown": "`    {\n    }\n\n    AllowableActions::AllowableActions( xmlNodePtr node ) :\n        m_states( )\n    {\n        for ( xmlNodePtr child = node->children; child; child = child->next )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/allowable-actions.cxx"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 49,
                  "endLine": 56,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        // Invalid xsd:bool will be mean false... not sure what the spec says\n        try\n        {\n            xmlChar* content = xmlNodeGetContent( node );\n            m_enabled = parseBool( string( ( char* )content ) );\n            xmlFree( content );\n        }\n",
                    "rendered": {
                      "text": "        // Invalid xsd:bool will be mean false... not sure what the spec says\n        try\n        {\n            xmlChar* content = xmlNodeGetContent( node );\n            m_enabled = parseBool( string( ( char* )content ) );\n            xmlFree( content );\n        }\n",
                      "markdown": "`        // Invalid xsd:bool will be mean false... not sure what the spec says\n        try\n        {\n            xmlChar* content = xmlNodeGetContent( node );\n            m_enabled = parseBool( string( ( char* )content ) );\n            xmlFree( content );\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/allowable-actions.cxx"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 42,
                  "endLine": 38,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nnamespace libcmis\n{\n    ObjectAction::ObjectAction( xmlNodePtr node ) :\n        m_type( ObjectAction::DeleteObject ),\n        m_enabled( false ),\n        m_valid( false )\n",
                    "rendered": {
                      "text": "\nnamespace libcmis\n{\n    ObjectAction::ObjectAction( xmlNodePtr node ) :\n        m_type( ObjectAction::DeleteObject ),\n        m_enabled( false ),\n        m_valid( false )\n",
                      "markdown": "`\nnamespace libcmis\n{\n    ObjectAction::ObjectAction( xmlNodePtr node ) :\n        m_type( ObjectAction::DeleteObject ),\n        m_enabled( false ),\n        m_valid( false )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-allowable-actions.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-allowable-actions.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-versioningservice.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-versioningservice.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-session.hxx"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 35,
                  "endLine": 41,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    public:\n        OneDriveSession( std::string baseUrl,\n                       std::string username, \n                       std::string password,\n                       libcmis::OAuth2DataPtr oauth2,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n",
                    "rendered": {
                      "text": "    public:\n        OneDriveSession( std::string baseUrl,\n                       std::string username, \n                       std::string password,\n                       libcmis::OAuth2DataPtr oauth2,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n",
                      "markdown": "`    public:\n        OneDriveSession( std::string baseUrl,\n                       std::string username, \n                       std::string password,\n                       libcmis::OAuth2DataPtr oauth2,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-session.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-session.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-object.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-object.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-versioningservice.cxx"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 47,
                  "endLine": 129,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetAllVersionsResponse* response = dynamic_cast< GetAllVersionsResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetAllVersionsResponse* response = dynamic_cast< GetAllVersionsResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        GetAllVersionsResponse* response = dynamic_cast< GetAllVersionsResponse* >( resp );\n        if ( response != NULL )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-versioningservice.cxx"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 47,
                  "endLine": 108,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CheckInResponse* response = dynamic_cast< CheckInResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CheckInResponse* response = dynamic_cast< CheckInResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CheckInResponse* response = dynamic_cast< CheckInResponse* >( resp );\n        if ( response != NULL )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-versioningservice.cxx"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 47,
                  "endLine": 78,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CheckOutResponse* response = dynamic_cast< CheckOutResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                    "rendered": {
                      "text": "    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CheckOutResponse* response = dynamic_cast< CheckOutResponse* >( resp );\n        if ( response != NULL )\n        {\n",
                      "markdown": "`    vector< SoapResponsePtr > responses = m_session->soapRequest( m_url, request );\n    if ( responses.size( ) == 1 )\n    {\n        SoapResponse* resp = responses.front( ).get( );\n        CheckOutResponse* response = dynamic_cast< CheckOutResponse* >( resp );\n        if ( response != NULL )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-property.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-property.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object-type.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object-type.hxx"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 59,
                  "endLine": 45,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n    public:\n        AtomObjectType( AtomPubSession* session, std::string id );\n        AtomObjectType( AtomPubSession* session, xmlNodePtr node );\n        AtomObjectType( const AtomObjectType& copy );\n        virtual ~AtomObjectType( );\n\n",
                    "rendered": {
                      "text": "\n    public:\n        AtomObjectType( AtomPubSession* session, std::string id );\n        AtomObjectType( AtomPubSession* session, xmlNodePtr node );\n        AtomObjectType( const AtomObjectType& copy );\n        virtual ~AtomObjectType( );\n\n",
                      "markdown": "`\n    public:\n        AtomObjectType( AtomPubSession* session, std::string id );\n        AtomObjectType( AtomPubSession* session, xmlNodePtr node );\n        AtomObjectType( const AtomObjectType& copy );\n        virtual ~AtomObjectType( );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-object-type.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 83,
                  "endLine": 971,
                  "endColumn": 88,
                  "snippet": {
                    "text": "            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n                {\n                    vector< libcmis::DocumentPtr > versions = doc->getAllVersions( );\n",
                    "rendered": {
                      "text": "            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n                {\n                    vector< libcmis::DocumentPtr > versions = doc->getAllVersions( );\n",
                      "markdown": "`            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n                {\n                    vector< libcmis::DocumentPtr > versions = doc->getAllVersions( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 969,
                  "startColumn": 23,
                  "endLine": 969,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n",
                    "rendered": {
                      "text": "            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n",
                      "markdown": "`            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 83,
                  "endLine": 944,
                  "endColumn": 88,
                  "snippet": {
                    "text": "                if ( m_vm.count( \"message\" ) > 0 )\n                    comment = m_vm[\"message\"].as< string >( );\n\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr newDoc = doc->checkIn( major, comment, properties, stream, contentType, filename );\n",
                    "rendered": {
                      "text": "                if ( m_vm.count( \"message\" ) > 0 )\n                    comment = m_vm[\"message\"].as< string >( );\n\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr newDoc = doc->checkIn( major, comment, properties, stream, contentType, filename );\n",
                      "markdown": "`                if ( m_vm.count( \"message\" ) > 0 )\n                    comment = m_vm[\"message\"].as< string >( );\n\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( object.get() );\n                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr newDoc = doc->checkIn( major, comment, properties, stream, contentType, filename );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 23,
                  "endLine": 888,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                // Create the properties map\n                PropertyPtrMap properties;\n",
                    "rendered": {
                      "text": "            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                // Create the properties map\n                PropertyPtrMap properties;\n",
                      "markdown": "`            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr object = session->getObject( objIds.front() );\n            if ( object.get() )\n            {\n                // Create the properties map\n                PropertyPtrMap properties;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 865,
                  "startColumn": 84,
                  "endLine": 865,
                  "endColumn": 89,
                  "snippet": {
                    "text": "            cout << \"------------------------------------------------\" << endl;\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n                {\n                    doc->cancelCheckout( );\n",
                    "rendered": {
                      "text": "            cout << \"------------------------------------------------\" << endl;\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n                {\n                    doc->cancelCheckout( );\n",
                      "markdown": "`            cout << \"------------------------------------------------\" << endl;\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n                {\n                    doc->cancelCheckout( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 24,
                  "endLine": 863,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            cout << \"------------------------------------------------\" << endl;\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n",
                    "rendered": {
                      "text": "\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            cout << \"------------------------------------------------\" << endl;\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n",
                      "markdown": "`\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            cout << \"------------------------------------------------\" << endl;\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 837,
                  "startColumn": 28,
                  "endLine": 837,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr pwc = doc->checkOut( );\n                    if ( pwc.get( ) )\n                    {\n                        cout << \"------------------------------------------------\" << endl;\n                        cout << pwc->toString() << endl;\n",
                    "rendered": {
                      "text": "                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr pwc = doc->checkOut( );\n                    if ( pwc.get( ) )\n                    {\n                        cout << \"------------------------------------------------\" << endl;\n                        cout << pwc->toString() << endl;\n",
                      "markdown": "`                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr pwc = doc->checkOut( );\n                    if ( pwc.get( ) )\n                    {\n                        cout << \"------------------------------------------------\" << endl;\n                        cout << pwc->toString() << endl;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 833,
                  "startColumn": 84,
                  "endLine": 833,
                  "endColumn": 89,
                  "snippet": {
                    "text": "            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr pwc = doc->checkOut( );\n",
                    "rendered": {
                      "text": "            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr pwc = doc->checkOut( );\n",
                      "markdown": "`            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n                {\n                    libcmis::DocumentPtr pwc = doc->checkOut( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 831,
                  "startColumn": 24,
                  "endLine": 831,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n",
                    "rendered": {
                      "text": "            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n",
                      "markdown": "`            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            if ( cmisObj.get() )\n            {\n                libcmis::Document* doc = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n                if ( NULL != doc )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 787,
                  "startColumn": 33,
                  "endLine": 787,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                        errors.push_back( msg );\n                    }\n                }\n                else if ( cmisObj.get() )\n                {\n                    try\n                    {\n",
                    "rendered": {
                      "text": "                        errors.push_back( msg );\n                    }\n                }\n                else if ( cmisObj.get() )\n                {\n                    try\n                    {\n",
                      "markdown": "`                        errors.push_back( msg );\n                    }\n                }\n                else if ( cmisObj.get() )\n                {\n                    try\n                    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 83,
                  "endLine": 762,
                  "endColumn": 88,
                  "snippet": {
                    "text": "            for ( vector< string >::iterator it = objIds.begin(); it != objIds.end(); ++it )\n            {\n                libcmis::ObjectPtr cmisObj = session->getObject( *it );\n                libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( cmisObj.get() );\n                if ( NULL != folder )\n                {\n                    try\n",
                    "rendered": {
                      "text": "            for ( vector< string >::iterator it = objIds.begin(); it != objIds.end(); ++it )\n            {\n                libcmis::ObjectPtr cmisObj = session->getObject( *it );\n                libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( cmisObj.get() );\n                if ( NULL != folder )\n                {\n                    try\n",
                      "markdown": "`            for ( vector< string >::iterator it = objIds.begin(); it != objIds.end(); ++it )\n            {\n                libcmis::ObjectPtr cmisObj = session->getObject( *it );\n                libcmis::Folder* folder = dynamic_cast< libcmis::Folder* >( cmisObj.get() );\n                if ( NULL != folder )\n                {\n                    try\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 85,
                  "endLine": 500,
                  "endColumn": 90,
                  "snippet": {
                    "text": "                throw CommandException( \"Please provide a content object Id\" );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            libcmis::Document* document = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n            if ( NULL != document )\n            {\n                if ( m_vm.count( \"input-file\" ) == 0 )\n",
                    "rendered": {
                      "text": "                throw CommandException( \"Please provide a content object Id\" );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            libcmis::Document* document = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n            if ( NULL != document )\n            {\n                if ( m_vm.count( \"input-file\" ) == 0 )\n",
                      "markdown": "`                throw CommandException( \"Please provide a content object Id\" );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            libcmis::Document* document = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n            if ( NULL != document )\n            {\n                if ( m_vm.count( \"input-file\" ) == 0 )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 85,
                  "endLine": 475,
                  "endColumn": 90,
                  "snippet": {
                    "text": "                throw CommandException( \"Please provide a content object Id\" );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            libcmis::Document* document = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n            if ( NULL != document )\n            {\n                // TODO Handle name clashes\n",
                    "rendered": {
                      "text": "                throw CommandException( \"Please provide a content object Id\" );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            libcmis::Document* document = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n            if ( NULL != document )\n            {\n                // TODO Handle name clashes\n",
                      "markdown": "`                throw CommandException( \"Please provide a content object Id\" );\n\n            libcmis::ObjectPtr cmisObj = session->getObject( objIds.front() );\n            libcmis::Document* document = dynamic_cast< libcmis::Document* >( cmisObj.get() );\n            if ( NULL != document )\n            {\n                // TODO Handle name clashes\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 28,
                  "endLine": 460,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            {\n                libcmis::ObjectPtr cmisObj = session->getObjectByPath( *it );\n                cout << \"------------------------------------------------\" << endl;\n                if ( cmisObj.get() )\n                    cout << cmisObj->toString() << endl;\n                else\n                    cout << \"No such node: \" << *it << endl;\n",
                    "rendered": {
                      "text": "            {\n                libcmis::ObjectPtr cmisObj = session->getObjectByPath( *it );\n                cout << \"------------------------------------------------\" << endl;\n                if ( cmisObj.get() )\n                    cout << cmisObj->toString() << endl;\n                else\n                    cout << \"No such node: \" << *it << endl;\n",
                      "markdown": "`            {\n                libcmis::ObjectPtr cmisObj = session->getObjectByPath( *it );\n                cout << \"------------------------------------------------\" << endl;\n                if ( cmisObj.get() )\n                    cout << cmisObj->toString() << endl;\n                else\n                    cout << \"No such node: \" << *it << endl;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 28,
                  "endLine": 439,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            {\n                libcmis::ObjectPtr cmisObj = session->getObject( *it );\n                cout << \"------------------------------------------------\" << endl;\n                if ( cmisObj.get() )\n                    cout << cmisObj->toString() << endl;\n                else\n                    cout << \"No such node: \" << *it << endl;\n",
                    "rendered": {
                      "text": "            {\n                libcmis::ObjectPtr cmisObj = session->getObject( *it );\n                cout << \"------------------------------------------------\" << endl;\n                if ( cmisObj.get() )\n                    cout << cmisObj->toString() << endl;\n                else\n                    cout << \"No such node: \" << *it << endl;\n",
                      "markdown": "`            {\n                libcmis::ObjectPtr cmisObj = session->getObject( *it );\n                cout << \"------------------------------------------------\" << endl;\n                if ( cmisObj.get() )\n                    cout << cmisObj->toString() << endl;\n                else\n                    cout << \"No such node: \" << *it << endl;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 21,
                  "endLine": 380,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            unique_ptr<libcmis::Session> session( getSession( ) );\n\n            libcmis::FolderPtr root = session->getRootFolder();\n            if ( root.get() )\n            {\n                cout << \"------------------------------------------------\" << endl;\n                cout << root->toString() << endl;\n",
                    "rendered": {
                      "text": "            unique_ptr<libcmis::Session> session( getSession( ) );\n\n            libcmis::FolderPtr root = session->getRootFolder();\n            if ( root.get() )\n            {\n                cout << \"------------------------------------------------\" << endl;\n                cout << root->toString() << endl;\n",
                      "markdown": "`            unique_ptr<libcmis::Session> session( getSession( ) );\n\n            libcmis::FolderPtr root = session->getRootFolder();\n            if ( root.get() )\n            {\n                cout << \"------------------------------------------------\" << endl;\n                cout << root->toString() << endl;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 48,
                  "endLine": 1021,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        ( \"noproxy\", value< string >(), \"Coma separated list if host and domain names not going\"\n                                        \"through the proxy\" )\n        ( \"proxy-username\", value< string >(), \"Username to authenticate on the proxy\" )\n        ( \"proxy-password\", value< string >(), \"Password to authenticate on the proxy\" )\n        ( \"oauth2-client-id\", value< string >(), \"OAuth2 application client_id\" )\n        ( \"oauth2-client-secret\", value< string >(), \"OAuth2 application client_secret\" )\n        ( \"oauth2-auth-url\", value< string >(), \"URL to authenticate in the OAuth2 flow\" )\n",
                    "rendered": {
                      "text": "        ( \"noproxy\", value< string >(), \"Coma separated list if host and domain names not going\"\n                                        \"through the proxy\" )\n        ( \"proxy-username\", value< string >(), \"Username to authenticate on the proxy\" )\n        ( \"proxy-password\", value< string >(), \"Password to authenticate on the proxy\" )\n        ( \"oauth2-client-id\", value< string >(), \"OAuth2 application client_id\" )\n        ( \"oauth2-client-secret\", value< string >(), \"OAuth2 application client_secret\" )\n        ( \"oauth2-auth-url\", value< string >(), \"URL to authenticate in the OAuth2 flow\" )\n",
                      "markdown": "`        ( \"noproxy\", value< string >(), \"Coma separated list if host and domain names not going\"\n                                        \"through the proxy\" )\n        ( \"proxy-username\", value< string >(), \"Username to authenticate on the proxy\" )\n        ( \"proxy-password\", value< string >(), \"Password to authenticate on the proxy\" )\n        ( \"oauth2-client-id\", value< string >(), \"OAuth2 application client_id\" )\n        ( \"oauth2-client-secret\", value< string >(), \"OAuth2 application client_secret\" )\n        ( \"oauth2-auth-url\", value< string >(), \"URL to authenticate in the OAuth2 flow\" )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 17,
                  "endLine": 1021,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        ( \"noproxy\", value< string >(), \"Coma separated list if host and domain names not going\"\n                                        \"through the proxy\" )\n        ( \"proxy-username\", value< string >(), \"Username to authenticate on the proxy\" )\n        ( \"proxy-password\", value< string >(), \"Password to authenticate on the proxy\" )\n        ( \"oauth2-client-id\", value< string >(), \"OAuth2 application client_id\" )\n        ( \"oauth2-client-secret\", value< string >(), \"OAuth2 application client_secret\" )\n        ( \"oauth2-auth-url\", value< string >(), \"URL to authenticate in the OAuth2 flow\" )\n",
                    "rendered": {
                      "text": "        ( \"noproxy\", value< string >(), \"Coma separated list if host and domain names not going\"\n                                        \"through the proxy\" )\n        ( \"proxy-username\", value< string >(), \"Username to authenticate on the proxy\" )\n        ( \"proxy-password\", value< string >(), \"Password to authenticate on the proxy\" )\n        ( \"oauth2-client-id\", value< string >(), \"OAuth2 application client_id\" )\n        ( \"oauth2-client-secret\", value< string >(), \"OAuth2 application client_secret\" )\n        ( \"oauth2-auth-url\", value< string >(), \"URL to authenticate in the OAuth2 flow\" )\n",
                      "markdown": "`        ( \"noproxy\", value< string >(), \"Coma separated list if host and domain names not going\"\n                                        \"through the proxy\" )\n        ( \"proxy-username\", value< string >(), \"Username to authenticate on the proxy\" )\n        ( \"proxy-password\", value< string >(), \"Password to authenticate on the proxy\" )\n        ( \"oauth2-client-id\", value< string >(), \"OAuth2 application client_id\" )\n        ( \"oauth2-client-secret\", value< string >(), \"OAuth2 application client_secret\" )\n        ( \"oauth2-auth-url\", value< string >(), \"URL to authenticate in the OAuth2 flow\" )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 44,
                  "endLine": 1014,
                  "endColumn": 52,
                  "snippet": {
                    "text": "gging\" )\n        ( \"url\", value< string >(), \"URL of the binding of the server\" )\n        ( \"repository,r\", value< string >(), \"Name of the repository to use\" )\n        ( \"username,u\", value< string >(), \"Username used to authenticate to the repository\" )\n        ( \"password,p\", value< string >(), \"Password used to authenticate to the repository\" )\n        ( \"no-ssl-check\", \"Disable the verification of SSL certificates. This may come handy\"\n                          \"for self-signed certificates for example, though it lowers the security\" )\n        ( \"proxy\", value< string >(), \"HTTP proxy url to over",
                    "rendered": {
                      "text": "gging\" )\n        ( \"url\", value< string >(), \"URL of the binding of the server\" )\n        ( \"repository,r\", value< string >(), \"Name of the repository to use\" )\n        ( \"username,u\", value< string >(), \"Username used to authenticate to the repository\" )\n        ( \"password,p\", value< string >(), \"Password used to authenticate to the repository\" )\n        ( \"no-ssl-check\", \"Disable the verification of SSL certificates. This may come handy\"\n                          \"for self-signed certificates for example, though it lowers the security\" )\n        ( \"proxy\", value< string >(), \"HTTP proxy url to over",
                      "markdown": "`gging\" )\n        ( \"url\", value< string >(), \"URL of the binding of the server\" )\n        ( \"repository,r\", value< string >(), \"Name of the repository to use\" )\n        ( \"username,u\", value< string >(), \"Username used to authenticate to the repository\" )\n        ( \"password,p\", value< string >(), \"Password used to authenticate to the repository\" )\n        ( \"no-ssl-check\", \"Disable the verification of SSL certificates. This may come handy\"\n                          \"for self-signed certificates for example, though it lowers the security\" )\n        ( \"proxy\", value< string >(), \"HTTP proxy url to over`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 11,
                  "endLine": 1014,
                  "endColumn": 19,
                  "snippet": {
                    "text": "loads of useful messages for debugging\" )\n        ( \"url\", value< string >(), \"URL of the binding of the server\" )\n        ( \"repository,r\", value< string >(), \"Name of the repository to use\" )\n        ( \"username,u\", value< string >(), \"Username used to authenticate to the repository\" )\n        ( \"password,p\", value< string >(), \"Password used to authenticate to the repository\" )\n        ( \"no-ssl-check\", \"Disable the verification of SSL certificates. This may come handy\"\n                          \"for self-signed certificates for example, though it lowers the security\" )\n        ( \"proxy\", value< st",
                    "rendered": {
                      "text": "loads of useful messages for debugging\" )\n        ( \"url\", value< string >(), \"URL of the binding of the server\" )\n        ( \"repository,r\", value< string >(), \"Name of the repository to use\" )\n        ( \"username,u\", value< string >(), \"Username used to authenticate to the repository\" )\n        ( \"password,p\", value< string >(), \"Password used to authenticate to the repository\" )\n        ( \"no-ssl-check\", \"Disable the verification of SSL certificates. This may come handy\"\n                          \"for self-signed certificates for example, though it lowers the security\" )\n        ( \"proxy\", value< st",
                      "markdown": "`loads of useful messages for debugging\" )\n        ( \"url\", value< string >(), \"URL of the binding of the server\" )\n        ( \"repository,r\", value< string >(), \"Name of the repository to use\" )\n        ( \"username,u\", value< string >(), \"Username used to authenticate to the repository\" )\n        ( \"password,p\", value< string >(), \"Password used to authenticate to the repository\" )\n        ( \"no-ssl-check\", \"Disable the verification of SSL certificates. This may come handy\"\n                          \"for self-signed certificates for example, though it lowers the security\" )\n        ( \"proxy\", value< st`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 73,
                  "endLine": 342,
                  "endColumn": 81,
                  "snippet": {
                    "text": "            oauth2Data.reset( );\n        }\n\n        session = libcmis::SessionFactory::createSession( url, username, password, repoId, noSslCheck, oauth2Data, verbose );\n    }\n\n    return session;\n",
                    "rendered": {
                      "text": "            oauth2Data.reset( );\n        }\n\n        session = libcmis::SessionFactory::createSession( url, username, password, repoId, noSslCheck, oauth2Data, verbose );\n    }\n\n    return session;\n",
                      "markdown": "`            oauth2Data.reset( );\n        }\n\n        session = libcmis::SessionFactory::createSession( url, username, password, repoId, noSslCheck, oauth2Data, verbose );\n    }\n\n    return session;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 36,
                  "endLine": 257,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            proxyUser = m_vm[\"proxy-user\"].as< string >();\n        \n        if ( m_vm.count( \"proxy-password\" ) > 0 )\n            proxyPass = m_vm[\"proxy-password\"].as< string >();\n\n        if ( m_vm.count( \"noproxy\" ) > 0 )\n            noproxy = m_vm[\"noproxy\"].as< string >();\n",
                    "rendered": {
                      "text": "            proxyUser = m_vm[\"proxy-user\"].as< string >();\n        \n        if ( m_vm.count( \"proxy-password\" ) > 0 )\n            proxyPass = m_vm[\"proxy-password\"].as< string >();\n\n        if ( m_vm.count( \"noproxy\" ) > 0 )\n            noproxy = m_vm[\"noproxy\"].as< string >();\n",
                      "markdown": "`            proxyUser = m_vm[\"proxy-user\"].as< string >();\n        \n        if ( m_vm.count( \"proxy-password\" ) > 0 )\n            proxyPass = m_vm[\"proxy-password\"].as< string >();\n\n        if ( m_vm.count( \"noproxy\" ) > 0 )\n            noproxy = m_vm[\"noproxy\"].as< string >();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 32,
                  "endLine": 256,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        if ( m_vm.count( \"proxy-user\" ) > 0 )\n            proxyUser = m_vm[\"proxy-user\"].as< string >();\n        \n        if ( m_vm.count( \"proxy-password\" ) > 0 )\n            proxyPass = m_vm[\"proxy-password\"].as< string >();\n\n        if ( m_vm.count( \"noproxy\" ) > 0 )\n",
                    "rendered": {
                      "text": "        if ( m_vm.count( \"proxy-user\" ) > 0 )\n            proxyUser = m_vm[\"proxy-user\"].as< string >();\n        \n        if ( m_vm.count( \"proxy-password\" ) > 0 )\n            proxyPass = m_vm[\"proxy-password\"].as< string >();\n\n        if ( m_vm.count( \"noproxy\" ) > 0 )\n",
                      "markdown": "`        if ( m_vm.count( \"proxy-user\" ) > 0 )\n            proxyUser = m_vm[\"proxy-user\"].as< string >();\n        \n        if ( m_vm.count( \"proxy-password\" ) > 0 )\n            proxyPass = m_vm[\"proxy-password\"].as< string >();\n\n        if ( m_vm.count( \"noproxy\" ) > 0 )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n    // Look for proxy settings\n",
                    "rendered": {
                      "text": "        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n    // Look for proxy settings\n",
                      "markdown": "`        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n    // Look for proxy settings\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 12,
                  "endLine": 242,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n    // Look for proxy settings\n",
                    "rendered": {
                      "text": "        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n    // Look for proxy settings\n",
                      "markdown": "`        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n    // Look for proxy settings\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 26,
                  "endLine": 241,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    {\n        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n",
                    "rendered": {
                      "text": "    {\n        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n",
                      "markdown": "`    {\n        username = m_vm[\"username\"].as< string >();\n\n        if ( m_vm.count( \"password\" ) > 0 )\n            password = m_vm[\"password\"].as< string >();\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 11,
                  "endLine": 236,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    // Look for the credentials\n    string username;\n    string password;\n    if ( m_vm.count( \"username\" ) > 0 )\n    {\n        username = m_vm[\"username\"].as< string >();\n",
                    "rendered": {
                      "text": "\n    // Look for the credentials\n    string username;\n    string password;\n    if ( m_vm.count( \"username\" ) > 0 )\n    {\n        username = m_vm[\"username\"].as< string >();\n",
                      "markdown": "`\n    // Look for the credentials\n    string username;\n    string password;\n    if ( m_vm.count( \"username\" ) > 0 )\n    {\n        username = m_vm[\"username\"].as< string >();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 12,
                  "endLine": 118,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            }\n\n            cancelled = m_pass.empty();\n            password = m_pass;\n        }\n\n        return !cancelled;\n",
                    "rendered": {
                      "text": "            }\n\n            cancelled = m_pass.empty();\n            password = m_pass;\n        }\n\n        return !cancelled;\n",
                      "markdown": "`            }\n\n            cancelled = m_pass.empty();\n            password = m_pass;\n        }\n\n        return !cancelled;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 25,
                  "endLine": 113,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        {\n            if ( m_pass.empty() )\n            {\n                cout << \"Password (empty to cancel): \";\n                getline( cin, m_pass );\n            }\n\n",
                    "rendered": {
                      "text": "        {\n            if ( m_pass.empty() )\n            {\n                cout << \"Password (empty to cancel): \";\n                getline( cin, m_pass );\n            }\n\n",
                      "markdown": "`        {\n            if ( m_pass.empty() )\n            {\n                cout << \"Password (empty to cancel): \";\n                getline( cin, m_pass );\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 44,
                  "endLine": 109,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            username = m_user;\n        }\n\n        if ( !cancelled && ( askUsername || password.empty( ) ) )\n        {\n            if ( m_pass.empty() )\n            {\n",
                    "rendered": {
                      "text": "            username = m_user;\n        }\n\n        if ( !cancelled && ( askUsername || password.empty( ) ) )\n        {\n            if ( m_pass.empty() )\n            {\n",
                      "markdown": "`            username = m_user;\n        }\n\n        if ( !cancelled && ( askUsername || password.empty( ) ) )\n        {\n            if ( m_pass.empty() )\n            {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 73,
                  "endLine": 92,
                  "endColumn": 81,
                  "snippet": {
                    "text": "            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool CinAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        bool cancelled = false;\n        bool askUsername = username.empty();\n",
                    "rendered": {
                      "text": "            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool CinAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        bool cancelled = false;\n        bool askUsername = username.empty();\n",
                      "markdown": "`            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool CinAuthProvider::authenticationQuery( string& username, string& password )\n    {\n        bool cancelled = false;\n        bool askUsername = username.empty();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 72,
                  "endLine": 89,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            CinAuthProvider( ) : m_user( ), m_pass( ) { }\n            ~CinAuthProvider( ) { }\n\n            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool CinAuthProvider::authenticationQuery( string& username, string& password )\n",
                    "rendered": {
                      "text": "            CinAuthProvider( ) : m_user( ), m_pass( ) { }\n            ~CinAuthProvider( ) { }\n\n            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool CinAuthProvider::authenticationQuery( string& username, string& password )\n",
                      "markdown": "`            CinAuthProvider( ) : m_user( ), m_pass( ) { }\n            ~CinAuthProvider( ) { }\n\n            virtual bool authenticationQuery( string& username, string& password );\n    };\n\n    bool CinAuthProvider::authenticationQuery( string& username, string& password )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 102,
                  "endLine": 74,
                  "endColumn": 110,
                  "snippet": {
                    "text": "        m_authCode = authCode;\n    }\n    \n    char* AuthCodeProvider::getAuthCode( const char* /*url*/, const char* /*username*/, const char* /*password*/ ) \n    {\n        return strdup( m_authCode.c_str( ) );\n    }\n",
                    "rendered": {
                      "text": "        m_authCode = authCode;\n    }\n    \n    char* AuthCodeProvider::getAuthCode( const char* /*url*/, const char* /*username*/, const char* /*password*/ ) \n    {\n        return strdup( m_authCode.c_str( ) );\n    }\n",
                      "markdown": "`        m_authCode = authCode;\n    }\n    \n    char* AuthCodeProvider::getAuthCode( const char* /*url*/, const char* /*username*/, const char* /*password*/ ) \n    {\n        return strdup( m_authCode.c_str( ) );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 99,
                  "endLine": 65,
                  "endColumn": 107,
                  "snippet": {
                    "text": "\n        public:\n            static void setAuthCode( string authCode );\n            static char* getAuthCode( const char* /*url*/, const char* /*username*/, const char* /*password*/ );\n    };\n\n    string AuthCodeProvider::m_authCode = string( );\n",
                    "rendered": {
                      "text": "\n        public:\n            static void setAuthCode( string authCode );\n            static char* getAuthCode( const char* /*url*/, const char* /*username*/, const char* /*password*/ );\n    };\n\n    string AuthCodeProvider::m_authCode = string( );\n",
                      "markdown": "`\n        public:\n            static void setAuthCode( string authCode );\n            static char* getAuthCode( const char* /*url*/, const char* /*username*/, const char* /*password*/ );\n    };\n\n    string AuthCodeProvider::m_authCode = string( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 86,
                  "endLine": 48,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\nnamespace\n{\n    char* lcl_queryAuthCode( const char* url, const char* /*username*/, const char* /*password*/ )\n    {\n        string code;\n        cout << \"Copy the following link to your browser and take the code: \" << endl << endl << url << endl << endl;\n",
                    "rendered": {
                      "text": "\nnamespace\n{\n    char* lcl_queryAuthCode( const char* url, const char* /*username*/, const char* /*password*/ )\n    {\n        string code;\n        cout << \"Copy the following link to your browser and take the code: \" << endl << endl << url << endl << endl;\n",
                      "markdown": "`\nnamespace\n{\n    char* lcl_queryAuthCode( const char* url, const char* /*username*/, const char* /*password*/ )\n    {\n        string code;\n        cout << \"Copy the following link to your browser and take the code: \" << endl << endl << url << endl << endl;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 52,
                  "endLine": 138,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                if ( certificates.empty( ) )\n                    return false; // Should never happen\n\n                // Show the first certificate (even base64-encoded)\n                string cert = certificates.front();\n                map< string, bool >::iterator it = m_answers.find( cert );\n                if ( it != m_answers.end( ) )\n",
                    "rendered": {
                      "text": "                if ( certificates.empty( ) )\n                    return false; // Should never happen\n\n                // Show the first certificate (even base64-encoded)\n                string cert = certificates.front();\n                map< string, bool >::iterator it = m_answers.find( cert );\n                if ( it != m_answers.end( ) )\n",
                      "markdown": "`                if ( certificates.empty( ) )\n                    return false; // Should never happen\n\n                // Show the first certificate (even base64-encoded)\n                string cert = certificates.front();\n                map< string, bool >::iterator it = m_answers.find( cert );\n                if ( it != m_answers.end( ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 1081,
                  "startColumn": 23,
                  "endLine": 1081,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            \"           Note that --input-file and --input-type may be requested if\\n\"\n            \"           the server requires a content stream.\" << endl; \n    cerr << \"   update-object <Object Id>\\n\"\n            \"           Update the object matching id <Object Id> with the properties\\n\"\n            \"           defined with --object-property.\" << endl;\n    cerr << \"   move-object <Object Id> <Source Folder Id> <Destination Folder Id>\\n\"\n            \"           Move the object matching id <Object Id> from the\\n\"\n",
                    "rendered": {
                      "text": "            \"           Note that --input-file and --input-type may be requested if\\n\"\n            \"           the server requires a content stream.\" << endl; \n    cerr << \"   update-object <Object Id>\\n\"\n            \"           Update the object matching id <Object Id> with the properties\\n\"\n            \"           defined with --object-property.\" << endl;\n    cerr << \"   move-object <Object Id> <Source Folder Id> <Destination Folder Id>\\n\"\n            \"           Move the object matching id <Object Id> from the\\n\"\n",
                      "markdown": "`            \"           Note that --input-file and --input-type may be requested if\\n\"\n            \"           the server requires a content stream.\" << endl; \n    cerr << \"   update-object <Object Id>\\n\"\n            \"           Update the object matching id <Object Id> with the properties\\n\"\n            \"           defined with --object-property.\" << endl;\n    cerr << \"   move-object <Object Id> <Source Folder Id> <Destination Folder Id>\\n\"\n            \"           Move the object matching id <Object Id> from the\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 1059,
                  "startColumn": 37,
                  "endLine": 1059,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    cerr << \"   repo-infos\\n\"\n            \"           Show the informations and capabilities of the selected repository\" << endl;\n    cerr << \"   show-root\\n\"\n            \"           Dump the root node of the repository.\" << endl;\n    cerr << \"   type-by-id <Type Id 1> [... <Type Id N>]\\n\"\n            \"           Dumps the type informations for all the ids.\" << endl;\n    cerr << \"   show-by-id <Object Id 1> [... <Object Id N>]\\n\"\n",
                    "rendered": {
                      "text": "    cerr << \"   repo-infos\\n\"\n            \"           Show the informations and capabilities of the selected repository\" << endl;\n    cerr << \"   show-root\\n\"\n            \"           Dump the root node of the repository.\" << endl;\n    cerr << \"   type-by-id <Type Id 1> [... <Type Id N>]\\n\"\n            \"           Dumps the type informations for all the ids.\" << endl;\n    cerr << \"   show-by-id <Object Id 1> [... <Object Id N>]\\n\"\n",
                      "markdown": "`    cerr << \"   repo-infos\\n\"\n            \"           Show the informations and capabilities of the selected repository\" << endl;\n    cerr << \"   show-root\\n\"\n            \"           Dump the root node of the repository.\" << endl;\n    cerr << \"   type-by-id <Type Id 1> [... <Type Id N>]\\n\"\n            \"           Dumps the type informations for all the ids.\" << endl;\n    cerr << \"   show-by-id <Object Id 1> [... <Object Id N>]\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 964,
                  "startColumn": 59,
                  "endLine": 964,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to get versions from as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                    "rendered": {
                      "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to get versions from as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                      "markdown": "`\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to get versions from as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 59,
                  "endLine": 883,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to checkin as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                    "rendered": {
                      "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to checkin as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                      "markdown": "`\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to checkin as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 826,
                  "startColumn": 59,
                  "endLine": 826,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to checkout as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                    "rendered": {
                      "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to checkout as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                      "markdown": "`\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node id to checkout as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 59,
                  "endLine": 754,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to delete as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                    "rendered": {
                      "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to delete as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                      "markdown": "`\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to delete as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 59,
                  "endLine": 451,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            // Get the paths of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node paths to show as command args\" );\n\n            vector< string > objPaths = m_vm[\"args\"].as< vector< string > >( );\n\n",
                    "rendered": {
                      "text": "\n            // Get the paths of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node paths to show as command args\" );\n\n            vector< string > objPaths = m_vm[\"args\"].as< vector< string > >( );\n\n",
                      "markdown": "`\n            // Get the paths of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node paths to show as command args\" );\n\n            vector< string > objPaths = m_vm[\"args\"].as< vector< string > >( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 59,
                  "endLine": 430,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to show as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                    "rendered": {
                      "text": "\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to show as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n",
                      "markdown": "`\n            // Get the ids of the objects to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to show as command args\" );\n\n            vector< string > objIds = m_vm[\"args\"].as< vector< string > >( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/cmis-client.cxx"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 59,
                  "endLine": 405,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            // Get the ids of the types to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to show as command args\" );\n\n            vector< string > ids = m_vm[\"args\"].as< vector< string > >( );\n\n",
                    "rendered": {
                      "text": "\n            // Get the ids of the types to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to show as command args\" );\n\n            vector< string > ids = m_vm[\"args\"].as< vector< string > >( );\n\n",
                      "markdown": "`\n            // Get the ids of the types to fetch\n            if ( m_vm.count( \"args\" ) == 0 )\n                throw CommandException( \"Please provide the node ids to show as command args\" );\n\n            vector< string > ids = m_vm[\"args\"].as< vector< string > >( );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/README.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 12,
                  "endLine": 8,
                  "endColumn": 16,
                  "snippet": {
                    "text": "Objective\n---------\n\nLibcmis aims at providing a C/C++ client library for the CMIS protocol.\nA cmis-client tool is maintained to help testing and showing libcmis features.\n\nDependencies\n",
                    "rendered": {
                      "text": "Objective\n---------\n\nLibcmis aims at providing a C/C++ client library for the CMIS protocol.\nA cmis-client tool is maintained to help testing and showing libcmis features.\n\nDependencies\n",
                      "markdown": "`Objective\n---------\n\nLibcmis aims at providing a C/C++ client library for the CMIS protocol.\nA cmis-client tool is maintained to help testing and showing libcmis features.\n\nDependencies\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/qa/libcmis/data/sharepoint/auth-resp.json"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    },\n    \"CustomMasterUrl\":\"/_catalogs/masterpage/seattle.master\",\n    \"Description\":\"\",\n    \"DocumentLibraryCalloutOfficeWebAppPreviewersDisabled\":false,\n    \"EnableMinimalDownload\":false,\n    \"EventReceivers\":{\n      \"__deferred\":{\n",
                    "rendered": {
                      "text": "    },\n    \"CustomMasterUrl\":\"/_catalogs/masterpage/seattle.master\",\n    \"Description\":\"\",\n    \"DocumentLibraryCalloutOfficeWebAppPreviewersDisabled\":false,\n    \"EnableMinimalDownload\":false,\n    \"EventReceivers\":{\n      \"__deferred\":{\n",
                      "markdown": "`    },\n    \"CustomMasterUrl\":\"/_catalogs/masterpage/seattle.master\",\n    \"Description\":\"\",\n    \"DocumentLibraryCalloutOfficeWebAppPreviewersDisabled\":false,\n    \"EnableMinimalDownload\":false,\n    \"EventReceivers\":{\n      \"__deferred\":{\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-repository.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-repository.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 57,
                  "endLine": 270,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    if ( NULL == treeLink )\n        treeLink = getLink( \"http://docs.oasis-open.org/ns/cmis/link/200908/foldertree\", \"application/cmistree+xml\" );\n\n    if ( ( NULL == treeLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::DeleteTree ) ) )\n        throw libcmis::Exception( string( \"DeleteTree not allowed on folder \" ) + getId() );\n\n",
                    "rendered": {
                      "text": "    if ( NULL == treeLink )\n        treeLink = getLink( \"http://docs.oasis-open.org/ns/cmis/link/200908/foldertree\", \"application/cmistree+xml\" );\n\n    if ( ( NULL == treeLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::DeleteTree ) ) )\n        throw libcmis::Exception( string( \"DeleteTree not allowed on folder \" ) + getId() );\n\n",
                      "markdown": "`    if ( NULL == treeLink )\n        treeLink = getLink( \"http://docs.oasis-open.org/ns/cmis/link/200908/foldertree\", \"application/cmistree+xml\" );\n\n    if ( ( NULL == treeLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::DeleteTree ) ) )\n        throw libcmis::Exception( string( \"DeleteTree not allowed on folder \" ) + getId() );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 21,
                  "endLine": 257,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    libcmis::ObjectPtr created = getSession( )->createObjectFromEntryDoc( doc.get(), AtomPubSession::RESULT_DOCUMENT );\n\n    libcmis::DocumentPtr newDocument = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !newDocument.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a document: \" ) + created->getId( ) );\n\n    return newDocument;\n",
                    "rendered": {
                      "text": "    libcmis::ObjectPtr created = getSession( )->createObjectFromEntryDoc( doc.get(), AtomPubSession::RESULT_DOCUMENT );\n\n    libcmis::DocumentPtr newDocument = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !newDocument.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a document: \" ) + created->getId( ) );\n\n    return newDocument;\n",
                      "markdown": "`    libcmis::ObjectPtr created = getSession( )->createObjectFromEntryDoc( doc.get(), AtomPubSession::RESULT_DOCUMENT );\n\n    libcmis::DocumentPtr newDocument = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !newDocument.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a document: \" ) + created->getId( ) );\n\n    return newDocument;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 77,
                  "endLine": 254,
                  "endColumn": 82,
                  "snippet": {
                    "text": "            throw libcmis::Exception( \"Missing expected response from server\" );\n    }\n\n    libcmis::ObjectPtr created = getSession( )->createObjectFromEntryDoc( doc.get(), AtomPubSession::RESULT_DOCUMENT );\n\n    libcmis::DocumentPtr newDocument = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !newDocument.get( ) )\n",
                    "rendered": {
                      "text": "            throw libcmis::Exception( \"Missing expected response from server\" );\n    }\n\n    libcmis::ObjectPtr created = getSession( )->createObjectFromEntryDoc( doc.get(), AtomPubSession::RESULT_DOCUMENT );\n\n    libcmis::DocumentPtr newDocument = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !newDocument.get( ) )\n",
                      "markdown": "`            throw libcmis::Exception( \"Missing expected response from server\" );\n    }\n\n    libcmis::ObjectPtr created = getSession( )->createObjectFromEntryDoc( doc.get(), AtomPubSession::RESULT_DOCUMENT );\n\n    libcmis::DocumentPtr newDocument = boost::dynamic_pointer_cast< libcmis::Document >( created );\n    if ( !newDocument.get( ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 61,
                  "endLine": 195,
                  "endColumn": 66,
                  "snippet": {
                    "text": "{\n    AtomLink* childrenLink = getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::CreateDocument ) &&\n                getAllowableActions()->isDefined( libcmis::ObjectAction::CreateDocument ) ) )\n        throw libcmis::Exception( string( \"CreateDocument not allowed on folder \" ) + getId() );\n",
                    "rendered": {
                      "text": "{\n    AtomLink* childrenLink = getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::CreateDocument ) &&\n                getAllowableActions()->isDefined( libcmis::ObjectAction::CreateDocument ) ) )\n        throw libcmis::Exception( string( \"CreateDocument not allowed on folder \" ) + getId() );\n",
                      "markdown": "`{\n    AtomLink* childrenLink = getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::CreateDocument ) &&\n                getAllowableActions()->isDefined( libcmis::ObjectAction::CreateDocument ) ) )\n        throw libcmis::Exception( string( \"CreateDocument not allowed on folder \" ) + getId() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 19,
                  "endLine": 184,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    xmlFreeDoc( doc );\n\n    libcmis::FolderPtr newFolder = boost::dynamic_pointer_cast< libcmis::Folder >( created );\n    if ( !newFolder.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a folder: \" ) + created->getId( ), \"constraint\" );\n\n    return newFolder;\n",
                    "rendered": {
                      "text": "    xmlFreeDoc( doc );\n\n    libcmis::FolderPtr newFolder = boost::dynamic_pointer_cast< libcmis::Folder >( created );\n    if ( !newFolder.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a folder: \" ) + created->getId( ), \"constraint\" );\n\n    return newFolder;\n",
                      "markdown": "`    xmlFreeDoc( doc );\n\n    libcmis::FolderPtr newFolder = boost::dynamic_pointer_cast< libcmis::Folder >( created );\n    if ( !newFolder.get( ) )\n        throw libcmis::Exception( string( \"Created object is not a folder: \" ) + created->getId( ), \"constraint\" );\n\n    return newFolder;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 61,
                  "endLine": 141,
                  "endColumn": 66,
                  "snippet": {
                    "text": "{\n    AtomLink* childrenLink = getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::CreateFolder ) ) )\n        throw libcmis::Exception( string( \"CreateFolder not allowed on folder \" ) + getId(), \"permissionDenied\" );\n\n",
                    "rendered": {
                      "text": "{\n    AtomLink* childrenLink = getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::CreateFolder ) ) )\n        throw libcmis::Exception( string( \"CreateFolder not allowed on folder \" ) + getId(), \"permissionDenied\" );\n\n",
                      "markdown": "`{\n    AtomLink* childrenLink = getLink( \"down\", \"application/atom+xml;type=feed\" );\n\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                !getAllowableActions()->isAllowed( libcmis::ObjectAction::CreateFolder ) ) )\n        throw libcmis::Exception( string( \"CreateFolder not allowed on folder \" ) + getId(), \"permissionDenied\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 39,
                  "endLine": 116,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n                        if ( cmisObject.get() )\n                            children.push_back( cmisObject );\n                        xmlFreeDoc( entryDoc );\n                    }\n",
                    "rendered": {
                      "text": "                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n                        if ( cmisObject.get() )\n                            children.push_back( cmisObject );\n                        xmlFreeDoc( entryDoc );\n                    }\n",
                      "markdown": "`                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n                        if ( cmisObject.get() )\n                            children.push_back( cmisObject );\n                        xmlFreeDoc( entryDoc );\n                    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 61,
                  "endLine": 67,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n    // Some servers aren't giving the GetChildren properly... if not defined, we need to try\n    // as we may have the right to proceed.\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                ( !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetChildren ) &&\n                  getAllowableActions()->isDefined( libcmis::ObjectAction::GetChildren ) ) ) )\n        throw libcmis::Exception( string( \"GetChildren not allowed on node \" ) + getId() );\n",
                    "rendered": {
                      "text": "\n    // Some servers aren't giving the GetChildren properly... if not defined, we need to try\n    // as we may have the right to proceed.\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                ( !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetChildren ) &&\n                  getAllowableActions()->isDefined( libcmis::ObjectAction::GetChildren ) ) ) )\n        throw libcmis::Exception( string( \"GetChildren not allowed on node \" ) + getId() );\n",
                      "markdown": "`\n    // Some servers aren't giving the GetChildren properly... if not defined, we need to try\n    // as we may have the right to proceed.\n    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                ( !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetChildren ) &&\n                  getAllowableActions()->isDefined( libcmis::ObjectAction::GetChildren ) ) ) )\n        throw libcmis::Exception( string( \"GetChildren not allowed on node \" ) + getId() );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 64,
                  "endLine": 113,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n                        if ( cmisObject.get() )\n",
                    "rendered": {
                      "text": "                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n                        if ( cmisObject.get() )\n",
                      "markdown": "`                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n                        if ( cmisObject.get() )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 34,
                  "endLine": 112,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                    int size = xpathObj->nodesetval->nodeNr;\n                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n",
                    "rendered": {
                      "text": "                    int size = xpathObj->nodesetval->nodeNr;\n                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n",
                      "markdown": "`                    int size = xpathObj->nodesetval->nodeNr;\n                    for ( int i = 0; i < size; i++ )\n                    {\n                        xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                        xmlDocPtr entryDoc = libcmis::wrapInDoc( node );\n                        libcmis::ObjectPtr cmisObject = getSession()->createObjectFromEntryDoc( entryDoc );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-folder.cxx"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 69,
                  "endLine": 70,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                ( !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetChildren ) &&\n                  getAllowableActions()->isDefined( libcmis::ObjectAction::GetChildren ) ) ) )\n        throw libcmis::Exception( string( \"GetChildren not allowed on node \" ) + getId() );\n\n    vector< libcmis::ObjectPtr > children;\n\n",
                    "rendered": {
                      "text": "    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                ( !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetChildren ) &&\n                  getAllowableActions()->isDefined( libcmis::ObjectAction::GetChildren ) ) ) )\n        throw libcmis::Exception( string( \"GetChildren not allowed on node \" ) + getId() );\n\n    vector< libcmis::ObjectPtr > children;\n\n",
                      "markdown": "`    if ( ( NULL == childrenLink ) || ( getAllowableActions( ).get() &&\n                ( !getAllowableActions()->isAllowed( libcmis::ObjectAction::GetChildren ) &&\n                  getAllowableActions()->isDefined( libcmis::ObjectAction::GetChildren ) ) ) )\n        throw libcmis::Exception( string( \"GetChildren not allowed on node \" ) + getId() );\n\n    vector< libcmis::ObjectPtr > children;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-workspace.cxx"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 18,
                  "endLine": 179,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    for ( int i = 0; i < size; i++ )\n    {\n        xmlNodePtr node = nodeSet->nodeTab[i];\n\n        string templateUri;\n        UriTemplate::Type type = UriTemplate::ObjectById;\n",
                    "rendered": {
                      "text": "\n    for ( int i = 0; i < size; i++ )\n    {\n        xmlNodePtr node = nodeSet->nodeTab[i];\n\n        string templateUri;\n        UriTemplate::Type type = UriTemplate::ObjectById;\n",
                      "markdown": "`\n    for ( int i = 0; i < size; i++ )\n    {\n        xmlNodePtr node = nodeSet->nodeTab[i];\n\n        string templateUri;\n        UriTemplate::Type type = UriTemplate::ObjectById;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-workspace.cxx"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 18,
                  "endLine": 114,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    for ( int i = 0; i < size; i++ )\n    {\n        xmlNodePtr node = nodeSet->nodeTab[i];\n\n        // Look for the href property\n        xmlChar* href = xmlGetProp( node, BAD_CAST( \"href\" ) );\n",
                    "rendered": {
                      "text": "\n    for ( int i = 0; i < size; i++ )\n    {\n        xmlNodePtr node = nodeSet->nodeTab[i];\n\n        // Look for the href property\n        xmlChar* href = xmlGetProp( node, BAD_CAST( \"href\" ) );\n",
                      "markdown": "`\n    for ( int i = 0; i < size; i++ )\n    {\n        xmlNodePtr node = nodeSet->nodeTab[i];\n\n        // Look for the href property\n        xmlChar* href = xmlGetProp( node, BAD_CAST( \"href\" ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.hxx"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 35,
                  "endLine": 41,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    public:\n        SharePointSession( std::string baseUrl,\n                       std::string username, \n                       std::string password,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n\n",
                    "rendered": {
                      "text": "    public:\n        SharePointSession( std::string baseUrl,\n                       std::string username, \n                       std::string password,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n\n",
                      "markdown": "`    public:\n        SharePointSession( std::string baseUrl,\n                       std::string username, \n                       std::string password,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-session.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-document.cxx"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 12,
                  "endLine": 92,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                                         string fileName, \n                                         bool bReplaceExisting )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    string metaUrl = getUrl( );\n",
                    "rendered": {
                      "text": "                                         string fileName, \n                                         bool bReplaceExisting )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    string metaUrl = getUrl( );\n",
                      "markdown": "`                                         string fileName, \n                                         bool bReplaceExisting )\n{\n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n\n    string metaUrl = getUrl( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-document.cxx"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 44,
                  "endLine": 74,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    boost::shared_ptr< istream > stream;\n    string streamUrl = getStringProperty( \"source\" );\n    if ( streamUrl.empty( ) )\n        throw libcmis::Exception( \"could not find stream url\" );\n\n    try\n    {\n",
                    "rendered": {
                      "text": "    boost::shared_ptr< istream > stream;\n    string streamUrl = getStringProperty( \"source\" );\n    if ( streamUrl.empty( ) )\n        throw libcmis::Exception( \"could not find stream url\" );\n\n    try\n    {\n",
                      "markdown": "`    boost::shared_ptr< istream > stream;\n    string streamUrl = getStringProperty( \"source\" );\n    if ( streamUrl.empty( ) )\n        throw libcmis::Exception( \"could not find stream url\" );\n\n    try\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.hxx"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 84,
                  "endLine": 175,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n    protected:\n\n        std::string createEnvelope( const std::string& username, const std::string& password );\n};\n\n#endif\n",
                    "rendered": {
                      "text": "\n    protected:\n\n        std::string createEnvelope( const std::string& username, const std::string& password );\n};\n\n#endif\n",
                      "markdown": "`\n    protected:\n\n        std::string createEnvelope( const std::string& username, const std::string& password );\n};\n\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.hxx"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 76,
                  "endLine": 171,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        SoapRequest( ) : m_multipart( ) { };\n        virtual ~SoapRequest( ) { };\n\n        RelatedMultipart& getMultipart( std::string& username, std::string& password );\n\n    protected:\n\n",
                    "rendered": {
                      "text": "        SoapRequest( ) : m_multipart( ) { };\n        virtual ~SoapRequest( ) { };\n\n        RelatedMultipart& getMultipart( std::string& username, std::string& password );\n\n    protected:\n\n",
                      "markdown": "`        SoapRequest( ) : m_multipart( ) { };\n        virtual ~SoapRequest( ) { };\n\n        RelatedMultipart& getMultipart( std::string& username, std::string& password );\n\n    protected:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.hxx"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 57,
                  "endLine": 140,
                  "endColumn": 63,
                  "snippet": {
                    "text": "         */\n        std::vector< SoapResponsePtr > parseResponse( std::string& xml );\n\n        /** Create a SoapResponse object depending on the node we have. This shouldn't be used\n            directly: only from parseResponse or unit tests.\n          */\n        SoapResponsePtr createResponse( xmlNodePtr node, RelatedMultipart& multipart );\n",
                    "rendered": {
                      "text": "         */\n        std::vector< SoapResponsePtr > parseResponse( std::string& xml );\n\n        /** Create a SoapResponse object depending on the node we have. This shouldn't be used\n            directly: only from parseResponse or unit tests.\n          */\n        SoapResponsePtr createResponse( xmlNodePtr node, RelatedMultipart& multipart );\n",
                      "markdown": "`         */\n        std::vector< SoapResponsePtr > parseResponse( std::string& xml );\n\n        /** Create a SoapResponse object depending on the node we have. This shouldn't be used\n            directly: only from parseResponse or unit tests.\n          */\n        SoapResponsePtr createResponse( xmlNodePtr node, RelatedMultipart& multipart );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-soap.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-object.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-object.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 44,
                  "endLine": 345,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        xmlChar* content = xmlNodeGetContent( node );\n\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n        decoder.setEncoding( \"base64\" );\n        decoder.decode( ( void* )content, 1, xmlStrlen( content ) );\n        decoder.finish( );\n",
                    "rendered": {
                      "text": "        xmlChar* content = xmlNodeGetContent( node );\n\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n        decoder.setEncoding( \"base64\" );\n        decoder.decode( ( void* )content, 1, xmlStrlen( content ) );\n        decoder.finish( );\n",
                      "markdown": "`        xmlChar* content = xmlNodeGetContent( node );\n\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n        decoder.setEncoding( \"base64\" );\n        decoder.decode( ( void* )content, 1, xmlStrlen( content ) );\n        decoder.finish( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 15,
                  "endLine": 340,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n\n",
                    "rendered": {
                      "text": "    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n\n",
                      "markdown": "`    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 13,
                  "endLine": 283,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    // Output the start part first\n    buf += \"\\r\\n--\" + m_boundary + \"\\r\\n\";\n    RelatedPartPtr part = getPart( getStartId( ) );\n    if ( part.get( ) != NULL )\n    {\n        buf += part->toString( getStartId( ) );\n    }\n",
                    "rendered": {
                      "text": "    // Output the start part first\n    buf += \"\\r\\n--\" + m_boundary + \"\\r\\n\";\n    RelatedPartPtr part = getPart( getStartId( ) );\n    if ( part.get( ) != NULL )\n    {\n        buf += part->toString( getStartId( ) );\n    }\n",
                      "markdown": "`    // Output the start part first\n    buf += \"\\r\\n--\" + m_boundary + \"\\r\\n\";\n    RelatedPartPtr part = getPart( getStartId( ) );\n    if ( part.get( ) != NULL )\n    {\n        buf += part->toString( getStartId( ) );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 14,
                  "endLine": 259,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    string type = \"multipart/related;\";\n\n    RelatedPartPtr start = getPart( getStartId( ) );\n    if ( start.get( ) != NULL )\n    {\n        type += \"start=\\\"\" + getStartId( ) + \"\\\";\";\n\n",
                    "rendered": {
                      "text": "    string type = \"multipart/related;\";\n\n    RelatedPartPtr start = getPart( getStartId( ) );\n    if ( start.get( ) != NULL )\n    {\n        type += \"start=\\\"\" + getStartId( ) + \"\\\";\";\n\n",
                      "markdown": "`    string type = \"multipart/related;\";\n\n    RelatedPartPtr start = getPart( getStartId( ) );\n    if ( start.get( ) != NULL )\n    {\n        type += \"start=\\\"\" + getStartId( ) + \"\\\";\";\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 14,
                  "endLine": 247,
                  "endColumn": 19,
                  "snippet": {
                    "text": "{\n    RelatedPartPtr start = getPart( cid );\n\n    if ( start.get( ) != NULL )\n    {\n        m_startId = cid;\n        m_startInfo = startInfo;\n",
                    "rendered": {
                      "text": "{\n    RelatedPartPtr start = getPart( cid );\n\n    if ( start.get( ) != NULL )\n    {\n        m_startId = cid;\n        m_startInfo = startInfo;\n",
                      "markdown": "`{\n    RelatedPartPtr start = getPart( cid );\n\n    if ( start.get( ) != NULL )\n    {\n        m_startId = cid;\n        m_startInfo = startInfo;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 30,
                  "endLine": 346,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n        decoder.setEncoding( \"base64\" );\n        decoder.decode( ( void* )content, 1, xmlStrlen( content ) );\n        decoder.finish( );\n        \n",
                    "rendered": {
                      "text": "\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n        decoder.setEncoding( \"base64\" );\n        decoder.decode( ( void* )content, 1, xmlStrlen( content ) );\n        decoder.finish( );\n        \n",
                      "markdown": "`\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n        decoder.setEncoding( \"base64\" );\n        decoder.decode( ( void* )content, 1, xmlStrlen( content ) );\n        decoder.finish( );\n        \n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 60,
                  "endLine": 339,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        }\n    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n",
                      "markdown": "`        }\n    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 38,
                  "endLine": 173,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        {\n            if ( inHeaders )\n            {\n                // Remove potential \\r at the end\n                if ( !line.empty() && line[line.length() - 1] == '\\r' )\n                    line.pop_back();\n\n",
                    "rendered": {
                      "text": "        {\n            if ( inHeaders )\n            {\n                // Remove potential \\r at the end\n                if ( !line.empty() && line[line.length() - 1] == '\\r' )\n                    line.pop_back();\n\n",
                      "markdown": "`        {\n            if ( inHeaders )\n            {\n                // Remove potential \\r at the end\n                if ( !line.empty() && line[line.length() - 1] == '\\r' )\n                    line.pop_back();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 38,
                  "endLine": 155,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n            if ( !cid.empty() && !type.empty( ) )\n            {\n                // Remove potential \\r at the end of the body part\n                if ( partBody[partBody.length() - 1] == '\\r' )\n                    partBody.pop_back();\n\n",
                    "rendered": {
                      "text": "\n            if ( !cid.empty() && !type.empty( ) )\n            {\n                // Remove potential \\r at the end of the body part\n                if ( partBody[partBody.length() - 1] == '\\r' )\n                    partBody.pop_back();\n\n",
                      "markdown": "`\n            if ( !cid.empty() && !type.empty( ) )\n            {\n                // Remove potential \\r at the end of the body part\n                if ( partBody[partBody.length() - 1] == '\\r' )\n                    partBody.pop_back();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 45,
                  "endLine": 342,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n",
                    "rendered": {
                      "text": "    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n",
                      "markdown": "`    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n\n        stream.reset( new stringstream( ) );\n        libcmis::EncodedData decoder( stream.get( ) );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-relatedmultipart.cxx"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 59,
                  "endLine": 339,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        }\n    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n",
                      "markdown": "`        }\n    }\n\n    // If there was no xop:Include, then use the content as base64 data\n    if ( stream.get( ) == NULL )\n    {\n        xmlChar* content = xmlNodeGetContent( node );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/onedrive-folder.cxx"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 12,
                  "endLine": 113,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    boost::shared_ptr< ostream > os, \n    string /*contentType*/, string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n    \n    if (fileName.empty( ) )\n",
                    "rendered": {
                      "text": "    boost::shared_ptr< ostream > os, \n    string /*contentType*/, string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n    \n    if (fileName.empty( ) )\n",
                      "markdown": "`    boost::shared_ptr< ostream > os, \n    string /*contentType*/, string fileName ) \n{    \n    if ( !os.get( ) )\n        throw libcmis::Exception( \"Missing stream\" );\n    \n    if (fileName.empty( ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/repository.cxx"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 83,
                  "endLine": 241,
                  "endColumn": 89,
                  "snippet": {
                    "text": "    }\n    // LCOV_EXCL_STOP\n\n    map< Repository::Capability, string > Repository::parseCapabilities( xmlNodePtr node )\n    {\n        map< Capability, string > capabilities;\n\n",
                    "rendered": {
                      "text": "    }\n    // LCOV_EXCL_STOP\n\n    map< Repository::Capability, string > Repository::parseCapabilities( xmlNodePtr node )\n    {\n        map< Capability, string > capabilities;\n\n",
                      "markdown": "`    }\n    // LCOV_EXCL_STOP\n\n    map< Repository::Capability, string > Repository::parseCapabilities( xmlNodePtr node )\n    {\n        map< Capability, string > capabilities;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/repository.cxx"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 51,
                  "endLine": 128,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    }\n\n\n    void Repository::initializeFromNode( xmlNodePtr node )\n    {\n        for ( xmlNodePtr child = node->children; child; child = child->next )\n        {\n",
                    "rendered": {
                      "text": "    }\n\n\n    void Repository::initializeFromNode( xmlNodePtr node )\n    {\n        for ( xmlNodePtr child = node->children; child; child = child->next )\n        {\n",
                      "markdown": "`    }\n\n\n    void Repository::initializeFromNode( xmlNodePtr node )\n    {\n        for ( xmlNodePtr child = node->children; child; child = child->next )\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/repository.cxx"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 27,
                  "endLine": 69,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        m_principalAnyone( ),\n        m_capabilities( )\n    {\n        initializeFromNode( node );\n    }\n\n    string Repository::getId( ) const\n",
                    "rendered": {
                      "text": "        m_principalAnyone( ),\n        m_capabilities( )\n    {\n        initializeFromNode( node );\n    }\n\n    string Repository::getId( ) const\n",
                      "markdown": "`        m_principalAnyone( ),\n        m_capabilities( )\n    {\n        initializeFromNode( node );\n    }\n\n    string Repository::getId( ) const\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/repository.cxx"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 38,
                  "endLine": 55,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    {\n    }\n\n    Repository::Repository( xmlNodePtr node ) :\n        m_id( ),\n        m_name( ),\n        m_description( ),\n",
                    "rendered": {
                      "text": "    {\n    }\n\n    Repository::Repository( xmlNodePtr node ) :\n        m_id( ),\n        m_name( ),\n        m_description( ),\n",
                      "markdown": "`    {\n    }\n\n    Repository::Repository( xmlNodePtr node ) :\n        m_id( ),\n        m_name( ),\n        m_description( ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/vectors.cxx"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 10,
                  "endLine": 135,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    time_t item = 0;\n    if ( vector != NULL && i < vector->handle.size( ) )\n    {\n        tm time = boost::posix_time::to_tm( vector->handle[i] );\n        item = mktime( &time );\n    }\n    return item;\n",
                    "rendered": {
                      "text": "    time_t item = 0;\n    if ( vector != NULL && i < vector->handle.size( ) )\n    {\n        tm time = boost::posix_time::to_tm( vector->handle[i] );\n        item = mktime( &time );\n    }\n    return item;\n",
                      "markdown": "`    time_t item = 0;\n    if ( vector != NULL && i < vector->handle.size( ) )\n    {\n        tm time = boost::posix_time::to_tm( vector->handle[i] );\n        item = mktime( &time );\n    }\n    return item;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 45,
                  "endLine": 418,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_vector_document_Ptr result = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "        libcmis_ErrorPtr error )\n{\n    libcmis_vector_document_Ptr result = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`        libcmis_ErrorPtr error )\n{\n    libcmis_vector_document_Ptr result = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 45,
                  "endLine": 350,
                  "endColumn": 50,
                  "snippet": {
                    "text": "{\n    libcmis_DocumentPtr newVersion = NULL;\n\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "{\n    libcmis_DocumentPtr newVersion = NULL;\n\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`{\n    libcmis_DocumentPtr newVersion = NULL;\n\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 45,
                  "endLine": 318,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nvoid libcmis_document_cancelCheckout( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "\nvoid libcmis_document_cancelCheckout( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`\nvoid libcmis_document_cancelCheckout( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 45,
                  "endLine": 286,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libcmis_DocumentPtr libcmis_document_checkOut( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    libcmis_DocumentPtr pwc = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "libcmis_DocumentPtr libcmis_document_checkOut( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    libcmis_DocumentPtr pwc = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`libcmis_DocumentPtr libcmis_document_checkOut( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    libcmis_DocumentPtr pwc = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 45,
                  "endLine": 273,
                  "endColumn": 50,
                  "snippet": {
                    "text": "long libcmis_document_getContentLength( libcmis_DocumentPtr document )\n{\n    long value = 0;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n",
                    "rendered": {
                      "text": "long libcmis_document_getContentLength( libcmis_DocumentPtr document )\n{\n    long value = 0;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n",
                      "markdown": "`long libcmis_document_getContentLength( libcmis_DocumentPtr document )\n{\n    long value = 0;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 45,
                  "endLine": 260,
                  "endColumn": 50,
                  "snippet": {
                    "text": "char* libcmis_document_getContentFilename( libcmis_DocumentPtr document )\n{\n    char* value = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n",
                    "rendered": {
                      "text": "char* libcmis_document_getContentFilename( libcmis_DocumentPtr document )\n{\n    char* value = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n",
                      "markdown": "`char* libcmis_document_getContentFilename( libcmis_DocumentPtr document )\n{\n    char* value = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 45,
                  "endLine": 247,
                  "endColumn": 50,
                  "snippet": {
                    "text": "char* libcmis_document_getContentType( libcmis_DocumentPtr document )\n{\n    char* value = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n",
                    "rendered": {
                      "text": "char* libcmis_document_getContentType( libcmis_DocumentPtr document )\n{\n    char* value = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n",
                      "markdown": "`char* libcmis_document_getContentType( libcmis_DocumentPtr document )\n{\n    char* value = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        DocumentPtr doc = dynamic_pointer_cast< libcmis::Document >( document->handle );\n        if ( doc )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 45,
                  "endLine": 199,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        bool overwrite,\n        libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "        bool overwrite,\n        libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`        bool overwrite,\n        libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 45,
                  "endLine": 141,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        void* userData,\n        libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "        void* userData,\n        libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`        void* userData,\n        libcmis_ErrorPtr error )\n{\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 45,
                  "endLine": 102,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libcmis_vector_folder_Ptr libcmis_document_getParents( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    libcmis_vector_folder_Ptr parents = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                    "rendered": {
                      "text": "libcmis_vector_folder_Ptr libcmis_document_getParents( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    libcmis_vector_folder_Ptr parents = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n",
                      "markdown": "`libcmis_vector_folder_Ptr libcmis_document_getParents( libcmis_DocumentPtr document, libcmis_ErrorPtr error )\n{\n    libcmis_vector_folder_Ptr parents = NULL;\n    if ( document != NULL && document->handle.get( ) != NULL )\n    {\n        try\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 41,
                  "endLine": 82,
                  "endColumn": 46,
                  "snippet": {
                    "text": "{\n    libcmis_DocumentPtr document = NULL;\n\n    if ( object != NULL && object->handle.get( ) != NULL &&\n            libcmis_is_document( object ) )\n    {\n        document = new ( nothrow ) libcmis_document( );\n",
                    "rendered": {
                      "text": "{\n    libcmis_DocumentPtr document = NULL;\n\n    if ( object != NULL && object->handle.get( ) != NULL &&\n            libcmis_is_document( object ) )\n    {\n        document = new ( nothrow ) libcmis_document( );\n",
                      "markdown": "`{\n    libcmis_DocumentPtr document = NULL;\n\n    if ( object != NULL && object->handle.get( ) != NULL &&\n            libcmis_is_document( object ) )\n    {\n        document = new ( nothrow ) libcmis_document( );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 29,
                  "endLine": 72,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        DocumentPtr document = dynamic_pointer_cast< libcmis::Document >( object->handle );\n        isDocument = document.get( ) != NULL;\n    }\n    return isDocument;\n}\n",
                    "rendered": {
                      "text": "    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        DocumentPtr document = dynamic_pointer_cast< libcmis::Document >( object->handle );\n        isDocument = document.get( ) != NULL;\n    }\n    return isDocument;\n}\n",
                      "markdown": "`    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        DocumentPtr document = dynamic_pointer_cast< libcmis::Document >( object->handle );\n        isDocument = document.get( ) != NULL;\n    }\n    return isDocument;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/document.cxx"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 41,
                  "endLine": 69,
                  "endColumn": 46,
                  "snippet": {
                    "text": "bool libcmis_is_document( libcmis_ObjectPtr object )\n{\n    bool isDocument = false;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        DocumentPtr document = dynamic_pointer_cast< libcmis::Document >( object->handle );\n        isDocument = document.get( ) != NULL;\n",
                    "rendered": {
                      "text": "bool libcmis_is_document( libcmis_ObjectPtr object )\n{\n    bool isDocument = false;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        DocumentPtr document = dynamic_pointer_cast< libcmis::Document >( object->handle );\n        isDocument = document.get( ) != NULL;\n",
                      "markdown": "`bool libcmis_is_document( libcmis_ObjectPtr object )\n{\n    bool isDocument = false;\n    if ( object != NULL && object->handle.get( ) != NULL )\n    {\n        DocumentPtr document = dynamic_pointer_cast< libcmis::Document >( object->handle );\n        isDocument = document.get( ) != NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/internals.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/internals.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/Makefile.am"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 8,
                  "endLine": 49,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n\telse \\\n\t\techo A git clone is required to generate a ChangeLog >&2; \\\n\tfi\n\ncppcheck:\n",
                    "rendered": {
                      "text": "\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n\telse \\\n\t\techo A git clone is required to generate a ChangeLog >&2; \\\n\tfi\n\ncppcheck:\n",
                      "markdown": "`\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n\telse \\\n\t\techo A git clone is required to generate a ChangeLog >&2; \\\n\tfi\n\ncppcheck:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/Makefile.am"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 4,
                  "endLine": 45,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t( cd \"$(top_srcdir)\" && \\\n\t\t  echo '# Generated by Makefile. Do not edit.'; echo; \\\n\t\t  $(top_srcdir)/missing --run git log --pretty=medium ) > ChangeLog.tmp \\\n\t\t&& mv -f ChangeLog.tmp $(top_distdir)/ChangeLog \\\n\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n\telse \\\n",
                    "rendered": {
                      "text": "\t\t( cd \"$(top_srcdir)\" && \\\n\t\t  echo '# Generated by Makefile. Do not edit.'; echo; \\\n\t\t  $(top_srcdir)/missing --run git log --pretty=medium ) > ChangeLog.tmp \\\n\t\t&& mv -f ChangeLog.tmp $(top_distdir)/ChangeLog \\\n\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n\telse \\\n",
                      "markdown": "`\t\t( cd \"$(top_srcdir)\" && \\\n\t\t  echo '# Generated by Makefile. Do not edit.'; echo; \\\n\t\t  $(top_srcdir)/missing --run git log --pretty=medium ) > ChangeLog.tmp \\\n\t\t&& mv -f ChangeLog.tmp $(top_distdir)/ChangeLog \\\n\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n\telse \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/Makefile.am"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 31,
                  "endLine": 44,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\techo Creating ChangeLog && \\\n\t\t( cd \"$(top_srcdir)\" && \\\n\t\t  echo '# Generated by Makefile. Do not edit.'; echo; \\\n\t\t  $(top_srcdir)/missing --run git log --pretty=medium ) > ChangeLog.tmp \\\n\t\t&& mv -f ChangeLog.tmp $(top_distdir)/ChangeLog \\\n\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n",
                    "rendered": {
                      "text": "\t\techo Creating ChangeLog && \\\n\t\t( cd \"$(top_srcdir)\" && \\\n\t\t  echo '# Generated by Makefile. Do not edit.'; echo; \\\n\t\t  $(top_srcdir)/missing --run git log --pretty=medium ) > ChangeLog.tmp \\\n\t\t&& mv -f ChangeLog.tmp $(top_distdir)/ChangeLog \\\n\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n",
                      "markdown": "`\t\techo Creating ChangeLog && \\\n\t\t( cd \"$(top_srcdir)\" && \\\n\t\t  echo '# Generated by Makefile. Do not edit.'; echo; \\\n\t\t  $(top_srcdir)/missing --run git log --pretty=medium ) > ChangeLog.tmp \\\n\t\t&& mv -f ChangeLog.tmp $(top_distdir)/ChangeLog \\\n\t\t|| ( rm -f ChangeLog.tmp ; \\\n\t\t     echo Failed to generate ChangeLog >&2 ); \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 10,
                  "endLine": 66,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            USER=\"$1\"\n            shift\n            ;;\n        --password|-p)\n            shift\n            PASS=\"$1\"\n            shift\n",
                    "rendered": {
                      "text": "            USER=\"$1\"\n            shift\n            ;;\n        --password|-p)\n            shift\n            PASS=\"$1\"\n            shift\n",
                      "markdown": "`            USER=\"$1\"\n            shift\n            ;;\n        --password|-p)\n            shift\n            PASS=\"$1\"\n            shift\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 63,
                  "endLine": 31,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\nfunction usage ( )\n{\n    echo \"$0 --url http://binding/url [-u|--username user -p|--password pass] [-r|--repository repo] path/to/local/folder /path/to/remote/folder\"\n}\n\n\n",
                    "rendered": {
                      "text": "\nfunction usage ( )\n{\n    echo \"$0 --url http://binding/url [-u|--username user -p|--password pass] [-r|--repository repo] path/to/local/folder /path/to/remote/folder\"\n}\n\n\n",
                      "markdown": "`\nfunction usage ( )\n{\n    echo \"$0 --url http://binding/url [-u|--username user -p|--password pass] [-r|--repository repo] path/to/local/folder /path/to/remote/folder\"\n}\n\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 13,
                  "endLine": 8,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# The contents of this file are subject to the Mozilla Public License Version\n# 1.1 (the \"License\"); you may not use this file except in compliance with\n# the License or as specified alternatively below. You may obtain a copy of\n# the License at http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": "# The contents of this file are subject to the Mozilla Public License Version\n# 1.1 (the \"License\"); you may not use this file except in compliance with\n# the License or as specified alternatively below. You may obtain a copy of\n# the License at http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "`# The contents of this file are subject to the Mozilla Public License Version\n# 1.1 (the \"License\"); you may not use this file except in compliance with\n# the License or as specified alternatively below. You may obtain a copy of\n# the License at http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 50,
                  "endLine": 155,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    if test -d \"$FILE_PATH\"; then\n        cmis_client create-folder \"$PARENT_ID\" \"$FILE_NAME\" >/dev/null\n    else\n        FILE_MIME=`file --mime-type \"$FILE_PATH\" | cut -d ' ' -f 2`\n\n        cmis_client --input-file \"$FILE_PATH\" --input-type $FILE_MIME \\\n                    create-document \"$PARENT_ID\" \"$FILE_NAME\" >/dev/null\n",
                    "rendered": {
                      "text": "    if test -d \"$FILE_PATH\"; then\n        cmis_client create-folder \"$PARENT_ID\" \"$FILE_NAME\" >/dev/null\n    else\n        FILE_MIME=`file --mime-type \"$FILE_PATH\" | cut -d ' ' -f 2`\n\n        cmis_client --input-file \"$FILE_PATH\" --input-type $FILE_MIME \\\n                    create-document \"$PARENT_ID\" \"$FILE_NAME\" >/dev/null\n",
                      "markdown": "`    if test -d \"$FILE_PATH\"; then\n        cmis_client create-folder \"$PARENT_ID\" \"$FILE_NAME\" >/dev/null\n    else\n        FILE_MIME=`file --mime-type \"$FILE_PATH\" | cut -d ' ' -f 2`\n\n        cmis_client --input-file \"$FILE_PATH\" --input-type $FILE_MIME \\\n                    create-document \"$PARENT_ID\" \"$FILE_NAME\" >/dev/null\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 96,
                  "endLine": 149,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n    if test -d \"$FILE_PATH\"; then\n",
                    "rendered": {
                      "text": "        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n    if test -d \"$FILE_PATH\"; then\n",
                      "markdown": "`        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n    if test -d \"$FILE_PATH\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 82,
                  "endLine": 149,
                  "endColumn": 88,
                  "snippet": {
                    "text": "        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n    if test -d \"$FILE_PATH\"; then\n",
                    "rendered": {
                      "text": "        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n    if test -d \"$FILE_PATH\"; then\n",
                      "markdown": "`        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n    if test -d \"$FILE_PATH\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 93,
                  "endLine": 148,
                  "endColumn": 98,
                  "snippet": {
                    "text": "    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n",
                    "rendered": {
                      "text": "    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n",
                      "markdown": "`    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 79,
                  "endLine": 148,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n",
                    "rendered": {
                      "text": "    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n",
                      "markdown": "`    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n        PARENT_PARENT_ID=`cmis_client show-by-path \"$PARENT_PARENT_PATH\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n        PARENT_ID=`cmis_client create-folder $PARENT_PARENT_ID $PARENT_NAME 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "endLine": 144,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n",
                    "rendered": {
                      "text": "\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n",
                      "markdown": "`\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n        PARENT_NAME=`basename \"$SERVER_PARENT\"`\n        PARENT_PARENT_PATH=`dirname \"$SERVER_PARENT\"`\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 77,
                  "endLine": 142,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        SERVER_PARENT=$SERVER_FOLDER\n    fi\n\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n",
                    "rendered": {
                      "text": "        SERVER_PARENT=$SERVER_FOLDER\n    fi\n\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n",
                      "markdown": "`        SERVER_PARENT=$SERVER_FOLDER\n    fi\n\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 63,
                  "endLine": 142,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        SERVER_PARENT=$SERVER_FOLDER\n    fi\n\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n",
                    "rendered": {
                      "text": "        SERVER_PARENT=$SERVER_FOLDER\n    fi\n\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n",
                      "markdown": "`        SERVER_PARENT=$SERVER_FOLDER\n    fi\n\n    PARENT_ID=`cmis_client show-by-path \"$SERVER_PARENT\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\n\n    # We couldn't find the parent id, then we need to create the folder on the server\n    if test -z \"$PARENT_ID\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 42,
                  "endLine": 132,
                  "endColumn": 5,
                  "snippet": {
                    "text": "SERVER_FOLDER=${SERVER_FOLDER%/}\n\ncd $BASE_FOLDER/..\nBASE_FOLDER_NAME=`basename \"$BASE_FOLDER\"`\nfind $BASE_FOLDER_NAME -print0 | while read -d $'\\0' FILE_PATH\ndo\n    FILE_NAME=`basename \"$FILE_PATH\"`\n    DIRNAME=`dirname \"$FILE_PATH\"`\n",
                    "rendered": {
                      "text": "SERVER_FOLDER=${SERVER_FOLDER%/}\n\ncd $BASE_FOLDER/..\nBASE_FOLDER_NAME=`basename \"$BASE_FOLDER\"`\nfind $BASE_FOLDER_NAME -print0 | while read -d $'\\0' FILE_PATH\ndo\n    FILE_NAME=`basename \"$FILE_PATH\"`\n    DIRNAME=`dirname \"$FILE_PATH\"`\n",
                      "markdown": "`SERVER_FOLDER=${SERVER_FOLDER%/}\n\ncd $BASE_FOLDER/..\nBASE_FOLDER_NAME=`basename \"$BASE_FOLDER\"`\nfind $BASE_FOLDER_NAME -print0 | while read -d $'\\0' FILE_PATH\ndo\n    FILE_NAME=`basename \"$FILE_PATH\"`\n    DIRNAME=`dirname \"$FILE_PATH\"`\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 94,
                  "endLine": 121,
                  "endColumn": 99,
                  "snippet": {
                    "text": "    exit 1\nfi\n\nSERVER_FOLDER_BASE_TYPE=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Base type:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test \"$SERVER_FOLDER_BASE_TYPE\" != \"cmis:folder\"; then\n    echo \"'$SERVER_FOLDER' isn't a folder, please indicate an existing folder\"\n    exit 1\n",
                    "rendered": {
                      "text": "    exit 1\nfi\n\nSERVER_FOLDER_BASE_TYPE=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Base type:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test \"$SERVER_FOLDER_BASE_TYPE\" != \"cmis:folder\"; then\n    echo \"'$SERVER_FOLDER' isn't a folder, please indicate an existing folder\"\n    exit 1\n",
                      "markdown": "`    exit 1\nfi\n\nSERVER_FOLDER_BASE_TYPE=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Base type:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test \"$SERVER_FOLDER_BASE_TYPE\" != \"cmis:folder\"; then\n    echo \"'$SERVER_FOLDER' isn't a folder, please indicate an existing folder\"\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 73,
                  "endLine": 121,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    exit 1\nfi\n\nSERVER_FOLDER_BASE_TYPE=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Base type:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test \"$SERVER_FOLDER_BASE_TYPE\" != \"cmis:folder\"; then\n    echo \"'$SERVER_FOLDER' isn't a folder, please indicate an existing folder\"\n    exit 1\n",
                    "rendered": {
                      "text": "    exit 1\nfi\n\nSERVER_FOLDER_BASE_TYPE=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Base type:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test \"$SERVER_FOLDER_BASE_TYPE\" != \"cmis:folder\"; then\n    echo \"'$SERVER_FOLDER' isn't a folder, please indicate an existing folder\"\n    exit 1\n",
                      "markdown": "`    exit 1\nfi\n\nSERVER_FOLDER_BASE_TYPE=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Base type:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test \"$SERVER_FOLDER_BASE_TYPE\" != \"cmis:folder\"; then\n    echo \"'$SERVER_FOLDER' isn't a folder, please indicate an existing folder\"\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 80,
                  "endLine": 115,
                  "endColumn": 85,
                  "snippet": {
                    "text": "fi\n\n# Make sure the SERVER_FOLDER is existing\nSERVER_FOLDER_ID=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test -z $SERVER_FOLDER_ID; then\n    echo \"Server folder '$SERVER_FOLDER' doesn't exist, please indicate an existing folder\"\n    exit 1\n",
                    "rendered": {
                      "text": "fi\n\n# Make sure the SERVER_FOLDER is existing\nSERVER_FOLDER_ID=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test -z $SERVER_FOLDER_ID; then\n    echo \"Server folder '$SERVER_FOLDER' doesn't exist, please indicate an existing folder\"\n    exit 1\n",
                      "markdown": "`fi\n\n# Make sure the SERVER_FOLDER is existing\nSERVER_FOLDER_ID=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test -z $SERVER_FOLDER_ID; then\n    echo \"Server folder '$SERVER_FOLDER' doesn't exist, please indicate an existing folder\"\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 66,
                  "endLine": 115,
                  "endColumn": 72,
                  "snippet": {
                    "text": "fi\n\n# Make sure the SERVER_FOLDER is existing\nSERVER_FOLDER_ID=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test -z $SERVER_FOLDER_ID; then\n    echo \"Server folder '$SERVER_FOLDER' doesn't exist, please indicate an existing folder\"\n    exit 1\n",
                    "rendered": {
                      "text": "fi\n\n# Make sure the SERVER_FOLDER is existing\nSERVER_FOLDER_ID=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test -z $SERVER_FOLDER_ID; then\n    echo \"Server folder '$SERVER_FOLDER' doesn't exist, please indicate an existing folder\"\n    exit 1\n",
                      "markdown": "`fi\n\n# Make sure the SERVER_FOLDER is existing\nSERVER_FOLDER_ID=`cmis_client show-by-path \"$SERVER_FOLDER\" 2>&1 | grep '^Id:' | sed -e 's/^[^:]*: \\(.*\\)$/\\1/'`\nif test -z $SERVER_FOLDER_ID; then\n    echo \"Server folder '$SERVER_FOLDER' doesn't exist, please indicate an existing folder\"\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/samples/populate.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 33,
                  "endLine": 21,
                  "endColumn": 38,
                  "snippet": {
                    "text": "#\n# All Rights Reserved.\n#\n# For minor contributions see the git repository.\n#\n# Alternatively, the contents of this file may be used under the terms of\n# either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": "#\n# All Rights Reserved.\n#\n# For minor contributions see the git repository.\n#\n# Alternatively, the contents of this file may be used under the terms of\n# either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "`#\n# All Rights Reserved.\n#\n# For minor contributions see the git repository.\n#\n# Alternatively, the contents of this file may be used under the terms of\n# either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/doc/cmis-client.xml.in"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 24,
                  "endLine": 252,
                  "endColumn": 32,
                  "snippet": {
                    "text": "          </listitem>\n        </varlistentry>\n        <varlistentry>\n          <term>--proxy-password <replaceable class=\"parameter\">secret</replaceable></term>\n          <listitem>\n            <para>\n              Use <replaceable class=\"parameter\">secret</replaceable> to authenticate on the HTTP proxy.\n",
                    "rendered": {
                      "text": "          </listitem>\n        </varlistentry>\n        <varlistentry>\n          <term>--proxy-password <replaceable class=\"parameter\">secret</replaceable></term>\n          <listitem>\n            <para>\n              Use <replaceable class=\"parameter\">secret</replaceable> to authenticate on the HTTP proxy.\n",
                      "markdown": "`          </listitem>\n        </varlistentry>\n        <varlistentry>\n          <term>--proxy-password <replaceable class=\"parameter\">secret</replaceable></term>\n          <listitem>\n            <para>\n              Use <replaceable class=\"parameter\">secret</replaceable> to authenticate on the HTTP proxy.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/doc/cmis-client.xml.in"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 21,
                  "endLine": 218,
                  "endColumn": 29,
                  "snippet": {
                    "text": "          </listitem>\n        </varlistentry>\n        <varlistentry>\n          <term>-p,--password <replaceable class=\"parameter\">secret</replaceable></term>\n          <listitem>\n            <para>\n              Use <replaceable class=\"parameter\">secret</replaceable> to authenticate on the CMIS server.\n",
                    "rendered": {
                      "text": "          </listitem>\n        </varlistentry>\n        <varlistentry>\n          <term>-p,--password <replaceable class=\"parameter\">secret</replaceable></term>\n          <listitem>\n            <para>\n              Use <replaceable class=\"parameter\">secret</replaceable> to authenticate on the CMIS server.\n",
                      "markdown": "`          </listitem>\n        </varlistentry>\n        <varlistentry>\n          <term>-p,--password <replaceable class=\"parameter\">secret</replaceable></term>\n          <listitem>\n            <para>\n              Use <replaceable class=\"parameter\">secret</replaceable> to authenticate on the CMIS server.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/doc/cmis-client.xml.in"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 61,
                  "endLine": 541,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                the infos of the resulting document. Use the --major and --message options to\n                define the version to create and the commit to associate to it.\n\n                Note that repositories without the ability to update the private working copies\n                will need the --input-file, --input-type and --object-property options.\n            </para>\n          </listitem>\n",
                    "rendered": {
                      "text": "                the infos of the resulting document. Use the --major and --message options to\n                define the version to create and the commit to associate to it.\n\n                Note that repositories without the ability to update the private working copies\n                will need the --input-file, --input-type and --object-property options.\n            </para>\n          </listitem>\n",
                      "markdown": "`                the infos of the resulting document. Use the --major and --message options to\n                define the version to create and the commit to associate to it.\n\n                Note that repositories without the ability to update the private working copies\n                will need the --input-file, --input-type and --object-property options.\n            </para>\n          </listitem>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/doc/cmis-client.xml.in"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 27,
                  "endLine": 551,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  </refsect1>\n  <refsect1>\n    <title>USAGE</title>\n    <para>Displays the root node of repository A1:</para>\n    <para><command>cmis-client</command> -r A1 --url http://localhost/atom show-root</para>\n    <para>Displays the nodes with id 133 and 116 of repository A1:</para>\n    <para><command>cmis-client</command> -r A1 --url http://localhost/atom show-by id 133 116</para>\n",
                    "rendered": {
                      "text": "  </refsect1>\n  <refsect1>\n    <title>USAGE</title>\n    <para>Displays the root node of repository A1:</para>\n    <para><command>cmis-client</command> -r A1 --url http://localhost/atom show-root</para>\n    <para>Displays the nodes with id 133 and 116 of repository A1:</para>\n    <para><command>cmis-client</command> -r A1 --url http://localhost/atom show-by id 133 116</para>\n",
                      "markdown": "`  </refsect1>\n  <refsect1>\n    <title>USAGE</title>\n    <para>Displays the root node of repository A1:</para>\n    <para><command>cmis-client</command> -r A1 --url http://localhost/atom show-root</para>\n    <para>Displays the nodes with id 133 and 116 of repository A1:</para>\n    <para><command>cmis-client</command> -r A1 --url http://localhost/atom show-by id 133 116</para>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/doc/cmis-client.xml.in"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 68,
                  "endLine": 520,
                  "endColumn": 74,
                  "snippet": {
                    "text": "          <term>cancel-checkout <replaceable class=\"parameter\">arg</replaceable></term>\n          <listitem>\n            <para>\n                Cancel the Private Working Copy corresponding to the node id.\n            </para>\n          </listitem>\n        </varlistentry>\n",
                    "rendered": {
                      "text": "          <term>cancel-checkout <replaceable class=\"parameter\">arg</replaceable></term>\n          <listitem>\n            <para>\n                Cancel the Private Working Copy corresponding to the node id.\n            </para>\n          </listitem>\n        </varlistentry>\n",
                      "markdown": "`          <term>cancel-checkout <replaceable class=\"parameter\">arg</replaceable></term>\n          <listitem>\n            <para>\n                Cancel the Private Working Copy corresponding to the node id.\n            </para>\n          </listitem>\n        </varlistentry>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/doc/cmis-client.xml.in"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 80,
                  "endLine": 503,
                  "snippet": {
                    "text": "          <term>delete <replaceable class=\"parameter\">arg...</replaceable></term>\n          <listitem>\n            <para>\n                Deletes the CMIS objects corresponding to the listed ids. If the node\n                is a folder, its content will be removed as well.\n            </para>\n          </listitem>\n        </varlistentry>\n",
                    "rendered": {
                      "text": "          <term>delete <replaceable class=\"parameter\">arg...</replaceable></term>\n          <listitem>\n            <para>\n                Deletes the CMIS objects corresponding to the listed ids. If the node\n                is a folder, its content will be removed as well.\n            </para>\n          </listitem>\n        </varlistentry>\n",
                      "markdown": "`          <term>delete <replaceable class=\"parameter\">arg...</replaceable></term>\n          <listitem>\n            <para>\n                Deletes the CMIS objects corresponding to the listed ids. If the node\n                is a folder, its content will be removed as well.\n            </para>\n          </listitem>\n        </varlistentry>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/doc/cmis-client.xml.in"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 31,
                  "endLine": 416,
                  "endColumn": 37,
                  "snippet": {
                    "text": "          <term>show-root</term>\n          <listitem>\n            <para>\n              Displays the root node infos and children.\n            </para>\n          </listitem>\n        </varlistentry>\n",
                    "rendered": {
                      "text": "          <term>show-root</term>\n          <listitem>\n            <para>\n              Displays the root node infos and children.\n            </para>\n          </listitem>\n        </varlistentry>\n",
                      "markdown": "`          <term>show-root</term>\n          <listitem>\n            <para>\n              Displays the root node infos and children.\n            </para>\n          </listitem>\n        </varlistentry>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/doc/cmis-client.xml.in"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 101,
                  "endLine": 192,
                  "endColumn": 110,
                  "snippet": {
                    "text": "        <varlistentry>\n          <term>--url <replaceable class=\"parameter\">url://to/binding</replaceable></term>\n          <listitem>\n            <para><replaceable class=\"parameter\">url://to/binding</replaceable> needs to point to the service document of\n              either AtomPub or WebService binding.\n            </para>\n          </listitem>\n",
                    "rendered": {
                      "text": "        <varlistentry>\n          <term>--url <replaceable class=\"parameter\">url://to/binding</replaceable></term>\n          <listitem>\n            <para><replaceable class=\"parameter\">url://to/binding</replaceable> needs to point to the service document of\n              either AtomPub or WebService binding.\n            </para>\n          </listitem>\n",
                      "markdown": "`        <varlistentry>\n          <term>--url <replaceable class=\"parameter\">url://to/binding</replaceable></term>\n          <listitem>\n            <para><replaceable class=\"parameter\">url://to/binding</replaceable> needs to point to the service document of\n              either AtomPub or WebService binding.\n            </para>\n          </listitem>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/ax_cxx_compile_stdcxx.m4"
                },
                "region": {
                  "startLine": 936,
                  "startColumn": 38,
                  "endLine": 937,
                  "snippet": {
                    "text": "  namespace test_exception_spec_type_system\n  {\n\n    // TODO: test it with clang++ from git\n\n    struct Good {};\n    struct Bad {};\n\n",
                    "rendered": {
                      "text": "  namespace test_exception_spec_type_system\n  {\n\n    // TODO: test it with clang++ from git\n\n    struct Good {};\n    struct Bad {};\n\n",
                      "markdown": "`  namespace test_exception_spec_type_system\n  {\n\n    // TODO: test it with clang++ from git\n\n    struct Good {};\n    struct Bad {};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/ax_cxx_compile_stdcxx.m4"
                },
                "region": {
                  "startLine": 897,
                  "startColumn": 38,
                  "endLine": 898,
                  "snippet": {
                    "text": "  namespace test_structured_bindings\n  {\n\n    // TODO: test it with clang++ from git\n\n    int arr[2] = { 1, 2 };\n    std::pair<int, int> pr = { 1, 2 };\n\n",
                    "rendered": {
                      "text": "  namespace test_structured_bindings\n  {\n\n    // TODO: test it with clang++ from git\n\n    int arr[2] = { 1, 2 };\n    std::pair<int, int> pr = { 1, 2 };\n\n",
                      "markdown": "`  namespace test_structured_bindings\n  {\n\n    // TODO: test it with clang++ from git\n\n    int arr[2] = { 1, 2 };\n    std::pair<int, int> pr = { 1, 2 };\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/ax_cxx_compile_stdcxx.m4"
                },
                "region": {
                  "startLine": 859,
                  "startColumn": 38,
                  "endLine": 860,
                  "snippet": {
                    "text": "  namespace test_template_argument_deduction_for_class_templates\n  {\n\n    // TODO: test it with clang++ from git\n\n    template <typename T1, typename T2>\n    struct pair\n    {\n",
                    "rendered": {
                      "text": "  namespace test_template_argument_deduction_for_class_templates\n  {\n\n    // TODO: test it with clang++ from git\n\n    template <typename T1, typename T2>\n    struct pair\n    {\n",
                      "markdown": "`  namespace test_template_argument_deduction_for_class_templates\n  {\n\n    // TODO: test it with clang++ from git\n\n    template <typename T1, typename T2>\n    struct pair\n    {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/m4/ax_cxx_compile_stdcxx.m4"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 38,
                  "endLine": 616,
                  "snippet": {
                    "text": "  namespace test_constexpr_lambdas\n  {\n\n    // TODO: test it with clang++ from git\n\n    constexpr int foo = [](){return 42;}();\n\n  }\n",
                    "rendered": {
                      "text": "  namespace test_constexpr_lambdas\n  {\n\n    // TODO: test it with clang++ from git\n\n    constexpr int foo = [](){return 42;}();\n\n  }\n",
                      "markdown": "`  namespace test_constexpr_lambdas\n  {\n\n    // TODO: test it with clang++ from git\n\n    constexpr int foo = [](){return 42;}();\n\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.hxx"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 58,
                  "endLine": 42,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    public:\n        enum ResultObjectType { RESULT_DYNAMIC, RESULT_FOLDER, RESULT_DOCUMENT };\n        AtomPubSession( std::string sAtomPubUrl, std::string repositoryId,\n                        std::string username, std::string password, bool noSslCheck = false,\n                        libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                        bool verbose =false );\n\n",
                    "rendered": {
                      "text": "    public:\n        enum ResultObjectType { RESULT_DYNAMIC, RESULT_FOLDER, RESULT_DOCUMENT };\n        AtomPubSession( std::string sAtomPubUrl, std::string repositoryId,\n                        std::string username, std::string password, bool noSslCheck = false,\n                        libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                        bool verbose =false );\n\n",
                      "markdown": "`    public:\n        enum ResultObjectType { RESULT_DYNAMIC, RESULT_FOLDER, RESULT_DOCUMENT };\n        AtomPubSession( std::string sAtomPubUrl, std::string repositoryId,\n                        std::string username, std::string password, bool noSslCheck = false,\n                        libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                        bool verbose =false );\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/atom-session.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-document.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-document.hxx"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 24,
                  "endLine": 57,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        bool isGoogleDoc( ) { return m_isGoogleDoc; }\n        \n        /* Get the download Url associated to streamId,\n           automatically find ODF then MS format if no streamId is specified.\n        */\n        std::string getDownloadUrl( std::string streamId = std::string( ) );\n        \n",
                    "rendered": {
                      "text": "        bool isGoogleDoc( ) { return m_isGoogleDoc; }\n        \n        /* Get the download Url associated to streamId,\n           automatically find ODF then MS format if no streamId is specified.\n        */\n        std::string getDownloadUrl( std::string streamId = std::string( ) );\n        \n",
                      "markdown": "`        bool isGoogleDoc( ) { return m_isGoogleDoc; }\n        \n        /* Get the download Url associated to streamId,\n           automatically find ODF then MS format if no streamId is specified.\n        */\n        std::string getDownloadUrl( std::string streamId = std::string( ) );\n        \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-document.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 17,
                  "endLine": 812,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        xmlTextWriterEndElement( writer ); // cmis:properties\n    }\n\n    if ( m_stream.get( ) )\n    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmism:contentStream\" ) );\n        writeCmismStream( writer, m_multipart, m_stream, m_contentType, m_fileName );\n",
                    "rendered": {
                      "text": "        xmlTextWriterEndElement( writer ); // cmis:properties\n    }\n\n    if ( m_stream.get( ) )\n    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmism:contentStream\" ) );\n        writeCmismStream( writer, m_multipart, m_stream, m_contentType, m_fileName );\n",
                      "markdown": "`        xmlTextWriterEndElement( writer ); // cmis:properties\n    }\n\n    if ( m_stream.get( ) )\n    {\n        xmlTextWriterStartElement( writer, BAD_CAST( \"cmism:contentStream\" ) );\n        writeCmismStream( writer, m_multipart, m_stream, m_contentType, m_fileName );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 23,
                  "endLine": 91,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            it != details.end( ) && exception.get( ) == NULL; ++ it )\n    {\n        boost::shared_ptr< CmisSoapFaultDetail > cmisDetail = boost::dynamic_pointer_cast< CmisSoapFaultDetail >( *it );\n        if ( cmisDetail.get( ) != NULL )\n            exception.reset( new libcmis::Exception( cmisDetail->toException( ) ) );\n    }\n\n",
                    "rendered": {
                      "text": "            it != details.end( ) && exception.get( ) == NULL; ++ it )\n    {\n        boost::shared_ptr< CmisSoapFaultDetail > cmisDetail = boost::dynamic_pointer_cast< CmisSoapFaultDetail >( *it );\n        if ( cmisDetail.get( ) != NULL )\n            exception.reset( new libcmis::Exception( cmisDetail->toException( ) ) );\n    }\n\n",
                      "markdown": "`            it != details.end( ) && exception.get( ) == NULL; ++ it )\n    {\n        boost::shared_ptr< CmisSoapFaultDetail > cmisDetail = boost::dynamic_pointer_cast< CmisSoapFaultDetail >( *it );\n        if ( cmisDetail.get( ) != NULL )\n            exception.reset( new libcmis::Exception( cmisDetail->toException( ) ) );\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 45,
                  "endLine": 88,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    vector< SoapFaultDetailPtr > details = fault.getDetail( );\n    for ( vector< SoapFaultDetailPtr >::iterator it = details.begin( );\n            it != details.end( ) && exception.get( ) == NULL; ++ it )\n    {\n        boost::shared_ptr< CmisSoapFaultDetail > cmisDetail = boost::dynamic_pointer_cast< CmisSoapFaultDetail >( *it );\n        if ( cmisDetail.get( ) != NULL )\n",
                    "rendered": {
                      "text": "\n    vector< SoapFaultDetailPtr > details = fault.getDetail( );\n    for ( vector< SoapFaultDetailPtr >::iterator it = details.begin( );\n            it != details.end( ) && exception.get( ) == NULL; ++ it )\n    {\n        boost::shared_ptr< CmisSoapFaultDetail > cmisDetail = boost::dynamic_pointer_cast< CmisSoapFaultDetail >( *it );\n        if ( cmisDetail.get( ) != NULL )\n",
                      "markdown": "`\n    vector< SoapFaultDetailPtr > details = fault.getDetail( );\n    for ( vector< SoapFaultDetailPtr >::iterator it = details.begin( );\n            it != details.end( ) && exception.get( ) == NULL; ++ it )\n    {\n        boost::shared_ptr< CmisSoapFaultDetail > cmisDetail = boost::dynamic_pointer_cast< CmisSoapFaultDetail >( *it );\n        if ( cmisDetail.get( ) != NULL )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 59,
                  "endLine": 506,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                    xmlChar* content = xmlNodeGetContent( gdchild );\n                    if ( content != NULL )\n                    {\n                        // We can either have directly the base64 encoded data or\n                        // an <xop:Include> pointing to another part of the multipart\n                        response->m_stream = getStreamFromNode( gdchild, multipart );\n                    }\n",
                    "rendered": {
                      "text": "                    xmlChar* content = xmlNodeGetContent( gdchild );\n                    if ( content != NULL )\n                    {\n                        // We can either have directly the base64 encoded data or\n                        // an <xop:Include> pointing to another part of the multipart\n                        response->m_stream = getStreamFromNode( gdchild, multipart );\n                    }\n",
                      "markdown": "`                    xmlChar* content = xmlNodeGetContent( gdchild );\n                    if ( content != NULL )\n                    {\n                        // We can either have directly the base64 encoded data or\n                        // an <xop:Include> pointing to another part of the multipart\n                        response->m_stream = getStreamFromNode( gdchild, multipart );\n                    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 58,
                  "endLine": 506,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                    xmlChar* content = xmlNodeGetContent( gdchild );\n                    if ( content != NULL )\n                    {\n                        // We can either have directly the base64 encoded data or\n                        // an <xop:Include> pointing to another part of the multipart\n                        response->m_stream = getStreamFromNode( gdchild, multipart );\n                    }\n",
                    "rendered": {
                      "text": "                    xmlChar* content = xmlNodeGetContent( gdchild );\n                    if ( content != NULL )\n                    {\n                        // We can either have directly the base64 encoded data or\n                        // an <xop:Include> pointing to another part of the multipart\n                        response->m_stream = getStreamFromNode( gdchild, multipart );\n                    }\n",
                      "markdown": "`                    xmlChar* content = xmlNodeGetContent( gdchild );\n                    if ( content != NULL )\n                    {\n                        // We can either have directly the base64 encoded data or\n                        // an <xop:Include> pointing to another part of the multipart\n                        response->m_stream = getStreamFromNode( gdchild, multipart );\n                    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 19,
                  "endLine": 283,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    xmlTextWriterWriteElement( writer, BAD_CAST( \"cmism:includeAllowableActions\" ), BAD_CAST( \"true\" ) );\n\n    // Ask for renditions... some servers like Alfresco are providing them only this way\n    // and it saves time (another HTTP request) anyway.\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"cmism:renditionFilter\" ), BAD_CAST( \"*\" ) );\n\n    xmlTextWriterEndElement( writer );\n",
                    "rendered": {
                      "text": "    xmlTextWriterWriteElement( writer, BAD_CAST( \"cmism:includeAllowableActions\" ), BAD_CAST( \"true\" ) );\n\n    // Ask for renditions... some servers like Alfresco are providing them only this way\n    // and it saves time (another HTTP request) anyway.\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"cmism:renditionFilter\" ), BAD_CAST( \"*\" ) );\n\n    xmlTextWriterEndElement( writer );\n",
                      "markdown": "`    xmlTextWriterWriteElement( writer, BAD_CAST( \"cmism:includeAllowableActions\" ), BAD_CAST( \"true\" ) );\n\n    // Ask for renditions... some servers like Alfresco are providing them only this way\n    // and it saves time (another HTTP request) anyway.\n    xmlTextWriterWriteElement( writer, BAD_CAST( \"cmism:renditionFilter\" ), BAD_CAST( \"*\" ) );\n\n    xmlTextWriterEndElement( writer );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 55,
                  "endLine": 131,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\nSoapFaultDetailPtr CmisSoapFaultDetail::create( xmlNodePtr node )\n{\n    return SoapFaultDetailPtr( new CmisSoapFaultDetail( node ) );\n}\n\nvoid GetRepositoriesRequest::toXml( xmlTextWriterPtr writer )\n",
                    "rendered": {
                      "text": "\nSoapFaultDetailPtr CmisSoapFaultDetail::create( xmlNodePtr node )\n{\n    return SoapFaultDetailPtr( new CmisSoapFaultDetail( node ) );\n}\n\nvoid GetRepositoriesRequest::toXml( xmlTextWriterPtr writer )\n",
                      "markdown": "`\nSoapFaultDetailPtr CmisSoapFaultDetail::create( xmlNodePtr node )\n{\n    return SoapFaultDetailPtr( new CmisSoapFaultDetail( node ) );\n}\n\nvoid GetRepositoriesRequest::toXml( xmlTextWriterPtr writer )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 58,
                  "endLine": 129,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    xmlTextWriterEndElement( writer ); // cmism:stream\n}\n\nSoapFaultDetailPtr CmisSoapFaultDetail::create( xmlNodePtr node )\n{\n    return SoapFaultDetailPtr( new CmisSoapFaultDetail( node ) );\n}\n",
                    "rendered": {
                      "text": "    xmlTextWriterEndElement( writer ); // cmism:stream\n}\n\nSoapFaultDetailPtr CmisSoapFaultDetail::create( xmlNodePtr node )\n{\n    return SoapFaultDetailPtr( new CmisSoapFaultDetail( node ) );\n}\n",
                      "markdown": "`    xmlTextWriterEndElement( writer ); // cmism:stream\n}\n\nSoapFaultDetailPtr CmisSoapFaultDetail::create( xmlNodePtr node )\n{\n    return SoapFaultDetailPtr( new CmisSoapFaultDetail( node ) );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.cxx"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 52,
                  "endLine": 41,
                  "endColumn": 58,
                  "snippet": {
                    "text": "using namespace std;\nusing libcmis::PropertyPtrMap;\n\nCmisSoapFaultDetail::CmisSoapFaultDetail( xmlNodePtr node ) :\n    SoapFaultDetail( ),\n    m_type( ),\n    m_code( 0 ),\n",
                    "rendered": {
                      "text": "using namespace std;\nusing libcmis::PropertyPtrMap;\n\nCmisSoapFaultDetail::CmisSoapFaultDetail( xmlNodePtr node ) :\n    SoapFaultDetail( ),\n    m_type( ),\n    m_code( 0 ),\n",
                      "markdown": "`using namespace std;\nusing libcmis::PropertyPtrMap;\n\nCmisSoapFaultDetail::CmisSoapFaultDetail( xmlNodePtr node ) :\n    SoapFaultDetail( ),\n    m_type( ),\n    m_code( 0 ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.hxx"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 24,
                  "endLine": 129,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        std::string& getUsername( );\n\n        std::string& getPassword( );\n\n        /** Don't throw the HTTP errors as CurlExceptions.\n          */\n",
                    "rendered": {
                      "text": "\n        std::string& getUsername( );\n\n        std::string& getPassword( );\n\n        /** Don't throw the HTTP errors as CurlExceptions.\n          */\n",
                      "markdown": "`\n        std::string& getUsername( );\n\n        std::string& getPassword( );\n\n        /** Don't throw the HTTP errors as CurlExceptions.\n          */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.hxx"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 55,
                  "endLine": 116,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        bool m_inOAuth2Authentication;\n        unsigned long m_authMethod;\n    public:\n        HttpSession( std::string username, std::string password,\n                     bool noSslCheck = false,\n                     libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                     bool verbose = false,\n",
                    "rendered": {
                      "text": "        bool m_inOAuth2Authentication;\n        unsigned long m_authMethod;\n    public:\n        HttpSession( std::string username, std::string password,\n                     bool noSslCheck = false,\n                     libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                     bool verbose = false,\n",
                      "markdown": "`        bool m_inOAuth2Authentication;\n        unsigned long m_authMethod;\n    public:\n        HttpSession( std::string username, std::string password,\n                     bool noSslCheck = false,\n                     libcmis::OAuth2DataPtr oauth2 = libcmis::OAuth2DataPtr(),\n                     bool verbose = false,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.hxx"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 22,
                  "endLine": 106,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    protected:\n        OAuth2Handler* m_oauth2Handler;\n        std::string m_username;\n        std::string m_password;\n        bool m_authProvided;\n\n        bool m_verbose;\n",
                    "rendered": {
                      "text": "    protected:\n        OAuth2Handler* m_oauth2Handler;\n        std::string m_username;\n        std::string m_password;\n        bool m_authProvided;\n\n        bool m_verbose;\n",
                      "markdown": "`    protected:\n        OAuth2Handler* m_oauth2Handler;\n        std::string m_username;\n        std::string m_password;\n        bool m_authProvided;\n\n        bool m_verbose;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/http-session.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-repository.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-repository.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-utils.cxx"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 52,
                  "endLine": 132,
                  "endColumn": 57,
                  "snippet": {
                    "text": "{\n    const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( response.c_str( ), response.size( ), \"noname.xml\", NULL, 0 ), xmlFreeDoc );\n    const boost::shared_ptr< xmlXPathContext > xpath( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n    return \"SP.Web\" == libcmis::getXPathValue( xpath.get(), \"//@term\" );\n}\n",
                    "rendered": {
                      "text": "{\n    const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( response.c_str( ), response.size( ), \"noname.xml\", NULL, 0 ), xmlFreeDoc );\n    const boost::shared_ptr< xmlXPathContext > xpath( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n    return \"SP.Web\" == libcmis::getXPathValue( xpath.get(), \"//@term\" );\n}\n",
                      "markdown": "`{\n    const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( response.c_str( ), response.size( ), \"noname.xml\", NULL, 0 ), xmlFreeDoc );\n    const boost::shared_ptr< xmlXPathContext > xpath( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n    return \"SP.Web\" == libcmis::getXPathValue( xpath.get(), \"//@term\" );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/sharepoint-utils.cxx"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 77,
                  "endLine": 131,
                  "endColumn": 82,
                  "snippet": {
                    "text": "bool SharePointUtils::isSharePoint( string response )\n{\n    const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( response.c_str( ), response.size( ), \"noname.xml\", NULL, 0 ), xmlFreeDoc );\n    const boost::shared_ptr< xmlXPathContext > xpath( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n    return \"SP.Web\" == libcmis::getXPathValue( xpath.get(), \"//@term\" );\n}\n",
                    "rendered": {
                      "text": "bool SharePointUtils::isSharePoint( string response )\n{\n    const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( response.c_str( ), response.size( ), \"noname.xml\", NULL, 0 ), xmlFreeDoc );\n    const boost::shared_ptr< xmlXPathContext > xpath( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n    return \"SP.Web\" == libcmis::getXPathValue( xpath.get(), \"//@term\" );\n}\n",
                      "markdown": "`bool SharePointUtils::isSharePoint( string response )\n{\n    const boost::shared_ptr< xmlDoc > doc( xmlReadMemory( response.c_str( ), response.size( ), \"noname.xml\", NULL, 0 ), xmlFreeDoc );\n    const boost::shared_ptr< xmlXPathContext > xpath( xmlXPathNewContext( doc.get() ), xmlXPathFreeContext );\n    return \"SP.Web\" == libcmis::getXPathValue( xpath.get(), \"//@term\" );\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-session.hxx"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 35,
                  "endLine": 40,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    public:\n        GDriveSession( std::string baseUrl,\n                       std::string username,\n                       std::string password,\n                       libcmis::OAuth2DataPtr oauth2,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n",
                    "rendered": {
                      "text": "    public:\n        GDriveSession( std::string baseUrl,\n                       std::string username,\n                       std::string password,\n                       libcmis::OAuth2DataPtr oauth2,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n",
                      "markdown": "`    public:\n        GDriveSession( std::string baseUrl,\n                       std::string username,\n                       std::string password,\n                       libcmis::OAuth2DataPtr oauth2,\n                       bool verbose = false,\n                       libcmis::CurlInitProtocolsFunction = nullptr);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-session.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/gdrive-session.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.cxx"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 61,
                  "endLine": 203,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        // Get all the services soap URLs\n        m_servicesUrls.clear( );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n        libcmis::registerCmisWSNamespaces( xpathCtx );\n\n        if ( NULL != xpathCtx )\n",
                    "rendered": {
                      "text": "        // Get all the services soap URLs\n        m_servicesUrls.clear( );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n        libcmis::registerCmisWSNamespaces( xpathCtx );\n\n        if ( NULL != xpathCtx )\n",
                      "markdown": "`        // Get all the services soap URLs\n        m_servicesUrls.clear( );\n\n        xmlXPathContextPtr xpathCtx = xmlXPathNewContext( doc.get() );\n        libcmis::registerCmisWSNamespaces( xpathCtx );\n\n        if ( NULL != xpathCtx )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.cxx"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 51,
                  "endLine": 196,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    if ( bool( doc ) )\n    {\n        // Check that we have a WSDL document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"definitions\" ) ) )\n            throw libcmis::Exception( \"Not a WSDL document\" );\n\n",
                    "rendered": {
                      "text": "    if ( bool( doc ) )\n    {\n        // Check that we have a WSDL document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"definitions\" ) ) )\n            throw libcmis::Exception( \"Not a WSDL document\" );\n\n",
                      "markdown": "`    if ( bool( doc ) )\n    {\n        // Check that we have a WSDL document\n        xmlNodePtr root = xmlDocGetRootElement( doc.get() );\n        if ( !xmlStrEqual( root->name, BAD_CAST( \"definitions\" ) ) )\n            throw libcmis::Exception( \"Not a WSDL document\" );\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.cxx"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 88,
                  "endLine": 151,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    {\n        // Place the request in an envelope\n        RelatedMultipart& multipart = request.getMultipart( getUsername( ), getPassword( ) );\n        libcmis::HttpResponsePtr response = httpPostRequest( url, *multipart.toStream( ).get( ), multipart.getContentType( ) );\n\n        map< string, string >::iterator it = response->getHeaders( ).find( \"Content-Type\" );\n        if ( it != response->getHeaders( ).end( ) )\n",
                    "rendered": {
                      "text": "    {\n        // Place the request in an envelope\n        RelatedMultipart& multipart = request.getMultipart( getUsername( ), getPassword( ) );\n        libcmis::HttpResponsePtr response = httpPostRequest( url, *multipart.toStream( ).get( ), multipart.getContentType( ) );\n\n        map< string, string >::iterator it = response->getHeaders( ).find( \"Content-Type\" );\n        if ( it != response->getHeaders( ).end( ) )\n",
                      "markdown": "`    {\n        // Place the request in an envelope\n        RelatedMultipart& multipart = request.getMultipart( getUsername( ), getPassword( ) );\n        libcmis::HttpResponsePtr response = httpPostRequest( url, *multipart.toStream( ).get( ), multipart.getContentType( ) );\n\n        map< string, string >::iterator it = response->getHeaders( ).find( \"Content-Type\" );\n        if ( it != response->getHeaders( ).end( ) )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.cxx"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 79,
                  "endLine": 150,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    try\n    {\n        // Place the request in an envelope\n        RelatedMultipart& multipart = request.getMultipart( getUsername( ), getPassword( ) );\n        libcmis::HttpResponsePtr response = httpPostRequest( url, *multipart.toStream( ).get( ), multipart.getContentType( ) );\n\n        map< string, string >::iterator it = response->getHeaders( ).find( \"Content-Type\" );\n",
                    "rendered": {
                      "text": "    try\n    {\n        // Place the request in an envelope\n        RelatedMultipart& multipart = request.getMultipart( getUsername( ), getPassword( ) );\n        libcmis::HttpResponsePtr response = httpPostRequest( url, *multipart.toStream( ).get( ), multipart.getContentType( ) );\n\n        map< string, string >::iterator it = response->getHeaders( ).find( \"Content-Type\" );\n",
                      "markdown": "`    try\n    {\n        // Place the request in an envelope\n        RelatedMultipart& multipart = request.getMultipart( getUsername( ), getPassword( ) );\n        libcmis::HttpResponsePtr response = httpPostRequest( url, *multipart.toStream( ).get( ), multipart.getContentType( ) );\n\n        map< string, string >::iterator it = response->getHeaders( ).find( \"Content-Type\" );\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.cxx"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 53,
                  "endLine": 47,
                  "endColumn": 61,
                  "snippet": {
                    "text": "WSSession::WSSession( const string& bindingUrl, const string& repositoryId, const string& username,\n        const string& password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2,\n        bool verbose ) :\n    BaseSession( bindingUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_servicesUrls( ),\n    m_navigationService( NULL ),\n    m_objectService( NULL ),\n",
                    "rendered": {
                      "text": "WSSession::WSSession( const string& bindingUrl, const string& repositoryId, const string& username,\n        const string& password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2,\n        bool verbose ) :\n    BaseSession( bindingUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_servicesUrls( ),\n    m_navigationService( NULL ),\n    m_objectService( NULL ),\n",
                      "markdown": "`WSSession::WSSession( const string& bindingUrl, const string& repositoryId, const string& username,\n        const string& password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2,\n        bool verbose ) :\n    BaseSession( bindingUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_servicesUrls( ),\n    m_navigationService( NULL ),\n    m_objectService( NULL ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.cxx"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 22,
                  "endLine": 45,
                  "endColumn": 30,
                  "snippet": {
                    "text": "using namespace std;\n\nWSSession::WSSession( const string& bindingUrl, const string& repositoryId, const string& username,\n        const string& password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2,\n        bool verbose ) :\n    BaseSession( bindingUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_servicesUrls( ),\n",
                    "rendered": {
                      "text": "using namespace std;\n\nWSSession::WSSession( const string& bindingUrl, const string& repositoryId, const string& username,\n        const string& password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2,\n        bool verbose ) :\n    BaseSession( bindingUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_servicesUrls( ),\n",
                      "markdown": "`using namespace std;\n\nWSSession::WSSession( const string& bindingUrl, const string& repositoryId, const string& username,\n        const string& password, bool noSslCheck, libcmis::OAuth2DataPtr oauth2,\n        bool verbose ) :\n    BaseSession( bindingUrl, repositoryId, username, password, noSslCheck, oauth2, verbose ),\n    m_servicesUrls( ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.cxx"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 50,
                  "endLine": 235,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        xmlXPathFreeContext( xpathCtx );\n    }\n    else\n        throw libcmis::Exception( \"Failed to parse service document\" );\n}\n\nvoid WSSession::initializeResponseFactory( )\n",
                    "rendered": {
                      "text": "        xmlXPathFreeContext( xpathCtx );\n    }\n    else\n        throw libcmis::Exception( \"Failed to parse service document\" );\n}\n\nvoid WSSession::initializeResponseFactory( )\n",
                      "markdown": "`        xmlXPathFreeContext( xpathCtx );\n    }\n    else\n        throw libcmis::Exception( \"Failed to parse service document\" );\n}\n\nvoid WSSession::initializeResponseFactory( )\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-session.cxx"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 30,
                  "endLine": 220,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                for ( int i = 0; i < nbServices; i++ )\n                {\n                    // What service do we have here?\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    string name = libcmis::getXmlNodeAttributeValue( node, \"name\" );\n\n                    // Gimme you soap:address location attribute\n",
                    "rendered": {
                      "text": "                for ( int i = 0; i < nbServices; i++ )\n                {\n                    // What service do we have here?\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    string name = libcmis::getXmlNodeAttributeValue( node, \"name\" );\n\n                    // Gimme you soap:address location attribute\n",
                      "markdown": "`                for ( int i = 0; i < nbServices; i++ )\n                {\n                    // What service do we have here?\n                    xmlNodePtr node = xpathObj->nodesetval->nodeTab[i];\n                    string name = libcmis::getXmlNodeAttributeValue( node, \"name\" );\n\n                    // Gimme you soap:address location attribute\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/property.cxx"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 12,
                  "endLine": 159,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    {\n        PropertyPtr property;\n\n        if ( node != NULL )\n        {\n            // Get the property definition Id\n            string propDefinitionId;\n",
                    "rendered": {
                      "text": "    {\n        PropertyPtr property;\n\n        if ( node != NULL )\n        {\n            // Get the property definition Id\n            string propDefinitionId;\n",
                      "markdown": "`    {\n        PropertyPtr property;\n\n        if ( node != NULL )\n        {\n            // Get the property definition Id\n            string propDefinitionId;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/property.cxx"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 59,
                  "endLine": 93,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                        {\n                            boost::posix_time::ptime time = parseDateTime( *it );\n                            if ( !time.is_not_a_date_time( ) )\n                                m_dateTimeValues.push_back( time );\n                        }\n                        break;\n                    default:\n",
                    "rendered": {
                      "text": "                        {\n                            boost::posix_time::ptime time = parseDateTime( *it );\n                            if ( !time.is_not_a_date_time( ) )\n                                m_dateTimeValues.push_back( time );\n                        }\n                        break;\n                    default:\n",
                      "markdown": "`                        {\n                            boost::posix_time::ptime time = parseDateTime( *it );\n                            if ( !time.is_not_a_date_time( ) )\n                                m_dateTimeValues.push_back( time );\n                        }\n                        break;\n                    default:\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/property.cxx"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 52,
                  "endLine": 91,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                        break;\n                    case PropertyType::DateTime:\n                        {\n                            boost::posix_time::ptime time = parseDateTime( *it );\n                            if ( !time.is_not_a_date_time( ) )\n                                m_dateTimeValues.push_back( time );\n                        }\n",
                    "rendered": {
                      "text": "                        break;\n                    case PropertyType::DateTime:\n                        {\n                            boost::posix_time::ptime time = parseDateTime( *it );\n                            if ( !time.is_not_a_date_time( ) )\n                                m_dateTimeValues.push_back( time );\n                        }\n",
                      "markdown": "`                        break;\n                    case PropertyType::DateTime:\n                        {\n                            boost::posix_time::ptime time = parseDateTime( *it );\n                            if ( !time.is_not_a_date_time( ) )\n                                m_dateTimeValues.push_back( time );\n                        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/rendition.cxx"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 32,
                  "endLine": 67,
                  "endColumn": 38,
                  "snippet": {
                    "text": "{  \n}\n\nRendition::Rendition( xmlNodePtr node ):\n    m_streamId( ),\n    m_mimeType( ),\n    m_kind( ),\n",
                    "rendered": {
                      "text": "{  \n}\n\nRendition::Rendition( xmlNodePtr node ):\n    m_streamId( ),\n    m_mimeType( ),\n    m_kind( ),\n",
                      "markdown": "`{  \n}\n\nRendition::Rendition( xmlNodePtr node ):\n    m_streamId( ),\n    m_mimeType( ),\n    m_kind( ),\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                    "rendered": {
                      "text": " * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n",
                      "markdown": "` * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License or as specified alternatively below. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 28,
                  "endLine": 778,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getAllVersionsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getAllVersionsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getAllVersionsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 28,
                  "endLine": 742,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:checkInResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:checkInResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:checkInResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 28,
                  "endLine": 671,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:checkOutResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:checkOutResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:checkOutResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 28,
                  "endLine": 634,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getRenditionsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getRenditionsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getRenditionsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 28,
                  "endLine": 532,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:createFolderResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:createFolderResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:createFolderResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 28,
                  "endLine": 492,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getChildrenResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getChildrenResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getChildrenResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 28,
                  "endLine": 455,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getObjectParentsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getObjectParentsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getObjectParentsResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 28,
                  "endLine": 418,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getContentStreamResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getContentStreamResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getContentStreamResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 28,
                  "endLine": 360,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:deleteTreeResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:deleteTreeResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:deleteTreeResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 28,
                  "endLine": 294,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:updatePropertiesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:updatePropertiesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:updatePropertiesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 28,
                  "endLine": 234,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getObjectResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getObjectResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getObjectResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 28,
                  "endLine": 198,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getTypeChildrenResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getTypeChildrenResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getTypeChildrenResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 28,
                  "endLine": 162,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getTypeDefinitionResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getTypeDefinitionResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getTypeDefinitionResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 28,
                  "endLine": 126,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getRepositoriesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getRepositoriesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getRepositoriesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 28,
                  "endLine": 96,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    public:\n\n        /** Parse cmism:getRepositoriesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                    "rendered": {
                      "text": "    public:\n\n        /** Parse cmism:getRepositoriesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n",
                      "markdown": "`    public:\n\n        /** Parse cmism:getRepositoriesResponse. This function\n            assumes that the node is the expected one: this is\n            normally ensured by the SoapResponseFactory.\n          */\n        static SoapResponsePtr create( xmlNodePtr node, RelatedMultipart& multipart, SoapSession* session );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 52,
                  "endLine": 67,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n        libcmis::Exception toException( );\n\n        static SoapFaultDetailPtr create( xmlNodePtr node );\n};\n\nboost::shared_ptr< libcmis::Exception > getCmisException( const SoapFault& fault );\n",
                    "rendered": {
                      "text": "\n        libcmis::Exception toException( );\n\n        static SoapFaultDetailPtr create( xmlNodePtr node );\n};\n\nboost::shared_ptr< libcmis::Exception > getCmisException( const SoapFault& fault );\n",
                      "markdown": "`\n        libcmis::Exception toException( );\n\n        static SoapFaultDetailPtr create( xmlNodePtr node );\n};\n\nboost::shared_ptr< libcmis::Exception > getCmisException( const SoapFault& fault );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 39,
                  "endLine": 56,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        long m_code;\n        std::string m_message;\n\n        CmisSoapFaultDetail( xmlNodePtr node );\n\n    public:\n        ~CmisSoapFaultDetail( ) noexcept { };\n",
                    "rendered": {
                      "text": "        long m_code;\n        std::string m_message;\n\n        CmisSoapFaultDetail( xmlNodePtr node );\n\n    public:\n        ~CmisSoapFaultDetail( ) noexcept { };\n",
                      "markdown": "`        long m_code;\n        std::string m_message;\n\n        CmisSoapFaultDetail( xmlNodePtr node );\n\n    public:\n        ~CmisSoapFaultDetail( ) noexcept { };\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis/ws-requests.hxx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 34,
                  "endLine": 20,
                  "endColumn": 39,
                  "snippet": {
                    "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                    "rendered": {
                      "text": " *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n",
                      "markdown": "` *\n * All Rights Reserved.\n *\n * For minor contributions see the git repository.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * either the GNU General Public License Version 2 or later (the \"GPLv2+\"), or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/allowable-actions.cxx"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 47,
                  "endLine": 53,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        libcmis_allowable_actions_Type action )\n{\n    bool result = false;\n    if ( allowable != NULL && allowable->handle.get( ) != NULL )\n        result = allowable->handle->isDefined( libcmis::ObjectAction::Type( action ) );\n    return result;\n}\n",
                    "rendered": {
                      "text": "        libcmis_allowable_actions_Type action )\n{\n    bool result = false;\n    if ( allowable != NULL && allowable->handle.get( ) != NULL )\n        result = allowable->handle->isDefined( libcmis::ObjectAction::Type( action ) );\n    return result;\n}\n",
                      "markdown": "`        libcmis_allowable_actions_Type action )\n{\n    bool result = false;\n    if ( allowable != NULL && allowable->handle.get( ) != NULL )\n        result = allowable->handle->isDefined( libcmis::ObjectAction::Type( action ) );\n    return result;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/src/libcmis-c/allowable-actions.cxx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 47,
                  "endLine": 43,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        libcmis_allowable_actions_Type action )\n{\n    bool result = false;\n    if ( allowable != NULL && allowable->handle.get( ) != NULL )\n        result = allowable->handle->isAllowed( libcmis::ObjectAction::Type( action ) );\n    return result;\n}\n",
                    "rendered": {
                      "text": "        libcmis_allowable_actions_Type action )\n{\n    bool result = false;\n    if ( allowable != NULL && allowable->handle.get( ) != NULL )\n        result = allowable->handle->isAllowed( libcmis::ObjectAction::Type( action ) );\n    return result;\n}\n",
                      "markdown": "`        libcmis_allowable_actions_Type action )\n{\n    bool result = false;\n    if ( allowable != NULL && allowable->handle.get( ) != NULL )\n        result = allowable->handle->isAllowed( libcmis::ObjectAction::Type( action ) );\n    return result;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 35,
                  "endLine": 330,
                  "endColumn": 39,
                  "snippet": {
                    "text": "necessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n",
                    "rendered": {
                      "text": "necessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n",
                      "markdown": "`necessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 59,
                  "endLine": 290,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n",
                    "rendered": {
                      "text": "\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n",
                      "markdown": "`\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 30,
                  "endLine": 204,
                  "endColumn": 34,
                  "snippet": {
                    "text": "excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n",
                    "rendered": {
                      "text": "excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n",
                      "markdown": "`excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 63,
                  "endLine": 159,
                  "endColumn": 8,
                  "snippet": {
                    "text": "The source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\n",
                    "rendered": {
                      "text": "The source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\n",
                      "markdown": "`The source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 51,
                  "endLine": 142,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n",
                    "rendered": {
                      "text": "    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n",
                      "markdown": "`    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 21,
                  "endLine": 126,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\n",
                    "rendered": {
                      "text": "\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\n",
                      "markdown": "`\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 43,
                  "endLine": 100,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n",
                    "rendered": {
                      "text": "\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n",
                      "markdown": "`\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 7,
                  "endLine": 88,
                  "endColumn": 11,
                  "snippet": {
                    "text": "along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\n",
                    "rendered": {
                      "text": "along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\n",
                      "markdown": "`along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 63,
                  "endLine": 54,
                  "endColumn": 67,
                  "snippet": {
                    "text": "patents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n",
                    "rendered": {
                      "text": "patents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n",
                      "markdown": "`patents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 12,
                  "endLine": 250,
                  "endColumn": 18,
                  "snippet": {
                    "text": "this License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\n",
                    "rendered": {
                      "text": "this License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\n",
                      "markdown": "`this License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 34,
                  "endLine": 238,
                  "endColumn": 40,
                  "snippet": {
                    "text": "the limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n",
                    "rendered": {
                      "text": "the limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n",
                      "markdown": "`the limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 9,
                  "endLine": 189,
                  "endColumn": 15,
                  "snippet": {
                    "text": "all its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\n",
                    "rendered": {
                      "text": "all its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\n",
                      "markdown": "`all its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 12,
                  "endLine": 51,
                  "endColumn": 18,
                  "snippet": {
                    "text": "authors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n",
                    "rendered": {
                      "text": "authors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n",
                      "markdown": "`authors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libcmis.zip/COPYING.GPL"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 4,
                  "endLine": 24,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n",
                    "rendered": {
                      "text": "  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n",
                      "markdown": "`  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}