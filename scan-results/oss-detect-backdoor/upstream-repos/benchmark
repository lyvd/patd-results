{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/register_benchmark_test.cc"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 19,
                  "endLine": 167,
                  "endColumn": 23,
                  "snippet": {
                    "text": "// Also test that new benchmarks can be registered and ran afterwards.\nvoid RunTestTwo() {\n  assert(ExpectedResults.size() != 0 &&\n         \"must have at least one registered benchmark\");\n  ExpectedResults.clear();\n  benchmark::ClearRegisteredBenchmarks();\n\n",
                    "rendered": {
                      "text": "// Also test that new benchmarks can be registered and ran afterwards.\nvoid RunTestTwo() {\n  assert(ExpectedResults.size() != 0 &&\n         \"must have at least one registered benchmark\");\n  ExpectedResults.clear();\n  benchmark::ClearRegisteredBenchmarks();\n\n",
                      "markdown": "`// Also test that new benchmarks can be registered and ran afterwards.\nvoid RunTestTwo() {\n  assert(ExpectedResults.size() != 0 &&\n         \"must have at least one registered benchmark\");\n  ExpectedResults.clear();\n  benchmark::ClearRegisteredBenchmarks();\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/register_benchmark_test.cc"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 39,
                  "endLine": 143,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#endif\n}\n\n// Test that all benchmarks, registered at either during static init or runtime,\n// are run and the results are passed to the reported.\nvoid RunTestOne() {\n  TestRegistrationAtRuntime();\n",
                    "rendered": {
                      "text": "#endif\n}\n\n// Test that all benchmarks, registered at either during static init or runtime,\n// are run and the results are passed to the reported.\nvoid RunTestOne() {\n  TestRegistrationAtRuntime();\n",
                      "markdown": "`#endif\n}\n\n// Test that all benchmarks, registered at either during static init or runtime,\n// are run and the results are passed to the reported.\nvoid RunTestOne() {\n  TestRegistrationAtRuntime();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/register_benchmark_test.cc"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 40,
                  "endLine": 108,
                  "endColumn": 48,
                  "snippet": {
                    "text": "BENCHMARK(DISABLED_BM_function);\nReturnVal dummy3 = benchmark::RegisterBenchmark(\"DISABLED_BM_function_manual\",\n                                                DISABLED_BM_function);\n// No need to add cases because we don't expect them to run.\n\n//----------------------------------------------------------------------------//\n// Test RegisterBenchmark with different callable types\n",
                    "rendered": {
                      "text": "BENCHMARK(DISABLED_BM_function);\nReturnVal dummy3 = benchmark::RegisterBenchmark(\"DISABLED_BM_function_manual\",\n                                                DISABLED_BM_function);\n// No need to add cases because we don't expect them to run.\n\n//----------------------------------------------------------------------------//\n// Test RegisterBenchmark with different callable types\n",
                      "markdown": "`BENCHMARK(DISABLED_BM_function);\nReturnVal dummy3 = benchmark::RegisterBenchmark(\"DISABLED_BM_function_manual\",\n                                                DISABLED_BM_function);\n// No need to add cases because we don't expect them to run.\n\n//----------------------------------------------------------------------------//\n// Test RegisterBenchmark with different callable types\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/profiler_manager_test.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 39,
                  "endLine": 44,
                  "endColumn": 44,
                  "snippet": {
                    "text": "int main(int argc, char* argv[]) {\n  std::unique_ptr<TestProfilerManager> pm(new TestProfilerManager());\n\n  benchmark::RegisterProfilerManager(pm.get());\n  RunOutputTests(argc, argv);\n  benchmark::RegisterProfilerManager(nullptr);\n\n",
                    "rendered": {
                      "text": "int main(int argc, char* argv[]) {\n  std::unique_ptr<TestProfilerManager> pm(new TestProfilerManager());\n\n  benchmark::RegisterProfilerManager(pm.get());\n  RunOutputTests(argc, argv);\n  benchmark::RegisterProfilerManager(nullptr);\n\n",
                      "markdown": "`int main(int argc, char* argv[]) {\n  std::unique_ptr<TestProfilerManager> pm(new TestProfilerManager());\n\n  benchmark::RegisterProfilerManager(pm.get());\n  RunOutputTests(argc, argv);\n  benchmark::RegisterProfilerManager(nullptr);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/complexity_test.cc"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 40,
                  "endLine": 239,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_ComplexityCaptureArgs(benchmark::State &state, int n) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n",
                    "rendered": {
                      "text": "\nvoid BM_ComplexityCaptureArgs(benchmark::State &state, int n) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n",
                      "markdown": "`\nvoid BM_ComplexityCaptureArgs(benchmark::State &state, int n) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/complexity_test.cc"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 40,
                  "endLine": 179,
                  "endColumn": 46,
                  "snippet": {
                    "text": "static const double kLog2E = 1.44269504088896340736;\nstatic void BM_Complexity_O_N_log_N(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n",
                    "rendered": {
                      "text": "static const double kLog2E = 1.44269504088896340736;\nstatic void BM_Complexity_O_N_log_N(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n",
                      "markdown": "`static const double kLog2E = 1.44269504088896340736;\nstatic void BM_Complexity_O_N_log_N(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/complexity_test.cc"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 40,
                  "endLine": 121,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Complexity_O_N(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n",
                    "rendered": {
                      "text": "\nvoid BM_Complexity_O_N(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n",
                      "markdown": "`\nvoid BM_Complexity_O_N(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/complexity_test.cc"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 40,
                  "endLine": 72,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Complexity_O1(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n",
                    "rendered": {
                      "text": "\nvoid BM_Complexity_O1(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n",
                      "markdown": "`\nvoid BM_Complexity_O1(benchmark::State &state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    benchmark::DoNotOptimize(state.iterations());\n    double tmp = static_cast<double>(state.iterations());\n    benchmark::DoNotOptimize(tmp);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/commandlineflags_gtest.cc"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 25,
                  "snippet": {
                    "text": "int setenv(const char* name, const char* value, int overwrite) {\n  if (!overwrite) {\n    // NOTE: getenv_s is far superior but not available under mingw.\n    char* env_value = getenv(name);\n    if (env_value == nullptr) {\n      return -1;\n    }\n",
                    "rendered": {
                      "text": "int setenv(const char* name, const char* value, int overwrite) {\n  if (!overwrite) {\n    // NOTE: getenv_s is far superior but not available under mingw.\n    char* env_value = getenv(name);\n    if (env_value == nullptr) {\n      return -1;\n    }\n",
                      "markdown": "`int setenv(const char* name, const char* value, int overwrite) {\n  if (!overwrite) {\n    // NOTE: getenv_s is far superior but not available under mingw.\n    char* env_value = getenv(name);\n    if (env_value == nullptr) {\n      return -1;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/skip_with_error_test.cc"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 51,
                  "endLine": 123,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                                      {\"/2/threads:8\", false, \"\"}});\n\nvoid BM_error_during_running_ranged_for(benchmark::State& state) {\n  assert(state.max_iterations > 3 && \"test requires at least a few iterations\");\n  bool first_iter = true;\n  // NOTE: Users should not write the for loop explicitly.\n  for (auto It = state.begin(), End = state.end(); It != End; ++It) {\n",
                    "rendered": {
                      "text": "                                      {\"/2/threads:8\", false, \"\"}});\n\nvoid BM_error_during_running_ranged_for(benchmark::State& state) {\n  assert(state.max_iterations > 3 && \"test requires at least a few iterations\");\n  bool first_iter = true;\n  // NOTE: Users should not write the for loop explicitly.\n  for (auto It = state.begin(), End = state.end(); It != End; ++It) {\n",
                      "markdown": "`                                      {\"/2/threads:8\", false, \"\"}});\n\nvoid BM_error_during_running_ranged_for(benchmark::State& state) {\n  assert(state.max_iterations > 3 && \"test requires at least a few iterations\");\n  bool first_iter = true;\n  // NOTE: Users should not write the for loop explicitly.\n  for (auto It = state.begin(), End = state.end(); It != End; ++It) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/reporter.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/reporter.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 16,
                  "endLine": 82,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n  if (CPUInfo::Scaling::ENABLED == info.scaling) {\n    Out << \"***WARNING*** CPU scaling is enabled, the benchmark \"\n           \"real time measurements may be noisy and will incur extra \"\n           \"overhead.\\n\";\n  }\n\n",
                    "rendered": {
                      "text": "\n  if (CPUInfo::Scaling::ENABLED == info.scaling) {\n    Out << \"***WARNING*** CPU scaling is enabled, the benchmark \"\n           \"real time measurements may be noisy and will incur extra \"\n           \"overhead.\\n\";\n  }\n\n",
                      "markdown": "`\n  if (CPUInfo::Scaling::ENABLED == info.scaling) {\n    Out << \"***WARNING*** CPU scaling is enabled, the benchmark \"\n           \"real time measurements may be noisy and will incur extra \"\n           \"overhead.\\n\";\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/CMakeLists.txt"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 8,
                  "endLine": 243,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    benchmark_add_test(NAME ${name} COMMAND ${name})\n    if(WIN32 AND BUILD_SHARED_LIBS)\n      set_tests_properties(${name} PROPERTIES\n        ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:benchmark::benchmark>;PATH=path_list_prepend:$<TARGET_FILE_DIR:gmock_main>\"\n      )\n    endif()\n  endmacro()\n",
                    "rendered": {
                      "text": "    benchmark_add_test(NAME ${name} COMMAND ${name})\n    if(WIN32 AND BUILD_SHARED_LIBS)\n      set_tests_properties(${name} PROPERTIES\n        ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:benchmark::benchmark>;PATH=path_list_prepend:$<TARGET_FILE_DIR:gmock_main>\"\n      )\n    endif()\n  endmacro()\n",
                      "markdown": "`    benchmark_add_test(NAME ${name} COMMAND ${name})\n    if(WIN32 AND BUILD_SHARED_LIBS)\n      set_tests_properties(${name} PROPERTIES\n        ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:benchmark::benchmark>;PATH=path_list_prepend:$<TARGET_FILE_DIR:gmock_main>\"\n      )\n    endif()\n  endmacro()\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/CMakeLists.txt"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 49,
                  "endLine": 71,
                  "endColumn": 106,
                  "snippet": {
                    "text": "  add_test(${ARGV})\n  if(WIN32 AND BUILD_SHARED_LIBS)\n    cmake_parse_arguments(TEST \"\" \"NAME\" \"\" ${ARGN})\n    set_tests_properties(${TEST_NAME} PROPERTIES ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:benchmark::benchmark>\")\n  endif()\nendmacro(benchmark_add_test)\n\n",
                    "rendered": {
                      "text": "  add_test(${ARGV})\n  if(WIN32 AND BUILD_SHARED_LIBS)\n    cmake_parse_arguments(TEST \"\" \"NAME\" \"\" ${ARGN})\n    set_tests_properties(${TEST_NAME} PROPERTIES ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:benchmark::benchmark>\")\n  endif()\nendmacro(benchmark_add_test)\n\n",
                      "markdown": "`  add_test(${ARGV})\n  if(WIN32 AND BUILD_SHARED_LIBS)\n    cmake_parse_arguments(TEST \"\" \"NAME\" \"\" ${ARGN})\n    set_tests_properties(${TEST_NAME} PROPERTIES ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:benchmark::benchmark>\")\n  endif()\nendmacro(benchmark_add_test)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_tabular_test.cc"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 45,
                  "endLine": 7,
                  "endColumn": 49,
                  "snippet": {
                    "text": "#include \"benchmark/benchmark.h\"\n#include \"output_test.h\"\n\n// @todo: <jpmag> this checks the full output at once; the rule for\n// CounterSet1 was failing because it was not matching \"^[-]+$\".\n// @todo: <jpmag> check that the counters are vertically aligned.\nADD_CASES(TC_ConsoleOut,\n",
                    "rendered": {
                      "text": "#include \"benchmark/benchmark.h\"\n#include \"output_test.h\"\n\n// @todo: <jpmag> this checks the full output at once; the rule for\n// CounterSet1 was failing because it was not matching \"^[-]+$\".\n// @todo: <jpmag> check that the counters are vertically aligned.\nADD_CASES(TC_ConsoleOut,\n",
                      "markdown": "`#include \"benchmark/benchmark.h\"\n#include \"output_test.h\"\n\n// @todo: <jpmag> this checks the full output at once; the rule for\n// CounterSet1 was failing because it was not matching \"^[-]+$\".\n// @todo: <jpmag> check that the counters are vertically aligned.\nADD_CASES(TC_ConsoleOut,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_tabular_test.cc"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 40,
                  "endLine": 377,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_CounterRates_Tabular(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_CounterRates_Tabular(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_CounterRates_Tabular(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_tabular_test.cc"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 40,
                  "endLine": 66,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Counters_Tabular(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_Counters_Tabular(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_Counters_Tabular(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_tabular_test.cc"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 19,
                  "endLine": 48,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    {\"^BM_CounterSet1_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet1_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bat %s Baz %s Foo$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^BM_CounterSet2_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet2_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n",
                    "rendered": {
                      "text": "    {\"^BM_CounterSet1_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet1_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bat %s Baz %s Foo$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^BM_CounterSet2_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet2_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n",
                      "markdown": "`    {\"^BM_CounterSet1_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet1_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bat %s Baz %s Foo$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^BM_CounterSet2_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet2_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_tabular_test.cc"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "endLine": 35,
                  "endColumn": 25,
                  "snippet": {
                    "text": "at/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s$\", MR_Next},\n    {\"^BM_CounterRates_Tabular/threads:%int %console_report [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bar %s Baz %s Foo$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^BM_CounterSet0_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet0_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next}",
                    "rendered": {
                      "text": "at/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s$\", MR_Next},\n    {\"^BM_CounterRates_Tabular/threads:%int %console_report [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bar %s Baz %s Foo$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^BM_CounterSet0_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet0_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next}",
                      "markdown": "`at/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s$\", MR_Next},\n    {\"^BM_CounterRates_Tabular/threads:%int %console_report [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s [ ]*%hrfloat/s$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bar %s Baz %s Foo$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n    {\"^BM_CounterSet0_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n    {\"^BM_CounterSet0_Tabular/threads:%int %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next}`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_tabular_test.cc"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 19,
                  "endLine": 15,
                  "endColumn": 25,
                  "snippet": {
                    "text": "              // keeping these lines long improves readability, so:\n              // clang-format off\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bar %s Bat %s Baz %s Foo %s Frob %s Lob$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n      {\"^BM_Counters_Tabular/repeats:2/threads:1 %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n      {\"^BM_Counters_Tabular/repeats:2/threads:1 %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n",
                    "rendered": {
                      "text": "              // keeping these lines long improves readability, so:\n              // clang-format off\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bar %s Bat %s Baz %s Foo %s Frob %s Lob$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n      {\"^BM_Counters_Tabular/repeats:2/threads:1 %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n      {\"^BM_Counters_Tabular/repeats:2/threads:1 %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n",
                      "markdown": "`              // keeping these lines long improves readability, so:\n              // clang-format off\n    {\"^[-]+$\", MR_Next},\n    {\"^Benchmark %s Time %s CPU %s Iterations %s Bar %s Bat %s Baz %s Foo %s Frob %s Lob$\", MR_Next},\n    {\"^[-]+$\", MR_Next},\n      {\"^BM_Counters_Tabular/repeats:2/threads:1 %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n      {\"^BM_Counters_Tabular/repeats:2/threads:1 %console_report [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat [ ]*%hrfloat$\", MR_Next},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/report_aggregates_only_test.cc"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 57,
                  "endLine": 29,
                  "endColumn": 63,
                  "snippet": {
                    "text": "      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_stddev\\\"\") !=\n          1 ||\n      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_cv\\\"\") != 1) {\n    std::cout << \"Precondition mismatch. Expected to only find four \"\n                 \"occurrences of \\\"BM_SummaryRepeat/repeats:3\\\" substring:\\n\"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_mean\\\", \"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_median\\\", \"\n",
                    "rendered": {
                      "text": "      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_stddev\\\"\") !=\n          1 ||\n      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_cv\\\"\") != 1) {\n    std::cout << \"Precondition mismatch. Expected to only find four \"\n                 \"occurrences of \\\"BM_SummaryRepeat/repeats:3\\\" substring:\\n\"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_mean\\\", \"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_median\\\", \"\n",
                      "markdown": "`      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_stddev\\\"\") !=\n          1 ||\n      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_cv\\\"\") != 1) {\n    std::cout << \"Precondition mismatch. Expected to only find four \"\n                 \"occurrences of \\\"BM_SummaryRepeat/repeats:3\\\" substring:\\n\"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_mean\\\", \"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_median\\\", \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 69,
                  "endLine": 549,
                  "endColumn": 75,
                  "snippet": {
                    "text": "// to CHECK_BENCHMARK_RESULTS()\nvoid CheckAvgIterationsRate(Results const& e) {\n  double its = e.NumIterations();\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, 1. / its / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, 2. / its / t, 0.001);\n",
                    "rendered": {
                      "text": "// to CHECK_BENCHMARK_RESULTS()\nvoid CheckAvgIterationsRate(Results const& e) {\n  double its = e.NumIterations();\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, 1. / its / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, 2. / its / t, 0.001);\n",
                      "markdown": "`// to CHECK_BENCHMARK_RESULTS()\nvoid CheckAvgIterationsRate(Results const& e) {\n  double its = e.NumIterations();\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, 1. / its / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, 2. / its / t, 0.001);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 40,
                  "endLine": 515,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Counters_kAvgIterationsRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_Counters_kAvgIterationsRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_Counters_kAvgIterationsRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 69,
                  "endLine": 459,
                  "endColumn": 75,
                  "snippet": {
                    "text": "// to CHECK_BENCHMARK_RESULTS()\nvoid CheckIsIterationInvariantRate(Results const& e) {\n  double its = e.NumIterations();\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, its * 1. / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, its * 2. / t, 0.001);\n",
                    "rendered": {
                      "text": "// to CHECK_BENCHMARK_RESULTS()\nvoid CheckIsIterationInvariantRate(Results const& e) {\n  double its = e.NumIterations();\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, its * 1. / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, its * 2. / t, 0.001);\n",
                      "markdown": "`// to CHECK_BENCHMARK_RESULTS()\nvoid CheckIsIterationInvariantRate(Results const& e) {\n  double its = e.NumIterations();\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, its * 1. / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, its * 2. / t, 0.001);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 40,
                  "endLine": 423,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Counters_kIsIterationInvariantRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_Counters_kIsIterationInvariantRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_Counters_kIsIterationInvariantRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Counters_AvgThreadsRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_Counters_AvgThreadsRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_Counters_AvgThreadsRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 69,
                  "endLine": 240,
                  "endColumn": 75,
                  "snippet": {
                    "text": "// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckInvertedRate(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, t / 8192.0, 0.001);\n",
                    "rendered": {
                      "text": "// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckInvertedRate(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, t / 8192.0, 0.001);\n",
                      "markdown": "`// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckInvertedRate(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, t / 8192.0, 0.001);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 40,
                  "endLine": 206,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Counters_InvertedRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_Counters_InvertedRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_Counters_InvertedRate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 40,
                  "endLine": 165,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Invert(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_Invert(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_Invert(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 69,
                  "endLine": 152,
                  "endColumn": 75,
                  "snippet": {
                    "text": "// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckRate(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, 1. / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, 2. / t, 0.001);\n",
                    "rendered": {
                      "text": "// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckRate(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, 1. / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, 2. / t, 0.001);\n",
                      "markdown": "`// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckRate(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  // check that the values are within 0.1% of the expected values\n  CHECK_FLOAT_COUNTER_VALUE(e, \"foo\", EQ, 1. / t, 0.001);\n  CHECK_FLOAT_COUNTER_VALUE(e, \"bar\", EQ, 2. / t, 0.001);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 40,
                  "endLine": 121,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Counters_Rate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_Counters_Rate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_Counters_Rate(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 69,
                  "endLine": 105,
                  "endColumn": 75,
                  "snippet": {
                    "text": "// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckBytesAndItemsPSec(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  CHECK_COUNTER_VALUE(e, int, \"foo\", EQ, 1);\n  CHECK_COUNTER_VALUE(e, int, \"bar\", EQ, num_calls1);\n  // check that the values are within 0.1% of the expected values\n",
                    "rendered": {
                      "text": "// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckBytesAndItemsPSec(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  CHECK_COUNTER_VALUE(e, int, \"foo\", EQ, 1);\n  CHECK_COUNTER_VALUE(e, int, \"bar\", EQ, num_calls1);\n  // check that the values are within 0.1% of the expected values\n",
                      "markdown": "`// VS2013 does not allow this function to be passed as a lambda argument\n// to CHECK_BENCHMARK_RESULTS()\nvoid CheckBytesAndItemsPSec(Results const& e) {\n  double t = e.DurationCPUTime();  // this (and not real time) is the time used\n  CHECK_COUNTER_VALUE(e, int, \"foo\", EQ, 1);\n  CHECK_COUNTER_VALUE(e, int, \"bar\", EQ, num_calls1);\n  // check that the values are within 0.1% of the expected values\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 40,
                  "endLine": 69,
                  "endColumn": 46,
                  "snippet": {
                    "text": "}\nvoid BM_Counters_WithBytesAndItemsPSec(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "}\nvoid BM_Counters_WithBytesAndItemsPSec(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`}\nvoid BM_Counters_WithBytesAndItemsPSec(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/user_counters_test.cc"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 26,
                  "endLine": 15,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nADD_CASES(TC_ConsoleOut,\n          {{\"^[-]+$\", MR_Next},\n           {\"^Benchmark %s Time %s CPU %s Iterations UserCounters...$\", MR_Next},\n           {\"^[-]+$\", MR_Next}});\nADD_CASES(TC_CSVOut, {{\"%csv_header,\\\"bar\\\",\\\"foo\\\"\"}});\n\n",
                    "rendered": {
                      "text": "\nADD_CASES(TC_ConsoleOut,\n          {{\"^[-]+$\", MR_Next},\n           {\"^Benchmark %s Time %s CPU %s Iterations UserCounters...$\", MR_Next},\n           {\"^[-]+$\", MR_Next}});\nADD_CASES(TC_CSVOut, {{\"%csv_header,\\\"bar\\\",\\\"foo\\\"\"}});\n\n",
                      "markdown": "`\nADD_CASES(TC_ConsoleOut,\n          {{\"^[-]+$\", MR_Next},\n           {\"^Benchmark %s Time %s CPU %s Iterations UserCounters...$\", MR_Next},\n           {\"^[-]+$\", MR_Next}});\nADD_CASES(TC_CSVOut, {{\"%csv_header,\\\"bar\\\",\\\"foo\\\"\"}});\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 33,
                  "endLine": 299,
                  "endColumn": 37,
                  "snippet": {
                    "text": "```\n  The benchmarks are _**statistically different**_. This could mean the\n  performance has either **significantly improved** or **significantly\n  deteriorated**. You should look at the actual performance numbers to see which\n  is the case.\n```diff\n- Red:\n",
                    "rendered": {
                      "text": "```\n  The benchmarks are _**statistically different**_. This could mean the\n  performance has either **significantly improved** or **significantly\n  deteriorated**. You should look at the actual performance numbers to see which\n  is the case.\n```diff\n- Red:\n",
                      "markdown": "````\n  The benchmarks are _**statistically different**_. This could mean the\n  performance has either **significantly improved** or **significantly\n  deteriorated**. You should look at the actual performance numbers to see which\n  is the case.\n```diff\n- Red:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 45,
                  "endLine": 193,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\nPerformance measurements are an art, and performance comparisons are doubly so.\nResults are often noisy and don't necessarily have large absolute differences to\nthem, so just by visual inspection, it is not at all apparent if two\nmeasurements are actually showing a performance change or not. It is even more\nconfusing with multiple benchmark repetitions.\n\n",
                    "rendered": {
                      "text": "\nPerformance measurements are an art, and performance comparisons are doubly so.\nResults are often noisy and don't necessarily have large absolute differences to\nthem, so just by visual inspection, it is not at all apparent if two\nmeasurements are actually showing a performance change or not. It is even more\nconfusing with multiple benchmark repetitions.\n\n",
                      "markdown": "`\nPerformance measurements are an art, and performance comparisons are doubly so.\nResults are often noisy and don't necessarily have large absolute differences to\nthem, so just by visual inspection, it is not at all apparent if two\nmeasurements are actually showing a performance change or not. It is even more\nconfusing with multiple benchmark repetitions.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 3,
                  "endLine": 143,
                  "snippet": {
                    "text": "3. Compare filter one from benchmark one to filter two from benchmark two:\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark_baseline> <filter_baseline> <benchmark_contender> <filter_contender> [benchmark options]...\n```\n\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n",
                    "rendered": {
                      "text": "3. Compare filter one from benchmark one to filter two from benchmark two:\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark_baseline> <filter_baseline> <benchmark_contender> <filter_contender> [benchmark options]...\n```\n\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n",
                      "markdown": "`3. Compare filter one from benchmark one to filter two from benchmark two:\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark_baseline> <filter_baseline> <benchmark_contender> <filter_contender> [benchmark options]...\n```\n\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 3,
                  "endLine": 93,
                  "snippet": {
                    "text": "2. Compare two different filters of one benchmark\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark> <filter_baseline> <filter_contender> [benchmark options]...\n```\nWhere `<benchmark>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n",
                    "rendered": {
                      "text": "2. Compare two different filters of one benchmark\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark> <filter_baseline> <filter_contender> [benchmark options]...\n```\nWhere `<benchmark>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n",
                      "markdown": "`2. Compare two different filters of one benchmark\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark> <filter_baseline> <filter_contender> [benchmark options]...\n```\nWhere `<benchmark>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 30,
                  "snippet": {
                    "text": "1. Just compare two benchmarks\nThe program is invoked like:\n\n``` bash\n$ compare.py benchmarks <benchmark_baseline> <benchmark_contender> [benchmark options]...\n```\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n",
                    "rendered": {
                      "text": "1. Just compare two benchmarks\nThe program is invoked like:\n\n``` bash\n$ compare.py benchmarks <benchmark_baseline> <benchmark_contender> [benchmark options]...\n```\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n",
                      "markdown": "`1. Just compare two benchmarks\nThe program is invoked like:\n\n``` bash\n$ compare.py benchmarks <benchmark_baseline> <benchmark_contender> [benchmark options]...\n```\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 60,
                  "endLine": 15,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n### Displaying aggregates only\n\nThe switch `-a` / `--display_aggregates_only` can be used to control the\ndisplayment of the normal iterations vs the aggregates. When passed, it will\nbe passthrough to the benchmark binaries to be run, and will be accounted for\nin the tool itself; only the aggregates will be displayed, but not normal runs.\n",
                    "rendered": {
                      "text": "\n### Displaying aggregates only\n\nThe switch `-a` / `--display_aggregates_only` can be used to control the\ndisplayment of the normal iterations vs the aggregates. When passed, it will\nbe passthrough to the benchmark binaries to be run, and will be accounted for\nin the tool itself; only the aggregates will be displayed, but not normal runs.\n",
                      "markdown": "`\n### Displaying aggregates only\n\nThe switch `-a` / `--display_aggregates_only` can be used to control the\ndisplayment of the normal iterations vs the aggregates. When passed, it will\nbe passthrough to the benchmark binaries to be run, and will be accounted for\nin the tool itself; only the aggregates will be displayed, but not normal runs.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 31,
                  "endLine": 315,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  But remember, in this context:\n\n    'Success' means 'successfully finding a difference'.\n    'Failure' means 'failing to find a difference'.\n```\n\n\n",
                    "rendered": {
                      "text": "  But remember, in this context:\n\n    'Success' means 'successfully finding a difference'.\n    'Failure' means 'failing to find a difference'.\n```\n\n\n",
                      "markdown": "`  But remember, in this context:\n\n    'Success' means 'successfully finding a difference'.\n    'Failure' means 'failing to find a difference'.\n```\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 72,
                  "endLine": 276,
                  "snippet": {
                    "text": "     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n\n\nA statistically-significant difference is determined by a **p-value**, which is\n",
                    "rendered": {
                      "text": "     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n\n\nA statistically-significant difference is determined by a **p-value**, which is\n",
                      "markdown": "`     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n\n\nA statistically-significant difference is determined by a **p-value**, which is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 59,
                  "endLine": 275,
                  "endColumn": 65,
                  "snippet": {
                    "text": "     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n\n\n",
                    "rendered": {
                      "text": "     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n\n\n",
                      "markdown": "`     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 17,
                  "endLine": 273,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n",
                    "rendered": {
                      "text": "\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n",
                      "markdown": "`\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 4,
                  "endLine": 273,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n",
                    "rendered": {
                      "text": "\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n",
                      "markdown": "`\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\nIn the comparison section, the relative differences in both time and CPU time\nare displayed for each input size.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 66,
                  "endLine": 271,
                  "endColumn": 72,
                  "snippet": {
                    "text": "     might be comparing how fast a function runs before and after you make some\n     changes to it.\n\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\n",
                    "rendered": {
                      "text": "     might be comparing how fast a function runs before and after you make some\n     changes to it.\n\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\n",
                      "markdown": "`     might be comparing how fast a function runs before and after you make some\n     changes to it.\n\n  6. **CPU Old and CPU New:** These show the average amount of CPU time that the\n     function uses in two different scenarios or versions. This is similar to\n     Time Old and Time New, but focuses on CPU usage instead of overall time.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 59,
                  "endLine": 266,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n\n  5. **Time Old and Time New:** These represent the average time it takes for a\n     function to run in two different scenarios or versions. For example, you\n     might be comparing how fast a function runs before and after you make some\n     changes to it.\n",
                    "rendered": {
                      "text": "  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n\n  5. **Time Old and Time New:** These represent the average time it takes for a\n     function to run in two different scenarios or versions. For example, you\n     might be comparing how fast a function runs before and after you make some\n     changes to it.\n",
                      "markdown": "`  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n\n  5. **Time Old and Time New:** These represent the average time it takes for a\n     function to run in two different scenarios or versions. For example, you\n     might be comparing how fast a function runs before and after you make some\n     changes to it.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 19,
                  "endLine": 266,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n\n  5. **Time Old and Time New:** These represent the average time it takes for a\n     function to run in two different scenarios or versions. For example, you\n     might be comparing how fast a function runs before and after you make some\n     changes to it.\n",
                    "rendered": {
                      "text": "  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n\n  5. **Time Old and Time New:** These represent the average time it takes for a\n     function to run in two different scenarios or versions. For example, you\n     might be comparing how fast a function runs before and after you make some\n     changes to it.\n",
                      "markdown": "`  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n\n  5. **Time Old and Time New:** These represent the average time it takes for a\n     function to run in two different scenarios or versions. For example, you\n     might be comparing how fast a function runs before and after you make some\n     changes to it.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 29,
                  "endLine": 261,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n  2. **Time:** The average time per operation, across all iterations.\n\n  3. **CPU:** The average CPU time per operation, across all iterations.\n\n  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n",
                    "rendered": {
                      "text": "\n  2. **Time:** The average time per operation, across all iterations.\n\n  3. **CPU:** The average CPU time per operation, across all iterations.\n\n  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n",
                      "markdown": "`\n  2. **Time:** The average time per operation, across all iterations.\n\n  3. **CPU:** The average CPU time per operation, across all iterations.\n\n  4. **Iterations:** The number of iterations the benchmark was run to get a\n     stable estimate.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 26,
                  "endLine": 259,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  1. **Benchmark:** The name of the function being benchmarked, along with the\n     size of the input (after the slash).\n\n  2. **Time:** The average time per operation, across all iterations.\n\n  3. **CPU:** The average CPU time per operation, across all iterations.\n\n",
                    "rendered": {
                      "text": "  1. **Benchmark:** The name of the function being benchmarked, along with the\n     size of the input (after the slash).\n\n  2. **Time:** The average time per operation, across all iterations.\n\n  3. **CPU:** The average CPU time per operation, across all iterations.\n\n",
                      "markdown": "`  1. **Benchmark:** The name of the function being benchmarked, along with the\n     size of the input (after the slash).\n\n  2. **Time:** The average time per operation, across all iterations.\n\n  3. **CPU:** The average CPU time per operation, across all iterations.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 57,
                  "endLine": 236,
                  "endColumn": 63,
                  "snippet": {
                    "text": "**benchmark/threads:1/process_time/real_time_stddev**: This is the relative\ndifference in the standard deviation of the execution time, which is a measure\nof how much variation or dispersion there is from the mean. A positive value\n(+0.3974) implies there is more variance in the execution time in the new\nprocess.\n\n**benchmark/threads:1/process_time/real_time_cv**: CV stands for Coefficient of\n",
                    "rendered": {
                      "text": "**benchmark/threads:1/process_time/real_time_stddev**: This is the relative\ndifference in the standard deviation of the execution time, which is a measure\nof how much variation or dispersion there is from the mean. A positive value\n(+0.3974) implies there is more variance in the execution time in the new\nprocess.\n\n**benchmark/threads:1/process_time/real_time_cv**: CV stands for Coefficient of\n",
                      "markdown": "`**benchmark/threads:1/process_time/real_time_stddev**: This is the relative\ndifference in the standard deviation of the execution time, which is a measure\nof how much variation or dispersion there is from the mean. A positive value\n(+0.3974) implies there is more variance in the execution time in the new\nprocess.\n\n**benchmark/threads:1/process_time/real_time_cv**: CV stands for Coefficient of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 32,
                  "endLine": 227,
                  "endColumn": 38,
                  "snippet": {
                    "text": "**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n**benchmark/threads:1/process_time/real_time_median**: Similarly, this shows the\nrelative difference in the median execution time. Again, the new process is\n",
                    "rendered": {
                      "text": "**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n**benchmark/threads:1/process_time/real_time_median**: Similarly, this shows the\nrelative difference in the median execution time. Again, the new process is\n",
                      "markdown": "`**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n**benchmark/threads:1/process_time/real_time_median**: Similarly, this shows the\nrelative difference in the median execution time. Again, the new process is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 79,
                  "endLine": 227,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n**benchmark/threads:1/process_time/real_time_median**: Similarly, this shows the\nrelative difference in the median execution time. Again, the new process is\n",
                    "rendered": {
                      "text": "\n**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n**benchmark/threads:1/process_time/real_time_median**: Similarly, this shows the\nrelative difference in the median execution time. Again, the new process is\n",
                      "markdown": "`\n**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n**benchmark/threads:1/process_time/real_time_median**: Similarly, this shows the\nrelative difference in the median execution time. Again, the new process is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 28,
                  "endLine": 225,
                  "endColumn": 34,
                  "snippet": {
                    "text": "U Test) with 27 repetitions for each case.\n\n**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n",
                    "rendered": {
                      "text": "U Test) with 27 repetitions for each case.\n\n**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n",
                      "markdown": "`U Test) with 27 repetitions for each case.\n\n**benchmark/threads:1/process_time/real_time_mean**: This shows the relative\ndifference in mean execution time between two different cases. The negative\nvalue (-0.1442) implies that the new process is faster by about 14.42%. The old\ntime was 90 units, while the new time is 77 units.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 88,
                  "endLine": 206,
                  "endColumn": 94,
                  "snippet": {
                    "text": "**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n",
                    "rendered": {
                      "text": "**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n",
                      "markdown": "`**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 74,
                  "endLine": 206,
                  "endColumn": 80,
                  "snippet": {
                    "text": "**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n",
                    "rendered": {
                      "text": "**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n",
                      "markdown": "`**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 55,
                  "endLine": 206,
                  "endColumn": 61,
                  "snippet": {
                    "text": "**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n",
                    "rendered": {
                      "text": "**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n",
                      "markdown": "`**The below output is a summary of a benchmark comparison with statistics\nprovided for a multi-threaded process.**\n```\nBenchmark                                               Time        CPU    Time Old      Time New       CPU Old       CPU New\n-----------------------------------------------------------------------------------------------------------------------------\nbenchmark/threads:1/process_time/real_time_pvalue     0.0000     0.0000    U Test, Repetitions: 27 vs 27\nbenchmark/threads:1/process_time/real_time_mean      -0.1442    -0.1442          90            77            90            77\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 79,
                  "endLine": 178,
                  "endColumn": 85,
                  "snippet": {
                    "text": "ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37           230\n[BM_memcpy vs. BM_copy]/64        ",
                    "rendered": {
                      "text": "ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37           230\n[BM_memcpy vs. BM_copy]/64        ",
                      "markdown": "`ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37           230\n[BM_memcpy vs. BM_copy]/64        `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 65,
                  "endLine": 178,
                  "endColumn": 71,
                  "snippet": {
                    "text": "ns      13120 ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37           230\n[BM_memcpy vs. BM_co",
                    "rendered": {
                      "text": "ns      13120 ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37           230\n[BM_memcpy vs. BM_co",
                      "markdown": "`ns      13120 ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37           230\n[BM_memcpy vs. BM_co`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 39,
                  "endLine": 178,
                  "endColumn": 45,
                  "snippet": {
                    "text": "s\nBM_copy/512       13122 ns      13120 ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37         ",
                    "rendered": {
                      "text": "s\nBM_copy/512       13122 ns      13120 ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37         ",
                      "markdown": "`s\nBM_copy/512       13122 ns      13120 ns      53403   37.2156MB/s\nBM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s\nBM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s\nComparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37         `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 21,
                  "endLine": 170,
                  "endColumn": 27,
                  "snippet": {
                    "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:38:32\n----------------------------------------------------\nBenchmark             Time           CPU Iterations\n----------------------------------------------------\nBM_copy/8           230 ns        230 ns    2985909   33.1161MB/s\nBM_copy/64         1654 ns       1653 ns     419408   36.9137MB/s\n",
                    "rendered": {
                      "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:38:32\n----------------------------------------------------\nBenchmark             Time           CPU Iterations\n----------------------------------------------------\nBM_copy/8           230 ns        230 ns    2985909   33.1161MB/s\nBM_copy/64         1654 ns       1653 ns     419408   36.9137MB/s\n",
                      "markdown": "`Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:38:32\n----------------------------------------------------\nBenchmark             Time           CPU Iterations\n----------------------------------------------------\nBM_copy/8           230 ns        230 ns    2985909   33.1161MB/s\nBM_copy/64         1654 ns       1653 ns     419408   36.9137MB/s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 23,
                  "endLine": 159,
                  "endColumn": 29,
                  "snippet": {
                    "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:38:27\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            37 ns         37 ns   18953482   204.118MB/s\nBM_memcpy/64           74 ns         74 ns    9206578   828.245MB/s\n",
                    "rendered": {
                      "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:38:27\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            37 ns         37 ns   18953482   204.118MB/s\nBM_memcpy/64           74 ns         74 ns    9206578   828.245MB/s\n",
                      "markdown": "`Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:38:27\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            37 ns         37 ns   18953482   204.118MB/s\nBM_memcpy/64           74 ns         74 ns    9206578   828.245MB/s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 3,
                  "endLine": 143,
                  "snippet": {
                    "text": "3. Compare filter one from benchmark one to filter two from benchmark two:\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark_baseline> <filter_baseline> <benchmark_contender> <filter_contender> [benchmark options]...\n```\n\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n",
                    "rendered": {
                      "text": "3. Compare filter one from benchmark one to filter two from benchmark two:\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark_baseline> <filter_baseline> <benchmark_contender> <filter_contender> [benchmark options]...\n```\n\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n",
                      "markdown": "`3. Compare filter one from benchmark one to filter two from benchmark two:\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark_baseline> <filter_baseline> <benchmark_contender> <filter_contender> [benchmark options]...\n```\n\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 128,
                  "endLine": 136,
                  "endColumn": 134,
                  "snippet": {
                    "text": "[BM_memcpy vs. BM_copy]/8192       +308.1664       +308.2898           657        202986           656        202990\n```\n\nAs you can see, it applies filter to the benchmarks, both when running the benchmark, and before doing the diff. And to make the diff work, the matches are replaced with some common string. Thus, you can compare two different benchmark families within one benchmark binary.\nAs you can note, the values in `Time` and `CPU` columns are calculated as `(new - old) / |old|`.\n\n3. Compare filter one from benchmark one to filter two from benchmark two:\n",
                    "rendered": {
                      "text": "[BM_memcpy vs. BM_copy]/8192       +308.1664       +308.2898           657        202986           656        202990\n```\n\nAs you can see, it applies filter to the benchmarks, both when running the benchmark, and before doing the diff. And to make the diff work, the matches are replaced with some common string. Thus, you can compare two different benchmark families within one benchmark binary.\nAs you can note, the values in `Time` and `CPU` columns are calculated as `(new - old) / |old|`.\n\n3. Compare filter one from benchmark one to filter two from benchmark two:\n",
                      "markdown": "`[BM_memcpy vs. BM_copy]/8192       +308.1664       +308.2898           657        202986           656        202990\n```\n\nAs you can see, it applies filter to the benchmarks, both when running the benchmark, and before doing the diff. And to make the diff work, the matches are replaced with some common string. Thus, you can compare two different benchmark families within one benchmark binary.\nAs you can note, the values in `Time` and `CPU` columns are calculated as `(new - old) / |old|`.\n\n3. Compare filter one from benchmark one to filter two from benchmark two:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 79,
                  "endLine": 127,
                  "endColumn": 85,
                  "snippet": {
                    "text": " ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36           227\n[BM_memcpy vs. BM_copy]/64        ",
                    "rendered": {
                      "text": " ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36           227\n[BM_memcpy vs. BM_copy]/64        ",
                      "markdown": "` ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36           227\n[BM_memcpy vs. BM_copy]/64        `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 65,
                  "endLine": 127,
                  "endColumn": 71,
                  "snippet": {
                    "text": "12       12804 ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36           227\n[BM_memcpy vs. BM_co",
                    "rendered": {
                      "text": "12       12804 ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36           227\n[BM_memcpy vs. BM_co",
                      "markdown": "`12       12804 ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36           227\n[BM_memcpy vs. BM_co`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 39,
                  "endLine": 127,
                  "endColumn": 45,
                  "snippet": {
                    "text": "93   37.2154MB/s\nBM_copy/512       12804 ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36         ",
                    "rendered": {
                      "text": "93   37.2154MB/s\nBM_copy/512       12804 ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36         ",
                      "markdown": "`93   37.2154MB/s\nBM_copy/512       12804 ns      12801 ns      55417   38.1444MB/s\nBM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s\nBM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s\nComparing BM_memcpy to BM_copy (from ./a.out)\nBenchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New\n--------------------------------------------------------------------------------------------------------------------\n[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36         `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 21,
                  "endLine": 119,
                  "endColumn": 27,
                  "snippet": {
                    "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:37:33\n----------------------------------------------------\nBenchmark             Time           CPU Iterations\n----------------------------------------------------\nBM_copy/8           227 ns        227 ns    3038700   33.6264MB/s\nBM_copy/64         1640 ns       1640 ns     426893   37.2154MB/s\n",
                    "rendered": {
                      "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:37:33\n----------------------------------------------------\nBenchmark             Time           CPU Iterations\n----------------------------------------------------\nBM_copy/8           227 ns        227 ns    3038700   33.6264MB/s\nBM_copy/64         1640 ns       1640 ns     426893   37.2154MB/s\n",
                      "markdown": "`Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:37:33\n----------------------------------------------------\nBenchmark             Time           CPU Iterations\n----------------------------------------------------\nBM_copy/8           227 ns        227 ns    3038700   33.6264MB/s\nBM_copy/64         1640 ns       1640 ns     426893   37.2154MB/s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 23,
                  "endLine": 108,
                  "endColumn": 29,
                  "snippet": {
                    "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:37:28\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   17891491   211.215MB/s\nBM_memcpy/64           74 ns         74 ns    9400999   825.646MB/s\n",
                    "rendered": {
                      "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:37:28\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   17891491   211.215MB/s\nBM_memcpy/64           74 ns         74 ns    9400999   825.646MB/s\n",
                      "markdown": "`Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:37:28\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   17891491   211.215MB/s\nBM_memcpy/64           74 ns         74 ns    9400999   825.646MB/s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 3,
                  "endLine": 93,
                  "snippet": {
                    "text": "2. Compare two different filters of one benchmark\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark> <filter_baseline> <filter_contender> [benchmark options]...\n```\nWhere `<benchmark>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n",
                    "rendered": {
                      "text": "2. Compare two different filters of one benchmark\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark> <filter_baseline> <filter_contender> [benchmark options]...\n```\nWhere `<benchmark>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n",
                      "markdown": "`2. Compare two different filters of one benchmark\nThe program is invoked like:\n\n``` bash\n$ compare.py filters <benchmark> <filter_baseline> <filter_contender> [benchmark options]...\n```\nWhere `<benchmark>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 65,
                  "endLine": 72,
                  "endColumn": 71,
                  "snippet": {
                    "text": "BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n",
                    "rendered": {
                      "text": "BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n",
                      "markdown": "`BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 51,
                  "endLine": 72,
                  "endColumn": 57,
                  "snippet": {
                    "text": "BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n",
                    "rendered": {
                      "text": "BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n",
                      "markdown": "`BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 25,
                  "endLine": 72,
                  "endColumn": 31,
                  "snippet": {
                    "text": "BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n",
                    "rendered": {
                      "text": "BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n",
                      "markdown": "`BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s\nBM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s\nComparing ./a.out to ./a.out\nBenchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New\n------------------------------------------------------------------------------------------------------\nBM_memcpy/8            +0.0020         +0.0020            36            36            36            36\nBM_memcpy/64           -0.0468         -0.0470            76            73            76            73\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 23,
                  "endLine": 59,
                  "endColumn": 29,
                  "snippet": {
                    "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:16:53\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   19397903   211.255MB/s\nBM_memcpy/64           73 ns         73 ns    9691174   839.635MB/s\n",
                    "rendered": {
                      "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:16:53\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   19397903   211.255MB/s\nBM_memcpy/64           73 ns         73 ns    9691174   839.635MB/s\n",
                      "markdown": "`Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:16:53\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   19397903   211.255MB/s\nBM_memcpy/64           73 ns         73 ns    9691174   839.635MB/s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 23,
                  "endLine": 43,
                  "endColumn": 29,
                  "snippet": {
                    "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:16:44\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   19101577   211.669MB/s\nBM_memcpy/64           76 ns         76 ns    9412571   800.199MB/s\n",
                    "rendered": {
                      "text": "Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:16:44\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   19101577   211.669MB/s\nBM_memcpy/64           76 ns         76 ns    9412571   800.199MB/s\n",
                      "markdown": "`Run on (8 X 4000 MHz CPU s)\n2017-11-07 21:16:44\n------------------------------------------------------\nBenchmark               Time           CPU Iterations\n------------------------------------------------------\nBM_memcpy/8            36 ns         36 ns   19101577   211.669MB/s\nBM_memcpy/64           76 ns         76 ns    9412571   800.199MB/s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/tools.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 30,
                  "snippet": {
                    "text": "1. Just compare two benchmarks\nThe program is invoked like:\n\n``` bash\n$ compare.py benchmarks <benchmark_baseline> <benchmark_contender> [benchmark options]...\n```\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n",
                    "rendered": {
                      "text": "1. Just compare two benchmarks\nThe program is invoked like:\n\n``` bash\n$ compare.py benchmarks <benchmark_baseline> <benchmark_contender> [benchmark options]...\n```\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n",
                      "markdown": "`1. Just compare two benchmarks\nThe program is invoked like:\n\n``` bash\n$ compare.py benchmarks <benchmark_baseline> <benchmark_contender> [benchmark options]...\n```\nWhere `<benchmark_baseline>` and `<benchmark_contender>` either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 19,
                  "endLine": 341,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                     GetLastError());\n\n  PInfo* it = buff.get();\n  PInfo* end = buff.get() + (buffer_size / sizeof(PInfo));\n\n  for (; it != end; ++it) {\n    if (it->Relationship != RelationCache) continue;\n",
                    "rendered": {
                      "text": "                     GetLastError());\n\n  PInfo* it = buff.get();\n  PInfo* end = buff.get() + (buffer_size / sizeof(PInfo));\n\n  for (; it != end; ++it) {\n    if (it->Relationship != RelationCache) continue;\n",
                      "markdown": "`                     GetLastError());\n\n  PInfo* it = buff.get();\n  PInfo* end = buff.get() + (buffer_size / sizeof(PInfo));\n\n  for (; it != end; ++it) {\n    if (it->Relationship != RelationCache) continue;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 18,
                  "endLine": 340,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    PrintErrorAndDie(\"Failed during call to GetLogicalProcessorInformation: \",\n                     GetLastError());\n\n  PInfo* it = buff.get();\n  PInfo* end = buff.get() + (buffer_size / sizeof(PInfo));\n\n  for (; it != end; ++it) {\n",
                    "rendered": {
                      "text": "    PrintErrorAndDie(\"Failed during call to GetLogicalProcessorInformation: \",\n                     GetLastError());\n\n  PInfo* it = buff.get();\n  PInfo* end = buff.get() + (buffer_size / sizeof(PInfo));\n\n  for (; it != end; ++it) {\n",
                      "markdown": "`    PrintErrorAndDie(\"Failed during call to GetLogicalProcessorInformation: \",\n                     GetLastError());\n\n  PInfo* it = buff.get();\n  PInfo* end = buff.get() + (buffer_size / sizeof(PInfo));\n\n  for (; it != end; ++it) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 42,
                  "endLine": 336,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  using UPtr = std::unique_ptr<PInfo, decltype(&std::free)>;\n  GetLogicalProcessorInformation(nullptr, &buffer_size);\n  UPtr buff(static_cast<PInfo*>(std::malloc(buffer_size)), &std::free);\n  if (!GetLogicalProcessorInformation(buff.get(), &buffer_size))\n    PrintErrorAndDie(\"Failed during call to GetLogicalProcessorInformation: \",\n                     GetLastError());\n\n",
                    "rendered": {
                      "text": "  using UPtr = std::unique_ptr<PInfo, decltype(&std::free)>;\n  GetLogicalProcessorInformation(nullptr, &buffer_size);\n  UPtr buff(static_cast<PInfo*>(std::malloc(buffer_size)), &std::free);\n  if (!GetLogicalProcessorInformation(buff.get(), &buffer_size))\n    PrintErrorAndDie(\"Failed during call to GetLogicalProcessorInformation: \",\n                     GetLastError());\n\n",
                      "markdown": "`  using UPtr = std::unique_ptr<PInfo, decltype(&std::free)>;\n  GetLogicalProcessorInformation(nullptr, &buffer_size);\n  UPtr buff(static_cast<PInfo*>(std::malloc(buffer_size)), &std::free);\n  if (!GetLogicalProcessorInformation(buff.get(), &buffer_size))\n    PrintErrorAndDie(\"Failed during call to GetLogicalProcessorInformation: \",\n                     GetLastError());\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 14,
                  "endLine": 508,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  return static_cast<int>(_syspage_ptr->num_cpu);\n#elif defined(BENCHMARK_OS_QURT)\n  qurt_sysenv_max_hthreads_t hardware_threads;\n  if (qurt_sysenv_get_max_hw_threads(&hardware_threads) != QURT_EOK) {\n    hardware_threads.max_hthreads = 1;\n  }\n  return hardware_threads.max_hthreads;\n",
                    "rendered": {
                      "text": "  return static_cast<int>(_syspage_ptr->num_cpu);\n#elif defined(BENCHMARK_OS_QURT)\n  qurt_sysenv_max_hthreads_t hardware_threads;\n  if (qurt_sysenv_get_max_hw_threads(&hardware_threads) != QURT_EOK) {\n    hardware_threads.max_hthreads = 1;\n  }\n  return hardware_threads.max_hthreads;\n",
                      "markdown": "`  return static_cast<int>(_syspage_ptr->num_cpu);\n#elif defined(BENCHMARK_OS_QURT)\n  qurt_sysenv_max_hthreads_t hardware_threads;\n  if (qurt_sysenv_get_max_hw_threads(&hardware_threads) != QURT_EOK) {\n    hardware_threads.max_hthreads = 1;\n  }\n  return hardware_threads.max_hthreads;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 14,
                  "endLine": 452,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#elif defined(BENCHMARK_OS_QURT)\n  std::string str = \"Hexagon DSP\";\n  qurt_arch_version_t arch_version_struct;\n  if (qurt_sysenv_get_arch_version(&arch_version_struct) == QURT_EOK) {\n    str += \" v\";\n    str += std::to_string(arch_version_struct.arch_version);\n  }\n",
                    "rendered": {
                      "text": "#elif defined(BENCHMARK_OS_QURT)\n  std::string str = \"Hexagon DSP\";\n  qurt_arch_version_t arch_version_struct;\n  if (qurt_sysenv_get_arch_version(&arch_version_struct) == QURT_EOK) {\n    str += \" v\";\n    str += std::to_string(arch_version_struct.arch_version);\n  }\n",
                      "markdown": "`#elif defined(BENCHMARK_OS_QURT)\n  std::string str = \"Hexagon DSP\";\n  qurt_arch_version_t arch_version_struct;\n  if (qurt_sysenv_get_arch_version(&arch_version_struct) == QURT_EOK) {\n    str += \" v\";\n    str += std::to_string(arch_version_struct.arch_version);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 21,
                  "endLine": 479,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n#endif  // Catch-all POSIX block.\n}\n\n",
                    "rendered": {
                      "text": "  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n#endif  // Catch-all POSIX block.\n}\n\n",
                      "markdown": "`  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n#endif  // Catch-all POSIX block.\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 27,
                  "endLine": 477,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#endif\n#endif  // def HOST_NAME_MAX\n  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n#endif  // Catch-all POSIX block.\n",
                    "rendered": {
                      "text": "#endif\n#endif  // def HOST_NAME_MAX\n  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n#endif  // Catch-all POSIX block.\n",
                      "markdown": "`#endif\n#endif  // def HOST_NAME_MAX\n  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n#endif  // Catch-all POSIX block.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 7,
                  "endLine": 476,
                  "endColumn": 15,
                  "snippet": {
                    "text": "#define HOST_NAME_MAX 64\n#endif\n#endif  // def HOST_NAME_MAX\n  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n",
                    "rendered": {
                      "text": "#define HOST_NAME_MAX 64\n#endif\n#endif  // def HOST_NAME_MAX\n  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n",
                      "markdown": "`#define HOST_NAME_MAX 64\n#endif\n#endif  // def HOST_NAME_MAX\n  char hostname[HOST_NAME_MAX];\n  int retVal = gethostname(hostname, HOST_NAME_MAX);\n  if (retVal != 0) return std::string(\"\");\n  return std::string(hostname);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 53,
                  "endLine": 445,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n                                DWCOUNT, NULL, 0, NULL, NULL);\n  str.resize(len);\n  WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname, DWCOUNT, &str[0],\n                      str.size(), NULL, NULL);\n#endif\n  return str;\n",
                    "rendered": {
                      "text": "  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n                                DWCOUNT, NULL, 0, NULL, NULL);\n  str.resize(len);\n  WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname, DWCOUNT, &str[0],\n                      str.size(), NULL, NULL);\n#endif\n  return str;\n",
                      "markdown": "`  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n                                DWCOUNT, NULL, 0, NULL, NULL);\n  str.resize(len);\n  WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname, DWCOUNT, &str[0],\n                      str.size(), NULL, NULL);\n#endif\n  return str;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 63,
                  "endLine": 442,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  str = std::string(hostname, DWCOUNT);\n#else\n  // `WideCharToMultiByte` returns `0` when conversion fails.\n  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n                                DWCOUNT, NULL, 0, NULL, NULL);\n  str.resize(len);\n  WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname, DWCOUNT, &str[0],\n",
                    "rendered": {
                      "text": "  str = std::string(hostname, DWCOUNT);\n#else\n  // `WideCharToMultiByte` returns `0` when conversion fails.\n  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n                                DWCOUNT, NULL, 0, NULL, NULL);\n  str.resize(len);\n  WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname, DWCOUNT, &str[0],\n",
                      "markdown": "`  str = std::string(hostname, DWCOUNT);\n#else\n  // `WideCharToMultiByte` returns `0` when conversion fails.\n  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n                                DWCOUNT, NULL, 0, NULL, NULL);\n  str.resize(len);\n  WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname, DWCOUNT, &str[0],\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 20,
                  "endLine": 439,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n  str = std::string(hostname, DWCOUNT);\n#else\n  // `WideCharToMultiByte` returns `0` when conversion fails.\n  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n",
                    "rendered": {
                      "text": "  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n  str = std::string(hostname, DWCOUNT);\n#else\n  // `WideCharToMultiByte` returns `0` when conversion fails.\n  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n",
                      "markdown": "`  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n  str = std::string(hostname, DWCOUNT);\n#else\n  // `WideCharToMultiByte` returns `0` when conversion fails.\n  int len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, hostname,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 23,
                  "endLine": 437,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  static constexpr int COUNT = MAX_COMPUTERNAME_LENGTH + 1;\n  TCHAR hostname[COUNT] = {'\\0'};\n  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n  str = std::string(hostname, DWCOUNT);\n#else\n",
                    "rendered": {
                      "text": "  static constexpr int COUNT = MAX_COMPUTERNAME_LENGTH + 1;\n  TCHAR hostname[COUNT] = {'\\0'};\n  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n  str = std::string(hostname, DWCOUNT);\n#else\n",
                      "markdown": "`  static constexpr int COUNT = MAX_COMPUTERNAME_LENGTH + 1;\n  TCHAR hostname[COUNT] = {'\\0'};\n  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n  str = std::string(hostname, DWCOUNT);\n#else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 8,
                  "endLine": 435,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#if defined(BENCHMARK_OS_WINDOWS)\n  std::string str;\n  static constexpr int COUNT = MAX_COMPUTERNAME_LENGTH + 1;\n  TCHAR hostname[COUNT] = {'\\0'};\n  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n",
                    "rendered": {
                      "text": "#if defined(BENCHMARK_OS_WINDOWS)\n  std::string str;\n  static constexpr int COUNT = MAX_COMPUTERNAME_LENGTH + 1;\n  TCHAR hostname[COUNT] = {'\\0'};\n  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n",
                      "markdown": "`#if defined(BENCHMARK_OS_WINDOWS)\n  std::string str;\n  static constexpr int COUNT = MAX_COMPUTERNAME_LENGTH + 1;\n  TCHAR hostname[COUNT] = {'\\0'};\n  DWORD DWCOUNT = COUNT;\n  if (!GetComputerName(hostname, &DWCOUNT)) return std::string(\"\");\n#ifndef UNICODE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/sysinfo.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_register.cc"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 41,
                  "endLine": 166,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    for (auto const& args : family->args_) {\n      for (int num_threads : *thread_counts) {\n        BenchmarkInstance instance(family.get(), family_index,\n                                   per_family_instance_index, args,\n                                   num_threads);\n\n",
                    "rendered": {
                      "text": "\n    for (auto const& args : family->args_) {\n      for (int num_threads : *thread_counts) {\n        BenchmarkInstance instance(family.get(), family_index,\n                                   per_family_instance_index, args,\n                                   num_threads);\n\n",
                      "markdown": "`\n    for (auto const& args : family->args_) {\n      for (int num_threads : *thread_counts) {\n        BenchmarkInstance instance(family.get(), family_index,\n                                   per_family_instance_index, args,\n                                   num_threads);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_register.cc"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 12,
                  "endLine": 179,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          ++per_family_instance_index;\n\n          // Only bump the next family index once we've estabilished that\n          // at least one instance of this family will be run.\n          if (next_family_index == family_index) ++next_family_index;\n        }\n      }\n",
                    "rendered": {
                      "text": "          ++per_family_instance_index;\n\n          // Only bump the next family index once we've estabilished that\n          // at least one instance of this family will be run.\n          if (next_family_index == family_index) ++next_family_index;\n        }\n      }\n",
                      "markdown": "`          ++per_family_instance_index;\n\n          // Only bump the next family index once we've estabilished that\n          // at least one instance of this family will be run.\n          if (next_family_index == family_index) ++next_family_index;\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_register.cc"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 31,
                  "endLine": 157,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    // If 'family_size' is very large warn the user.\n    if (family_size > kMaxFamilySize) {\n      Err << \"The number of inputs is very large. \" << family->name_\n          << \" will be repeated at least \" << family_size << \" times.\\n\";\n    }\n    // reserve in the special case the regex \".\", since we know the final\n    // family size.  this doesn't take into account any disabled benchmarks\n",
                    "rendered": {
                      "text": "    // If 'family_size' is very large warn the user.\n    if (family_size > kMaxFamilySize) {\n      Err << \"The number of inputs is very large. \" << family->name_\n          << \" will be repeated at least \" << family_size << \" times.\\n\";\n    }\n    // reserve in the special case the regex \".\", since we know the final\n    // family size.  this doesn't take into account any disabled benchmarks\n",
                      "markdown": "`    // If 'family_size' is very large warn the user.\n    if (family_size > kMaxFamilySize) {\n      Err << \"The number of inputs is very large. \" << family->name_\n          << \" will be repeated at least \" << family_size << \" times.\\n\";\n    }\n    // reserve in the special case the regex \".\", since we know the final\n    // family size.  this doesn't take into account any disabled benchmarks\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_register.cc"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 32,
                  "endLine": 153,
                  "endColumn": 36,
                  "snippet": {
                    "text": "             ? &one_thread\n             : &static_cast<const std::vector<int>&>(family->thread_counts_));\n    const size_t family_size = family->args_.size() * thread_counts->size();\n    // The benchmark will be run at least 'family_size' different inputs.\n    // If 'family_size' is very large warn the user.\n    if (family_size > kMaxFamilySize) {\n      Err << \"The number of inputs is very large. \" << family->name_\n",
                    "rendered": {
                      "text": "             ? &one_thread\n             : &static_cast<const std::vector<int>&>(family->thread_counts_));\n    const size_t family_size = family->args_.size() * thread_counts->size();\n    // The benchmark will be run at least 'family_size' different inputs.\n    // If 'family_size' is very large warn the user.\n    if (family_size > kMaxFamilySize) {\n      Err << \"The number of inputs is very large. \" << family->name_\n",
                      "markdown": "`             ? &one_thread\n             : &static_cast<const std::vector<int>&>(family->thread_counts_));\n    const size_t family_size = family->args_.size() * thread_counts->size();\n    // The benchmark will be run at least 'family_size' different inputs.\n    // If 'family_size' is very large warn the user.\n    if (family_size > kMaxFamilySize) {\n      Err << \"The number of inputs is very large. \" << family->name_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_register.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/cmake/GoogleTest.cmake"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 32,
                  "endLine": 1,
                  "endColumn": 36,
                  "snippet": {
                    "text": "# Download and unpack googletest at configure time\nset(GOOGLETEST_PREFIX \"${benchmark_BINARY_DIR}/third_party/googletest\")\nconfigure_file(${benchmark_SOURCE_DIR}/cmake/GoogleTest.cmake.in ${GOOGLETEST_PREFIX}/CMakeLists.txt @ONLY)\n\n",
                    "rendered": {
                      "text": "# Download and unpack googletest at configure time\nset(GOOGLETEST_PREFIX \"${benchmark_BINARY_DIR}/third_party/googletest\")\nconfigure_file(${benchmark_SOURCE_DIR}/cmake/GoogleTest.cmake.in ${GOOGLETEST_PREFIX}/CMakeLists.txt @ONLY)\n\n",
                      "markdown": "`# Download and unpack googletest at configure time\nset(GOOGLETEST_PREFIX \"${benchmark_BINARY_DIR}/third_party/googletest\")\nconfigure_file(${benchmark_SOURCE_DIR}/cmake/GoogleTest.cmake.in ${GOOGLETEST_PREFIX}/CMakeLists.txt @ONLY)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/cmake/GoogleTest.cmake"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 45,
                  "endLine": 2,
                  "snippet": {
                    "text": "# Download and unpack googletest at configure time\nset(GOOGLETEST_PREFIX \"${benchmark_BINARY_DIR}/third_party/googletest\")\nconfigure_file(${benchmark_SOURCE_DIR}/cmake/GoogleTest.cmake.in ${GOOGLETEST_PREFIX}/CMakeLists.txt @ONLY)\n\nset(GOOGLETEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/googletest\" CACHE PATH \"\") # Mind the quotes\n",
                    "rendered": {
                      "text": "# Download and unpack googletest at configure time\nset(GOOGLETEST_PREFIX \"${benchmark_BINARY_DIR}/third_party/googletest\")\nconfigure_file(${benchmark_SOURCE_DIR}/cmake/GoogleTest.cmake.in ${GOOGLETEST_PREFIX}/CMakeLists.txt @ONLY)\n\nset(GOOGLETEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/googletest\" CACHE PATH \"\") # Mind the quotes\n",
                      "markdown": "`# Download and unpack googletest at configure time\nset(GOOGLETEST_PREFIX \"${benchmark_BINARY_DIR}/third_party/googletest\")\nconfigure_file(${benchmark_SOURCE_DIR}/cmake/GoogleTest.cmake.in ${GOOGLETEST_PREFIX}/CMakeLists.txt @ONLY)\n\nset(GOOGLETEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/googletest\" CACHE PATH \"\") # Mind the quotes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/cmake/GetGitVersion.cmake"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 3,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# - Returns a version string from Git tags\n#\n# This function inspects the annotated git tags for the project and returns a string\n# into a CMake variable\n#\n#  get_git_version(<var>)\n",
                    "rendered": {
                      "text": "# - Returns a version string from Git tags\n#\n# This function inspects the annotated git tags for the project and returns a string\n# into a CMake variable\n#\n#  get_git_version(<var>)\n",
                      "markdown": "`# - Returns a version string from Git tags\n#\n# This function inspects the annotated git tags for the project and returns a string\n# into a CMake variable\n#\n#  get_git_version(<var>)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/cmake/GetGitVersion.cmake"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 33,
                  "endLine": 1,
                  "endColumn": 38,
                  "snippet": {
                    "text": "# - Returns a version string from Git tags\n#\n# This function inspects the annotated git tags for the project and returns a string\n# into a CMake variable\n",
                    "rendered": {
                      "text": "# - Returns a version string from Git tags\n#\n# This function inspects the annotated git tags for the project and returns a string\n# into a CMake variable\n",
                      "markdown": "`# - Returns a version string from Git tags\n#\n# This function inspects the annotated git tags for the project and returns a string\n# into a CMake variable\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 14,
                  "endLine": 49,
                  "snippet": {
                    "text": "    # hosting machine, very likely a permissions issue.\n    # TODO(mtrofin): Enable test.\n    # - name: test\n    #   shell: bash\n    #   working-directory: ${{ runner.workspace }}/_build\n    #   run: ctest -C ${{ matrix.build_type }} --rerun-failed --output-on-failure\n\n",
                    "rendered": {
                      "text": "    # hosting machine, very likely a permissions issue.\n    # TODO(mtrofin): Enable test.\n    # - name: test\n    #   shell: bash\n    #   working-directory: ${{ runner.workspace }}/_build\n    #   run: ctest -C ${{ matrix.build_type }} --rerun-failed --output-on-failure\n\n",
                      "markdown": "`    # hosting machine, very likely a permissions issue.\n    # TODO(mtrofin): Enable test.\n    # - name: test\n    #   shell: bash\n    #   working-directory: ${{ runner.workspace }}/_build\n    #   run: ctest -C ${{ matrix.build_type }} --rerun-failed --output-on-failure\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 12,
                  "endLine": 41,
                  "snippet": {
                    "text": "        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    # Skip testing, for now. It seems perf_event_open does not succeed on the\n",
                    "rendered": {
                      "text": "        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    # Skip testing, for now. It seems perf_event_open does not succeed on the\n",
                      "markdown": "`        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    # Skip testing, for now. It seems perf_event_open does not succeed on the\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "endLine": 32,
                  "snippet": {
                    "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_LIBPFM=1\n",
                    "rendered": {
                      "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_LIBPFM=1\n",
                      "markdown": "`      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_LIBPFM=1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 16,
                  "endLine": 25,
                  "snippet": {
                    "text": "\n    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                    "rendered": {
                      "text": "\n    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                      "markdown": "`\n    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 14,
                  "endLine": 49,
                  "snippet": {
                    "text": "    # hosting machine, very likely a permissions issue.\n    # TODO(mtrofin): Enable test.\n    # - name: test\n    #   shell: bash\n    #   working-directory: ${{ runner.workspace }}/_build\n    #   run: ctest -C ${{ matrix.build_type }} --rerun-failed --output-on-failure\n\n",
                    "rendered": {
                      "text": "    # hosting machine, very likely a permissions issue.\n    # TODO(mtrofin): Enable test.\n    # - name: test\n    #   shell: bash\n    #   working-directory: ${{ runner.workspace }}/_build\n    #   run: ctest -C ${{ matrix.build_type }} --rerun-failed --output-on-failure\n\n",
                      "markdown": "`    # hosting machine, very likely a permissions issue.\n    # TODO(mtrofin): Enable test.\n    # - name: test\n    #   shell: bash\n    #   working-directory: ${{ runner.workspace }}/_build\n    #   run: ctest -C ${{ matrix.build_type }} --rerun-failed --output-on-failure\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 12,
                  "endLine": 41,
                  "snippet": {
                    "text": "        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    # Skip testing, for now. It seems perf_event_open does not succeed on the\n",
                    "rendered": {
                      "text": "        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    # Skip testing, for now. It seems perf_event_open does not succeed on the\n",
                      "markdown": "`        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    # Skip testing, for now. It seems perf_event_open does not succeed on the\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "endLine": 32,
                  "snippet": {
                    "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_LIBPFM=1\n",
                    "rendered": {
                      "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_LIBPFM=1\n",
                      "markdown": "`      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_LIBPFM=1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 12,
                  "endLine": 25,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                    "rendered": {
                      "text": "    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                      "markdown": "`    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-perfcounters.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 12,
                  "endLine": 24,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n",
                    "rendered": {
                      "text": "\n    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n",
                      "markdown": "`\n    - name: install libpfm\n      run: |\n        sudo apt update\n        sudo apt -y install libpfm4-dev\n\n    - name: create build environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test.yml"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 14,
                  "endLine": 58,
                  "snippet": {
                    "text": "        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: ctest -C ${{ matrix.build_type }} -VV\n\n  msvc:\n",
                    "rendered": {
                      "text": "        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: ctest -C ${{ matrix.build_type }} -VV\n\n  msvc:\n",
                      "markdown": "`        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: ctest -C ${{ matrix.build_type }} -VV\n\n  msvc:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test.yml"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 14,
                  "endLine": 53,
                  "snippet": {
                    "text": "          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n",
                    "rendered": {
                      "text": "          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n",
                      "markdown": "`          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 14,
                  "endLine": 40,
                  "snippet": {
                    "text": "      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n",
                    "rendered": {
                      "text": "      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n",
                      "markdown": "`      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test.yml"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 11,
                  "endLine": 142,
                  "snippet": {
                    "text": "          msystem: ${{ matrix.msys2.msystem }}\n          update: true\n          install: >-\n            git\n            base-devel\n          pacboy: >-\n            cc:p\n            cmake:p\n",
                    "rendered": {
                      "text": "          msystem: ${{ matrix.msys2.msystem }}\n          update: true\n          install: >-\n            git\n            base-devel\n          pacboy: >-\n            cc:p\n            cmake:p\n",
                      "markdown": "`          msystem: ${{ matrix.msys2.msystem }}\n          update: true\n          install: >-\n            git\n            base-devel\n          pacboy: >-\n            cc:p\n            cmake:p\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test.yml"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 14,
                  "endLine": 58,
                  "snippet": {
                    "text": "        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: ctest -C ${{ matrix.build_type }} -VV\n\n  msvc:\n",
                    "rendered": {
                      "text": "        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: ctest -C ${{ matrix.build_type }} -VV\n\n  msvc:\n",
                      "markdown": "`        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: ctest -C ${{ matrix.build_type }} -VV\n\n  msvc:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test.yml"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 14,
                  "endLine": 53,
                  "snippet": {
                    "text": "          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n",
                    "rendered": {
                      "text": "          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n",
                      "markdown": "`          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build . --config ${{ matrix.build_type }}\n\n      - name: test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 14,
                  "endLine": 40,
                  "snippet": {
                    "text": "      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n",
                    "rendered": {
                      "text": "      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n",
                      "markdown": "`      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/wheels.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 32,
                  "endLine": 64,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          CIBW_TEST_SKIP: \"cp38-macosx_*:arm64\"\n          CIBW_ARCHS_LINUX: auto64 aarch64\n          CIBW_ARCHS_WINDOWS: auto64\n          CIBW_BEFORE_ALL_LINUX: bash .github/install_bazel.sh\n          # Grab the rootless Bazel installation inside the container.\n          CIBW_ENVIRONMENT_LINUX: PATH=$PATH:$HOME/bin\n          CIBW_TEST_COMMAND: python {project}/bindings/python/google_benchmark/example.py\n",
                    "rendered": {
                      "text": "          CIBW_TEST_SKIP: \"cp38-macosx_*:arm64\"\n          CIBW_ARCHS_LINUX: auto64 aarch64\n          CIBW_ARCHS_WINDOWS: auto64\n          CIBW_BEFORE_ALL_LINUX: bash .github/install_bazel.sh\n          # Grab the rootless Bazel installation inside the container.\n          CIBW_ENVIRONMENT_LINUX: PATH=$PATH:$HOME/bin\n          CIBW_TEST_COMMAND: python {project}/bindings/python/google_benchmark/example.py\n",
                      "markdown": "`          CIBW_TEST_SKIP: \"cp38-macosx_*:arm64\"\n          CIBW_ARCHS_LINUX: auto64 aarch64\n          CIBW_ARCHS_WINDOWS: auto64\n          CIBW_BEFORE_ALL_LINUX: bash .github/install_bazel.sh\n          # Grab the rootless Bazel installation inside the container.\n          CIBW_ENVIRONMENT_LINUX: PATH=$PATH:$HOME/bin\n          CIBW_TEST_COMMAND: python {project}/bindings/python/google_benchmark/example.py\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/wheels.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 32,
                  "endLine": 64,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          CIBW_TEST_SKIP: \"cp38-macosx_*:arm64\"\n          CIBW_ARCHS_LINUX: auto64 aarch64\n          CIBW_ARCHS_WINDOWS: auto64\n          CIBW_BEFORE_ALL_LINUX: bash .github/install_bazel.sh\n          # Grab the rootless Bazel installation inside the container.\n          CIBW_ENVIRONMENT_LINUX: PATH=$PATH:$HOME/bin\n          CIBW_TEST_COMMAND: python {project}/bindings/python/google_benchmark/example.py\n",
                    "rendered": {
                      "text": "          CIBW_TEST_SKIP: \"cp38-macosx_*:arm64\"\n          CIBW_ARCHS_LINUX: auto64 aarch64\n          CIBW_ARCHS_WINDOWS: auto64\n          CIBW_BEFORE_ALL_LINUX: bash .github/install_bazel.sh\n          # Grab the rootless Bazel installation inside the container.\n          CIBW_ENVIRONMENT_LINUX: PATH=$PATH:$HOME/bin\n          CIBW_TEST_COMMAND: python {project}/bindings/python/google_benchmark/example.py\n",
                      "markdown": "`          CIBW_TEST_SKIP: \"cp38-macosx_*:arm64\"\n          CIBW_ARCHS_LINUX: auto64 aarch64\n          CIBW_ARCHS_WINDOWS: auto64\n          CIBW_BEFORE_ALL_LINUX: bash .github/install_bazel.sh\n          # Grab the rootless Bazel installation inside the container.\n          CIBW_ENVIRONMENT_LINUX: PATH=$PATH:$HOME/bin\n          CIBW_TEST_COMMAND: python {project}/bindings/python/google_benchmark/example.py\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/wheels.yml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 34,
                  "endLine": 47,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        name: Install Python 3.12\n        with:\n          python-version: \"3.12\"\n      - run: pip install --upgrade pip uv\n\n      - name: Set up QEMU\n        if: runner.os == 'Linux'\n",
                    "rendered": {
                      "text": "        name: Install Python 3.12\n        with:\n          python-version: \"3.12\"\n      - run: pip install --upgrade pip uv\n\n      - name: Set up QEMU\n        if: runner.os == 'Linux'\n",
                      "markdown": "`        name: Install Python 3.12\n        with:\n          python-version: \"3.12\"\n      - run: pip install --upgrade pip uv\n\n      - name: Set up QEMU\n        if: runner.os == 'Linux'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/wheels.yml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 12,
                  "endLine": 47,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        name: Install Python 3.12\n        with:\n          python-version: \"3.12\"\n      - run: pip install --upgrade pip uv\n\n      - name: Set up QEMU\n        if: runner.os == 'Linux'\n",
                    "rendered": {
                      "text": "        name: Install Python 3.12\n        with:\n          python-version: \"3.12\"\n      - run: pip install --upgrade pip uv\n\n      - name: Set up QEMU\n        if: runner.os == 'Linux'\n",
                      "markdown": "`        name: Install Python 3.12\n        with:\n          python-version: \"3.12\"\n      - run: pip install --upgrade pip uv\n\n      - name: Set up QEMU\n        if: runner.os == 'Linux'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/wheels.yml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 22,
                  "endLine": 22,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.12\"\n      - run: python -m pip install build\n      - name: Build sdist\n        run: python -m build --sdist\n      - uses: actions/upload-artifact@v4\n",
                    "rendered": {
                      "text": "        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.12\"\n      - run: python -m pip install build\n      - name: Build sdist\n        run: python -m build --sdist\n      - uses: actions/upload-artifact@v4\n",
                      "markdown": "`        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.12\"\n      - run: python -m pip install build\n      - name: Build sdist\n        run: python -m build --sdist\n      - uses: actions/upload-artifact@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/install_bazel.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  fi\n  echo \"Downloading $arch Bazel binary from GitHub releases.\"\n  curl -L -o $HOME/bin/bazel --create-dirs \"https://github.com/bazelbuild/bazel/releases/download/7.1.1/bazel-7.1.1-linux-$arch\"\n  chmod +x $HOME/bin/bazel\nelse\n  # Bazel is installed for the correct architecture\n  exit 0\n",
                    "rendered": {
                      "text": "  fi\n  echo \"Downloading $arch Bazel binary from GitHub releases.\"\n  curl -L -o $HOME/bin/bazel --create-dirs \"https://github.com/bazelbuild/bazel/releases/download/7.1.1/bazel-7.1.1-linux-$arch\"\n  chmod +x $HOME/bin/bazel\nelse\n  # Bazel is installed for the correct architecture\n  exit 0\n",
                      "markdown": "`  fi\n  echo \"Downloading $arch Bazel binary from GitHub releases.\"\n  curl -L -o $HOME/bin/bazel --create-dirs \"https://github.com/bazelbuild/bazel/releases/download/7.1.1/bazel-7.1.1-linux-$arch\"\n  chmod +x $HOME/bin/bazel\nelse\n  # Bazel is installed for the correct architecture\n  exit 0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/install_bazel.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    arch=\"arm64\"\n  fi\n  echo \"Downloading $arch Bazel binary from GitHub releases.\"\n  curl -L -o $HOME/bin/bazel --create-dirs \"https://github.com/bazelbuild/bazel/releases/download/7.1.1/bazel-7.1.1-linux-$arch\"\n  chmod +x $HOME/bin/bazel\nelse\n  # Bazel is installed for the correct architecture\n",
                    "rendered": {
                      "text": "    arch=\"arm64\"\n  fi\n  echo \"Downloading $arch Bazel binary from GitHub releases.\"\n  curl -L -o $HOME/bin/bazel --create-dirs \"https://github.com/bazelbuild/bazel/releases/download/7.1.1/bazel-7.1.1-linux-$arch\"\n  chmod +x $HOME/bin/bazel\nelse\n  # Bazel is installed for the correct architecture\n",
                      "markdown": "`    arch=\"arm64\"\n  fi\n  echo \"Downloading $arch Bazel binary from GitHub releases.\"\n  curl -L -o $HOME/bin/bazel --create-dirs \"https://github.com/bazelbuild/bazel/releases/download/7.1.1/bazel-7.1.1-linux-$arch\"\n  chmod +x $HOME/bin/bazel\nelse\n  # Bazel is installed for the correct architecture\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/compare.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 368,
                  "endLine": 97,
                  "endColumn": 372,
                  "snippet": {
                    "text": "the null hypothesis that it is equally likely that a randomly selected value from one sample will be less than or greater than a randomly selected value from a second sample.\\nWARNING: requires **LARGE** (no less than {}) number of repetitions to be meaningful!\\nThe test is being done by default, if at least {} repetitions were done.\\nThis option can disable the U Test.\".format(\n            report.UTEST_OPTIMAL_REPETITIONS, report.UTEST_MIN_REPETITIONS\n        ),\n    )\n    alpha_default = 0.05\n    utest.add_argument(\n        \"--alpha\",\n        dest=\"utest_alpha\",\n        default=alpha_default,\n   ",
                    "rendered": {
                      "text": "the null hypothesis that it is equally likely that a randomly selected value from one sample will be less than or greater than a randomly selected value from a second sample.\\nWARNING: requires **LARGE** (no less than {}) number of repetitions to be meaningful!\\nThe test is being done by default, if at least {} repetitions were done.\\nThis option can disable the U Test.\".format(\n            report.UTEST_OPTIMAL_REPETITIONS, report.UTEST_MIN_REPETITIONS\n        ),\n    )\n    alpha_default = 0.05\n    utest.add_argument(\n        \"--alpha\",\n        dest=\"utest_alpha\",\n        default=alpha_default,\n   ",
                      "markdown": "`the null hypothesis that it is equally likely that a randomly selected value from one sample will be less than or greater than a randomly selected value from a second sample.\\nWARNING: requires **LARGE** (no less than {}) number of repetitions to be meaningful!\\nThe test is being done by default, if at least {} repetitions were done.\\nThis option can disable the U Test.\".format(\n            report.UTEST_OPTIMAL_REPETITIONS, report.UTEST_MIN_REPETITIONS\n        ),\n    )\n    alpha_default = 0.05\n    utest.add_argument(\n        \"--alpha\",\n        dest=\"utest_alpha\",\n        default=alpha_default,\n   `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/compare.py"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 17,
                  "endLine": 327,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    for ln in output_lines:\n        print(ln)\n\n    # Optionally, diff and output to JSON\n    if args.dump_to_json is not None:\n        with open(args.dump_to_json, \"w\") as f_json:\n            json.dump(diff_report, f_json, indent=1)\n",
                    "rendered": {
                      "text": "    for ln in output_lines:\n        print(ln)\n\n    # Optionally, diff and output to JSON\n    if args.dump_to_json is not None:\n        with open(args.dump_to_json, \"w\") as f_json:\n            json.dump(diff_report, f_json, indent=1)\n",
                      "markdown": "`    for ln in output_lines:\n        print(ln)\n\n    # Optionally, diff and output to JSON\n    if args.dump_to_json is not None:\n        with open(args.dump_to_json, \"w\") as f_json:\n            json.dump(diff_report, f_json, indent=1)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bindings/python/google_benchmark/example.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bindings/python/google_benchmark/example.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 35,
                  "endLine": 68,
                  "snippet": {
                    "text": "@benchmark.option.use_manual_time()\ndef manual_timing(state):\n    while state:\n        # Manually count Python CPU time\n        start = time.perf_counter()  # perf_counter_ns() in Python 3.7+\n        # Something to benchmark\n        time.sleep(0.01)\n        end = time.perf_counter()\n",
                    "rendered": {
                      "text": "@benchmark.option.use_manual_time()\ndef manual_timing(state):\n    while state:\n        # Manually count Python CPU time\n        start = time.perf_counter()  # perf_counter_ns() in Python 3.7+\n        # Something to benchmark\n        time.sleep(0.01)\n        end = time.perf_counter()\n",
                      "markdown": "`@benchmark.option.use_manual_time()\ndef manual_timing(state):\n    while state:\n        # Manually count Python CPU time\n        start = time.perf_counter()  # perf_counter_ns() in Python 3.7+\n        # Something to benchmark\n        time.sleep(0.01)\n        end = time.perf_counter()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bindings/python/google_benchmark/example.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 9,
                  "endLine": 50,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        state.pause_timing()\n        random_list = [random.randint(0, 100) for _ in range(100)]\n        state.resume_timing()\n        # Time the in place sorting algorithm\n        random_list.sort()\n\n\n",
                    "rendered": {
                      "text": "        state.pause_timing()\n        random_list = [random.randint(0, 100) for _ in range(100)]\n        state.resume_timing()\n        # Time the in place sorting algorithm\n        random_list.sort()\n\n\n",
                      "markdown": "`        state.pause_timing()\n        random_list = [random.randint(0, 100) for _ in range(100)]\n        state.resume_timing()\n        # Time the in place sorting algorithm\n        random_list.sort()\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bindings/python/google_benchmark/example.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 6,
                  "endLine": 25,
                  "snippet": {
                    "text": "\"\"\"\n\nimport random\nimport time\n\nimport google_benchmark as benchmark\nfrom google_benchmark import Counter\n\n",
                    "rendered": {
                      "text": "\"\"\"\n\nimport random\nimport time\n\nimport google_benchmark as benchmark\nfrom google_benchmark import Counter\n\n",
                      "markdown": "`\"\"\"\n\nimport random\nimport time\n\nimport google_benchmark as benchmark\nfrom google_benchmark import Counter\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bindings/python/google_benchmark/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bazel/benchmark_deps.bzl"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 21,
                  "endLine": 58,
                  "endColumn": 87,
                  "snippet": {
                    "text": "        http_archive(\n            name = \"libpfm\",\n            build_file = str(Label(\"//tools:libpfm.BUILD.bazel\")),\n            sha256 = \"5da5f8872bde14b3634c9688d980f68bda28b510268723cc12973eedbab9fecc\",\n            type = \"tar.gz\",\n            strip_prefix = \"libpfm-4.11.0\",\n            urls = [\"https://sourceforge.net/projects/perfmon2/files/libpfm4/libpfm-4.11.0.tar.gz/download\"],\n",
                    "rendered": {
                      "text": "        http_archive(\n            name = \"libpfm\",\n            build_file = str(Label(\"//tools:libpfm.BUILD.bazel\")),\n            sha256 = \"5da5f8872bde14b3634c9688d980f68bda28b510268723cc12973eedbab9fecc\",\n            type = \"tar.gz\",\n            strip_prefix = \"libpfm-4.11.0\",\n            urls = [\"https://sourceforge.net/projects/perfmon2/files/libpfm4/libpfm-4.11.0.tar.gz/download\"],\n",
                      "markdown": "`        http_archive(\n            name = \"libpfm\",\n            build_file = str(Label(\"//tools:libpfm.BUILD.bazel\")),\n            sha256 = \"5da5f8872bde14b3634c9688d980f68bda28b510268723cc12973eedbab9fecc\",\n            type = \"tar.gz\",\n            strip_prefix = \"libpfm-4.11.0\",\n            urls = [\"https://sourceforge.net/projects/perfmon2/files/libpfm4/libpfm-4.11.0.tar.gz/download\"],\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bazel/benchmark_deps.bzl"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 21,
                  "endLine": 32,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    if \"rules_python\" not in native.existing_rules():\n        http_archive(\n            name = \"rules_python\",\n            sha256 = \"e85ae30de33625a63eca7fc40a94fea845e641888e52f32b6beea91e8b1b2793\",\n            strip_prefix = \"rules_python-0.27.1\",\n            url = \"https://github.com/bazelbuild/rules_python/releases/download/0.27.1/rules_python-0.27.1.tar.gz\",\n        )\n",
                    "rendered": {
                      "text": "    if \"rules_python\" not in native.existing_rules():\n        http_archive(\n            name = \"rules_python\",\n            sha256 = \"e85ae30de33625a63eca7fc40a94fea845e641888e52f32b6beea91e8b1b2793\",\n            strip_prefix = \"rules_python-0.27.1\",\n            url = \"https://github.com/bazelbuild/rules_python/releases/download/0.27.1/rules_python-0.27.1.tar.gz\",\n        )\n",
                      "markdown": "`    if \"rules_python\" not in native.existing_rules():\n        http_archive(\n            name = \"rules_python\",\n            sha256 = \"e85ae30de33625a63eca7fc40a94fea845e641888e52f32b6beea91e8b1b2793\",\n            strip_prefix = \"rules_python-0.27.1\",\n            url = \"https://github.com/bazelbuild/rules_python/releases/download/0.27.1/rules_python-0.27.1.tar.gz\",\n        )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bazel/benchmark_deps.bzl"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 21,
                  "endLine": 24,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    if \"rules_foreign_cc\" not in native.existing_rules():\n        http_archive(\n            name = \"rules_foreign_cc\",\n            sha256 = \"476303bd0f1b04cc311fc258f1708a5f6ef82d3091e53fd1977fa20383425a6a\",\n            strip_prefix = \"rules_foreign_cc-0.10.1\",\n            url = \"https://github.com/bazelbuild/rules_foreign_cc/releases/download/0.10.1/rules_foreign_cc-0.10.1.tar.gz\",\n        )\n",
                    "rendered": {
                      "text": "    if \"rules_foreign_cc\" not in native.existing_rules():\n        http_archive(\n            name = \"rules_foreign_cc\",\n            sha256 = \"476303bd0f1b04cc311fc258f1708a5f6ef82d3091e53fd1977fa20383425a6a\",\n            strip_prefix = \"rules_foreign_cc-0.10.1\",\n            url = \"https://github.com/bazelbuild/rules_foreign_cc/releases/download/0.10.1/rules_foreign_cc-0.10.1.tar.gz\",\n        )\n",
                      "markdown": "`    if \"rules_foreign_cc\" not in native.existing_rules():\n        http_archive(\n            name = \"rules_foreign_cc\",\n            sha256 = \"476303bd0f1b04cc311fc258f1708a5f6ef82d3091e53fd1977fa20383425a6a\",\n            strip_prefix = \"rules_foreign_cc-0.10.1\",\n            url = \"https://github.com/bazelbuild/rules_foreign_cc/releases/download/0.10.1/rules_foreign_cc-0.10.1.tar.gz\",\n        )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bazel/benchmark_deps.bzl"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 21,
                  "endLine": 14,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    if \"bazel_skylib\" not in native.existing_rules():\n        http_archive(\n            name = \"bazel_skylib\",\n            sha256 = \"cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94\",\n            urls = [\n                \"https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\",\n                \"https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\",\n",
                    "rendered": {
                      "text": "    if \"bazel_skylib\" not in native.existing_rules():\n        http_archive(\n            name = \"bazel_skylib\",\n            sha256 = \"cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94\",\n            urls = [\n                \"https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\",\n                \"https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\",\n",
                      "markdown": "`    if \"bazel_skylib\" not in native.existing_rules():\n        http_archive(\n            name = \"bazel_skylib\",\n            sha256 = \"cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94\",\n            urls = [\n                \"https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\",\n                \"https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\",\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/bazel/benchmark_deps.bzl"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 36,
                  "endLine": 54,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        )\n\n    if \"libpfm\" not in native.existing_rules():\n        # Downloaded from v4.9.0 tag at https://sourceforge.net/p/perfmon2/libpfm4/ref/master/tags/\n        http_archive(\n            name = \"libpfm\",\n            build_file = str(Label(\"//tools:libpfm.BUILD.bazel\")),\n",
                    "rendered": {
                      "text": "        )\n\n    if \"libpfm\" not in native.existing_rules():\n        # Downloaded from v4.9.0 tag at https://sourceforge.net/p/perfmon2/libpfm4/ref/master/tags/\n        http_archive(\n            name = \"libpfm\",\n            build_file = str(Label(\"//tools:libpfm.BUILD.bazel\")),\n",
                      "markdown": "`        )\n\n    if \"libpfm\" not in native.existing_rules():\n        # Downloaded from v4.9.0 tag at https://sourceforge.net/p/perfmon2/libpfm4/ref/master/tags/\n        http_archive(\n            name = \"libpfm\",\n            build_file = str(Label(\"//tools:libpfm.BUILD.bazel\")),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/output_test_helper.cc"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 25,
                  "endLine": 486,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nstatic std::string GetTempFileName() {\n  // This function attempts to avoid race conditions where two tests\n  // create the same file at the same time. However, it still introduces races\n  // similar to tmpnam.\n  int retries = 3;\n  while (--retries) {\n",
                    "rendered": {
                      "text": "\nstatic std::string GetTempFileName() {\n  // This function attempts to avoid race conditions where two tests\n  // create the same file at the same time. However, it still introduces races\n  // similar to tmpnam.\n  int retries = 3;\n  while (--retries) {\n",
                      "markdown": "`\nstatic std::string GetTempFileName() {\n  // This function attempts to avoid race conditions where two tests\n  // create the same file at the same time. However, it still introduces races\n  // similar to tmpnam.\n  int retries = 3;\n  while (--retries) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/output_test_helper.cc"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 30,
                  "endLine": 341,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  if (*unit == \"s\") {\n    return val;\n  }\n  BM_CHECK(1 == 0) << \"unknown time unit: \" << *unit;\n  return 0;\n}\n\n",
                    "rendered": {
                      "text": "  if (*unit == \"s\") {\n    return val;\n  }\n  BM_CHECK(1 == 0) << \"unknown time unit: \" << *unit;\n  return 0;\n}\n\n",
                      "markdown": "`  if (*unit == \"s\") {\n    return val;\n  }\n  BM_CHECK(1 == 0) << \"unknown time unit: \" << *unit;\n  return 0;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/output_test_helper.cc"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 20,
                  "endLine": 108,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      first_line = line;\n      on_first = false;\n    }\n    for (const auto& NC : not_checks) {\n      BM_CHECK(!NC.regex->Match(line))\n          << \"Unexpected match for line \\\"\" << line << \"\\\" for MR_Not regex \\\"\"\n          << NC.regex_str << \"\\\"\"\n",
                    "rendered": {
                      "text": "      first_line = line;\n      on_first = false;\n    }\n    for (const auto& NC : not_checks) {\n      BM_CHECK(!NC.regex->Match(line))\n          << \"Unexpected match for line \\\"\" << line << \"\\\" for MR_Not regex \\\"\"\n          << NC.regex_str << \"\\\"\"\n",
                      "markdown": "`      first_line = line;\n      on_first = false;\n    }\n    for (const auto& NC : not_checks) {\n      BM_CHECK(!NC.regex->Match(line))\n          << \"Unexpected match for line \\\"\" << line << \"\\\" for MR_Not regex \\\"\"\n          << NC.regex_str << \"\\\"\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/benchmark_min_time_flag_time_test.cc"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 36,
                  "endLine": 12,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n#include \"benchmark/benchmark.h\"\n\n// Tests that we can specify the min time with\n// --benchmark_min_time=<NUM> (no suffix needed) OR\n// --benchmark_min_time=<NUM>s\nnamespace {\n",
                    "rendered": {
                      "text": "\n#include \"benchmark/benchmark.h\"\n\n// Tests that we can specify the min time with\n// --benchmark_min_time=<NUM> (no suffix needed) OR\n// --benchmark_min_time=<NUM>s\nnamespace {\n",
                      "markdown": "`\n#include \"benchmark/benchmark.h\"\n\n// Tests that we can specify the min time with\n// --benchmark_min_time=<NUM> (no suffix needed) OR\n// --benchmark_min_time=<NUM>s\nnamespace {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/fixture_test.cc"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 15,
                  "endLine": 43,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    assert(*data == 42);\n  }\n  for (auto _ : st) {\n    assert(data.get() != nullptr);\n    assert(*data == 42);\n  }\n  st.SetItemsProcessed(st.range(0));\n",
                    "rendered": {
                      "text": "    assert(*data == 42);\n  }\n  for (auto _ : st) {\n    assert(data.get() != nullptr);\n    assert(*data == 42);\n  }\n  st.SetItemsProcessed(st.range(0));\n",
                      "markdown": "`    assert(*data == 42);\n  }\n  for (auto _ : st) {\n    assert(data.get() != nullptr);\n    assert(*data == 42);\n  }\n  st.SetItemsProcessed(st.range(0));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/fixture_test.cc"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "endLine": 39,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nBENCHMARK_DEFINE_F(FIXTURE_BECHMARK_NAME, Bar)(benchmark::State& st) {\n  if (st.thread_index() == 0) {\n    assert(data.get() != nullptr);\n    assert(*data == 42);\n  }\n  for (auto _ : st) {\n",
                    "rendered": {
                      "text": "\nBENCHMARK_DEFINE_F(FIXTURE_BECHMARK_NAME, Bar)(benchmark::State& st) {\n  if (st.thread_index() == 0) {\n    assert(data.get() != nullptr);\n    assert(*data == 42);\n  }\n  for (auto _ : st) {\n",
                      "markdown": "`\nBENCHMARK_DEFINE_F(FIXTURE_BECHMARK_NAME, Bar)(benchmark::State& st) {\n  if (st.thread_index() == 0) {\n    assert(data.get() != nullptr);\n    assert(*data == 42);\n  }\n  for (auto _ : st) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/fixture_test.cc"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 13,
                  "endLine": 31,
                  "endColumn": 18,
                  "snippet": {
                    "text": "};\n\nBENCHMARK_F(FIXTURE_BECHMARK_NAME, Foo)(benchmark::State& st) {\n  assert(data.get() != nullptr);\n  assert(*data == 42);\n  for (auto _ : st) {\n  }\n",
                    "rendered": {
                      "text": "};\n\nBENCHMARK_F(FIXTURE_BECHMARK_NAME, Foo)(benchmark::State& st) {\n  assert(data.get() != nullptr);\n  assert(*data == 42);\n  for (auto _ : st) {\n  }\n",
                      "markdown": "`};\n\nBENCHMARK_F(FIXTURE_BECHMARK_NAME, Foo)(benchmark::State& st) {\n  assert(data.get() != nullptr);\n  assert(*data == 42);\n  for (auto _ : st) {\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/fixture_test.cc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 17,
                  "endLine": 20,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n  void TearDown(const ::benchmark::State& state) override {\n    if (state.thread_index() == 0) {\n      assert(data.get() != nullptr);\n      data.reset();\n    }\n  }\n",
                    "rendered": {
                      "text": "\n  void TearDown(const ::benchmark::State& state) override {\n    if (state.thread_index() == 0) {\n      assert(data.get() != nullptr);\n      data.reset();\n    }\n  }\n",
                      "markdown": "`\n  void TearDown(const ::benchmark::State& state) override {\n    if (state.thread_index() == 0) {\n      assert(data.get() != nullptr);\n      data.reset();\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/fixture_test.cc"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 17,
                  "endLine": 13,
                  "endColumn": 22,
                  "snippet": {
                    "text": " public:\n  void SetUp(const ::benchmark::State& state) override {\n    if (state.thread_index() == 0) {\n      assert(data.get() == nullptr);\n      data.reset(new int(42));\n    }\n  }\n",
                    "rendered": {
                      "text": " public:\n  void SetUp(const ::benchmark::State& state) override {\n    if (state.thread_index() == 0) {\n      assert(data.get() == nullptr);\n      data.reset(new int(42));\n    }\n  }\n",
                      "markdown": "` public:\n  void SetUp(const ::benchmark::State& state) override {\n    if (state.thread_index() == 0) {\n      assert(data.get() == nullptr);\n      data.reset(new int(42));\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/memory_manager_test.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 37,
                  "endLine": 44,
                  "endColumn": 42,
                  "snippet": {
                    "text": "int main(int argc, char* argv[]) {\n  std::unique_ptr<benchmark::MemoryManager> mm(new TestMemoryManager());\n\n  benchmark::RegisterMemoryManager(mm.get());\n  RunOutputTests(argc, argv);\n  benchmark::RegisterMemoryManager(nullptr);\n}\n",
                    "rendered": {
                      "text": "int main(int argc, char* argv[]) {\n  std::unique_ptr<benchmark::MemoryManager> mm(new TestMemoryManager());\n\n  benchmark::RegisterMemoryManager(mm.get());\n  RunOutputTests(argc, argv);\n  benchmark::RegisterMemoryManager(nullptr);\n}\n",
                      "markdown": "`int main(int argc, char* argv[]) {\n  std::unique_ptr<benchmark::MemoryManager> mm(new TestMemoryManager());\n\n  benchmark::RegisterMemoryManager(mm.get());\n  RunOutputTests(argc, argv);\n  benchmark::RegisterMemoryManager(nullptr);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/reporter_output_test.cc"
                },
                "region": {
                  "startLine": 970,
                  "startColumn": 61,
                  "endLine": 970,
                  "endColumn": 67,
                  "snippet": {
                    "text": "// clang-format on\n\n// check that UserPercent-provided stats is calculated, and is after the\n// default-ones empty string as name is intentional, it would sort before\n// anything else\nADD_CASES(TC_ConsoleOut,\n          {{\"^BM_UserPercentStats/iterations:5/repeats:3/manual_time [ \"\n",
                    "rendered": {
                      "text": "// clang-format on\n\n// check that UserPercent-provided stats is calculated, and is after the\n// default-ones empty string as name is intentional, it would sort before\n// anything else\nADD_CASES(TC_ConsoleOut,\n          {{\"^BM_UserPercentStats/iterations:5/repeats:3/manual_time [ \"\n",
                      "markdown": "`// clang-format on\n\n// check that UserPercent-provided stats is calculated, and is after the\n// default-ones empty string as name is intentional, it would sort before\n// anything else\nADD_CASES(TC_ConsoleOut,\n          {{\"^BM_UserPercentStats/iterations:5/repeats:3/manual_time [ \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/reporter_output_test.cc"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 48,
                  "endLine": 838,
                  "endColumn": 54,
                  "snippet": {
                    "text": "// clang-format on\n\n// check that user-provided stats is calculated, and is after the default-ones\n// empty string as name is intentional, it would sort before anything else\nADD_CASES(TC_ConsoleOut, {{\"^BM_UserStats/iterations:5/repeats:3/manual_time [ \"\n                           \"]* 150 ns %time [ ]*5$\"},\n                          {\"^BM_UserStats/iterations:5/repeats:3/manual_time [ \"\n",
                    "rendered": {
                      "text": "// clang-format on\n\n// check that user-provided stats is calculated, and is after the default-ones\n// empty string as name is intentional, it would sort before anything else\nADD_CASES(TC_ConsoleOut, {{\"^BM_UserStats/iterations:5/repeats:3/manual_time [ \"\n                           \"]* 150 ns %time [ ]*5$\"},\n                          {\"^BM_UserStats/iterations:5/repeats:3/manual_time [ \"\n",
                      "markdown": "`// clang-format on\n\n// check that user-provided stats is calculated, and is after the default-ones\n// empty string as name is intentional, it would sort before anything else\nADD_CASES(TC_ConsoleOut, {{\"^BM_UserStats/iterations:5/repeats:3/manual_time [ \"\n                           \"]* 150 ns %time [ ]*5$\"},\n                          {\"^BM_UserStats/iterations:5/repeats:3/manual_time [ \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/reporter_output_test.cc"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 27,
                  "endLine": 759,
                  "endColumn": 33,
                  "snippet": {
                    "text": "           {\"^\\\"BM_SummaryDisplay/repeats:2_median\\\",%csv_report$\"},\n           {\"^\\\"BM_SummaryDisplay/repeats:2_stddev\\\",%csv_report$\"}});\n\n// Test repeats with custom time unit.\nvoid BM_RepeatTimeUnit(benchmark::State& state) {\n  for (auto _ : state) {\n  }\n",
                    "rendered": {
                      "text": "           {\"^\\\"BM_SummaryDisplay/repeats:2_median\\\",%csv_report$\"},\n           {\"^\\\"BM_SummaryDisplay/repeats:2_stddev\\\",%csv_report$\"}});\n\n// Test repeats with custom time unit.\nvoid BM_RepeatTimeUnit(benchmark::State& state) {\n  for (auto _ : state) {\n  }\n",
                      "markdown": "`           {\"^\\\"BM_SummaryDisplay/repeats:2_median\\\",%csv_report$\"},\n           {\"^\\\"BM_SummaryDisplay/repeats:2_stddev\\\",%csv_report$\"}});\n\n// Test repeats with custom time unit.\nvoid BM_RepeatTimeUnit(benchmark::State& state) {\n  for (auto _ : state) {\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/reporter_output_test.cc"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 40,
                  "endLine": 411,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_Complexity_O1(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_Complexity_O1(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_Complexity_O1(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/reporter_output_test.cc"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 35,
                  "endLine": 186,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                       \"label\\\"%csv_label_report_end$\"}});\n\n// ========================================================================= //\n// ------------------------ Testing Time Label Output ---------------------- //\n// ========================================================================= //\n\nvoid BM_time_label_nanosecond(benchmark::State& state) {\n",
                    "rendered": {
                      "text": "                       \"label\\\"%csv_label_report_end$\"}});\n\n// ========================================================================= //\n// ------------------------ Testing Time Label Output ---------------------- //\n// ========================================================================= //\n\nvoid BM_time_label_nanosecond(benchmark::State& state) {\n",
                      "markdown": "`                       \"label\\\"%csv_label_report_end$\"}});\n\n// ========================================================================= //\n// ------------------------ Testing Time Label Output ---------------------- //\n// ========================================================================= //\n\nvoid BM_time_label_nanosecond(benchmark::State& state) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/reporter_output_test.cc"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 40,
                  "endLine": 130,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_items_per_second(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_items_per_second(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_items_per_second(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/reporter_output_test.cc"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 40,
                  "endLine": 98,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nvoid BM_bytes_per_second(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                    "rendered": {
                      "text": "\nvoid BM_bytes_per_second(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n",
                      "markdown": "`\nvoid BM_bytes_per_second(benchmark::State& state) {\n  for (auto _ : state) {\n    // This test requires a non-zero CPU time to avoid divide-by-zero\n    auto iterations = double(state.iterations()) * double(state.iterations());\n    benchmark::DoNotOptimize(iterations);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/reporter_output_test.cc"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 41,
                  "endLine": 14,
                  "endColumn": 47,
                  "snippet": {
                    "text": "// ========================================================================= //\n\nADD_CASES(TC_ConsoleOut, {{\"^[-]+$\", MR_Next},\n                          {\"^Benchmark %s Time %s CPU %s Iterations$\", MR_Next},\n                          {\"^[-]+$\", MR_Next}});\nstatic int AddContextCases() {\n  AddCases(TC_ConsoleErr,\n",
                    "rendered": {
                      "text": "// ========================================================================= //\n\nADD_CASES(TC_ConsoleOut, {{\"^[-]+$\", MR_Next},\n                          {\"^Benchmark %s Time %s CPU %s Iterations$\", MR_Next},\n                          {\"^[-]+$\", MR_Next}});\nstatic int AddContextCases() {\n  AddCases(TC_ConsoleErr,\n",
                      "markdown": "`// ========================================================================= //\n\nADD_CASES(TC_ConsoleOut, {{\"^[-]+$\", MR_Next},\n                          {\"^Benchmark %s Time %s CPU %s Iterations$\", MR_Next},\n                          {\"^[-]+$\", MR_Next}});\nstatic int AddContextCases() {\n  AddCases(TC_ConsoleErr,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/reducing_variance.md"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 2,
                  "endLine": 82,
                  "endColumn": 11,
                  "snippet": {
                    "text": "   for more information.\n2. Set the benchmark program's task affinity to a fixed cpu.  For example:\n   ```sh\n   taskset -c 0 ./mybenchmark\n   ```\n3. Disabling Hyperthreading/SMT.  This can be done in the Bios or using the\n   `/sys` file system (see the LLVM project's [Benchmarking\n",
                    "rendered": {
                      "text": "   for more information.\n2. Set the benchmark program's task affinity to a fixed cpu.  For example:\n   ```sh\n   taskset -c 0 ./mybenchmark\n   ```\n3. Disabling Hyperthreading/SMT.  This can be done in the Bios or using the\n   `/sys` file system (see the LLVM project's [Benchmarking\n",
                      "markdown": "`   for more information.\n2. Set the benchmark program's task affinity to a fixed cpu.  For example:\n   ```sh\n   taskset -c 0 ./mybenchmark\n   ```\n3. Disabling Hyperthreading/SMT.  This can be done in the Bios or using the\n   `/sys` file system (see the LLVM project's [Benchmarking\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/reducing_variance.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 16,
                  "endLine": 75,
                  "endColumn": 21,
                  "snippet": {
                    "text": "above](user_guide#disabling-cpu-frequency-scaling).\n1. Disable processor boosting by:\n   ```sh\n   echo 0 | sudo tee /sys/devices/system/cpu/cpufreq/boost\n   ```\n   See the Linux kernel's\n   [boost.txt](https://www.kernel.org/doc/Documentation/cpu-freq/boost.txt)\n",
                    "rendered": {
                      "text": "above](user_guide#disabling-cpu-frequency-scaling).\n1. Disable processor boosting by:\n   ```sh\n   echo 0 | sudo tee /sys/devices/system/cpu/cpufreq/boost\n   ```\n   See the Linux kernel's\n   [boost.txt](https://www.kernel.org/doc/Documentation/cpu-freq/boost.txt)\n",
                      "markdown": "`above](user_guide#disabling-cpu-frequency-scaling).\n1. Disable processor boosting by:\n   ```sh\n   echo 0 | sudo tee /sys/devices/system/cpu/cpufreq/boost\n   ```\n   See the Linux kernel's\n   [boost.txt](https://www.kernel.org/doc/Documentation/cpu-freq/boost.txt)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/reducing_variance.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 36,
                  "endLine": 50,
                  "endColumn": 42,
                  "snippet": {
                    "text": "include:\n\n1. On multi-core machines not all CPUs/CPU cores/CPU threads run the same\n   speed, so running a benchmark one time and then again may give a\n   different result depending on which CPU it ran on.\n2. CPU scaling features that run on the CPU, like Intel's Turbo Boost and\n   AMD Turbo Core and Precision Boost, can temporarily change the CPU\n",
                    "rendered": {
                      "text": "include:\n\n1. On multi-core machines not all CPUs/CPU cores/CPU threads run the same\n   speed, so running a benchmark one time and then again may give a\n   different result depending on which CPU it ran on.\n2. CPU scaling features that run on the CPU, like Intel's Turbo Boost and\n   AMD Turbo Core and Precision Boost, can temporarily change the CPU\n",
                      "markdown": "`include:\n\n1. On multi-core machines not all CPUs/CPU cores/CPU threads run the same\n   speed, so running a benchmark one time and then again may give a\n   different result depending on which CPU it ran on.\n2. CPU scaling features that run on the CPU, like Intel's Turbo Boost and\n   AMD Turbo Core and Precision Boost, can temporarily change the CPU\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/reducing_variance.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 56,
                  "endLine": 10,
                  "endColumn": 62,
                  "snippet": {
                    "text": "If you see this error:\n\n```\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.\n```\n\nyou might want to disable the CPU frequency scaling while running the\n",
                    "rendered": {
                      "text": "If you see this error:\n\n```\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.\n```\n\nyou might want to disable the CPU frequency scaling while running the\n",
                      "markdown": "`If you see this error:\n\n```\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.\n```\n\nyou might want to disable the CPU frequency scaling while running the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/perf_counters.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 7,
                  "endLine": 19,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  dependency via Bazel.\n\nThe feature does not require modifying benchmark code. Counter collection is\nhandled at the boundaries where timer collection is also handled. \n\nTo opt-in:\n* If using a Bazel build, add `--define pfm=1` to your build flags\n",
                    "rendered": {
                      "text": "  dependency via Bazel.\n\nThe feature does not require modifying benchmark code. Counter collection is\nhandled at the boundaries where timer collection is also handled. \n\nTo opt-in:\n* If using a Bazel build, add `--define pfm=1` to your build flags\n",
                      "markdown": "`  dependency via Bazel.\n\nThe feature does not require modifying benchmark code. Counter collection is\nhandled at the boundaries where timer collection is also handled. \n\nTo opt-in:\n* If using a Bazel build, add `--define pfm=1` to your build flags\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182,
                  "endColumn": 54,
                  "snippet": {
                    "text": "## Running a Subset of Benchmarks\n\nThe `--benchmark_filter=<regex>` option (or `BENCHMARK_FILTER=<regex>`\nenvironment variable) can be used to only run the benchmarks that match\nthe specified `<regex>`. For example:\n\n```bash\n",
                    "rendered": {
                      "text": "## Running a Subset of Benchmarks\n\nThe `--benchmark_filter=<regex>` option (or `BENCHMARK_FILTER=<regex>`\nenvironment variable) can be used to only run the benchmarks that match\nthe specified `<regex>`. For example:\n\n```bash\n",
                      "markdown": "`## Running a Subset of Benchmarks\n\nThe `--benchmark_filter=<regex>` option (or `BENCHMARK_FILTER=<regex>`\nenvironment variable) can be used to only run the benchmarks that match\nthe specified `<regex>`. For example:\n\n```bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 1206,
                  "startColumn": 45,
                  "endLine": 1206,
                  "endColumn": 49,
                  "snippet": {
                    "text": "Users must explicitly exit the loop, otherwise all iterations will be performed.\nUsers may explicitly return to exit the benchmark immediately.\n\nThe `SkipWithError(...)` function may be used at any point within the benchmark,\nincluding before and after the benchmark loop. Moreover, if `SkipWithError(...)`\nhas been used, it is not required to reach the benchmark loop and one may return\nfrom the benchmark function early.\n",
                    "rendered": {
                      "text": "Users must explicitly exit the loop, otherwise all iterations will be performed.\nUsers may explicitly return to exit the benchmark immediately.\n\nThe `SkipWithError(...)` function may be used at any point within the benchmark,\nincluding before and after the benchmark loop. Moreover, if `SkipWithError(...)`\nhas been used, it is not required to reach the benchmark loop and one may return\nfrom the benchmark function early.\n",
                      "markdown": "`Users must explicitly exit the loop, otherwise all iterations will be performed.\nUsers may explicitly return to exit the benchmark immediately.\n\nThe `SkipWithError(...)` function may be used at any point within the benchmark,\nincluding before and after the benchmark loop. Moreover, if `SkipWithError(...)`\nhas been used, it is not required to reach the benchmark loop and one may return\nfrom the benchmark function early.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 66,
                  "endLine": 1174,
                  "endColumn": 70,
                  "snippet": {
                    "text": "pointer to a new benchmark with the specified `name` that invokes\n`func(st, args...)` where `st` is a `benchmark::State` object.\n\nUnlike the `BENCHMARK` registration macros, which can only be used at the global\nscope, the `RegisterBenchmark` can be called anywhere. This allows for\nbenchmark tests to be registered programmatically.\n\n",
                    "rendered": {
                      "text": "pointer to a new benchmark with the specified `name` that invokes\n`func(st, args...)` where `st` is a `benchmark::State` object.\n\nUnlike the `BENCHMARK` registration macros, which can only be used at the global\nscope, the `RegisterBenchmark` can be called anywhere. This allows for\nbenchmark tests to be registered programmatically.\n\n",
                      "markdown": "`pointer to a new benchmark with the specified `name` that invokes\n`func(st, args...)` where `st` is a `benchmark::State` object.\n\nUnlike the `BENCHMARK` registration macros, which can only be used at the global\nscope, the `RegisterBenchmark` can be called anywhere. This allows for\nbenchmark tests to be registered programmatically.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 60,
                  "endLine": 1158,
                  "endColumn": 64,
                  "snippet": {
                    "text": "method that allows a custom `ProfilerManager` to be injected.\n\nIf set, the `ProfilerManager::AfterSetupStart` and\n`ProfilerManager::BeforeTeardownStop` methods will be called at the start and\nend of a separate benchmark run to allow user code to collect and report\nuser-provided profile metrics.\n\n",
                    "rendered": {
                      "text": "method that allows a custom `ProfilerManager` to be injected.\n\nIf set, the `ProfilerManager::AfterSetupStart` and\n`ProfilerManager::BeforeTeardownStop` methods will be called at the start and\nend of a separate benchmark run to allow user code to collect and report\nuser-provided profile metrics.\n\n",
                      "markdown": "`method that allows a custom `ProfilerManager` to be injected.\n\nIf set, the `ProfilerManager::AfterSetupStart` and\n`ProfilerManager::BeforeTeardownStop` methods will be called at the start and\nend of a separate benchmark run to allow user code to collect and report\nuser-provided profile metrics.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 1143,
                  "startColumn": 6,
                  "endLine": 1143,
                  "endColumn": 10,
                  "snippet": {
                    "text": "method that allows a custom `MemoryManager` to be injected.\n\nIf set, the `MemoryManager::Start` and `MemoryManager::Stop` methods will be\ncalled at the start and end of benchmark runs to allow user code to fill out\na report on the number of allocations, bytes used, etc.\n\nThis data will then be reported alongside other performance data, currently\n",
                    "rendered": {
                      "text": "method that allows a custom `MemoryManager` to be injected.\n\nIf set, the `MemoryManager::Start` and `MemoryManager::Stop` methods will be\ncalled at the start and end of benchmark runs to allow user code to fill out\na report on the number of allocations, bytes used, etc.\n\nThis data will then be reported alongside other performance data, currently\n",
                      "markdown": "`method that allows a custom `MemoryManager` to be injected.\n\nIf set, the `MemoryManager::Start` and `MemoryManager::Stop` methods will be\ncalled at the start and end of benchmark runs to allow user code to fill out\na report on the number of allocations, bytes used, etc.\n\nThis data will then be reported alongside other performance data, currently\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 70,
                  "endLine": 760,
                  "snippet": {
                    "text": "\n### Counter Reporting\n\nWhen using the console reporter, by default, user counters are printed at\nthe end after the table, the same way as ``bytes_processed`` and\n``items_processed``. This is best for cases in which there are few counters,\nor where there are only a couple of lines per benchmark. Here's an example of\nthe default output:\n",
                    "rendered": {
                      "text": "\n### Counter Reporting\n\nWhen using the console reporter, by default, user counters are printed at\nthe end after the table, the same way as ``bytes_processed`` and\n``items_processed``. This is best for cases in which there are few counters,\nor where there are only a couple of lines per benchmark. Here's an example of\nthe default output:\n",
                      "markdown": "`\n### Counter Reporting\n\nWhen using the console reporter, by default, user counters are printed at\nthe end after the table, the same way as ``bytes_processed`` and\n``items_processed``. This is best for cases in which there are few counters,\nor where there are only a couple of lines per benchmark. Here's an example of\nthe default output:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 10,
                  "endLine": 270,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nAverage timings are then reported over the iterations run. If multiple\nrepetitions are requested using the `--benchmark_repetitions` command-line\noption, or at registration time, the benchmark function will be run several\ntimes and statistical results across these repetitions will also be reported.\n\nAs well as the per-benchmark entries, a preamble in the report will include\n",
                    "rendered": {
                      "text": "\nAverage timings are then reported over the iterations run. If multiple\nrepetitions are requested using the `--benchmark_repetitions` command-line\noption, or at registration time, the benchmark function will be run several\ntimes and statistical results across these repetitions will also be reported.\n\nAs well as the per-benchmark entries, a preamble in the report will include\n",
                      "markdown": "`\nAverage timings are then reported over the iterations run. If multiple\nrepetitions are requested using the `--benchmark_repetitions` command-line\noption, or at registration time, the benchmark function will be run several\ntimes and statistical results across these repetitions will also be reported.\n\nAs well as the per-benchmark entries, a preamble in the report will include\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 13,
                  "endLine": 251,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\n",
                    "rendered": {
                      "text": "\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\n",
                      "markdown": "`\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 10,
                  "endLine": 201,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nIt is possible to temporarily disable benchmarks by renaming the benchmark\nfunction to have the prefix \"DISABLED_\". This will cause the benchmark to\nbe skipped at runtime.\n\n<a name=\"result-comparison\" />\n\n",
                    "rendered": {
                      "text": "\nIt is possible to temporarily disable benchmarks by renaming the benchmark\nfunction to have the prefix \"DISABLED_\". This will cause the benchmark to\nbe skipped at runtime.\n\n<a name=\"result-comparison\" />\n\n",
                      "markdown": "`\nIt is possible to temporarily disable benchmarks by renaming the benchmark\nfunction to have the prefix \"DISABLED_\". This will cause the benchmark to\nbe skipped at runtime.\n\n<a name=\"result-comparison\" />\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 1311,
                  "startColumn": 56,
                  "endLine": 1311,
                  "endColumn": 62,
                  "snippet": {
                    "text": "If you see this error:\n\n```\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may\nbe noisy and will incur extra overhead.\n```\n\n",
                    "rendered": {
                      "text": "If you see this error:\n\n```\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may\nbe noisy and will incur extra overhead.\n```\n\n",
                      "markdown": "`If you see this error:\n\n```\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may\nbe noisy and will incur extra overhead.\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 1115,
                  "startColumn": 46,
                  "endLine": 1115,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  ->Arg(512);\n```\n\nWhile usually the statistics produce values in time units,\nyou can also produce percentages:\n\n```c++\n",
                    "rendered": {
                      "text": "  ->Arg(512);\n```\n\nWhile usually the statistics produce values in time units,\nyou can also produce percentages:\n\n```c++\n",
                      "markdown": "`  ->Arg(512);\n```\n\nWhile usually the statistics produce values in time units,\nyou can also produce percentages:\n\n```c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 996,
                  "startColumn": 28,
                  "endLine": 996,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nAdditionally the default time unit can be set globally with the\n`--benchmark_time_unit={ns|us|ms|s}` command line argument. The argument only\naffects benchmarks where the time unit is not set explicitly.\n\n<a name=\"preventing-optimization\" />\n\n",
                    "rendered": {
                      "text": "\nAdditionally the default time unit can be set globally with the\n`--benchmark_time_unit={ns|us|ms|s}` command line argument. The argument only\naffects benchmarks where the time unit is not set explicitly.\n\n<a name=\"preventing-optimization\" />\n\n",
                      "markdown": "`\nAdditionally the default time unit can be set globally with the\n`--benchmark_time_unit={ns|us|ms|s}` command line argument. The argument only\naffects benchmarks where the time unit is not set explicitly.\n\n<a name=\"preventing-optimization\" />\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 24,
                  "endLine": 994,
                  "endColumn": 30,
                  "snippet": {
                    "text": "BENCHMARK(BM_test)->Unit(benchmark::kMillisecond);\n```\n\nAdditionally the default time unit can be set globally with the\n`--benchmark_time_unit={ns|us|ms|s}` command line argument. The argument only\naffects benchmarks where the time unit is not set explicitly.\n\n",
                    "rendered": {
                      "text": "BENCHMARK(BM_test)->Unit(benchmark::kMillisecond);\n```\n\nAdditionally the default time unit can be set globally with the\n`--benchmark_time_unit={ns|us|ms|s}` command line argument. The argument only\naffects benchmarks where the time unit is not set explicitly.\n\n",
                      "markdown": "`BENCHMARK(BM_test)->Unit(benchmark::kMillisecond);\n```\n\nAdditionally the default time unit can be set globally with the\n`--benchmark_time_unit={ns|us|ms|s}` command line argument. The argument only\naffects benchmarks where the time unit is not set explicitly.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 988,
                  "startColumn": 25,
                  "endLine": 988,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nIf a benchmark runs a few milliseconds it may be hard to visually compare the\nmeasured times, since the output data is given in nanoseconds per default. In\norder to manually set the time unit, you can specify it manually:\n\n```c++\nBENCHMARK(BM_test)->Unit(benchmark::kMillisecond);\n",
                    "rendered": {
                      "text": "\nIf a benchmark runs a few milliseconds it may be hard to visually compare the\nmeasured times, since the output data is given in nanoseconds per default. In\norder to manually set the time unit, you can specify it manually:\n\n```c++\nBENCHMARK(BM_test)->Unit(benchmark::kMillisecond);\n",
                      "markdown": "`\nIf a benchmark runs a few milliseconds it may be hard to visually compare the\nmeasured times, since the output data is given in nanoseconds per default. In\norder to manually set the time unit, you can specify it manually:\n\n```c++\nBENCHMARK(BM_test)->Unit(benchmark::kMillisecond);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 984,
                  "startColumn": 14,
                  "endLine": 984,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n<a name=\"setting-the-time-unit\" />\n\n## Setting the Time Unit\n\nIf a benchmark runs a few milliseconds it may be hard to visually compare the\nmeasured times, since the output data is given in nanoseconds per default. In\n",
                    "rendered": {
                      "text": "\n<a name=\"setting-the-time-unit\" />\n\n## Setting the Time Unit\n\nIf a benchmark runs a few milliseconds it may be hard to visually compare the\nmeasured times, since the output data is given in nanoseconds per default. In\n",
                      "markdown": "`\n<a name=\"setting-the-time-unit\" />\n\n## Setting the Time Unit\n\nIf a benchmark runs a few milliseconds it may be hard to visually compare the\nmeasured times, since the output data is given in nanoseconds per default. In\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 32,
                  "endLine": 955,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nAn example use case for this is benchmarking GPU execution (e.g. OpenCL\nor CUDA kernels, OpenGL or Vulkan or Direct3D draw calls), which cannot\nbe accurately measured using CPU time or real-time. Instead, they can be\nmeasured accurately using a dedicated API, and these measurement results\ncan be reported back with `SetIterationTime`.\n\n",
                    "rendered": {
                      "text": "\nAn example use case for this is benchmarking GPU execution (e.g. OpenCL\nor CUDA kernels, OpenGL or Vulkan or Direct3D draw calls), which cannot\nbe accurately measured using CPU time or real-time. Instead, they can be\nmeasured accurately using a dedicated API, and these measurement results\ncan be reported back with `SetIterationTime`.\n\n",
                      "markdown": "`\nAn example use case for this is benchmarking GPU execution (e.g. OpenCL\nor CUDA kernels, OpenGL or Vulkan or Direct3D draw calls), which cannot\nbe accurately measured using CPU time or real-time. Instead, they can be\nmeasured accurately using a dedicated API, and these measurement results\ncan be reported back with `SetIterationTime`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 945,
                  "startColumn": 48,
                  "endLine": 945,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n## Manual Timing\n\nFor benchmarking something for which neither CPU time nor real-time are\ncorrect or accurate enough, completely manual timing is supported using\nthe `UseManualTime` function.\n\n",
                    "rendered": {
                      "text": "\n## Manual Timing\n\nFor benchmarking something for which neither CPU time nor real-time are\ncorrect or accurate enough, completely manual timing is supported using\nthe `UseManualTime` function.\n\n",
                      "markdown": "`\n## Manual Timing\n\nFor benchmarking something for which neither CPU time nor real-time are\ncorrect or accurate enough, completely manual timing is supported using\nthe `UseManualTime` function.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 53,
                  "endLine": 921,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nNormally, the entire duration of the work loop (`for (auto _ : state) {}`)\nis measured. But sometimes, it is necessary to do some work inside of\nthat loop, every iteration, but without counting that time to the benchmark time.\nThat is possible, although it is not recommended, since it has high overhead.\n\n<!-- {% raw %} -->\n",
                    "rendered": {
                      "text": "\nNormally, the entire duration of the work loop (`for (auto _ : state) {}`)\nis measured. But sometimes, it is necessary to do some work inside of\nthat loop, every iteration, but without counting that time to the benchmark time.\nThat is possible, although it is not recommended, since it has high overhead.\n\n<!-- {% raw %} -->\n",
                      "markdown": "`\nNormally, the entire duration of the work loop (`for (auto _ : state) {}`)\nis measured. But sometimes, it is necessary to do some work inside of\nthat loop, every iteration, but without counting that time to the benchmark time.\nThat is possible, although it is not recommended, since it has high overhead.\n\n<!-- {% raw %} -->\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 909,
                  "startColumn": 2,
                  "endLine": 909,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n// Measure the total CPU consumption, use it to decide for how long to\n// run the benchmark loop. This will always measure to no less than the\n// time spent by the main thread in single-threaded case.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10)->MeasureProcessCPUTime();\n\n// A mixture of the last two. Measure the total CPU consumption, but use the\n",
                    "rendered": {
                      "text": "\n// Measure the total CPU consumption, use it to decide for how long to\n// run the benchmark loop. This will always measure to no less than the\n// time spent by the main thread in single-threaded case.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10)->MeasureProcessCPUTime();\n\n// A mixture of the last two. Measure the total CPU consumption, but use the\n",
                      "markdown": "`\n// Measure the total CPU consumption, use it to decide for how long to\n// run the benchmark loop. This will always measure to no less than the\n// time spent by the main thread in single-threaded case.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10)->MeasureProcessCPUTime();\n\n// A mixture of the last two. Measure the total CPU consumption, but use the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 903,
                  "startColumn": 2,
                  "endLine": 903,
                  "endColumn": 8,
                  "snippet": {
                    "text": "// Measure the user-visible time, the wall clock (literally, the time that\n// has passed on the clock on the wall), use it to decide for how long to\n// run the benchmark loop. This will always be meaningful, and will match the\n// time spent by the main thread in single-threaded case, in general decreasing\n// with the number of internal threads doing the work.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10)->UseRealTime();\n\n",
                    "rendered": {
                      "text": "// Measure the user-visible time, the wall clock (literally, the time that\n// has passed on the clock on the wall), use it to decide for how long to\n// run the benchmark loop. This will always be meaningful, and will match the\n// time spent by the main thread in single-threaded case, in general decreasing\n// with the number of internal threads doing the work.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10)->UseRealTime();\n\n",
                      "markdown": "`// Measure the user-visible time, the wall clock (literally, the time that\n// has passed on the clock on the wall), use it to decide for how long to\n// run the benchmark loop. This will always be meaningful, and will match the\n// time spent by the main thread in single-threaded case, in general decreasing\n// with the number of internal threads doing the work.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10)->UseRealTime();\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 64,
                  "endLine": 900,
                  "endColumn": 70,
                  "snippet": {
                    "text": "// handoff to worker thread[s]) to the whole single-thread time.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10);\n\n// Measure the user-visible time, the wall clock (literally, the time that\n// has passed on the clock on the wall), use it to decide for how long to\n// run the benchmark loop. This will always be meaningful, and will match the\n// time spent by the main thread in single-threaded case, in general decreasing\n",
                    "rendered": {
                      "text": "// handoff to worker thread[s]) to the whole single-thread time.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10);\n\n// Measure the user-visible time, the wall clock (literally, the time that\n// has passed on the clock on the wall), use it to decide for how long to\n// run the benchmark loop. This will always be meaningful, and will match the\n// time spent by the main thread in single-threaded case, in general decreasing\n",
                      "markdown": "`// handoff to worker thread[s]) to the whole single-thread time.\nBENCHMARK(BM_OpenMP)->Range(8, 8<<10);\n\n// Measure the user-visible time, the wall clock (literally, the time that\n// has passed on the clock on the wall), use it to decide for how long to\n// run the benchmark loop. This will always be meaningful, and will match the\n// time spent by the main thread in single-threaded case, in general decreasing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 14,
                  "endLine": 894,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    MyMain(state.range(0));\n}\n\n// Measure the time spent by the main thread, use it to decide for how long to\n// run the benchmark loop. Depending on the internal implementation detail may\n// measure to anywhere from near-zero (the overhead spent before/after work\n// handoff to worker thread[s]) to the whole single-thread time.\n",
                    "rendered": {
                      "text": "    MyMain(state.range(0));\n}\n\n// Measure the time spent by the main thread, use it to decide for how long to\n// run the benchmark loop. Depending on the internal implementation detail may\n// measure to anywhere from near-zero (the overhead spent before/after work\n// handoff to worker thread[s]) to the whole single-thread time.\n",
                      "markdown": "`    MyMain(state.range(0));\n}\n\n// Measure the time spent by the main thread, use it to decide for how long to\n// run the benchmark loop. Depending on the internal implementation detail may\n// measure to anywhere from near-zero (the overhead spent before/after work\n// handoff to worker thread[s]) to the whole single-thread time.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 43,
                  "endLine": 875,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n## CPU Timers\n\nBy default, the CPU timer only measures the time spent by the main thread.\nIf the benchmark itself uses threads internally, this measurement may not\nbe what you are looking for. Instead, there is a way to measure the total\nCPU usage of the process, by all the threads.\n",
                    "rendered": {
                      "text": "\n## CPU Timers\n\nBy default, the CPU timer only measures the time spent by the main thread.\nIf the benchmark itself uses threads internally, this measurement may not\nbe what you are looking for. Instead, there is a way to measure the total\nCPU usage of the process, by all the threads.\n",
                      "markdown": "`\n## CPU Timers\n\nBy default, the CPU timer only measures the time spent by the main thread.\nIf the benchmark itself uses threads internally, this measurement may not\nbe what you are looking for. Instead, there is a way to measure the total\nCPU usage of the process, by all the threads.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 26,
                  "endLine": 869,
                  "endColumn": 32,
                  "snippet": {
                    "text": "BENCHMARK(BM_test)->Range(8, 8<<10)->UseRealTime();\n```\n\nWithout `UseRealTime`, CPU time is used by default.\n\n<a name=\"cpu-timers\" />\n\n",
                    "rendered": {
                      "text": "BENCHMARK(BM_test)->Range(8, 8<<10)->UseRealTime();\n```\n\nWithout `UseRealTime`, CPU time is used by default.\n\n<a name=\"cpu-timers\" />\n\n",
                      "markdown": "`BENCHMARK(BM_test)->Range(8, 8<<10)->UseRealTime();\n```\n\nWithout `UseRealTime`, CPU time is used by default.\n\n<a name=\"cpu-timers\" />\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 32,
                  "endLine": 806,
                  "endColumn": 38,
                  "snippet": {
                    "text": "BM_UserCounter/threads:32     1192 ns       9948 ns      70496     64   160    96    32\nBM_UserCounter/threads:4      2506 ns       9949 ns      70332      8    20    12     4\n--------------------------------------------------------------\nBenchmark                        Time           CPU Iterations\n--------------------------------------------------------------\nBM_Factorial                    26 ns         26 ns   26392245 40320\nBM_Factorial/real_time          26 ns         26 ns   26494107 40320\n",
                    "rendered": {
                      "text": "BM_UserCounter/threads:32     1192 ns       9948 ns      70496     64   160    96    32\nBM_UserCounter/threads:4      2506 ns       9949 ns      70332      8    20    12     4\n--------------------------------------------------------------\nBenchmark                        Time           CPU Iterations\n--------------------------------------------------------------\nBM_Factorial                    26 ns         26 ns   26392245 40320\nBM_Factorial/real_time          26 ns         26 ns   26494107 40320\n",
                      "markdown": "`BM_UserCounter/threads:32     1192 ns       9948 ns      70496     64   160    96    32\nBM_UserCounter/threads:4      2506 ns       9949 ns      70332      8    20    12     4\n--------------------------------------------------------------\nBenchmark                        Time           CPU Iterations\n--------------------------------------------------------------\nBM_Factorial                    26 ns         26 ns   26392245 40320\nBM_Factorial/real_time          26 ns         26 ns   26494107 40320\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 32,
                  "endLine": 795,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n```\n---------------------------------------------------------------------------------------\nBenchmark                        Time           CPU Iterations    Bar   Bat   Baz   Foo\n---------------------------------------------------------------------------------------\nBM_UserCounter/threads:8      2198 ns       9953 ns      70688     16    40    24     8\nBM_UserCounter/threads:1      9504 ns       9504 ns      73787      2     5     3     1\n",
                    "rendered": {
                      "text": "\n```\n---------------------------------------------------------------------------------------\nBenchmark                        Time           CPU Iterations    Bar   Bat   Baz   Foo\n---------------------------------------------------------------------------------------\nBM_UserCounter/threads:8      2198 ns       9953 ns      70688     16    40    24     8\nBM_UserCounter/threads:1      9504 ns       9504 ns      73787      2     5     3     1\n",
                      "markdown": "`\n```\n---------------------------------------------------------------------------------------\nBenchmark                        Time           CPU Iterations    Bar   Bat   Baz   Foo\n---------------------------------------------------------------------------------------\nBM_UserCounter/threads:8      2198 ns       9953 ns      70688     16    40    24     8\nBM_UserCounter/threads:1      9504 ns       9504 ns      73787      2     5     3     1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 34,
                  "endLine": 789,
                  "endColumn": 40,
                  "snippet": {
                    "text": "passing the flag `--benchmark_counters_tabular=true` to the benchmark\napplication. This is best for cases in which there are a lot of counters, or\na lot of lines per individual benchmark. Note that this will trigger a\nreprinting of the table header any time the counter set changes between\nindividual benchmarks. Here's an example of corresponding output when\n`--benchmark_counters_tabular=true` is passed:\n\n",
                    "rendered": {
                      "text": "passing the flag `--benchmark_counters_tabular=true` to the benchmark\napplication. This is best for cases in which there are a lot of counters, or\na lot of lines per individual benchmark. Note that this will trigger a\nreprinting of the table header any time the counter set changes between\nindividual benchmarks. Here's an example of corresponding output when\n`--benchmark_counters_tabular=true` is passed:\n\n",
                      "markdown": "`passing the flag `--benchmark_counters_tabular=true` to the benchmark\napplication. This is best for cases in which there are a lot of counters, or\na lot of lines per individual benchmark. Note that this will trigger a\nreprinting of the table header any time the counter set changes between\nindividual benchmarks. Here's an example of corresponding output when\n`--benchmark_counters_tabular=true` is passed:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 767,
                  "startColumn": 32,
                  "endLine": 767,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n```\n------------------------------------------------------------------------------\nBenchmark                        Time           CPU Iterations UserCounters...\n------------------------------------------------------------------------------\nBM_UserCounter/threads:8      2248 ns      10277 ns      68808 Bar=16 Bat=40 Baz=24 Foo=8\nBM_UserCounter/threads:1      9797 ns       9788 ns      71523 Bar=2 Bat=5 Baz=3 Foo=1024m\n",
                    "rendered": {
                      "text": "\n```\n------------------------------------------------------------------------------\nBenchmark                        Time           CPU Iterations UserCounters...\n------------------------------------------------------------------------------\nBM_UserCounter/threads:8      2248 ns      10277 ns      68808 Bar=16 Bat=40 Baz=24 Foo=8\nBM_UserCounter/threads:1      9797 ns       9788 ns      71523 Bar=2 Bat=5 Baz=3 Foo=1024m\n",
                      "markdown": "`\n```\n------------------------------------------------------------------------------\nBenchmark                        Time           CPU Iterations UserCounters...\n------------------------------------------------------------------------------\nBM_UserCounter/threads:8      2248 ns      10277 ns      68808 Bar=16 Bat=40 Baz=24 Foo=8\nBM_UserCounter/threads:1      9797 ns       9788 ns      71523 Bar=2 Bat=5 Baz=3 Foo=1024m\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 7,
                  "endLine": 500,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nAsymptotic complexity might be calculated for a family of benchmarks. The\nfollowing code will calculate the coefficient for the high-order term in the\nrunning time and the normalized root-mean square error of string comparison.\n\n```c++\nstatic void BM_StringCompare(benchmark::State& state) {\n",
                    "rendered": {
                      "text": "\nAsymptotic complexity might be calculated for a family of benchmarks. The\nfollowing code will calculate the coefficient for the high-order term in the\nrunning time and the normalized root-mean square error of string comparison.\n\n```c++\nstatic void BM_StringCompare(benchmark::State& state) {\n",
                      "markdown": "`\nAsymptotic complexity might be calculated for a family of benchmarks. The\nfollowing code will calculate the coefficient for the high-order term in the\nrunning time and the normalized root-mean square error of string comparison.\n\n```c++\nstatic void BM_StringCompare(benchmark::State& state) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 54,
                  "endLine": 258,
                  "endColumn": 60,
                  "snippet": {
                    "text": "Furthermore warming up a benchmark might be necessary in order to get\nstable results because of e.g caching effects of the code under benchmark.\nWarming up means running the benchmark a given amount of time, before\nresults are actually taken into account. The amount of time for which\nthe warmup should be run can be set per benchmark by calling\n`MinWarmUpTime` on the registered benchmark object or for all benchmarks\nusing the `--benchmark_min_warmup_time` command-line option. Note that\n",
                    "rendered": {
                      "text": "Furthermore warming up a benchmark might be necessary in order to get\nstable results because of e.g caching effects of the code under benchmark.\nWarming up means running the benchmark a given amount of time, before\nresults are actually taken into account. The amount of time for which\nthe warmup should be run can be set per benchmark by calling\n`MinWarmUpTime` on the registered benchmark object or for all benchmarks\nusing the `--benchmark_min_warmup_time` command-line option. Note that\n",
                      "markdown": "`Furthermore warming up a benchmark might be necessary in order to get\nstable results because of e.g caching effects of the code under benchmark.\nWarming up means running the benchmark a given amount of time, before\nresults are actually taken into account. The amount of time for which\nthe warmup should be run can be set per benchmark by calling\n`MinWarmUpTime` on the registered benchmark object or for all benchmarks\nusing the `--benchmark_min_warmup_time` command-line option. Note that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 71,
                  "endLine": 252,
                  "endColumn": 77,
                  "snippet": {
                    "text": "In all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\nFurthermore warming up a benchmark might be necessary in order to get\n",
                    "rendered": {
                      "text": "In all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\nFurthermore warming up a benchmark might be necessary in order to get\n",
                      "markdown": "`In all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\nFurthermore warming up a benchmark might be necessary in order to get\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 34,
                  "endLine": 252,
                  "endColumn": 40,
                  "snippet": {
                    "text": "In all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\nFurthermore warming up a benchmark might be necessary in order to get\n",
                    "rendered": {
                      "text": "In all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\nFurthermore warming up a benchmark might be necessary in order to get\n",
                      "markdown": "`In all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\nFurthermore warming up a benchmark might be necessary in order to get\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 56,
                  "endLine": 251,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\n",
                    "rendered": {
                      "text": "\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\n",
                      "markdown": "`\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 25,
                  "endLine": 250,
                  "endColumn": 31,
                  "snippet": {
                    "text": "the number of iterations is thus reported.\n\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n",
                    "rendered": {
                      "text": "the number of iterations is thus reported.\n\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n",
                      "markdown": "`the number of iterations is thus reported.\n\nIn all cases, the number of iterations for which the benchmark is run is\ngoverned by the amount of time the benchmark takes. Concretely, the number of\niterations is at least one, not more than 1e9, until CPU time is greater than\nthe minimum time, or the wallclock time is 5x minimum time. The minimum time is\nset per benchmark by calling `MinTime` on the registered benchmark object.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 39,
                  "endLine": 244,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\nWhen the benchmark binary is executed, each benchmark function is run serially.\nThe number of iterations to run is determined dynamically by running the\nbenchmark a few times and measuring the time taken and ensuring that the\nultimate result will be statistically stable. As such, faster benchmark\nfunctions will be run for more iterations than slower benchmark functions, and\nthe number of iterations is thus reported.\n",
                    "rendered": {
                      "text": "\nWhen the benchmark binary is executed, each benchmark function is run serially.\nThe number of iterations to run is determined dynamically by running the\nbenchmark a few times and measuring the time taken and ensuring that the\nultimate result will be statistically stable. As such, faster benchmark\nfunctions will be run for more iterations than slower benchmark functions, and\nthe number of iterations is thus reported.\n",
                      "markdown": "`\nWhen the benchmark binary is executed, each benchmark function is run serially.\nThe number of iterations to run is determined dynamically by running the\nbenchmark a few times and measuring the time taken and ensuring that the\nultimate result will be statistically stable. As such, faster benchmark\nfunctions will be run for more iterations than slower benchmark functions, and\nthe number of iterations is thus reported.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 22,
                  "endLine": 223,
                  "endColumn": 28,
                  "snippet": {
                    "text": "$ ./run_benchmarks --benchmark_context=pwd=`pwd`\nRun on (1 x 2300 MHz CPU)\npwd: /home/user/benchmark/\nBenchmark              Time           CPU Iterations\n----------------------------------------------------\nBM_memcpy/32          11 ns         11 ns   79545455\nBM_memcpy/32k       2181 ns       2185 ns     324074\n",
                    "rendered": {
                      "text": "$ ./run_benchmarks --benchmark_context=pwd=`pwd`\nRun on (1 x 2300 MHz CPU)\npwd: /home/user/benchmark/\nBenchmark              Time           CPU Iterations\n----------------------------------------------------\nBM_memcpy/32          11 ns         11 ns   79545455\nBM_memcpy/32k       2181 ns       2185 ns     324074\n",
                      "markdown": "`$ ./run_benchmarks --benchmark_context=pwd=`pwd`\nRun on (1 x 2300 MHz CPU)\npwd: /home/user/benchmark/\nBenchmark              Time           CPU Iterations\n----------------------------------------------------\nBM_memcpy/32          11 ns         11 ns   79545455\nBM_memcpy/32k       2181 ns       2185 ns     324074\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 22,
                  "endLine": 189,
                  "endColumn": 28,
                  "snippet": {
                    "text": "$ ./run_benchmarks.x --benchmark_filter=BM_memcpy/32\nRun on (1 X 2300 MHz CPU )\n2016-06-25 19:34:24\nBenchmark              Time           CPU Iterations\n----------------------------------------------------\nBM_memcpy/32          11 ns         11 ns   79545455\nBM_memcpy/32k       2181 ns       2185 ns     324074\n",
                    "rendered": {
                      "text": "$ ./run_benchmarks.x --benchmark_filter=BM_memcpy/32\nRun on (1 X 2300 MHz CPU )\n2016-06-25 19:34:24\nBenchmark              Time           CPU Iterations\n----------------------------------------------------\nBM_memcpy/32          11 ns         11 ns   79545455\nBM_memcpy/32k       2181 ns       2185 ns     324074\n",
                      "markdown": "`$ ./run_benchmarks.x --benchmark_filter=BM_memcpy/32\nRun on (1 X 2300 MHz CPU )\n2016-06-25 19:34:24\nBenchmark              Time           CPU Iterations\n----------------------------------------------------\nBM_memcpy/32          11 ns         11 ns   79545455\nBM_memcpy/32k       2181 ns       2185 ns     324074\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 58,
                  "endLine": 90,
                  "endColumn": 63,
                  "snippet": {
                    "text": "BM_SetInsert/1024/10                       33157      33648      21431  1.13369MiB/s   290.225k items/s\n```\n\nThe JSON format outputs human readable json split into two top level attributes.\nThe `context` attribute contains information about the run in general, including\ninformation about the CPU and the date.\nThe `benchmarks` attribute contains a list of every benchmark run. Example json\n",
                    "rendered": {
                      "text": "BM_SetInsert/1024/10                       33157      33648      21431  1.13369MiB/s   290.225k items/s\n```\n\nThe JSON format outputs human readable json split into two top level attributes.\nThe `context` attribute contains information about the run in general, including\ninformation about the CPU and the date.\nThe `benchmarks` attribute contains a list of every benchmark run. Example json\n",
                      "markdown": "`BM_SetInsert/1024/10                       33157      33648      21431  1.13369MiB/s   290.225k items/s\n```\n\nThe JSON format outputs human readable json split into two top level attributes.\nThe `context` attribute contains information about the run in general, including\ninformation about the CPU and the date.\nThe `benchmarks` attribute contains a list of every benchmark run. Example json\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/user_guide.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 12,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n[Manual Timing](#manual-timing)\n\n[Setting the Time Unit](#setting-the-time-unit)\n\n[Random Interleaving](random_interleaving.md)\n\n",
                    "rendered": {
                      "text": "\n[Manual Timing](#manual-timing)\n\n[Setting the Time Unit](#setting-the-time-unit)\n\n[Random Interleaving](random_interleaving.md)\n\n",
                      "markdown": "`\n[Manual Timing](#manual-timing)\n\n[Setting the Time Unit](#setting-the-time-unit)\n\n[Random Interleaving](random_interleaving.md)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 5,
                  "endLine": 33,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n* Create a release through github's interface\n    * Note this will create a lightweight tag.\n    * Update this to an annotated tag:\n      * `git pull --tags`\n      * `git tag -a -f <tag> <tag>`\n      * `git push --force --tags origin`\n",
                    "rendered": {
                      "text": "\n* Create a release through github's interface\n    * Note this will create a lightweight tag.\n    * Update this to an annotated tag:\n      * `git pull --tags`\n      * `git tag -a -f <tag> <tag>`\n      * `git push --force --tags origin`\n",
                      "markdown": "`\n* Create a release through github's interface\n    * Note this will create a lightweight tag.\n    * Update this to an annotated tag:\n      * `git pull --tags`\n      * `git tag -a -f <tag> <tag>`\n      * `git push --force --tags origin`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 68,
                  "endLine": 5,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n* Make sure you're on main and synced to HEAD\n* Ensure the project builds and tests run\n    * `parallel -j0 exec ::: test/*_test` can help ensure everything at least\n      passes\n* Prepare release notes\n    * `git log $(git describe --abbrev=0 --tags)..HEAD` gives you the list of\n",
                    "rendered": {
                      "text": "\n* Make sure you're on main and synced to HEAD\n* Ensure the project builds and tests run\n    * `parallel -j0 exec ::: test/*_test` can help ensure everything at least\n      passes\n* Prepare release notes\n    * `git log $(git describe --abbrev=0 --tags)..HEAD` gives you the list of\n",
                      "markdown": "`\n* Make sure you're on main and synced to HEAD\n* Ensure the project builds and tests run\n    * `parallel -j0 exec ::: test/*_test` can help ensure everything at least\n      passes\n* Prepare release notes\n    * `git log $(git describe --abbrev=0 --tags)..HEAD` gives you the list of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 48,
                  "endLine": 10,
                  "snippet": {
                    "text": "      passes\n* Prepare release notes\n    * `git log $(git describe --abbrev=0 --tags)..HEAD` gives you the list of\n      commits between the last annotated tag and HEAD\n    * Pick the most interesting.\n* Create one last commit that updates the version saved in `CMakeLists.txt`, `MODULE.bazel`,\n  and `bindings/python/google_benchmark/__init__.py` to the release version you're creating.\n  (This version will be used if benchmark is installed from the archive you'll be creating\n",
                    "rendered": {
                      "text": "      passes\n* Prepare release notes\n    * `git log $(git describe --abbrev=0 --tags)..HEAD` gives you the list of\n      commits between the last annotated tag and HEAD\n    * Pick the most interesting.\n* Create one last commit that updates the version saved in `CMakeLists.txt`, `MODULE.bazel`,\n  and `bindings/python/google_benchmark/__init__.py` to the release version you're creating.\n  (This version will be used if benchmark is installed from the archive you'll be creating\n",
                      "markdown": "`      passes\n* Prepare release notes\n    * `git log $(git describe --abbrev=0 --tags)..HEAD` gives you the list of\n      commits between the last annotated tag and HEAD\n    * Pick the most interesting.\n* Create one last commit that updates the version saved in `CMakeLists.txt`, `MODULE.bazel`,\n  and `bindings/python/google_benchmark/__init__.py` to the release version you're creating.\n  (This version will be used if benchmark is installed from the archive you'll be creating\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 40,
                  "endLine": 4,
                  "snippet": {
                    "text": "# How to release\n\n* Make sure you're on main and synced to HEAD\n* Ensure the project builds and tests run\n    * `parallel -j0 exec ::: test/*_test` can help ensure everything at least\n      passes\n* Prepare release notes\n",
                    "rendered": {
                      "text": "# How to release\n\n* Make sure you're on main and synced to HEAD\n* Ensure the project builds and tests run\n    * `parallel -j0 exec ::: test/*_test` can help ensure everything at least\n      passes\n* Prepare release notes\n",
                      "markdown": "`# How to release\n\n* Make sure you're on main and synced to HEAD\n* Ensure the project builds and tests run\n    * `parallel -j0 exec ::: test/*_test` can help ensure everything at least\n      passes\n* Prepare release notes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/AssemblyTests.md"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 27,
                  "endLine": 144,
                  "endColumn": 31,
                  "snippet": {
                    "text": "* x86_64 targets.\n* Compiled with GCC or Clang\n\nFurther work could be done, at least on a limited basis, to extend the\ntests to other architectures and compilers (using `CHECK` prefixes).\n\nFurthermore, the tests fail for builds which specify additional flags\n",
                    "rendered": {
                      "text": "* x86_64 targets.\n* Compiled with GCC or Clang\n\nFurther work could be done, at least on a limited basis, to extend the\ntests to other architectures and compilers (using `CHECK` prefixes).\n\nFurthermore, the tests fail for builds which specify additional flags\n",
                      "markdown": "`* x86_64 targets.\n* Compiled with GCC or Clang\n\nFurther work could be done, at least on a limited basis, to extend the\ntests to other architectures and compilers (using `CHECK` prefixes).\n\nFurthermore, the tests fail for builds which specify additional flags\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/platform_specific_build_instructions.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 59,
                  "endLine": 41,
                  "endColumn": 67,
                  "snippet": {
                    "text": "* Click `Configure`, `Generate`, `Open Project`.\n* If build fails, try deleting entire directory and starting again, or unticking options to build less.\n\n## Building with Intel 2015 Update 1 or Intel System Studio Update 4\n\nSee instructions for building with Visual Studio. Once built, right click on the solution and change the build to Intel.\n\n",
                    "rendered": {
                      "text": "* Click `Configure`, `Generate`, `Open Project`.\n* If build fails, try deleting entire directory and starting again, or unticking options to build less.\n\n## Building with Intel 2015 Update 1 or Intel System Studio Update 4\n\nSee instructions for building with Visual Studio. Once built, right click on the solution and change the build to Intel.\n\n",
                      "markdown": "`* Click `Configure`, `Generate`, `Open Project`.\n* If build fails, try deleting entire directory and starting again, or unticking options to build less.\n\n## Building with Intel 2015 Update 1 or Intel System Studio Update 4\n\nSee instructions for building with Visual Studio. Once built, right click on the solution and change the build to Intel.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/platform_specific_build_instructions.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 27,
                  "endLine": 41,
                  "endColumn": 35,
                  "snippet": {
                    "text": "* Click `Configure`, `Generate`, `Open Project`.\n* If build fails, try deleting entire directory and starting again, or unticking options to build less.\n\n## Building with Intel 2015 Update 1 or Intel System Studio Update 4\n\nSee instructions for building with Visual Studio. Once built, right click on the solution and change the build to Intel.\n\n",
                    "rendered": {
                      "text": "* Click `Configure`, `Generate`, `Open Project`.\n* If build fails, try deleting entire directory and starting again, or unticking options to build less.\n\n## Building with Intel 2015 Update 1 or Intel System Studio Update 4\n\nSee instructions for building with Visual Studio. Once built, right click on the solution and change the build to Intel.\n\n",
                      "markdown": "`* Click `Configure`, `Generate`, `Open Project`.\n* If build fails, try deleting entire directory and starting again, or unticking options to build less.\n\n## Building with Intel 2015 Update 1 or Intel System Studio Update 4\n\nSee instructions for building with Visual Studio. Once built, right click on the solution and change the build to Intel.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/json_reporter.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/json_reporter.cc"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 41,
                  "endLine": 224,
                  "endColumn": 46,
                  "snippet": {
                    "text": "}\n\nvoid JSONReporter::Finalize() {\n  // Close the list of benchmarks and the top level object.\n  GetOutputStream() << \"\\n  ]\\n}\\n\";\n}\n\n",
                    "rendered": {
                      "text": "}\n\nvoid JSONReporter::Finalize() {\n  // Close the list of benchmarks and the top level object.\n  GetOutputStream() << \"\\n  ]\\n}\\n\";\n}\n\n",
                      "markdown": "`}\n\nvoid JSONReporter::Finalize() {\n  // Close the list of benchmarks and the top level object.\n  GetOutputStream() << \"\\n  ]\\n}\\n\";\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/commandlineflags.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 55,
                  "endLine": 182,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n    return timedelta * _TIME_UNIT_TO_SECONDS_MULTIPLIER.get(time_unit)\n\n\ndef calculate_geomean(json):\n",
                    "rendered": {
                      "text": "    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n    return timedelta * _TIME_UNIT_TO_SECONDS_MULTIPLIER.get(time_unit)\n\n\ndef calculate_geomean(json):\n",
                      "markdown": "`    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n    return timedelta * _TIME_UNIT_TO_SECONDS_MULTIPLIER.get(time_unit)\n\n\ndef calculate_geomean(json):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 25,
                  "endLine": 181,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n    return timedelta * _TIME_UNIT_TO_SECONDS_MULTIPLIER.get(time_unit)\n\n\n",
                    "rendered": {
                      "text": "    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n    return timedelta * _TIME_UNIT_TO_SECONDS_MULTIPLIER.get(time_unit)\n\n\n",
                      "markdown": "`    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n    return timedelta * _TIME_UNIT_TO_SECONDS_MULTIPLIER.get(time_unit)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 27,
                  "endLine": 218,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        len(timings_cpu[1]),\n    )\n\n    # Does *everything* has at least UTEST_MIN_REPETITIONS repetitions?\n    if min_rep_cnt < UTEST_MIN_REPETITIONS:\n        return False, None, None\n\n",
                    "rendered": {
                      "text": "        len(timings_cpu[1]),\n    )\n\n    # Does *everything* has at least UTEST_MIN_REPETITIONS repetitions?\n    if min_rep_cnt < UTEST_MIN_REPETITIONS:\n        return False, None, None\n\n",
                      "markdown": "`        len(timings_cpu[1]),\n    )\n\n    # Does *everything* has at least UTEST_MIN_REPETITIONS repetitions?\n    if min_rep_cnt < UTEST_MIN_REPETITIONS:\n        return False, None, None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 64,
                  "endLine": 406,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    first_col_width = find_longest_name(json_diff_report)\n    first_col_width = max(first_col_width, len(\"Benchmark\"))\n    first_col_width += len(UTEST_COL_NAME)\n    first_line = \"{:<{}s}Time             CPU      Time Old      Time New       CPU Old       CPU New\".format(\n        \"Benchmark\", 12 + first_col_width\n    )\n    output_strs = [first_line, \"-\" * len(first_line)]\n",
                    "rendered": {
                      "text": "    first_col_width = find_longest_name(json_diff_report)\n    first_col_width = max(first_col_width, len(\"Benchmark\"))\n    first_col_width += len(UTEST_COL_NAME)\n    first_line = \"{:<{}s}Time             CPU      Time Old      Time New       CPU Old       CPU New\".format(\n        \"Benchmark\", 12 + first_col_width\n    )\n    output_strs = [first_line, \"-\" * len(first_line)]\n",
                      "markdown": "`    first_col_width = find_longest_name(json_diff_report)\n    first_col_width = max(first_col_width, len(\"Benchmark\"))\n    first_col_width += len(UTEST_COL_NAME)\n    first_line = \"{:<{}s}Time             CPU      Time Old      Time New       CPU Old       CPU New\".format(\n        \"Benchmark\", 12 + first_col_width\n    )\n    output_strs = [first_line, \"-\" * len(first_line)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 50,
                  "endLine": 406,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    first_col_width = find_longest_name(json_diff_report)\n    first_col_width = max(first_col_width, len(\"Benchmark\"))\n    first_col_width += len(UTEST_COL_NAME)\n    first_line = \"{:<{}s}Time             CPU      Time Old      Time New       CPU Old       CPU New\".format(\n        \"Benchmark\", 12 + first_col_width\n    )\n    output_strs = [first_line, \"-\" * len(first_line)]\n",
                    "rendered": {
                      "text": "    first_col_width = find_longest_name(json_diff_report)\n    first_col_width = max(first_col_width, len(\"Benchmark\"))\n    first_col_width += len(UTEST_COL_NAME)\n    first_line = \"{:<{}s}Time             CPU      Time Old      Time New       CPU Old       CPU New\".format(\n        \"Benchmark\", 12 + first_col_width\n    )\n    output_strs = [first_line, \"-\" * len(first_line)]\n",
                      "markdown": "`    first_col_width = find_longest_name(json_diff_report)\n    first_col_width = max(first_col_width, len(\"Benchmark\"))\n    first_col_width += len(UTEST_COL_NAME)\n    first_line = \"{:<{}s}Time             CPU      Time Old      Time New       CPU Old       CPU New\".format(\n        \"Benchmark\", 12 + first_col_width\n    )\n    output_strs = [first_line, \"-\" * len(first_line)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 56,
                  "endLine": 329,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        # Store only if we had any measurements for given benchmark.\n        # E.g. partition_benchmarks will filter out the benchmarks having\n        # time units which are not compatible with other time units in the\n        # benchmark suite.\n        if measurements:\n            run_type = (\n",
                    "rendered": {
                      "text": "\n        # Store only if we had any measurements for given benchmark.\n        # E.g. partition_benchmarks will filter out the benchmarks having\n        # time units which are not compatible with other time units in the\n        # benchmark suite.\n        if measurements:\n            run_type = (\n",
                      "markdown": "`\n        # Store only if we had any measurements for given benchmark.\n        # E.g. partition_benchmarks will filter out the benchmarks having\n        # time units which are not compatible with other time units in the\n        # benchmark suite.\n        if measurements:\n            run_type = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 9,
                  "endLine": 329,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n        # Store only if we had any measurements for given benchmark.\n        # E.g. partition_benchmarks will filter out the benchmarks having\n        # time units which are not compatible with other time units in the\n        # benchmark suite.\n        if measurements:\n            run_type = (\n",
                    "rendered": {
                      "text": "\n        # Store only if we had any measurements for given benchmark.\n        # E.g. partition_benchmarks will filter out the benchmarks having\n        # time units which are not compatible with other time units in the\n        # benchmark suite.\n        if measurements:\n            run_type = (\n",
                      "markdown": "`\n        # Store only if we had any measurements for given benchmark.\n        # E.g. partition_benchmarks will filter out the benchmarks having\n        # time units which are not compatible with other time units in the\n        # benchmark suite.\n        if measurements:\n            run_type = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 17,
                  "endLine": 178,
                  "endColumn": 23,
                  "snippet": {
                    "text": "def get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n",
                    "rendered": {
                      "text": "def get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n",
                      "markdown": "`def get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n    time_unit = benchmark.get(\"time_unit\", \"s\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 66,
                  "endLine": 177,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\ndef get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n",
                    "rendered": {
                      "text": "\ndef get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n",
                      "markdown": "`\ndef get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 56,
                  "endLine": 177,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\ndef get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n",
                    "rendered": {
                      "text": "\ndef get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n",
                      "markdown": "`\ndef get_timedelta_field_as_seconds(benchmark, field_name):\n    \"\"\"\n    Get value of field_name field of benchmark, which is time with time unit\n    time_unit, as time in seconds.\n    \"\"\"\n    timedelta = benchmark[field_name]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 28,
                  "endLine": 159,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                break\n        if time_unit is None:\n            continue\n        # Filter by name and time unit.\n        # All the repetitions are assumed to be comparable.\n        lhs = [\n            x\n",
                    "rendered": {
                      "text": "                break\n        if time_unit is None:\n            continue\n        # Filter by name and time unit.\n        # All the repetitions are assumed to be comparable.\n        lhs = [\n            x\n",
                      "markdown": "`                break\n        if time_unit is None:\n            continue\n        # Filter by name and time unit.\n        # All the repetitions are assumed to be comparable.\n        lhs = [\n            x\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 18,
                  "endLine": 151,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    partitions = []\n    for name in names:\n        time_unit = None\n        # Pick the time unit from the first entry of the lhs benchmark.\n        # We should be careful not to crash with unexpected input.\n        for x in json1[\"benchmarks\"]:\n            if x[\"name\"] == name and is_potentially_comparable_benchmark(x):\n",
                    "rendered": {
                      "text": "    partitions = []\n    for name in names:\n        time_unit = None\n        # Pick the time unit from the first entry of the lhs benchmark.\n        # We should be careful not to crash with unexpected input.\n        for x in json1[\"benchmarks\"]:\n            if x[\"name\"] == name and is_potentially_comparable_benchmark(x):\n",
                      "markdown": "`    partitions = []\n    for name in names:\n        time_unit = None\n        # Pick the time unit from the first entry of the lhs benchmark.\n        # We should be careful not to crash with unexpected input.\n        for x in json1[\"benchmarks\"]:\n            if x[\"name\"] == name and is_potentially_comparable_benchmark(x):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/report.py"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 34,
                  "endLine": 141,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\ndef partition_benchmarks(json1, json2):\n    \"\"\"\n    While preserving the ordering, find benchmarks with the same names in\n    both of the inputs, and group them.\n    (i.e. partition/filter into groups with common name)\n    \"\"\"\n",
                    "rendered": {
                      "text": "\ndef partition_benchmarks(json1, json2):\n    \"\"\"\n    While preserving the ordering, find benchmarks with the same names in\n    both of the inputs, and group them.\n    (i.e. partition/filter into groups with common name)\n    \"\"\"\n",
                      "markdown": "`\ndef partition_benchmarks(json1, json2):\n    \"\"\"\n    While preserving the ordering, find benchmarks with the same names in\n    both of the inputs, and group them.\n    (i.e. partition/filter into groups with common name)\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/util.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 24,
                  "endLine": 133,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    def benchmark_wanted(benchmark):\n        if benchmark_filter is None:\n            return True\n        name = benchmark.get(\"run_name\", None) or benchmark[\"name\"]\n        return re.search(benchmark_filter, name) is not None\n\n    with open(fname, \"r\") as f:\n",
                    "rendered": {
                      "text": "    def benchmark_wanted(benchmark):\n        if benchmark_filter is None:\n            return True\n        name = benchmark.get(\"run_name\", None) or benchmark[\"name\"]\n        return re.search(benchmark_filter, name) is not None\n\n    with open(fname, \"r\") as f:\n",
                      "markdown": "`    def benchmark_wanted(benchmark):\n        if benchmark_filter is None:\n            return True\n        name = benchmark.get(\"run_name\", None) or benchmark[\"name\"]\n        return re.search(benchmark_filter, name) is not None\n\n    with open(fname, \"r\") as f:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/util.py"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 3,
                  "endLine": 204,
                  "endColumn": 8,
                  "snippet": {
                    "text": "            \"--benchmark_out=%s\" % output_name\n        ]\n\n    cmd = [exe_name] + benchmark_flags\n    print(\"RUNNING: %s\" % \" \".join(cmd))\n    exitCode = subprocess.call(cmd)\n    if exitCode != 0:\n",
                    "rendered": {
                      "text": "            \"--benchmark_out=%s\" % output_name\n        ]\n\n    cmd = [exe_name] + benchmark_flags\n    print(\"RUNNING: %s\" % \" \".join(cmd))\n    exitCode = subprocess.call(cmd)\n    if exitCode != 0:\n",
                      "markdown": "`            \"--benchmark_out=%s\" % output_name\n        ]\n\n    cmd = [exe_name] + benchmark_flags\n    print(\"RUNNING: %s\" % \" \".join(cmd))\n    exitCode = subprocess.call(cmd)\n    if exitCode != 0:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/gbench/util.py"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 8,
                  "endLine": 191,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    \"\"\"\n    Run a benchmark specified by 'exe_name' with the specified\n    'benchmark_flags'. The benchmark is run directly as a subprocess to preserve\n    real time console output.\n    RETURNS: A JSON object representing the benchmark output\n    \"\"\"\n    output_name = find_benchmark_flag(\"--benchmark_out=\", benchmark_flags)\n",
                    "rendered": {
                      "text": "    \"\"\"\n    Run a benchmark specified by 'exe_name' with the specified\n    'benchmark_flags'. The benchmark is run directly as a subprocess to preserve\n    real time console output.\n    RETURNS: A JSON object representing the benchmark output\n    \"\"\"\n    output_name = find_benchmark_flag(\"--benchmark_out=\", benchmark_flags)\n",
                      "markdown": "`    \"\"\"\n    Run a benchmark specified by 'exe_name' with the specified\n    'benchmark_flags'. The benchmark is run directly as a subprocess to preserve\n    real time console output.\n    RETURNS: A JSON object representing the benchmark output\n    \"\"\"\n    output_name = find_benchmark_flag(\"--benchmark_out=\", benchmark_flags)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/MODULE.bazel"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 31,
                  "endColumn": 4,
                  "snippet": {
                    "text": "    is_default = True,\n    python_version = \"3.12\",\n)\n\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\", dev_dependency = True)\npip.parse(\n    hub_name = \"tools_pip_deps\",\n    python_version = \"3.9\",\n",
                    "rendered": {
                      "text": "    is_default = True,\n    python_version = \"3.12\",\n)\n\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\", dev_dependency = True)\npip.parse(\n    hub_name = \"tools_pip_deps\",\n    python_version = \"3.9\",\n",
                      "markdown": "`    is_default = True,\n    python_version = \"3.12\",\n)\n\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\", dev_dependency = True)\npip.parse(\n    hub_name = \"tools_pip_deps\",\n    python_version = \"3.9\",\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/display_aggregates_only_test.cc"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 57,
                  "endLine": 30,
                  "endColumn": 63,
                  "snippet": {
                    "text": "      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_stddev\\\"\") !=\n          1 ||\n      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_cv\\\"\") != 1) {\n    std::cout << \"Precondition mismatch. Expected to only find 8 \"\n                 \"occurrences of \\\"BM_SummaryRepeat/repeats:3\\\" substring:\\n\"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3\\\", \"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3\\\", \"\n",
                    "rendered": {
                      "text": "      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_stddev\\\"\") !=\n          1 ||\n      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_cv\\\"\") != 1) {\n    std::cout << \"Precondition mismatch. Expected to only find 8 \"\n                 \"occurrences of \\\"BM_SummaryRepeat/repeats:3\\\" substring:\\n\"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3\\\", \"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3\\\", \"\n",
                      "markdown": "`      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_stddev\\\"\") !=\n          1 ||\n      SubstrCnt(output, \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3_cv\\\"\") != 1) {\n    std::cout << \"Precondition mismatch. Expected to only find 8 \"\n                 \"occurrences of \\\"BM_SummaryRepeat/repeats:3\\\" substring:\\n\"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3\\\", \"\n                 \"\\\"name\\\": \\\"BM_SummaryRepeat/repeats:3\\\", \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/random_interleaving.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 42,
                  "endLine": 13,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nTo use, you mainly need to set `--benchmark_enable_random_interleaving=true`,\nand optionally specify non-zero repetition count `--benchmark_repetitions=9`\nand optionally decrease the per-repetition time `--benchmark_min_time=0.1`.\n",
                    "rendered": {
                      "text": "\nTo use, you mainly need to set `--benchmark_enable_random_interleaving=true`,\nand optionally specify non-zero repetition count `--benchmark_repetitions=9`\nand optionally decrease the per-repetition time `--benchmark_min_time=0.1`.\n",
                      "markdown": "`\nTo use, you mainly need to set `--benchmark_enable_random_interleaving=true`,\nand optionally specify non-zero repetition count `--benchmark_repetitions=9`\nand optionally decrease the per-repetition time `--benchmark_min_time=0.1`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/python_bindings.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 31,
                  "endLine": 28,
                  "endColumn": 36,
                  "snippet": {
                    "text": "source venv/bin/activate  # .\\venv\\Scripts\\Activate.ps1 on Windows\n\n# upgrade Python's system-wide packages\npython -m pip install --upgrade pip build\n# builds the wheel and stores it in the directory \"dist\".\npython -m build\n```\n",
                    "rendered": {
                      "text": "source venv/bin/activate  # .\\venv\\Scripts\\Activate.ps1 on Windows\n\n# upgrade Python's system-wide packages\npython -m pip install --upgrade pip build\n# builds the wheel and stores it in the directory \"dist\".\npython -m build\n```\n",
                      "markdown": "`source venv/bin/activate  # .\\venv\\Scripts\\Activate.ps1 on Windows\n\n# upgrade Python's system-wide packages\npython -m pip install --upgrade pip build\n# builds the wheel and stores it in the directory \"dist\".\npython -m build\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/python_bindings.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 14,
                  "snippet": {
                    "text": "source venv/bin/activate  # .\\venv\\Scripts\\Activate.ps1 on Windows\n\n# upgrade Python's system-wide packages\npython -m pip install --upgrade pip build\n# builds the wheel and stores it in the directory \"dist\".\npython -m build\n```\n",
                    "rendered": {
                      "text": "source venv/bin/activate  # .\\venv\\Scripts\\Activate.ps1 on Windows\n\n# upgrade Python's system-wide packages\npython -m pip install --upgrade pip build\n# builds the wheel and stores it in the directory \"dist\".\npython -m build\n```\n",
                      "markdown": "`source venv/bin/activate  # .\\venv\\Scripts\\Activate.ps1 on Windows\n\n# upgrade Python's system-wide packages\npython -m pip install --upgrade pip build\n# builds the wheel and stores it in the directory \"dist\".\npython -m build\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/python_bindings.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 4,
                  "snippet": {
                    "text": "on how to create virtual environments.\n\nTo build a wheel directly from source, you can follow these steps:\n```bash\ngit clone https://github.com/google/benchmark.git\ncd benchmark\n# create a virtual environment and activate it\npython3 -m venv venv --system-site-packages\n",
                    "rendered": {
                      "text": "on how to create virtual environments.\n\nTo build a wheel directly from source, you can follow these steps:\n```bash\ngit clone https://github.com/google/benchmark.git\ncd benchmark\n# create a virtual environment and activate it\npython3 -m venv venv --system-site-packages\n",
                      "markdown": "`on how to create virtual environments.\n\nTo build a wheel directly from source, you can follow these steps:\n```bash\ngit clone https://github.com/google/benchmark.git\ncd benchmark\n# create a virtual environment and activate it\npython3 -m venv venv --system-site-packages\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/python_bindings.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 9,
                  "endLine": 12,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\nIn order to keep your system Python interpreter clean, it is advisable to run these commands in a virtual\n",
                    "rendered": {
                      "text": "\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\nIn order to keep your system Python interpreter clean, it is advisable to run these commands in a virtual\n",
                      "markdown": "`\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\nIn order to keep your system Python interpreter clean, it is advisable to run these commands in a virtual\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/python_bindings.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 31,
                  "endLine": 11,
                  "endColumn": 36,
                  "snippet": {
                    "text": "To install Google Benchmark's Python bindings, run:\n\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\n",
                    "rendered": {
                      "text": "To install Google Benchmark's Python bindings, run:\n\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\n",
                      "markdown": "`To install Google Benchmark's Python bindings, run:\n\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/docs/python_bindings.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 9,
                  "endLine": 11,
                  "endColumn": 14,
                  "snippet": {
                    "text": "To install Google Benchmark's Python bindings, run:\n\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\n",
                    "rendered": {
                      "text": "To install Google Benchmark's Python bindings, run:\n\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\n",
                      "markdown": "`To install Google Benchmark's Python bindings, run:\n\n```bash\npython -m pip install --upgrade pip  # for manylinux2014 support\npython -m pip install google-benchmark\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 48,
                  "endLine": 447,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  std::unique_ptr<internal::ThreadManager> manager;\n  manager.reset(new internal::ThreadManager(1));\n  b.Setup();\n  RunInThread(&b, profile_iterations, 0, manager.get(),\n              /*perf_counters_measurement_ptr=*/nullptr,\n              /*profiler_manager=*/profiler_manager);\n  manager->WaitForAllThreads();\n",
                    "rendered": {
                      "text": "  std::unique_ptr<internal::ThreadManager> manager;\n  manager.reset(new internal::ThreadManager(1));\n  b.Setup();\n  RunInThread(&b, profile_iterations, 0, manager.get(),\n              /*perf_counters_measurement_ptr=*/nullptr,\n              /*profiler_manager=*/profiler_manager);\n  manager->WaitForAllThreads();\n",
                      "markdown": "`  std::unique_ptr<internal::ThreadManager> manager;\n  manager.reset(new internal::ThreadManager(1));\n  b.Setup();\n  RunInThread(&b, profile_iterations, 0, manager.get(),\n              /*perf_counters_measurement_ptr=*/nullptr,\n              /*profiler_manager=*/profiler_manager);\n  manager->WaitForAllThreads();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 47,
                  "endLine": 431,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  std::unique_ptr<internal::ThreadManager> manager;\n  manager.reset(new internal::ThreadManager(1));\n  b.Setup();\n  RunInThread(&b, memory_iterations, 0, manager.get(),\n              perf_counters_measurement_ptr,\n              /*profiler_manager=*/nullptr);\n  manager->WaitForAllThreads();\n",
                    "rendered": {
                      "text": "  std::unique_ptr<internal::ThreadManager> manager;\n  manager.reset(new internal::ThreadManager(1));\n  b.Setup();\n  RunInThread(&b, memory_iterations, 0, manager.get(),\n              perf_counters_measurement_ptr,\n              /*profiler_manager=*/nullptr);\n  manager->WaitForAllThreads();\n",
                      "markdown": "`  std::unique_ptr<internal::ThreadManager> manager;\n  manager.reset(new internal::ThreadManager(1));\n  b.Setup();\n  RunInThread(&b, memory_iterations, 0, manager.get(),\n              perf_counters_measurement_ptr,\n              /*profiler_manager=*/nullptr);\n  manager->WaitForAllThreads();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 35,
                  "endLine": 295,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  // And run one thread here directly.\n  // (If we were asked to run just one thread, we don't create new threads.)\n  // Yes, we need to do this here *after* we start the separate threads.\n  RunInThread(&b, iters, 0, manager.get(), perf_counters_measurement_ptr,\n              /*profiler_manager=*/nullptr);\n\n  // The main thread has finished. Now let's wait for the other threads.\n",
                    "rendered": {
                      "text": "  // And run one thread here directly.\n  // (If we were asked to run just one thread, we don't create new threads.)\n  // Yes, we need to do this here *after* we start the separate threads.\n  RunInThread(&b, iters, 0, manager.get(), perf_counters_measurement_ptr,\n              /*profiler_manager=*/nullptr);\n\n  // The main thread has finished. Now let's wait for the other threads.\n",
                      "markdown": "`  // And run one thread here directly.\n  // (If we were asked to run just one thread, we don't create new threads.)\n  // Yes, we need to do this here *after* we start the separate threads.\n  RunInThread(&b, iters, 0, manager.get(), perf_counters_measurement_ptr,\n              /*profiler_manager=*/nullptr);\n\n  // The main thread has finished. Now let's wait for the other threads.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 34,
                  "endLine": 289,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  // Run all but one thread in separate threads\n  for (std::size_t ti = 0; ti < pool.size(); ++ti) {\n    pool[ti] = std::thread(&RunInThread, &b, iters, static_cast<int>(ti + 1),\n                           manager.get(), perf_counters_measurement_ptr,\n                           /*profiler_manager=*/nullptr);\n  }\n  // And run one thread here directly.\n",
                    "rendered": {
                      "text": "  // Run all but one thread in separate threads\n  for (std::size_t ti = 0; ti < pool.size(); ++ti) {\n    pool[ti] = std::thread(&RunInThread, &b, iters, static_cast<int>(ti + 1),\n                           manager.get(), perf_counters_measurement_ptr,\n                           /*profiler_manager=*/nullptr);\n  }\n  // And run one thread here directly.\n",
                      "markdown": "`  // Run all but one thread in separate threads\n  for (std::size_t ti = 0; ti < pool.size(); ++ti) {\n    pool[ti] = std::thread(&RunInThread, &b, iters, static_cast<int>(ti + 1),\n                           manager.get(), perf_counters_measurement_ptr,\n                           /*profiler_manager=*/nullptr);\n  }\n  // And run one thread here directly.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 17,
                  "endLine": 409,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    }\n\n    // Although we are running \"only\" a warmup phase where running enough\n    // iterations at once without measuring time isn't as important as it is for\n    // the benchmarking phase, we still do it the same way as otherwise it is\n    // very confusing for the user to know how to choose a proper value for\n    // min_warmup_time if a different approach on running it is used.\n",
                    "rendered": {
                      "text": "    }\n\n    // Although we are running \"only\" a warmup phase where running enough\n    // iterations at once without measuring time isn't as important as it is for\n    // the benchmarking phase, we still do it the same way as otherwise it is\n    // very confusing for the user to know how to choose a proper value for\n    // min_warmup_time if a different approach on running it is used.\n",
                      "markdown": "`    }\n\n    // Although we are running \"only\" a warmup phase where running enough\n    // iterations at once without measuring time isn't as important as it is for\n    // the benchmarking phase, we still do it the same way as otherwise it is\n    // very confusing for the user to know how to choose a proper value for\n    // min_warmup_time if a different approach on running it is used.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 32,
                  "endLine": 338,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n  multiplier = is_significant ? multiplier : 10.0;\n",
                    "rendered": {
                      "text": "  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n  multiplier = is_significant ? multiplier : 10.0;\n",
                      "markdown": "`  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n  multiplier = is_significant ? multiplier : 10.0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 21,
                  "endLine": 337,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  double multiplier = GetMinTimeToApply() * 1.4 / std::max(i.seconds, 1e-9);\n  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n",
                    "rendered": {
                      "text": "  double multiplier = GetMinTimeToApply() * 1.4 / std::max(i.seconds, 1e-9);\n  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n",
                      "markdown": "`  double multiplier = GetMinTimeToApply() * 1.4 / std::max(i.seconds, 1e-9);\n  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 24,
                  "endLine": 335,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  // See how much iterations should be increased by.\n  // Note: Avoid division by zero with max(seconds, 1ns).\n  double multiplier = GetMinTimeToApply() * 1.4 / std::max(i.seconds, 1e-9);\n  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n",
                    "rendered": {
                      "text": "  // See how much iterations should be increased by.\n  // Note: Avoid division by zero with max(seconds, 1ns).\n  double multiplier = GetMinTimeToApply() * 1.4 / std::max(i.seconds, 1e-9);\n  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n",
                      "markdown": "`  // See how much iterations should be increased by.\n  // Note: Avoid division by zero with max(seconds, 1ns).\n  double multiplier = GetMinTimeToApply() * 1.4 / std::max(i.seconds, 1e-9);\n  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 43,
                  "endLine": 409,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    }\n\n    // Although we are running \"only\" a warmup phase where running enough\n    // iterations at once without measuring time isn't as important as it is for\n    // the benchmarking phase, we still do it the same way as otherwise it is\n    // very confusing for the user to know how to choose a proper value for\n    // min_warmup_time if a different approach on running it is used.\n",
                    "rendered": {
                      "text": "    }\n\n    // Although we are running \"only\" a warmup phase where running enough\n    // iterations at once without measuring time isn't as important as it is for\n    // the benchmarking phase, we still do it the same way as otherwise it is\n    // very confusing for the user to know how to choose a proper value for\n    // min_warmup_time if a different approach on running it is used.\n",
                      "markdown": "`    }\n\n    // Although we are running \"only\" a warmup phase where running enough\n    // iterations at once without measuring time isn't as important as it is for\n    // the benchmarking phase, we still do it the same way as otherwise it is\n    // very confusing for the user to know how to choose a proper value for\n    // min_warmup_time if a different approach on running it is used.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 54,
                  "endLine": 363,
                  "endColumn": 60,
                  "snippet": {
                    "text": "         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n         ((i.results.real_time_used >= 5 * GetMinTimeToApply()) &&\n",
                    "rendered": {
                      "text": "         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n         ((i.results.real_time_used >= 5 * GetMinTimeToApply()) &&\n",
                      "markdown": "`         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n         ((i.results.real_time_used >= 5 * GetMinTimeToApply()) &&\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 15,
                  "endLine": 363,
                  "endColumn": 21,
                  "snippet": {
                    "text": "         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n         ((i.results.real_time_used >= 5 * GetMinTimeToApply()) &&\n",
                    "rendered": {
                      "text": "         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n         ((i.results.real_time_used >= 5 * GetMinTimeToApply()) &&\n",
                      "markdown": "`         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n         ((i.results.real_time_used >= 5 * GetMinTimeToApply()) &&\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 51,
                  "endLine": 362,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  return i.results.skipped_ || FLAGS_benchmark_dry_run ||\n         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n",
                    "rendered": {
                      "text": "  return i.results.skipped_ || FLAGS_benchmark_dry_run ||\n         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n",
                      "markdown": "`  return i.results.skipped_ || FLAGS_benchmark_dry_run ||\n         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n             GetMinTimeToApply() ||  // The elapsed time is large enough.\n         // CPU time is specified but the elapsed real time greatly exceeds\n         // the minimum time.\n         // Note that user provided timers are except from this test.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 49,
                  "endLine": 358,
                  "snippet": {
                    "text": "bool BenchmarkRunner::ShouldReportIterationResults(\n    const IterationResults& i) const {\n  // Determine if this run should be reported;\n  // Either it has run for a sufficient amount of time\n  // or because an error was reported.\n  return i.results.skipped_ || FLAGS_benchmark_dry_run ||\n         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n",
                    "rendered": {
                      "text": "bool BenchmarkRunner::ShouldReportIterationResults(\n    const IterationResults& i) const {\n  // Determine if this run should be reported;\n  // Either it has run for a sufficient amount of time\n  // or because an error was reported.\n  return i.results.skipped_ || FLAGS_benchmark_dry_run ||\n         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n",
                      "markdown": "`bool BenchmarkRunner::ShouldReportIterationResults(\n    const IterationResults& i) const {\n  // Determine if this run should be reported;\n  // Either it has run for a sufficient amount of time\n  // or because an error was reported.\n  return i.results.skipped_ || FLAGS_benchmark_dry_run ||\n         i.iters >= kMaxIterations ||  // Too many iterations already.\n         i.seconds >=\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 56,
                  "endLine": 338,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n  multiplier = is_significant ? multiplier : 10.0;\n",
                    "rendered": {
                      "text": "  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n  multiplier = is_significant ? multiplier : 10.0;\n",
                      "markdown": "`  // If our last run was at least 10% of FLAGS_benchmark_min_time then we\n  // use the multiplier directly.\n  // Otherwise we use at most 10 times expansion.\n  // NOTE: When the last run was at least 10% of the min time the max\n  // expansion should be 14x.\n  const bool is_significant = (i.seconds / GetMinTimeToApply()) > 0.1;\n  multiplier = is_significant ? multiplier : 10.0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.cc"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 31,
                  "endLine": 319,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  // requested, so take the iteration count from i.results.\n  i.iters = i.results.iterations / b.threads();\n\n  // Base decisions off of real time if requested by this benchmark.\n  i.seconds = i.results.cpu_time_used;\n  if (b.use_manual_time()) {\n    i.seconds = i.results.manual_time_used;\n",
                    "rendered": {
                      "text": "  // requested, so take the iteration count from i.results.\n  i.iters = i.results.iterations / b.threads();\n\n  // Base decisions off of real time if requested by this benchmark.\n  i.seconds = i.results.cpu_time_used;\n  if (b.use_manual_time()) {\n    i.seconds = i.results.manual_time_used;\n",
                      "markdown": "`  // requested, so take the iteration count from i.results.\n  i.iters = i.results.iterations / b.threads();\n\n  // Base decisions off of real time if requested by this benchmark.\n  i.seconds = i.results.cpu_time_used;\n  if (b.use_manual_time()) {\n    i.seconds = i.results.manual_time_used;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/statistics.cc"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 39,
                  "endLine": 7,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/console_reporter.cc"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 25,
                  "endLine": 122,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  if (time < 100.0) {\n    return FormatString(\"%10.1f\", time);\n  }\n  // Assuming the time is at max 9.9999e+99 and we have 10 digits for the\n  // number, we get 10-1(.)-1(e)-1(sign)-2(exponent) = 5 digits to print.\n  if (time > 9999999999 /*max 10 digit number*/) {\n    return FormatString(\"%1.4e\", time);\n",
                    "rendered": {
                      "text": "  if (time < 100.0) {\n    return FormatString(\"%10.1f\", time);\n  }\n  // Assuming the time is at max 9.9999e+99 and we have 10 digits for the\n  // number, we get 10-1(.)-1(e)-1(sign)-2(exponent) = 5 digits to print.\n  if (time > 9999999999 /*max 10 digit number*/) {\n    return FormatString(\"%1.4e\", time);\n",
                      "markdown": "`  if (time < 100.0) {\n    return FormatString(\"%10.1f\", time);\n  }\n  // Assuming the time is at max 9.9999e+99 and we have 10 digits for the\n  // number, we get 10-1(.)-1(e)-1(sign)-2(exponent) = 5 digits to print.\n  if (time > 9999999999 /*max 10 digit number*/) {\n    return FormatString(\"%1.4e\", time);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/console_reporter.cc"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 7,
                  "endLine": 111,
                  "endColumn": 11,
                  "snippet": {
                    "text": "static std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n  if (time < 1.0) {\n    return FormatString(\"%10.3f\", time);\n",
                    "rendered": {
                      "text": "static std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n  if (time < 1.0) {\n    return FormatString(\"%10.3f\", time);\n",
                      "markdown": "`static std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n  if (time < 1.0) {\n    return FormatString(\"%10.3f\", time);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/console_reporter.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/console_reporter.cc"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 17,
                  "endLine": 122,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  if (time < 100.0) {\n    return FormatString(\"%10.1f\", time);\n  }\n  // Assuming the time is at max 9.9999e+99 and we have 10 digits for the\n  // number, we get 10-1(.)-1(e)-1(sign)-2(exponent) = 5 digits to print.\n  if (time > 9999999999 /*max 10 digit number*/) {\n    return FormatString(\"%1.4e\", time);\n",
                    "rendered": {
                      "text": "  if (time < 100.0) {\n    return FormatString(\"%10.1f\", time);\n  }\n  // Assuming the time is at max 9.9999e+99 and we have 10 digits for the\n  // number, we get 10-1(.)-1(e)-1(sign)-2(exponent) = 5 digits to print.\n  if (time > 9999999999 /*max 10 digit number*/) {\n    return FormatString(\"%1.4e\", time);\n",
                      "markdown": "`  if (time < 100.0) {\n    return FormatString(\"%10.1f\", time);\n  }\n  // Assuming the time is at max 9.9999e+99 and we have 10 digits for the\n  // number, we get 10-1(.)-1(e)-1(sign)-2(exponent) = 5 digits to print.\n  if (time > 9999999999 /*max 10 digit number*/) {\n    return FormatString(\"%1.4e\", time);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/console_reporter.cc"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 48,
                  "endLine": 110,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nstatic std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n  if (time < 1.0) {\n",
                    "rendered": {
                      "text": "\nstatic std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n  if (time < 1.0) {\n",
                      "markdown": "`\nstatic std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n  if (time < 1.0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/console_reporter.cc"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 12,
                  "endLine": 109,
                  "endColumn": 18,
                  "snippet": {
                    "text": "}\n\nstatic std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n",
                    "rendered": {
                      "text": "}\n\nstatic std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n",
                      "markdown": "`}\n\nstatic std::string FormatTime(double time) {\n  // For the time columns of the console printer 13 digits are reserved. One of\n  // them is a space and max two of them are the time unit (e.g ns). That puts\n  // us at 10 digits usable for the number.\n  // Align decimal places...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/console_reporter.cc"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 68,
                  "endLine": 94,
                  "snippet": {
                    "text": "      prev_counters_ = run.counters;\n      PrintHeader(run);\n    }\n    // As an alternative to printing the headers like this, we could sort\n    // the benchmarks by header and then print. But this would require\n    // waiting for the full results before printing, or printing twice.\n    PrintRunData(run);\n  }\n",
                    "rendered": {
                      "text": "      prev_counters_ = run.counters;\n      PrintHeader(run);\n    }\n    // As an alternative to printing the headers like this, we could sort\n    // the benchmarks by header and then print. But this would require\n    // waiting for the full results before printing, or printing twice.\n    PrintRunData(run);\n  }\n",
                      "markdown": "`      prev_counters_ = run.counters;\n      PrintHeader(run);\n    }\n    // As an alternative to printing the headers like this, we could sort\n    // the benchmarks by header and then print. But this would require\n    // waiting for the full results before printing, or printing twice.\n    PrintRunData(run);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_main.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/csv_reporter.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_runner.h"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 15,
                  "endLine": 42,
                  "endColumn": 21,
                  "snippet": {
                    "text": "};\n\nstruct BENCHMARK_EXPORT BenchTimeType {\n  enum { ITERS, TIME } tag;\n  union {\n    IterationCount iters;\n    double time;\n",
                    "rendered": {
                      "text": "};\n\nstruct BENCHMARK_EXPORT BenchTimeType {\n  enum { ITERS, TIME } tag;\n  union {\n    IterationCount iters;\n    double time;\n",
                      "markdown": "`};\n\nstruct BENCHMARK_EXPORT BenchTimeType {\n  enum { ITERS, TIME } tag;\n  union {\n    IterationCount iters;\n    double time;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 29,
                  "endLine": 224,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n  // correct one.\n  double multiplier = GetTimeUnitMultiplier(reports[0].time_unit);\n",
                    "rendered": {
                      "text": "\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n  // correct one.\n  double multiplier = GetTimeUnitMultiplier(reports[0].time_unit);\n",
                      "markdown": "`\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n  // correct one.\n  double multiplier = GetTimeUnitMultiplier(reports[0].time_unit);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 29,
                  "endLine": 246,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  rms.cpu_accumulated_time = result_cpu.rms / multiplier;\n  rms.report_rms = true;\n  rms.complexity = result_cpu.complexity;\n  // don't forget to keep the time unit, or we won't be able to\n  // recover the correct value.\n  rms.time_unit = reports[0].time_unit;\n\n",
                    "rendered": {
                      "text": "  rms.cpu_accumulated_time = result_cpu.rms / multiplier;\n  rms.report_rms = true;\n  rms.complexity = result_cpu.complexity;\n  // don't forget to keep the time unit, or we won't be able to\n  // recover the correct value.\n  rms.time_unit = reports[0].time_unit;\n\n",
                      "markdown": "`  rms.cpu_accumulated_time = result_cpu.rms / multiplier;\n  rms.report_rms = true;\n  rms.complexity = result_cpu.complexity;\n  // don't forget to keep the time unit, or we won't be able to\n  // recover the correct value.\n  rms.time_unit = reports[0].time_unit;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 4,
                  "endLine": 223,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  big_o.complexity = result_cpu.complexity;\n\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n  // correct one.\n",
                    "rendered": {
                      "text": "  big_o.complexity = result_cpu.complexity;\n\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n  // correct one.\n",
                      "markdown": "`  big_o.complexity = result_cpu.complexity;\n\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n  // correct one.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 12,
                  "endLine": 222,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  big_o.report_big_o = true;\n  big_o.complexity = result_cpu.complexity;\n\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n",
                    "rendered": {
                      "text": "  big_o.report_big_o = true;\n  big_o.complexity = result_cpu.complexity;\n\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n",
                      "markdown": "`  big_o.report_big_o = true;\n  big_o.complexity = result_cpu.complexity;\n\n  // All the time results are reported after being multiplied by the\n  // time unit multiplier. But since RMS is a relative quantity it\n  // should not be multiplied at all. So, here, we _divide_ it by the\n  // multiplier so that when it is multiplied later the result is the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 37,
                  "endLine": 191,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    if (use_real_time_for_initial_big_o) {\n      result_real = MinimalLeastSq(n, real_time, *InitialBigO);\n      InitialBigO = &result_real.complexity;\n      // The Big-O complexity for CPU time must have the same Big-O function!\n    }\n    result_cpu = MinimalLeastSq(n, cpu_time, *InitialBigO);\n    InitialBigO = &result_cpu.complexity;\n",
                    "rendered": {
                      "text": "    if (use_real_time_for_initial_big_o) {\n      result_real = MinimalLeastSq(n, real_time, *InitialBigO);\n      InitialBigO = &result_real.complexity;\n      // The Big-O complexity for CPU time must have the same Big-O function!\n    }\n    result_cpu = MinimalLeastSq(n, cpu_time, *InitialBigO);\n    InitialBigO = &result_cpu.complexity;\n",
                      "markdown": "`    if (use_real_time_for_initial_big_o) {\n      result_real = MinimalLeastSq(n, real_time, *InitialBigO);\n      InitialBigO = &result_real.complexity;\n      // The Big-O complexity for CPU time must have the same Big-O function!\n    }\n    result_cpu = MinimalLeastSq(n, cpu_time, *InitialBigO);\n    InitialBigO = &result_cpu.complexity;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 6,
                  "endLine": 119,
                  "endColumn": 12,
                  "snippet": {
                    "text": "// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error.\n//   - n          : Vector containing the size of the benchmark tests.\n//   - time       : Vector containing the times for the benchmark tests.\n//   - complexity : If different than oAuto, the fitting curve will stick to\n//                  this one. If it is oAuto, it will be calculated the best\n//                  fitting curve.\n",
                    "rendered": {
                      "text": "// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error.\n//   - n          : Vector containing the size of the benchmark tests.\n//   - time       : Vector containing the times for the benchmark tests.\n//   - complexity : If different than oAuto, the fitting curve will stick to\n//                  this one. If it is oAuto, it will be calculated the best\n//                  fitting curve.\n",
                      "markdown": "`// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error.\n//   - n          : Vector containing the size of the benchmark tests.\n//   - time       : Vector containing the times for the benchmark tests.\n//   - complexity : If different than oAuto, the fitting curve will stick to\n//                  this one. If it is oAuto, it will be calculated the best\n//                  fitting curve.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 2,
                  "endLine": 116,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  return result;\n}\n\n// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error.\n//   - n          : Vector containing the size of the benchmark tests.\n//   - time       : Vector containing the times for the benchmark tests.\n",
                    "rendered": {
                      "text": "  return result;\n}\n\n// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error.\n//   - n          : Vector containing the size of the benchmark tests.\n//   - time       : Vector containing the times for the benchmark tests.\n",
                      "markdown": "`  return result;\n}\n\n// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error.\n//   - n          : Vector containing the size of the benchmark tests.\n//   - time       : Vector containing the times for the benchmark tests.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 6,
                  "endLine": 75,
                  "endColumn": 12,
                  "snippet": {
                    "text": "// minimizing the sum of squares of relative error, for the fitting curve\n// given by the lambda expression.\n//   - n             : Vector containing the size of the benchmark tests.\n//   - time          : Vector containing the times for the benchmark tests.\n//   - fitting_curve : lambda expression (e.g. [](ComplexityN n) {return n; };).\n\n// For a deeper explanation on the algorithm logic, please refer to\n",
                    "rendered": {
                      "text": "// minimizing the sum of squares of relative error, for the fitting curve\n// given by the lambda expression.\n//   - n             : Vector containing the size of the benchmark tests.\n//   - time          : Vector containing the times for the benchmark tests.\n//   - fitting_curve : lambda expression (e.g. [](ComplexityN n) {return n; };).\n\n// For a deeper explanation on the algorithm logic, please refer to\n",
                      "markdown": "`// minimizing the sum of squares of relative error, for the fitting curve\n// given by the lambda expression.\n//   - n             : Vector containing the size of the benchmark tests.\n//   - time          : Vector containing the times for the benchmark tests.\n//   - fitting_curve : lambda expression (e.g. [](ComplexityN n) {return n; };).\n\n// For a deeper explanation on the algorithm logic, please refer to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/complexity.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 2,
                  "endLine": 71,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  }\n}\n\n// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error, for the fitting curve\n// given by the lambda expression.\n//   - n             : Vector containing the size of the benchmark tests.\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error, for the fitting curve\n// given by the lambda expression.\n//   - n             : Vector containing the size of the benchmark tests.\n",
                      "markdown": "`  }\n}\n\n// Find the coefficient for the high-order term in the running time, by\n// minimizing the sum of squares of relative error, for the fitting curve\n// given by the lambda expression.\n//   - n             : Vector containing the size of the benchmark tests.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark_name.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/colorprint.cc"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 13,
                  "endLine": 110,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  std::unique_ptr<char[]> buff(new char[size]);\n  ret = vsnprintf(buff.get(), size, msg, args);\n  BM_CHECK(ret > 0 && (static_cast<size_t>(ret)) < size);\n  return buff.get();\n}\n\nstd::string FormatString(const char* msg, ...) {\n",
                    "rendered": {
                      "text": "  std::unique_ptr<char[]> buff(new char[size]);\n  ret = vsnprintf(buff.get(), size, msg, args);\n  BM_CHECK(ret > 0 && (static_cast<size_t>(ret)) < size);\n  return buff.get();\n}\n\nstd::string FormatString(const char* msg, ...) {\n",
                      "markdown": "`  std::unique_ptr<char[]> buff(new char[size]);\n  ret = vsnprintf(buff.get(), size, msg, args);\n  BM_CHECK(ret > 0 && (static_cast<size_t>(ret)) < size);\n  return buff.get();\n}\n\nstd::string FormatString(const char* msg, ...) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/colorprint.cc"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 22,
                  "endLine": 108,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  // we did not provide a long enough buffer on our first attempt.\n  size = static_cast<size_t>(ret) + 1;  // + 1 for the null byte\n  std::unique_ptr<char[]> buff(new char[size]);\n  ret = vsnprintf(buff.get(), size, msg, args);\n  BM_CHECK(ret > 0 && (static_cast<size_t>(ret)) < size);\n  return buff.get();\n}\n",
                    "rendered": {
                      "text": "  // we did not provide a long enough buffer on our first attempt.\n  size = static_cast<size_t>(ret) + 1;  // + 1 for the null byte\n  std::unique_ptr<char[]> buff(new char[size]);\n  ret = vsnprintf(buff.get(), size, msg, args);\n  BM_CHECK(ret > 0 && (static_cast<size_t>(ret)) < size);\n  return buff.get();\n}\n",
                      "markdown": "`  // we did not provide a long enough buffer on our first attempt.\n  size = static_cast<size_t>(ret) + 1;  // + 1 for the null byte\n  std::unique_ptr<char[]> buff(new char[size]);\n  ret = vsnprintf(buff.get(), size, msg, args);\n  BM_CHECK(ret > 0 && (static_cast<size_t>(ret)) < size);\n  return buff.get();\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/colorprint.cc"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 32,
                  "endLine": 86,
                  "endColumn": 36,
                  "snippet": {
                    "text": "}  // end namespace\n\nstd::string FormatString(const char* msg, va_list args) {\n  // we might need a second shot at this, so pre-emptivly make a copy\n  va_list args_cp;\n  va_copy(args_cp, args);\n\n",
                    "rendered": {
                      "text": "}  // end namespace\n\nstd::string FormatString(const char* msg, va_list args) {\n  // we might need a second shot at this, so pre-emptivly make a copy\n  va_list args_cp;\n  va_copy(args_cp, args);\n\n",
                      "markdown": "`}  // end namespace\n\nstd::string FormatString(const char* msg, va_list args) {\n  // we might need a second shot at this, so pre-emptivly make a copy\n  va_list args_cp;\n  va_copy(args_cp, args);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/colorprint.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/perf_counters.cc"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 12,
                  "endLine": 181,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          // Create a new group\n          group_id = -1;\n        } else {\n          // At this point we have already retried to set a new group id and\n          // failed. We then give up.\n          break;\n        }\n",
                    "rendered": {
                      "text": "          // Create a new group\n          group_id = -1;\n        } else {\n          // At this point we have already retried to set a new group id and\n          // failed. We then give up.\n          break;\n        }\n",
                      "markdown": "`          // Create a new group\n          group_id = -1;\n        } else {\n          // At this point we have already retried to set a new group id and\n          // failed. We then give up.\n          break;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/perf_counters.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/cmake/GoogleTest.cmake.in"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 28,
                  "endLine": 37,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    message(SEND_ERROR \"Did not find Google Test sources! Either pass correct path in GOOGLETEST_PATH, or enable BENCHMARK_DOWNLOAD_DEPENDENCIES, or disable BENCHMARK_USE_BUNDLED_GTEST, or disable BENCHMARK_ENABLE_GTEST_TESTS / BENCHMARK_ENABLE_TESTING.\")\n    return()\n  else()\n    message(WARNING \"Did not find Google Test sources! Fetching from web...\")\n    ExternalProject_Add(\n      googletest\n      GIT_REPOSITORY    https://github.com/google/googletest.git\n",
                    "rendered": {
                      "text": "    message(SEND_ERROR \"Did not find Google Test sources! Either pass correct path in GOOGLETEST_PATH, or enable BENCHMARK_DOWNLOAD_DEPENDENCIES, or disable BENCHMARK_USE_BUNDLED_GTEST, or disable BENCHMARK_ENABLE_GTEST_TESTS / BENCHMARK_ENABLE_TESTING.\")\n    return()\n  else()\n    message(WARNING \"Did not find Google Test sources! Fetching from web...\")\n    ExternalProject_Add(\n      googletest\n      GIT_REPOSITORY    https://github.com/google/googletest.git\n",
                      "markdown": "`    message(SEND_ERROR \"Did not find Google Test sources! Either pass correct path in GOOGLETEST_PATH, or enable BENCHMARK_DOWNLOAD_DEPENDENCIES, or disable BENCHMARK_USE_BUNDLED_GTEST, or disable BENCHMARK_ENABLE_GTEST_TESTS / BENCHMARK_ENABLE_TESTING.\")\n    return()\n  else()\n    message(WARNING \"Did not find Google Test sources! Fetching from web...\")\n    ExternalProject_Add(\n      googletest\n      GIT_REPOSITORY    https://github.com/google/googletest.git\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/cmake/GoogleTest.cmake.in"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 31,
                  "endLine": 34,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  )\nelse()\n  if(NOT ALLOW_DOWNLOADING_GOOGLETEST)\n    message(SEND_ERROR \"Did not find Google Test sources! Either pass correct path in GOOGLETEST_PATH, or enable BENCHMARK_DOWNLOAD_DEPENDENCIES, or disable BENCHMARK_USE_BUNDLED_GTEST, or disable BENCHMARK_ENABLE_GTEST_TESTS / BENCHMARK_ENABLE_TESTING.\")\n    return()\n  else()\n    message(WARNING \"Did not find Google Test sources! Fetching from web...\")\n",
                    "rendered": {
                      "text": "  )\nelse()\n  if(NOT ALLOW_DOWNLOADING_GOOGLETEST)\n    message(SEND_ERROR \"Did not find Google Test sources! Either pass correct path in GOOGLETEST_PATH, or enable BENCHMARK_DOWNLOAD_DEPENDENCIES, or disable BENCHMARK_USE_BUNDLED_GTEST, or disable BENCHMARK_ENABLE_GTEST_TESTS / BENCHMARK_ENABLE_TESTING.\")\n    return()\n  else()\n    message(WARNING \"Did not find Google Test sources! Fetching from web...\")\n",
                      "markdown": "`  )\nelse()\n  if(NOT ALLOW_DOWNLOADING_GOOGLETEST)\n    message(SEND_ERROR \"Did not find Google Test sources! Either pass correct path in GOOGLETEST_PATH, or enable BENCHMARK_DOWNLOAD_DEPENDENCIES, or disable BENCHMARK_USE_BUNDLED_GTEST, or disable BENCHMARK_ENABLE_GTEST_TESTS / BENCHMARK_ENABLE_TESTING.\")\n    return()\n  else()\n    message(WARNING \"Did not find Google Test sources! Fetching from web...\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/bazel.yml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 11,
                  "endLine": 19,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    steps:\n    - uses: actions/checkout@v4\n\n    - name: mount bazel cache\n      uses: actions/cache@v4\n      env:\n        cache-name: bazel-cache\n",
                    "rendered": {
                      "text": "    steps:\n    - uses: actions/checkout@v4\n\n    - name: mount bazel cache\n      uses: actions/cache@v4\n      env:\n        cache-name: bazel-cache\n",
                      "markdown": "`    steps:\n    - uses: actions/checkout@v4\n\n    - name: mount bazel cache\n      uses: actions/cache@v4\n      env:\n        cache-name: bazel-cache\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-min-cmake.yml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 14,
                  "endLine": 45,
                  "snippet": {
                    "text": "          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build .\n",
                    "rendered": {
                      "text": "          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build .\n",
                      "markdown": "`          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build .\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-min-cmake.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 14,
                  "endLine": 35,
                  "snippet": {
                    "text": "      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n",
                    "rendered": {
                      "text": "      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n",
                      "markdown": "`      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-min-cmake.yml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 14,
                  "endLine": 45,
                  "snippet": {
                    "text": "          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build .\n",
                    "rendered": {
                      "text": "          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build .\n",
                      "markdown": "`          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON\n\n      - name: build\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: cmake --build .\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/build-and-test-min-cmake.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 14,
                  "endLine": 35,
                  "snippet": {
                    "text": "      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n",
                    "rendered": {
                      "text": "      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n",
                      "markdown": "`      - name: configure cmake\n        env:\n          CXX: ${{ matrix.compiler }}\n        shell: bash\n        working-directory: ${{ runner.workspace }}/_build\n        run: >\n          cmake -C ${{ github.workspace }}/compiler-cache.cmake\n          $GITHUB_WORKSPACE\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 95,
                  "snippet": {
                    "text": "      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: ctest -C ${{ matrix.build_type }} -VV\n",
                    "rendered": {
                      "text": "      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: ctest -C ${{ matrix.build_type }} -VV\n",
                      "markdown": "`      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: ctest -C ${{ matrix.build_type }} -VV\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 12,
                  "endLine": 90,
                  "snippet": {
                    "text": "        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n",
                    "rendered": {
                      "text": "        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n",
                      "markdown": "`        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 12,
                  "endLine": 75,
                  "snippet": {
                    "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        VERBOSE=1\n        cmake $GITHUB_WORKSPACE\n",
                    "rendered": {
                      "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        VERBOSE=1\n        cmake $GITHUB_WORKSPACE\n",
                      "markdown": "`      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        VERBOSE=1\n        cmake $GITHUB_WORKSPACE\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 95,
                  "snippet": {
                    "text": "      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: ctest -C ${{ matrix.build_type }} -VV\n",
                    "rendered": {
                      "text": "      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: ctest -C ${{ matrix.build_type }} -VV\n",
                      "markdown": "`      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: ctest -C ${{ matrix.build_type }} -VV\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 12,
                  "endLine": 90,
                  "snippet": {
                    "text": "        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n",
                    "rendered": {
                      "text": "        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n",
                      "markdown": "`        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: build\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - name: test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 12,
                  "endLine": 75,
                  "snippet": {
                    "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        VERBOSE=1\n        cmake $GITHUB_WORKSPACE\n",
                    "rendered": {
                      "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        VERBOSE=1\n        cmake $GITHUB_WORKSPACE\n",
                      "markdown": "`      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        VERBOSE=1\n        cmake $GITHUB_WORKSPACE\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 26,
                  "endLine": 42,
                  "snippet": {
                    "text": "        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=address -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Address\" >> $GITHUB_ENV\n\n    - name: configure tsan env\n      if: matrix.sanitizer == 'tsan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=thread -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Thread\" >> $GITHUB_ENV\n",
                    "rendered": {
                      "text": "        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=address -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Address\" >> $GITHUB_ENV\n\n    - name: configure tsan env\n      if: matrix.sanitizer == 'tsan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=thread -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Thread\" >> $GITHUB_ENV\n",
                      "markdown": "`        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=address -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Address\" >> $GITHUB_ENV\n\n    - name: configure tsan env\n      if: matrix.sanitizer == 'tsan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=thread -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Thread\" >> $GITHUB_ENV\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 26,
                  "endLine": 36,
                  "snippet": {
                    "text": "        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=undefined -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Undefined\" >> $GITHUB_ENV\n\n    - name: configure asan env\n      if: matrix.sanitizer == 'asan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=address -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Address\" >> $GITHUB_ENV\n",
                    "rendered": {
                      "text": "        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=undefined -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Undefined\" >> $GITHUB_ENV\n\n    - name: configure asan env\n      if: matrix.sanitizer == 'asan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=address -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Address\" >> $GITHUB_ENV\n",
                      "markdown": "`        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=undefined -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Undefined\" >> $GITHUB_ENV\n\n    - name: configure asan env\n      if: matrix.sanitizer == 'asan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=address -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Address\" >> $GITHUB_ENV\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 27,
                  "endLine": 30,
                  "snippet": {
                    "text": "        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=memory -fsanitize-memory-track-origins\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=MemoryWithOrigins\" >> $GITHUB_ENV\n\n    - name: configure ubsan env\n      if: matrix.sanitizer == 'ubsan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=undefined -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Undefined\" >> $GITHUB_ENV\n",
                    "rendered": {
                      "text": "        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=memory -fsanitize-memory-track-origins\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=MemoryWithOrigins\" >> $GITHUB_ENV\n\n    - name: configure ubsan env\n      if: matrix.sanitizer == 'ubsan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=undefined -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Undefined\" >> $GITHUB_ENV\n",
                      "markdown": "`        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=memory -fsanitize-memory-track-origins\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=MemoryWithOrigins\" >> $GITHUB_ENV\n\n    - name: configure ubsan env\n      if: matrix.sanitizer == 'ubsan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=undefined -fno-sanitize-recover=all\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=Undefined\" >> $GITHUB_ENV\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/sanitizer.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 26,
                  "endLine": 24,
                  "snippet": {
                    "text": "    steps:\n    - uses: actions/checkout@v4\n\n    - name: configure msan env\n      if: matrix.sanitizer == 'msan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=memory -fsanitize-memory-track-origins\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=MemoryWithOrigins\" >> $GITHUB_ENV\n",
                    "rendered": {
                      "text": "    steps:\n    - uses: actions/checkout@v4\n\n    - name: configure msan env\n      if: matrix.sanitizer == 'msan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=memory -fsanitize-memory-track-origins\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=MemoryWithOrigins\" >> $GITHUB_ENV\n",
                      "markdown": "`    steps:\n    - uses: actions/checkout@v4\n\n    - name: configure msan env\n      if: matrix.sanitizer == 'msan'\n      run: |\n        echo \"EXTRA_FLAGS=-g -O2 -fno-omit-frame-pointer -fsanitize=memory -fsanitize-memory-track-origins\" >> $GITHUB_ENV\n        echo \"LIBCXX_SANITIZER=MemoryWithOrigins\" >> $GITHUB_ENV\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/libcxx-setup.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\n# Checkout LLVM sources\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\n# Checkout LLVM sources\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\n# Checkout LLVM sources\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/libcxx-setup.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "endLine": 6,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nset -e\n\n# Checkout LLVM sources\ngit clone --depth=1 --branch llvmorg-16.0.6 https://github.com/llvm/llvm-project.git llvm-project\n\n## Setup libc++ options\nif [ -z \"$BUILD_32_BITS\" ]; then\n",
                    "rendered": {
                      "text": "\nset -e\n\n# Checkout LLVM sources\ngit clone --depth=1 --branch llvmorg-16.0.6 https://github.com/llvm/llvm-project.git llvm-project\n\n## Setup libc++ options\nif [ -z \"$BUILD_32_BITS\" ]; then\n",
                      "markdown": "`\nset -e\n\n# Checkout LLVM sources\ngit clone --depth=1 --branch llvmorg-16.0.6 https://github.com/llvm/llvm-project.git llvm-project\n\n## Setup libc++ options\nif [ -z \"$BUILD_32_BITS\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/libcxx-setup.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\n# Checkout LLVM sources\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\n# Checkout LLVM sources\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\n# Checkout LLVM sources\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/setup.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 45,
                  "endLine": 151,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                elif fp.suffix == \".pyi\":\n                    should_copy = True\n                elif Path(root) == srcdir and f == \"py.typed\":\n                    # copy py.typed, but only at the package root.\n                    should_copy = True\n\n                if should_copy:\n",
                    "rendered": {
                      "text": "                elif fp.suffix == \".pyi\":\n                    should_copy = True\n                elif Path(root) == srcdir and f == \"py.typed\":\n                    # copy py.typed, but only at the package root.\n                    should_copy = True\n\n                if should_copy:\n",
                      "markdown": "`                elif fp.suffix == \".pyi\":\n                    should_copy = True\n                elif Path(root) == srcdir and f == \"py.typed\":\n                    # copy py.typed, but only at the package root.\n                    should_copy = True\n\n                if should_copy:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/setup.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 37,
                  "endLine": 119,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            for library_dir in self.library_dirs:\n                bazel_argv.append(\"--linkopt=/LIBPATH:\" + library_dir)\n        elif IS_MAC:\n            # C++17 needs macOS 10.14 at minimum\n            bazel_argv.append(\"--macos_minimum_os=10.14\")\n\n        with _maybe_patch_toolchains():\n",
                    "rendered": {
                      "text": "            for library_dir in self.library_dirs:\n                bazel_argv.append(\"--linkopt=/LIBPATH:\" + library_dir)\n        elif IS_MAC:\n            # C++17 needs macOS 10.14 at minimum\n            bazel_argv.append(\"--macos_minimum_os=10.14\")\n\n        with _maybe_patch_toolchains():\n",
                      "markdown": "`            for library_dir in self.library_dirs:\n                bazel_argv.append(\"--linkopt=/LIBPATH:\" + library_dir)\n        elif IS_MAC:\n            # C++17 needs macOS 10.14 at minimum\n            bazel_argv.append(\"--macos_minimum_os=10.14\")\n\n        with _maybe_patch_toolchains():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/setup.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "endLine": 31,
                  "endColumn": 25,
                  "snippet": {
                    "text": "def _maybe_patch_toolchains() -> Generator[None, None, None]:\n    \"\"\"\n    Patch rules_python toolchains to ignore root user error\n    when run in a Docker container on Linux in cibuildwheel.\n    \"\"\"\n\n    def fmt_toolchain_args(matchobj):\n",
                    "rendered": {
                      "text": "def _maybe_patch_toolchains() -> Generator[None, None, None]:\n    \"\"\"\n    Patch rules_python toolchains to ignore root user error\n    when run in a Docker container on Linux in cibuildwheel.\n    \"\"\"\n\n    def fmt_toolchain_args(matchobj):\n",
                      "markdown": "`def _maybe_patch_toolchains() -> Generator[None, None, None]:\n    \"\"\"\n    Patch rules_python toolchains to ignore root user error\n    when run in a Docker container on Linux in cibuildwheel.\n    \"\"\"\n\n    def fmt_toolchain_args(matchobj):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/appveyor.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 7,
                  "endLine": 32,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  fast_finish: true\n\ninstall:\n  # git bash conflicts with MinGW makefiles\n  - if \"%generator%\"==\"MinGW Makefiles\" (set \"PATH=%PATH:C:\\Program Files\\Git\\usr\\bin;=%\")\n  - if not \"%cxx_path%\"==\"\" (set \"PATH=%PATH%;%cxx_path%\")\n\n",
                    "rendered": {
                      "text": "  fast_finish: true\n\ninstall:\n  # git bash conflicts with MinGW makefiles\n  - if \"%generator%\"==\"MinGW Makefiles\" (set \"PATH=%PATH:C:\\Program Files\\Git\\usr\\bin;=%\")\n  - if not \"%cxx_path%\"==\"\" (set \"PATH=%PATH%;%cxx_path%\")\n\n",
                      "markdown": "`  fast_finish: true\n\ninstall:\n  # git bash conflicts with MinGW makefiles\n  - if \"%generator%\"==\"MinGW Makefiles\" (set \"PATH=%PATH:C:\\Program Files\\Git\\usr\\bin;=%\")\n  - if not \"%cxx_path%\"==\"\" (set \"PATH=%PATH%;%cxx_path%\")\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/appveyor.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 3,
                  "endLine": 32,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  fast_finish: true\n\ninstall:\n  # git bash conflicts with MinGW makefiles\n  - if \"%generator%\"==\"MinGW Makefiles\" (set \"PATH=%PATH:C:\\Program Files\\Git\\usr\\bin;=%\")\n  - if not \"%cxx_path%\"==\"\" (set \"PATH=%PATH%;%cxx_path%\")\n\n",
                    "rendered": {
                      "text": "  fast_finish: true\n\ninstall:\n  # git bash conflicts with MinGW makefiles\n  - if \"%generator%\"==\"MinGW Makefiles\" (set \"PATH=%PATH:C:\\Program Files\\Git\\usr\\bin;=%\")\n  - if not \"%cxx_path%\"==\"\" (set \"PATH=%PATH%;%cxx_path%\")\n\n",
                      "markdown": "`  fast_finish: true\n\ninstall:\n  # git bash conflicts with MinGW makefiles\n  - if \"%generator%\"==\"MinGW Makefiles\" (set \"PATH=%PATH:C:\\Program Files\\Git\\usr\\bin;=%\")\n  - if not \"%cxx_path%\"==\"\" (set \"PATH=%PATH%;%cxx_path%\")\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 37,
                  "endLine": 155,
                  "endColumn": 41,
                  "snippet": {
                    "text": "[`v2` branch](https://github.com/google/benchmark/tree/v2). Users who wish\nto use, test, and provide feedback on the new features are encouraged to try\nthis branch. However, this branch provides no stability guarantees and reserves\nthe right to change and break the API at any time.\n\n## Usage\n\n",
                    "rendered": {
                      "text": "[`v2` branch](https://github.com/google/benchmark/tree/v2). Users who wish\nto use, test, and provide feedback on the new features are encouraged to try\nthis branch. However, this branch provides no stability guarantees and reserves\nthe right to change and break the API at any time.\n\n## Usage\n\n",
                      "markdown": "`[`v2` branch](https://github.com/google/benchmark/tree/v2). Users who wish\nto use, test, and provide feedback on the new features are encouraged to try\nthis branch. However, this branch provides no stability guarantees and reserves\nthe right to change and break the API at any time.\n\n## Usage\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 69,
                  "endLine": 153,
                  "snippet": {
                    "text": "being made only upon the release of a new major version.\n\nNewer, experimental, features are implemented and tested on the\n[`v2` branch](https://github.com/google/benchmark/tree/v2). Users who wish\nto use, test, and provide feedback on the new features are encouraged to try\nthis branch. However, this branch provides no stability guarantees and reserves\nthe right to change and break the API at any time.\n\n",
                    "rendered": {
                      "text": "being made only upon the release of a new major version.\n\nNewer, experimental, features are implemented and tested on the\n[`v2` branch](https://github.com/google/benchmark/tree/v2). Users who wish\nto use, test, and provide feedback on the new features are encouraged to try\nthis branch. However, this branch provides no stability guarantees and reserves\nthe right to change and break the API at any time.\n\n",
                      "markdown": "`being made only upon the release of a new major version.\n\nNewer, experimental, features are implemented and tested on the\n[`v2` branch](https://github.com/google/benchmark/tree/v2). Users who wish\nto use, test, and provide feedback on the new features are encouraged to try\nthis branch. However, this branch provides no stability guarantees and reserves\nthe right to change and break the API at any time.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 13,
                  "endLine": 118,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  configuration as above, the library will automatically download and build\n  any required dependencies.\n\nIf you do not wish to build and run the tests, add `-DBENCHMARK_ENABLE_GTEST_TESTS=OFF`\nto `CMAKE_ARGS`.\n\n### Debug vs Release\n",
                    "rendered": {
                      "text": "  configuration as above, the library will automatically download and build\n  any required dependencies.\n\nIf you do not wish to build and run the tests, add `-DBENCHMARK_ENABLE_GTEST_TESTS=OFF`\nto `CMAKE_ARGS`.\n\n### Debug vs Release\n",
                      "markdown": "`  configuration as above, the library will automatically download and build\n  any required dependencies.\n\nIf you do not wish to build and run the tests, add `-DBENCHMARK_ENABLE_GTEST_TESTS=OFF`\nto `CMAKE_ARGS`.\n\n### Debug vs Release\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n```bash\n# Check out the library.\n$ git clone https://github.com/google/benchmark.git\n# Go to the library root directory\n$ cd benchmark\n# Make a build directory to place the build output.\n",
                    "rendered": {
                      "text": "\n```bash\n# Check out the library.\n$ git clone https://github.com/google/benchmark.git\n# Go to the library root directory\n$ cd benchmark\n# Make a build directory to place the build output.\n",
                      "markdown": "`\n```bash\n# Check out the library.\n$ git clone https://github.com/google/benchmark.git\n# Go to the library root directory\n$ cd benchmark\n# Make a build directory to place the build output.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 4,
                  "endLine": 66,
                  "endColumn": 9,
                  "snippet": {
                    "text": "## Installation\n\nThis describes the installation process using cmake. As pre-requisites, you'll\nneed git and cmake installed.\n\n_See [dependencies.md](docs/dependencies.md) for more details regarding supported\nversions of build tools._\n",
                    "rendered": {
                      "text": "## Installation\n\nThis describes the installation process using cmake. As pre-requisites, you'll\nneed git and cmake installed.\n\n_See [dependencies.md](docs/dependencies.md) for more details regarding supported\nversions of build tools._\n",
                      "markdown": "`## Installation\n\nThis describes the installation process using cmake. As pre-requisites, you'll\nneed git and cmake installed.\n\n_See [dependencies.md](docs/dependencies.md) for more details regarding supported\nversions of build tools._\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/benchmark_setup_teardown_test.cc"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 35,
                  "endLine": 148,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n  // Setup is called 4 times, once for each arg group (1,3,5,7)\n  assert(fixture_interaction::setup == 4);\n  // Fixture::Setup is called every time the bm routine is run.\n  // The exact number is indeterministic, so we just assert that\n  // it's more than setup.\n  assert(fixture_interaction::fixture_setup > fixture_interaction::setup);\n",
                    "rendered": {
                      "text": "\n  // Setup is called 4 times, once for each arg group (1,3,5,7)\n  assert(fixture_interaction::setup == 4);\n  // Fixture::Setup is called every time the bm routine is run.\n  // The exact number is indeterministic, so we just assert that\n  // it's more than setup.\n  assert(fixture_interaction::fixture_setup > fixture_interaction::setup);\n",
                      "markdown": "`\n  // Setup is called 4 times, once for each arg group (1,3,5,7)\n  assert(fixture_interaction::setup == 4);\n  // Fixture::Setup is called every time the bm routine is run.\n  // The exact number is indeterministic, so we just assert that\n  // it's more than setup.\n  assert(fixture_interaction::fixture_setup > fixture_interaction::setup);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/BUILD"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 26,
                  "endLine": 87,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n        }) + PER_SRC_COPTS.get(test_src, []),\n        deps = [\n            \":output_test_helper\",\n            \"//:benchmark\",\n",
                    "rendered": {
                      "text": "        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n        }) + PER_SRC_COPTS.get(test_src, []),\n        deps = [\n            \":output_test_helper\",\n            \"//:benchmark\",\n",
                      "markdown": "`        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n        }) + PER_SRC_COPTS.get(test_src, []),\n        deps = [\n            \":output_test_helper\",\n            \"//:benchmark\",\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/BUILD"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 44,
                  "endLine": 83,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        name = test_src[:-len(\".cc\")],\n        size = \"small\",\n        srcs = [test_src],\n        args = TEST_ARGS + PER_SRC_TEST_ARGS.get(test_src, []),\n        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n",
                    "rendered": {
                      "text": "        name = test_src[:-len(\".cc\")],\n        size = \"small\",\n        srcs = [test_src],\n        args = TEST_ARGS + PER_SRC_TEST_ARGS.get(test_src, []),\n        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n",
                      "markdown": "`        name = test_src[:-len(\".cc\")],\n        size = \"small\",\n        srcs = [test_src],\n        args = TEST_ARGS + PER_SRC_TEST_ARGS.get(test_src, []),\n        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/BUILD"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 26,
                  "endLine": 66,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n        }) + PER_SRC_COPTS.get(test_src, []),\n        deps = [\n            \"//:benchmark\",\n            \"//:benchmark_internal_headers\",\n",
                    "rendered": {
                      "text": "        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n        }) + PER_SRC_COPTS.get(test_src, []),\n        deps = [\n            \"//:benchmark\",\n            \"//:benchmark_internal_headers\",\n",
                      "markdown": "`        copts = select({\n            \"//:windows\": [],\n            \"//conditions:default\": TEST_COPTS,\n        }) + PER_SRC_COPTS.get(test_src, []),\n        deps = [\n            \"//:benchmark\",\n            \"//:benchmark_internal_headers\",\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/benchmark_test.cc"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 8,
                  "endLine": 157,
                  "endColumn": 17,
                  "snippet": {
                    "text": "BENCHMARK(BM_SetupTeardown)->ThreadPerCpu();\n\nstatic void BM_LongTest(benchmark::State& state) {\n  double tracker = 0.0;\n  for (auto _ : state) {\n    for (int i = 0; i < state.range(0); ++i)\n      benchmark::DoNotOptimize(tracker += i);\n",
                    "rendered": {
                      "text": "BENCHMARK(BM_SetupTeardown)->ThreadPerCpu();\n\nstatic void BM_LongTest(benchmark::State& state) {\n  double tracker = 0.0;\n  for (auto _ : state) {\n    for (int i = 0; i < state.range(0); ++i)\n      benchmark::DoNotOptimize(tracker += i);\n",
                      "markdown": "`BENCHMARK(BM_SetupTeardown)->ThreadPerCpu();\n\nstatic void BM_LongTest(benchmark::State& state) {\n  double tracker = 0.0;\n  for (auto _ : state) {\n    for (int i = 0; i < state.range(0); ++i)\n      benchmark::DoNotOptimize(tracker += i);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/benchmark_test.cc"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 20,
                  "endLine": 100,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                          static_cast<int64_t>(sizeof(int)));\n}\n\n// Test many inserts at once to reduce the total iterations needed. Otherwise,\n// the slower, non-timed part of each iteration will make the benchmark take\n// forever.\nBENCHMARK(BM_SetInsert)->Ranges({{1 << 10, 8 << 10}, {128, 512}});\n",
                    "rendered": {
                      "text": "                          static_cast<int64_t>(sizeof(int)));\n}\n\n// Test many inserts at once to reduce the total iterations needed. Otherwise,\n// the slower, non-timed part of each iteration will make the benchmark take\n// forever.\nBENCHMARK(BM_SetInsert)->Ranges({{1 << 10, 8 << 10}, {128, 512}});\n",
                      "markdown": "`                          static_cast<int64_t>(sizeof(int)));\n}\n\n// Test many inserts at once to reduce the total iterations needed. Otherwise,\n// the slower, non-timed part of each iteration will make the benchmark take\n// forever.\nBENCHMARK(BM_SetInsert)->Ranges({{1 << 10, 8 << 10}, {128, 512}});\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/perf_counters_gtest.cc"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 14,
                  "endLine": 272,
                  "endColumn": 18,
                  "snippet": {
                    "text": "TEST(PerfCountersTest, HardwareLimits) {\n  // The test works (i.e. causes read to fail) for the assumptions\n  // about hardware capabilities (i.e. small number (3-4) hardware\n  // counters) at this date,\n  // the same as previous test ReopenExistingCounters.\n  if (!PerfCounters::kSupported) {\n    GTEST_SKIP() << \"Test skipped because libpfm is not supported.\\n\";\n",
                    "rendered": {
                      "text": "TEST(PerfCountersTest, HardwareLimits) {\n  // The test works (i.e. causes read to fail) for the assumptions\n  // about hardware capabilities (i.e. small number (3-4) hardware\n  // counters) at this date,\n  // the same as previous test ReopenExistingCounters.\n  if (!PerfCounters::kSupported) {\n    GTEST_SKIP() << \"Test skipped because libpfm is not supported.\\n\";\n",
                      "markdown": "`TEST(PerfCountersTest, HardwareLimits) {\n  // The test works (i.e. causes read to fail) for the assumptions\n  // about hardware capabilities (i.e. small number (3-4) hardware\n  // counters) at this date,\n  // the same as previous test ReopenExistingCounters.\n  if (!PerfCounters::kSupported) {\n    GTEST_SKIP() << \"Test skipped because libpfm is not supported.\\n\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/perf_counters_gtest.cc"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 50,
                  "endLine": 225,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  // We need to first set up the counters, then start the threads, so the\n  // threads would inherit the counters. But later, we need to first destroy\n  // the thread pool (so all the work finishes), then measure the counters. So\n  // the scopes overlap, and we need to explicitly control the scope of the\n  // threadpool.\n  auto counters =\n      PerfCounters::Create({kGenericPerfEvent1, kGenericPerfEvent2});\n",
                    "rendered": {
                      "text": "  // We need to first set up the counters, then start the threads, so the\n  // threads would inherit the counters. But later, we need to first destroy\n  // the thread pool (so all the work finishes), then measure the counters. So\n  // the scopes overlap, and we need to explicitly control the scope of the\n  // threadpool.\n  auto counters =\n      PerfCounters::Create({kGenericPerfEvent1, kGenericPerfEvent2});\n",
                      "markdown": "`  // We need to first set up the counters, then start the threads, so the\n  // threads would inherit the counters. But later, we need to first destroy\n  // the thread pool (so all the work finishes), then measure the counters. So\n  // the scopes overlap, and we need to explicitly control the scope of the\n  // threadpool.\n  auto counters =\n      PerfCounters::Create({kGenericPerfEvent1, kGenericPerfEvent2});\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/perf_counters_gtest.cc"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 13,
                  "endLine": 146,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  EXPECT_TRUE(PerfCounters::Initialize());\n\n  // This means we will try 10 counters but we can only guarantee\n  // for sure at this time that only 3 will work. Perhaps in the future\n  // we could use libpfm to query for the hardware limits on this\n  // particular platform.\n  const int kMaxCounters = 10;\n",
                    "rendered": {
                      "text": "  EXPECT_TRUE(PerfCounters::Initialize());\n\n  // This means we will try 10 counters but we can only guarantee\n  // for sure at this time that only 3 will work. Perhaps in the future\n  // we could use libpfm to query for the hardware limits on this\n  // particular platform.\n  const int kMaxCounters = 10;\n",
                      "markdown": "`  EXPECT_TRUE(PerfCounters::Initialize());\n\n  // This means we will try 10 counters but we can only guarantee\n  // for sure at this time that only 3 will work. Perhaps in the future\n  // we could use libpfm to query for the hardware limits on this\n  // particular platform.\n  const int kMaxCounters = 10;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/perf_counters_gtest.cc"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 14,
                  "endLine": 138,
                  "endColumn": 18,
                  "snippet": {
                    "text": "TEST(PerfCountersTest, CreateExistingMeasurements) {\n  // The test works (i.e. causes read to fail) for the assumptions\n  // about hardware capabilities (i.e. small number (2) hardware\n  // counters) at this date,\n  // the same as previous test ReopenExistingCounters.\n  if (!PerfCounters::kSupported) {\n    GTEST_SKIP() << \"Test skipped because libpfm is not supported.\\n\";\n",
                    "rendered": {
                      "text": "TEST(PerfCountersTest, CreateExistingMeasurements) {\n  // The test works (i.e. causes read to fail) for the assumptions\n  // about hardware capabilities (i.e. small number (2) hardware\n  // counters) at this date,\n  // the same as previous test ReopenExistingCounters.\n  if (!PerfCounters::kSupported) {\n    GTEST_SKIP() << \"Test skipped because libpfm is not supported.\\n\";\n",
                      "markdown": "`TEST(PerfCountersTest, CreateExistingMeasurements) {\n  // The test works (i.e. causes read to fail) for the assumptions\n  // about hardware capabilities (i.e. small number (2) hardware\n  // counters) at this date,\n  // the same as previous test ReopenExistingCounters.\n  if (!PerfCounters::kSupported) {\n    GTEST_SKIP() << \"Test skipped because libpfm is not supported.\\n\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/perf_counters_gtest.cc"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 47,
                  "endLine": 243,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  PerfCounterValues before(2);\n  PerfCounterValues after(2);\n\n  // Notice that this test will work even if we taskset it to a single CPU\n  // In this case the threads will run sequentially\n  // Start two threads and measure the number of combined cycles and\n  // instructions\n",
                    "rendered": {
                      "text": "  PerfCounterValues before(2);\n  PerfCounterValues after(2);\n\n  // Notice that this test will work even if we taskset it to a single CPU\n  // In this case the threads will run sequentially\n  // Start two threads and measure the number of combined cycles and\n  // instructions\n",
                      "markdown": "`  PerfCounterValues before(2);\n  PerfCounterValues after(2);\n\n  // Notice that this test will work even if we taskset it to a single CPU\n  // In this case the threads will run sequentially\n  // Start two threads and measure the number of combined cycles and\n  // instructions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/perf_counters_gtest.cc"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 21,
                  "endLine": 146,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  EXPECT_TRUE(PerfCounters::Initialize());\n\n  // This means we will try 10 counters but we can only guarantee\n  // for sure at this time that only 3 will work. Perhaps in the future\n  // we could use libpfm to query for the hardware limits on this\n  // particular platform.\n  const int kMaxCounters = 10;\n",
                    "rendered": {
                      "text": "  EXPECT_TRUE(PerfCounters::Initialize());\n\n  // This means we will try 10 counters but we can only guarantee\n  // for sure at this time that only 3 will work. Perhaps in the future\n  // we could use libpfm to query for the hardware limits on this\n  // particular platform.\n  const int kMaxCounters = 10;\n",
                      "markdown": "`  EXPECT_TRUE(PerfCounters::Initialize());\n\n  // This means we will try 10 counters but we can only guarantee\n  // for sure at this time that only 3 will work. Perhaps in the future\n  // we could use libpfm to query for the hardware limits on this\n  // particular platform.\n  const int kMaxCounters = 10;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/perf_counters_gtest.cc"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 56,
                  "endLine": 61,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                                   {kGenericPerfEvent2, kGenericPerfEvent1}));\n  }\n  {\n    // Try sneaking in an outrageous counter, like a fat finger mistake\n    auto counter = PerfCounters::Create(\n        {kGenericPerfEvent2, \"not a counter name\", kGenericPerfEvent1});\n    EXPECT_EQ(counter.num_counters(), 2);\n",
                    "rendered": {
                      "text": "                                   {kGenericPerfEvent2, kGenericPerfEvent1}));\n  }\n  {\n    // Try sneaking in an outrageous counter, like a fat finger mistake\n    auto counter = PerfCounters::Create(\n        {kGenericPerfEvent2, \"not a counter name\", kGenericPerfEvent1});\n    EXPECT_EQ(counter.num_counters(), 2);\n",
                      "markdown": "`                                   {kGenericPerfEvent2, kGenericPerfEvent1}));\n  }\n  {\n    // Try sneaking in an outrageous counter, like a fat finger mistake\n    auto counter = PerfCounters::Create(\n        {kGenericPerfEvent2, \"not a counter name\", kGenericPerfEvent1});\n    EXPECT_EQ(counter.num_counters(), 2);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/test/benchmark_random_interleaving_gtest.cc"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 35,
                  "endLine": 56,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    std::unique_ptr<BenchmarkReporter> reporter(new NullReporter());\n    FLAGS_benchmark_filter = pattern;\n    RunSpecifiedBenchmarks(reporter.get());\n\n    queue->Put(\"DONE\");  // End marker\n  }\n",
                    "rendered": {
                      "text": "\n    std::unique_ptr<BenchmarkReporter> reporter(new NullReporter());\n    FLAGS_benchmark_filter = pattern;\n    RunSpecifiedBenchmarks(reporter.get());\n\n    queue->Put(\"DONE\");  // End marker\n  }\n",
                      "markdown": "`\n    std::unique_ptr<BenchmarkReporter> reporter(new NullReporter());\n    FLAGS_benchmark_filter = pattern;\n    RunSpecifiedBenchmarks(reporter.get());\n\n    queue->Put(\"DONE\");  // End marker\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/timers.cc"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 34,
                  "endLine": 168,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  return MakeTime(kernel_time, user_time);\n#elif defined(BENCHMARK_OS_QURT)\n  // Note that qurt_timer_get_ticks() is no longer documented as of SDK 5.3.0,\n  // and doesn't appear to work on at least some devices (eg Samsung S22),\n  // so let's use the actually-documented and apparently-equivalent\n  // qurt_sysclock_get_hw_ticks() call instead.\n  return static_cast<double>(\n",
                    "rendered": {
                      "text": "  return MakeTime(kernel_time, user_time);\n#elif defined(BENCHMARK_OS_QURT)\n  // Note that qurt_timer_get_ticks() is no longer documented as of SDK 5.3.0,\n  // and doesn't appear to work on at least some devices (eg Samsung S22),\n  // so let's use the actually-documented and apparently-equivalent\n  // qurt_sysclock_get_hw_ticks() call instead.\n  return static_cast<double>(\n",
                      "markdown": "`  return MakeTime(kernel_time, user_time);\n#elif defined(BENCHMARK_OS_QURT)\n  // Note that qurt_timer_get_ticks() is no longer documented as of SDK 5.3.0,\n  // and doesn't appear to work on at least some devices (eg Samsung S22),\n  // so let's use the actually-documented and apparently-equivalent\n  // qurt_sysclock_get_hw_ticks() call instead.\n  return static_cast<double>(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/timers.cc"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 34,
                  "endLine": 130,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  DiagnoseAndExit(\"GetProccessTimes() failed\");\n#elif defined(BENCHMARK_OS_QURT)\n  // Note that qurt_timer_get_ticks() is no longer documented as of SDK 5.3.0,\n  // and doesn't appear to work on at least some devices (eg Samsung S22),\n  // so let's use the actually-documented and apparently-equivalent\n  // qurt_sysclock_get_hw_ticks() call instead.\n  return static_cast<double>(\n",
                    "rendered": {
                      "text": "  DiagnoseAndExit(\"GetProccessTimes() failed\");\n#elif defined(BENCHMARK_OS_QURT)\n  // Note that qurt_timer_get_ticks() is no longer documented as of SDK 5.3.0,\n  // and doesn't appear to work on at least some devices (eg Samsung S22),\n  // so let's use the actually-documented and apparently-equivalent\n  // qurt_sysclock_get_hw_ticks() call instead.\n  return static_cast<double>(\n",
                      "markdown": "`  DiagnoseAndExit(\"GetProccessTimes() failed\");\n#elif defined(BENCHMARK_OS_QURT)\n  // Note that qurt_timer_get_ticks() is no longer documented as of SDK 5.3.0,\n  // and doesn't appear to work on at least some devices (eg Samsung S22),\n  // so let's use the actually-documented and apparently-equivalent\n  // qurt_sysclock_get_hw_ticks() call instead.\n  return static_cast<double>(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/timers.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/timers.cc"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 21,
                  "endLine": 263,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    ((void)tz_len);  // Prevent unused variable warning in optimized build.\n  } else {\n    // Unknown offset. RFC3339 specifies that unknown local offsets should be\n    // written as UTC time with -00:00 timezone.\n#if defined(BENCHMARK_OS_WINDOWS)\n    // Potential race condition if another thread calls localtime or gmtime.\n    timeinfo_p = ::gmtime(&now);\n",
                    "rendered": {
                      "text": "    ((void)tz_len);  // Prevent unused variable warning in optimized build.\n  } else {\n    // Unknown offset. RFC3339 specifies that unknown local offsets should be\n    // written as UTC time with -00:00 timezone.\n#if defined(BENCHMARK_OS_WINDOWS)\n    // Potential race condition if another thread calls localtime or gmtime.\n    timeinfo_p = ::gmtime(&now);\n",
                      "markdown": "`    ((void)tz_len);  // Prevent unused variable warning in optimized build.\n  } else {\n    // Unknown offset. RFC3339 specifies that unknown local offsets should be\n    // written as UTC time with -00:00 timezone.\n#if defined(BENCHMARK_OS_WINDOWS)\n    // Potential race condition if another thread calls localtime or gmtime.\n    timeinfo_p = ::gmtime(&now);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/timers.cc"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 20,
                  "endLine": 210,
                  "endColumn": 26,
                  "snippet": {
                    "text": "}\n\nstd::string LocalDateTimeString() {\n  // Write the local time in RFC3339 format yyyy-mm-ddTHH:MM:SS+/-HH:MM.\n  typedef std::chrono::system_clock Clock;\n  std::time_t now = Clock::to_time_t(Clock::now());\n  const std::size_t kTzOffsetLen = 6;\n",
                    "rendered": {
                      "text": "}\n\nstd::string LocalDateTimeString() {\n  // Write the local time in RFC3339 format yyyy-mm-ddTHH:MM:SS+/-HH:MM.\n  typedef std::chrono::system_clock Clock;\n  std::time_t now = Clock::to_time_t(Clock::now());\n  const std::size_t kTzOffsetLen = 6;\n",
                      "markdown": "`}\n\nstd::string LocalDateTimeString() {\n  // Write the local time in RFC3339 format yyyy-mm-ddTHH:MM:SS+/-HH:MM.\n  typedef std::chrono::system_clock Clock;\n  std::time_t now = Clock::to_time_t(Clock::now());\n  const std::size_t kTzOffsetLen = 6;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/timers.cc"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 46,
                  "endLine": 138,
                  "endColumn": 52,
                  "snippet": {
                    "text": "         1.0e-6;\n#elif defined(BENCHMARK_OS_EMSCRIPTEN)\n  // clock_gettime(CLOCK_PROCESS_CPUTIME_ID, ...) returns 0 on Emscripten.\n  // Use Emscripten-specific API. Reported CPU time would be exactly the\n  // same as total time, but this is ok because there aren't long-latency\n  // synchronous system calls in Emscripten.\n  return emscripten_get_now() * 1e-3;\n",
                    "rendered": {
                      "text": "         1.0e-6;\n#elif defined(BENCHMARK_OS_EMSCRIPTEN)\n  // clock_gettime(CLOCK_PROCESS_CPUTIME_ID, ...) returns 0 on Emscripten.\n  // Use Emscripten-specific API. Reported CPU time would be exactly the\n  // same as total time, but this is ok because there aren't long-latency\n  // synchronous system calls in Emscripten.\n  return emscripten_get_now() * 1e-3;\n",
                      "markdown": "`         1.0e-6;\n#elif defined(BENCHMARK_OS_EMSCRIPTEN)\n  // clock_gettime(CLOCK_PROCESS_CPUTIME_ID, ...) returns 0 on Emscripten.\n  // Use Emscripten-specific API. Reported CPU time would be exactly the\n  // same as total time, but this is ok because there aren't long-latency\n  // synchronous system calls in Emscripten.\n  return emscripten_get_now() * 1e-3;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/string_util.cc"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 29,
                  "endLine": 138,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  // 2015-10-08: vsnprintf is used instead of snd::vsnprintf due to a limitation\n  // in the android-ndk\n  vsnprintf(buff_ptr.get(), size, msg, args);\n  return std::string(buff_ptr.get());\n}\n\n}  // end namespace\n",
                    "rendered": {
                      "text": "  // 2015-10-08: vsnprintf is used instead of snd::vsnprintf due to a limitation\n  // in the android-ndk\n  vsnprintf(buff_ptr.get(), size, msg, args);\n  return std::string(buff_ptr.get());\n}\n\n}  // end namespace\n",
                      "markdown": "`  // 2015-10-08: vsnprintf is used instead of snd::vsnprintf due to a limitation\n  // in the android-ndk\n  vsnprintf(buff_ptr.get(), size, msg, args);\n  return std::string(buff_ptr.get());\n}\n\n}  // end namespace\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/string_util.cc"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 20,
                  "endLine": 137,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  auto buff_ptr = std::unique_ptr<char[]>(new char[size]);\n  // 2015-10-08: vsnprintf is used instead of snd::vsnprintf due to a limitation\n  // in the android-ndk\n  vsnprintf(buff_ptr.get(), size, msg, args);\n  return std::string(buff_ptr.get());\n}\n\n",
                    "rendered": {
                      "text": "  auto buff_ptr = std::unique_ptr<char[]>(new char[size]);\n  // 2015-10-08: vsnprintf is used instead of snd::vsnprintf due to a limitation\n  // in the android-ndk\n  vsnprintf(buff_ptr.get(), size, msg, args);\n  return std::string(buff_ptr.get());\n}\n\n",
                      "markdown": "`  auto buff_ptr = std::unique_ptr<char[]>(new char[size]);\n  // 2015-10-08: vsnprintf is used instead of snd::vsnprintf due to a limitation\n  // in the android-ndk\n  vsnprintf(buff_ptr.get(), size, msg, args);\n  return std::string(buff_ptr.get());\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/string_util.cc"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 32,
                  "endLine": 112,
                  "endColumn": 36,
                  "snippet": {
                    "text": "}\n\nstd::string StrFormatImp(const char* msg, va_list args) {\n  // we might need a second shot at this, so pre-emptivly make a copy\n  va_list args_cp;\n  va_copy(args_cp, args);\n\n",
                    "rendered": {
                      "text": "}\n\nstd::string StrFormatImp(const char* msg, va_list args) {\n  // we might need a second shot at this, so pre-emptivly make a copy\n  va_list args_cp;\n  va_copy(args_cp, args);\n\n",
                      "markdown": "`}\n\nstd::string StrFormatImp(const char* msg, va_list args) {\n  // we might need a second shot at this, so pre-emptivly make a copy\n  va_list args_cp;\n  va_copy(args_cp, args);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/counter.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark.cc"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 43,
                  "endLine": 617,
                  "endColumn": 48,
                  "snippet": {
                    "text": "          FLAGS_benchmark_out_format, FLAGS_benchmark_counters_tabular\n                                          ? ConsoleReporter::OO_Tabular\n                                          : ConsoleReporter::OO_None);\n      file_reporter = default_file_reporter.get();\n    }\n    file_reporter->SetOutputStream(&output_file);\n    file_reporter->SetErrorStream(&output_file);\n",
                    "rendered": {
                      "text": "          FLAGS_benchmark_out_format, FLAGS_benchmark_counters_tabular\n                                          ? ConsoleReporter::OO_Tabular\n                                          : ConsoleReporter::OO_None);\n      file_reporter = default_file_reporter.get();\n    }\n    file_reporter->SetOutputStream(&output_file);\n    file_reporter->SetErrorStream(&output_file);\n",
                      "markdown": "`          FLAGS_benchmark_out_format, FLAGS_benchmark_counters_tabular\n                                          ? ConsoleReporter::OO_Tabular\n                                          : ConsoleReporter::OO_None);\n      file_reporter = default_file_reporter.get();\n    }\n    file_reporter->SetOutputStream(&output_file);\n    file_reporter->SetErrorStream(&output_file);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark.cc"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 47,
                  "endLine": 590,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  std::unique_ptr<BenchmarkReporter> default_file_reporter;\n  if (!display_reporter) {\n    default_display_reporter.reset(CreateDefaultDisplayReporter());\n    display_reporter = default_display_reporter.get();\n  }\n  auto& Out = display_reporter->GetOutputStream();\n  auto& Err = display_reporter->GetErrorStream();\n",
                    "rendered": {
                      "text": "  std::unique_ptr<BenchmarkReporter> default_file_reporter;\n  if (!display_reporter) {\n    default_display_reporter.reset(CreateDefaultDisplayReporter());\n    display_reporter = default_display_reporter.get();\n  }\n  auto& Out = display_reporter->GetOutputStream();\n  auto& Err = display_reporter->GetErrorStream();\n",
                      "markdown": "`  std::unique_ptr<BenchmarkReporter> default_file_reporter;\n  if (!display_reporter) {\n    default_display_reporter.reset(CreateDefaultDisplayReporter());\n    display_reporter = default_display_reporter.get();\n  }\n  auto& Out = display_reporter->GetOutputStream();\n  auto& Err = display_reporter->GetErrorStream();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark.cc"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 13,
                  "endLine": 650,
                  "endColumn": 19,
                  "snippet": {
                    "text": "}\n\nnamespace {\n// stores the time unit benchmarks use by default\nTimeUnit default_time_unit = kNanosecond;\n}  // namespace\n\n",
                    "rendered": {
                      "text": "}\n\nnamespace {\n// stores the time unit benchmarks use by default\nTimeUnit default_time_unit = kNanosecond;\n}  // namespace\n\n",
                      "markdown": "`}\n\nnamespace {\n// stores the time unit benchmarks use by default\nTimeUnit default_time_unit = kNanosecond;\n}  // namespace\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark.cc"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 11,
                  "endLine": 247,
                  "endColumn": 17,
                  "snippet": {
                    "text": "}\n\nvoid State::PauseTiming() {\n  // Add in time accumulated so far\n  BM_CHECK(started_ && !finished_ && !skipped());\n  timer_->StopTimer();\n  if (perf_counters_measurement_) {\n",
                    "rendered": {
                      "text": "}\n\nvoid State::PauseTiming() {\n  // Add in time accumulated so far\n  BM_CHECK(started_ && !finished_ && !skipped());\n  timer_->StopTimer();\n  if (perf_counters_measurement_) {\n",
                      "markdown": "`}\n\nvoid State::PauseTiming() {\n  // Add in time accumulated so far\n  BM_CHECK(started_ && !finished_ && !skipped());\n  timer_->StopTimer();\n  if (perf_counters_measurement_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark.cc"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 18,
                  "endLine": 145,
                  "endColumn": 24,
                  "snippet": {
                    "text": "// pairs. Kept internal as it's only used for parsing from env/command line.\nBM_DEFINE_kvpairs(benchmark_context, {});\n\n// Set the default time unit to use for reports\n// Valid values are 'ns', 'us', 'ms' or 's'\nBM_DEFINE_string(benchmark_time_unit, \"\");\n\n",
                    "rendered": {
                      "text": "// pairs. Kept internal as it's only used for parsing from env/command line.\nBM_DEFINE_kvpairs(benchmark_context, {});\n\n// Set the default time unit to use for reports\n// Valid values are 'ns', 'us', 'ms' or 's'\nBM_DEFINE_string(benchmark_time_unit, \"\");\n\n",
                      "markdown": "`// pairs. Kept internal as it's only used for parsing from env/command line.\nBM_DEFINE_kvpairs(benchmark_context, {});\n\n// Set the default time unit to use for reports\n// Valid values are 'ns', 'us', 'ms' or 's'\nBM_DEFINE_string(benchmark_time_unit, \"\");\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark.cc"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 64,
                  "endLine": 80,
                  "endColumn": 70,
                  "snippet": {
                    "text": "//\n// For cpu-time based tests, this is the lower bound\n// on the total cpu time used by all threads that make up the test.  For\n// real-time based tests, this is the lower bound on the elapsed time of the\n// benchmark execution, regardless of number of threads.\nBM_DEFINE_string(benchmark_min_time, kDefaultMinTimeStr);\n\n",
                    "rendered": {
                      "text": "//\n// For cpu-time based tests, this is the lower bound\n// on the total cpu time used by all threads that make up the test.  For\n// real-time based tests, this is the lower bound on the elapsed time of the\n// benchmark execution, regardless of number of threads.\nBM_DEFINE_string(benchmark_min_time, kDefaultMinTimeStr);\n\n",
                      "markdown": "`//\n// For cpu-time based tests, this is the lower bound\n// on the total cpu time used by all threads that make up the test.  For\n// real-time based tests, this is the lower bound on the elapsed time of the\n// benchmark execution, regardless of number of threads.\nBM_DEFINE_string(benchmark_min_time, kDefaultMinTimeStr);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/src/benchmark.cc"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 19,
                  "endLine": 79,
                  "endColumn": 25,
                  "snippet": {
                    "text": "// the specified number is interpreted as the number of seconds.\n//\n// For cpu-time based tests, this is the lower bound\n// on the total cpu time used by all threads that make up the test.  For\n// real-time based tests, this is the lower bound on the elapsed time of the\n// benchmark execution, regardless of number of threads.\nBM_DEFINE_string(benchmark_min_time, kDefaultMinTimeStr);\n",
                    "rendered": {
                      "text": "// the specified number is interpreted as the number of seconds.\n//\n// For cpu-time based tests, this is the lower bound\n// on the total cpu time used by all threads that make up the test.  For\n// real-time based tests, this is the lower bound on the elapsed time of the\n// benchmark execution, regardless of number of threads.\nBM_DEFINE_string(benchmark_min_time, kDefaultMinTimeStr);\n",
                      "markdown": "`// the specified number is interpreted as the number of seconds.\n//\n// For cpu-time based tests, this is the lower bound\n// on the total cpu time used by all threads that make up the test.  For\n// real-time based tests, this is the lower bound on the elapsed time of the\n// benchmark execution, regardless of number of threads.\nBM_DEFINE_string(benchmark_min_time, kDefaultMinTimeStr);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/test_bindings.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 22,
                  "endLine": 27,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        with:\n          python-version: 3.11\n      - name: Install GBM Python bindings on ${{ matrix.os }}\n        run: python -m pip install .\n      - name: Run bindings example on ${{ matrix.os }}\n        run:\n          python bindings/python/google_benchmark/example.py\n",
                    "rendered": {
                      "text": "        with:\n          python-version: 3.11\n      - name: Install GBM Python bindings on ${{ matrix.os }}\n        run: python -m pip install .\n      - name: Run bindings example on ${{ matrix.os }}\n        run:\n          python bindings/python/google_benchmark/example.py\n",
                      "markdown": "`        with:\n          python-version: 3.11\n      - name: Install GBM Python bindings on ${{ matrix.os }}\n        run: python -m pip install .\n      - name: Run bindings example on ${{ matrix.os }}\n        run:\n          python bindings/python/google_benchmark/example.py\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/pre-commit.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 20,
                  "endLine": 28,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        cache: pip\n        cache-dependency-path: pyproject.toml\n    - name: Install dependencies\n      run: python -m pip install \".[dev]\"\n    - name: Cache pre-commit tools\n      uses: actions/cache@v4\n      with:\n",
                    "rendered": {
                      "text": "        cache: pip\n        cache-dependency-path: pyproject.toml\n    - name: Install dependencies\n      run: python -m pip install \".[dev]\"\n    - name: Cache pre-commit tools\n      uses: actions/cache@v4\n      with:\n",
                      "markdown": "`        cache: pip\n        cache-dependency-path: pyproject.toml\n    - name: Install dependencies\n      run: python -m pip install \".[dev]\"\n    - name: Cache pre-commit tools\n      uses: actions/cache@v4\n      with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/pre-commit.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 14,
                  "endLine": 26,
                  "snippet": {
                    "text": "      uses: actions/setup-python@v5\n      with:\n        python-version: 3.11\n        cache: pip\n        cache-dependency-path: pyproject.toml\n    - name: Install dependencies\n      run: python -m pip install \".[dev]\"\n    - name: Cache pre-commit tools\n",
                    "rendered": {
                      "text": "      uses: actions/setup-python@v5\n      with:\n        python-version: 3.11\n        cache: pip\n        cache-dependency-path: pyproject.toml\n    - name: Install dependencies\n      run: python -m pip install \".[dev]\"\n    - name: Cache pre-commit tools\n",
                      "markdown": "`      uses: actions/setup-python@v5\n      with:\n        python-version: 3.11\n        cache: pip\n        cache-dependency-path: pyproject.toml\n    - name: Install dependencies\n      run: python -m pip install \".[dev]\"\n    - name: Cache pre-commit tools\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/doxygen.yml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 16,
                  "endLine": 20,
                  "snippet": {
                    "text": "\n    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n",
                    "rendered": {
                      "text": "\n    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n",
                      "markdown": "`\n    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/doxygen.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 36,
                  "endLine": 21,
                  "snippet": {
                    "text": "    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n\n",
                    "rendered": {
                      "text": "    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n\n",
                      "markdown": "`    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/doxygen.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 12,
                  "endLine": 20,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n",
                    "rendered": {
                      "text": "    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n",
                      "markdown": "`    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n      run: mkdir build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/doxygen.yml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 12,
                  "endLine": 19,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n",
                    "rendered": {
                      "text": "\n    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n",
                      "markdown": "`\n    - name: Installing build dependencies\n      run: |\n        sudo apt update\n        sudo apt install doxygen gcc git\n\n    - name: Creating build directory\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/clang-tidy.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 12,
                  "endLine": 37,
                  "snippet": {
                    "text": "        -DGTEST_COMPILE_COMMANDS=OFF\n\n    - name: run\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: run-clang-tidy\n",
                    "rendered": {
                      "text": "        -DGTEST_COMPILE_COMMANDS=OFF\n\n    - name: run\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: run-clang-tidy\n",
                      "markdown": "`        -DGTEST_COMPILE_COMMANDS=OFF\n\n    - name: run\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: run-clang-tidy\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/clang-tidy.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 12,
                  "endLine": 24,
                  "snippet": {
                    "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_ASSEMBLY_TESTS=OFF\n",
                    "rendered": {
                      "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_ASSEMBLY_TESTS=OFF\n",
                      "markdown": "`      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_ASSEMBLY_TESTS=OFF\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/clang-tidy.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 19,
                  "endLine": 17,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                      "markdown": "`    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/clang-tidy.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 12,
                  "endLine": 37,
                  "snippet": {
                    "text": "        -DGTEST_COMPILE_COMMANDS=OFF\n\n    - name: run\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: run-clang-tidy\n",
                    "rendered": {
                      "text": "        -DGTEST_COMPILE_COMMANDS=OFF\n\n    - name: run\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: run-clang-tidy\n",
                      "markdown": "`        -DGTEST_COMPILE_COMMANDS=OFF\n\n    - name: run\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: run-clang-tidy\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/clang-tidy.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 12,
                  "endLine": 24,
                  "snippet": {
                    "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_ASSEMBLY_TESTS=OFF\n",
                    "rendered": {
                      "text": "      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_ASSEMBLY_TESTS=OFF\n",
                      "markdown": "`      run: cmake -E make_directory ${{ runner.workspace }}/_build\n\n    - name: configure cmake\n      shell: bash\n      working-directory: ${{ runner.workspace }}/_build\n      run: >\n        cmake $GITHUB_WORKSPACE\n        -DBENCHMARK_ENABLE_ASSEMBLY_TESTS=OFF\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/clang-tidy.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 34,
                  "endLine": 17,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                      "markdown": "`    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/.github/workflows/clang-tidy.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 15,
                  "endLine": 17,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n",
                      "markdown": "`    - uses: actions/checkout@v4\n\n    - name: install clang-tidy\n      run: sudo apt update && sudo apt -y install clang-tidy\n\n    - name: create build environment\n      run: cmake -E make_directory ${{ runner.workspace }}/_build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/strip_asm.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 11,
                  "endLine": 119,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            if reg.match(line) is not None:\n                add_line = False\n                break\n        for reg in keep_regexes:\n            if reg.match(line) is not None:\n                add_line = True\n                break\n",
                    "rendered": {
                      "text": "            if reg.match(line) is not None:\n                add_line = False\n                break\n        for reg in keep_regexes:\n            if reg.match(line) is not None:\n                add_line = True\n                break\n",
                      "markdown": "`            if reg.match(line) is not None:\n                add_line = False\n                break\n        for reg in keep_regexes:\n            if reg.match(line) is not None:\n                add_line = True\n                break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/strip_asm.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 11,
                  "endLine": 115,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        # Remove Mach-O attribute\n        line = line.replace(\"@GOTPCREL\", \"\")\n        add_line = True\n        for reg in discard_regexes:\n            if reg.match(line) is not None:\n                add_line = False\n                break\n",
                    "rendered": {
                      "text": "        # Remove Mach-O attribute\n        line = line.replace(\"@GOTPCREL\", \"\")\n        add_line = True\n        for reg in discard_regexes:\n            if reg.match(line) is not None:\n                add_line = False\n                break\n",
                      "markdown": "`        # Remove Mach-O attribute\n        line = line.replace(\"@GOTPCREL\", \"\")\n        add_line = True\n        for reg in discard_regexes:\n            if reg.match(line) is not None:\n                add_line = False\n                break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/tools/strip_asm.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 55,
                  "endLine": 70,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    \"\"\"\n    process_identifiers - process all identifiers and modify them to have\n    consistent names across all platforms; specifically across ELF and MachO.\n    For example, MachO inserts an additional understore at the beginning of\n    names. This function removes that.\n    \"\"\"\n    parts = re.split(r\"([a-zA-Z0-9_]+)\", line)\n",
                    "rendered": {
                      "text": "    \"\"\"\n    process_identifiers - process all identifiers and modify them to have\n    consistent names across all platforms; specifically across ELF and MachO.\n    For example, MachO inserts an additional understore at the beginning of\n    names. This function removes that.\n    \"\"\"\n    parts = re.split(r\"([a-zA-Z0-9_]+)\", line)\n",
                      "markdown": "`    \"\"\"\n    process_identifiers - process all identifiers and modify them to have\n    consistent names across all platforms; specifically across ELF and MachO.\n    For example, MachO inserts an additional understore at the beginning of\n    names. This function removes that.\n    \"\"\"\n    parts = re.split(r\"([a-zA-Z0-9_]+)\", line)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/benchmark.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 58,
                  "endLine": 52,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  1. Do your best to have [well-formed commit messages][] for each change.\n     This provides consistency throughout the project, and ensures that commit\n     messages are able to be formatted properly by various git tools.\n\n  1. Finally, push the commits to your fork and submit a [pull request][].\n\n",
                    "rendered": {
                      "text": "\n  1. Do your best to have [well-formed commit messages][] for each change.\n     This provides consistency throughout the project, and ensures that commit\n     messages are able to be formatted properly by various git tools.\n\n  1. Finally, push the commits to your fork and submit a [pull request][].\n\n",
                      "markdown": "`\n  1. Do your best to have [well-formed commit messages][] for each change.\n     This provides consistency throughout the project, and ensures that commit\n     messages are able to be formatted properly by various git tools.\n\n  1. Finally, push the commits to your fork and submit a [pull request][].\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}