{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 11,
                  "endLine": 11,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"akhq.fullname\" -}}\n",
                    "rendered": {
                      "text": "\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"akhq.fullname\" -}}\n",
                      "markdown": "`\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"akhq.fullname\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4,
                  "endLine": 3,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"akhq.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"akhq.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"akhq.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 22,
                  "endLine": 35,
                  "endColumn": 31,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"akhq.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create }}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"akhq.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create }}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"akhq.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4,
                  "endLine": 3,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"akhq.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"akhq.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"akhq.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/templates/service.yaml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 4,
                  "snippet": {
                    "text": "{{- if .Values.service.enabled }}\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"akhq.fullname\" . }}\n  labels:\n    app.kubernetes.io/name: {{ include \"akhq.name\" . }}\n",
                    "rendered": {
                      "text": "{{- if .Values.service.enabled }}\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"akhq.fullname\" . }}\n  labels:\n    app.kubernetes.io/name: {{ include \"akhq.name\" . }}\n",
                      "markdown": "`{{- if .Values.service.enabled }}\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"akhq.fullname\" . }}\n  labels:\n    app.kubernetes.io/name: {{ include \"akhq.name\" . }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/values.yaml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 24,
                  "endLine": 66,
                  "endColumn": 32,
                  "snippet": {
                    "text": "#          - name: \"my-connect\"\n#            url: \"http://connect:8083\"\n#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n",
                    "rendered": {
                      "text": "#          - name: \"my-connect\"\n#            url: \"http://connect:8083\"\n#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n",
                      "markdown": "`#          - name: \"my-connect\"\n#            url: \"http://connect:8083\"\n#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/values.yaml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 22,
                  "endLine": 61,
                  "endColumn": 30,
                  "snippet": {
                    "text": "#          url: \"http://schema-registry:8085\"\n#          type: \"confluent\"\n#          basic-auth-username: basic-auth-user\n#          basic-auth-password: basic-auth-pass\n#        connect:\n#          - name: \"my-connect\"\n#            url: \"http://connect:8083\"\n",
                    "rendered": {
                      "text": "#          url: \"http://schema-registry:8085\"\n#          type: \"confluent\"\n#          basic-auth-username: basic-auth-user\n#          basic-auth-password: basic-auth-pass\n#        connect:\n#          - name: \"my-connect\"\n#            url: \"http://connect:8083\"\n",
                      "markdown": "`#          url: \"http://schema-registry:8085\"\n#          type: \"confluent\"\n#          basic-auth-username: basic-auth-user\n#          basic-auth-password: basic-auth-pass\n#        connect:\n#          - name: \"my-connect\"\n#            url: \"http://connect:8083\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/values.yaml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 113,
                  "endLine": 36,
                  "endColumn": 121,
                  "snippet": {
                    "text": "#             properties:\n#               bootstrap.servers: \"kafka:9092\"\n# - name: JAVA_OPTS\n#   value: \"-Djavax.net.ssl.trustStore=/opt/java/openjdk/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=password\"\n# - name: CLASSPATH\n#   value: \"/any/additional/jars/desired.jar:/go/here.jar\"\n\n",
                    "rendered": {
                      "text": "#             properties:\n#               bootstrap.servers: \"kafka:9092\"\n# - name: JAVA_OPTS\n#   value: \"-Djavax.net.ssl.trustStore=/opt/java/openjdk/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=password\"\n# - name: CLASSPATH\n#   value: \"/any/additional/jars/desired.jar:/go/here.jar\"\n\n",
                      "markdown": "`#             properties:\n#               bootstrap.servers: \"kafka:9092\"\n# - name: JAVA_OPTS\n#   value: \"-Djavax.net.ssl.trustStore=/opt/java/openjdk/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=password\"\n# - name: CLASSPATH\n#   value: \"/any/additional/jars/desired.jar:/go/here.jar\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/values.yaml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 104,
                  "endLine": 36,
                  "endColumn": 112,
                  "snippet": {
                    "text": "#             properties:\n#               bootstrap.servers: \"kafka:9092\"\n# - name: JAVA_OPTS\n#   value: \"-Djavax.net.ssl.trustStore=/opt/java/openjdk/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=password\"\n# - name: CLASSPATH\n#   value: \"/any/additional/jars/desired.jar:/go/here.jar\"\n\n",
                    "rendered": {
                      "text": "#             properties:\n#               bootstrap.servers: \"kafka:9092\"\n# - name: JAVA_OPTS\n#   value: \"-Djavax.net.ssl.trustStore=/opt/java/openjdk/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=password\"\n# - name: CLASSPATH\n#   value: \"/any/additional/jars/desired.jar:/go/here.jar\"\n\n",
                      "markdown": "`#             properties:\n#               bootstrap.servers: \"kafka:9092\"\n# - name: JAVA_OPTS\n#   value: \"-Djavax.net.ssl.trustStore=/opt/java/openjdk/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=password\"\n# - name: CLASSPATH\n#   value: \"/any/additional/jars/desired.jar:/go/here.jar\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/values.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 15,
                  "endLine": 68,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n#  truststore.jks: MIIIE...\n#  keystore.jks: MIIIE...\n",
                    "rendered": {
                      "text": "#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n#  truststore.jks: MIIIE...\n#  keystore.jks: MIIIE...\n",
                      "markdown": "`#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n#  truststore.jks: MIIIE...\n#  keystore.jks: MIIIE...\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/values.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 14,
                  "endLine": 68,
                  "endColumn": 22,
                  "snippet": {
                    "text": "#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n#  truststore.jks: MIIIE...\n#  keystore.jks: MIIIE...\n",
                    "rendered": {
                      "text": "#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n#  truststore.jks: MIIIE...\n#  keystore.jks: MIIIE...\n",
                      "markdown": "`#            basic-auth-username: basic-auth-user\n#            basic-auth-password: basic-auth-pass\n\n#Provide extra base64 encoded kubernetes secrets (keystore/truststore)\nkafkaSecrets: {}\n#  truststore.jks: MIIIE...\n#  keystore.jks: MIIIE...\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/helm/akhq/values.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 80,
                  "endLine": 26,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\npodLabels: {}\n\n## You can put directly your configuration here... or add java opts or any other env vars\nextraEnv: []\n# - name: AKHQ_CONFIGURATION\n#   value: |\n",
                    "rendered": {
                      "text": "\npodLabels: {}\n\n## You can put directly your configuration here... or add java opts or any other env vars\nextraEnv: []\n# - name: AKHQ_CONFIGURATION\n#   value: |\n",
                      "markdown": "`\npodLabels: {}\n\n## You can put directly your configuration here... or add java opts or any other env vars\nextraEnv: []\n# - name: AKHQ_CONFIGURATION\n#   value: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 33,
                  "endLine": 24,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      groups:\n      - admin\n    - username: reader\n      password: \"<SHA-256 hashed password>\"\n      groups:\n      - reader\n```\n",
                    "rendered": {
                      "text": "      groups:\n      - admin\n    - username: reader\n      password: \"<SHA-256 hashed password>\"\n      groups:\n      - reader\n```\n",
                      "markdown": "`      groups:\n      - admin\n    - username: reader\n      password: \"<SHA-256 hashed password>\"\n      groups:\n      - reader\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 6,
                  "endLine": 24,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      groups:\n      - admin\n    - username: reader\n      password: \"<SHA-256 hashed password>\"\n      groups:\n      - reader\n```\n",
                    "rendered": {
                      "text": "      groups:\n      - admin\n    - username: reader\n      password: \"<SHA-256 hashed password>\"\n      groups:\n      - reader\n```\n",
                      "markdown": "`      groups:\n      - admin\n    - username: reader\n      password: \"<SHA-256 hashed password>\"\n      groups:\n      - reader\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 6,
                  "endLine": 20,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n    - username: reader\n",
                    "rendered": {
                      "text": "  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n    - username: reader\n",
                      "markdown": "`  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n    - username: reader\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 29,
                  "endLine": 19,
                  "endColumn": 37,
                  "snippet": {
                    "text": "akhq.security:\n  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n",
                    "rendered": {
                      "text": "akhq.security:\n  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n",
                      "markdown": "`akhq.security:\n  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 19,
                  "endColumn": 14,
                  "snippet": {
                    "text": "akhq.security:\n  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n",
                    "rendered": {
                      "text": "akhq.security:\n  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n",
                      "markdown": "`akhq.security:\n  basic-auth:\n    - username: admin\n      password: \"$2a$<hashed password>\"\n      passwordHash: BCRYPT\n      groups:\n      - admin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 22,
                  "endLine": 7,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n",
                    "rendered": {
                      "text": "    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n",
                      "markdown": "`    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 7,
                  "endLine": 7,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n",
                    "rendered": {
                      "text": "    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n",
                      "markdown": "`    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 68,
                  "endLine": 6,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\n",
                    "rendered": {
                      "text": "  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\n",
                      "markdown": "`  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 56,
                  "endLine": 6,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\n",
                    "rendered": {
                      "text": "  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\n",
                      "markdown": "`  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 108,
                  "endLine": 5,
                  "endColumn": 116,
                  "snippet": {
                    "text": "oles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n\n```yaml",
                    "rendered": {
                      "text": "oles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n\n```yaml",
                      "markdown": "`oles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for current user\n\nConfigure basic-auth connection in AKHQ\n\n```yaml`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 51,
                  "endLine": 5,
                  "endColumn": 59,
                  "snippet": {
                    "text": "ecurity.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for curre",
                    "rendered": {
                      "text": "ecurity.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for curre",
                      "markdown": "`ecurity.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n    * `groups`: Groups for curre`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 62,
                  "endLine": 4,
                  "endColumn": 70,
                  "snippet": {
                    "text": "# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n",
                    "rendered": {
                      "text": "# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n",
                      "markdown": "`# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 18,
                  "endLine": 4,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n",
                    "rendered": {
                      "text": "# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n",
                      "markdown": "`# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 4,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n",
                    "rendered": {
                      "text": "# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n",
                      "markdown": "`# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n      * For BCrypt, with Ansible filter <code v-pre>{{ 'password' | password_hash('blowfish') }}</code>\n    * `passwordHash`: Password hashing algorithm, either `SHA256` or `BCRYPT`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/basic-auth.md"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 42,
                  "endLine": 2,
                  "endColumn": 50,
                  "snippet": {
                    "text": "# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n",
                    "rendered": {
                      "text": "# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n",
                      "markdown": "`# Basic Auth\n* `akhq.security.basic-auth`: List user & password with affected roles\n  * `- username: actual-username`: Login of the current user as (maybe anything email, login, ...)\n    * `password`: Password in sha256 (default) or bcrypt. The password can be converted\n      * For default SHA256, with command `echo -n \"password\" | sha256sum` or Ansible filter <code v-pre>{{ 'password' | hash('sha256') }}</code>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/aws-iam-auth.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 23,
                  "endLine": 18,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        sasl.jaas.config: software.amazon.msk.auth.iam.IAMLoginModule required awsDebugCreds=true;\n        sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler\n        ssl.truststore.location: ${JAVA_HOME}/lib/security/cacerts\n        ssl.truststore.password: changeit\n```\n\n## References\n",
                    "rendered": {
                      "text": "        sasl.jaas.config: software.amazon.msk.auth.iam.IAMLoginModule required awsDebugCreds=true;\n        sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler\n        ssl.truststore.location: ${JAVA_HOME}/lib/security/cacerts\n        ssl.truststore.password: changeit\n```\n\n## References\n",
                      "markdown": "`        sasl.jaas.config: software.amazon.msk.auth.iam.IAMLoginModule required awsDebugCreds=true;\n        sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler\n        ssl.truststore.location: ${JAVA_HOME}/lib/security/cacerts\n        ssl.truststore.password: changeit\n```\n\n## References\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/ldap.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 7,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "If you want to enable anonymous auth to your LDAP server you can pass :\n```yaml\nmanagerDn: ''\nmanagerPassword: ''\n```\n\nIn Case your LDAP groups do not use the default UID for group membership, you can solve this using\n",
                    "rendered": {
                      "text": "If you want to enable anonymous auth to your LDAP server you can pass :\n```yaml\nmanagerDn: ''\nmanagerPassword: ''\n```\n\nIn Case your LDAP groups do not use the default UID for group membership, you can solve this using\n",
                      "markdown": "`If you want to enable anonymous auth to your LDAP server you can pass :\n```yaml\nmanagerDn: ''\nmanagerPassword: ''\n```\n\nIn Case your LDAP groups do not use the default UID for group membership, you can solve this using\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/ldap.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 28,
                  "endLine": 21,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n",
                    "rendered": {
                      "text": "        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n",
                      "markdown": "`        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/ldap.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 17,
                  "endLine": 21,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n",
                    "rendered": {
                      "text": "        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n",
                      "markdown": "`        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/external.md"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 65,
                  "endLine": 77,
                  "endColumn": 74,
                  "snippet": {
                    "text": "}\n````\n\nIf you want to send a static authentication token to the external service where it might be public, you can extend the configuration for the rest interface as follows:\n````yaml\nakhq:\n  security:\n",
                    "rendered": {
                      "text": "}\n````\n\nIf you want to send a static authentication token to the external service where it might be public, you can extend the configuration for the rest interface as follows:\n````yaml\nakhq:\n  security:\n",
                      "markdown": "`}\n````\n\nIf you want to send a static authentication token to the external service where it might be public, you can extend the configuration for the rest interface as follows:\n````yaml\nakhq:\n  security:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/external.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 3,
                  "endLine": 45,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  \"groups\": [\"LDAP-GROUP-1\", \"LDAP-GROUP-2\", \"LDAP-GROUP-3\"]\n}\n````\nand expect the following JSON as response :\n````json\n{\n  \"groups\": {\n",
                    "rendered": {
                      "text": "  \"groups\": [\"LDAP-GROUP-1\", \"LDAP-GROUP-2\", \"LDAP-GROUP-3\"]\n}\n````\nand expect the following JSON as response :\n````json\n{\n  \"groups\": {\n",
                      "markdown": "`  \"groups\": [\"LDAP-GROUP-1\", \"LDAP-GROUP-2\", \"LDAP-GROUP-3\"]\n}\n````\nand expect the following JSON as response :\n````json\n{\n  \"groups\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/header.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 26,
                  "endLine": 34,
                  "endColumn": 30,
                  "snippet": {
                    "text": " can be used in order to inject a list of groups for all the users. This list will be merged with `groups` for the current users.\n* `groups-header-separator` is optional and can be used to customize group separator used when parsing `groups-header` header, defaults to `,`.\n* `ip-patterns` limits the IP addresses that header authentication will accept, given as a list of Java regular expressions, omit or set to `[0.0.0.0]` to allow all addresses\n* `default-group` default AKHQ group, used when no groups were read from `groups-header`\n* `groups` maps external group names read from headers to AKHQ gro",
                    "rendered": {
                      "text": " can be used in order to inject a list of groups for all the users. This list will be merged with `groups` for the current users.\n* `groups-header-separator` is optional and can be used to customize group separator used when parsing `groups-header` header, defaults to `,`.\n* `ip-patterns` limits the IP addresses that header authentication will accept, given as a list of Java regular expressions, omit or set to `[0.0.0.0]` to allow all addresses\n* `default-group` default AKHQ group, used when no groups were read from `groups-header`\n* `groups` maps external group names read from headers to AKHQ gro",
                      "markdown": "` can be used in order to inject a list of groups for all the users. This list will be merged with `groups` for the current users.\n* `groups-header-separator` is optional and can be used to customize group separator used when parsing `groups-header` header, defaults to `,`.\n* `ip-patterns` limits the IP addresses that header authentication will accept, given as a list of Java regular expressions, omit or set to `[0.0.0.0]` to allow all addresses\n* `default-group` default AKHQ group, used when no groups were read from `groups-header`\n* `groups` maps external group names read from headers to AKHQ gro`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/header.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 86,
                  "endLine": 14,
                  "endColumn": 90,
                  "snippet": {
                    "text": "      user-header: x-akhq-user # mandatory (the header name that will contain username)\n      groups-header: x-akhq-group # optional (the header name that will contain groups separated by groups-header-separator)\n      groups-header-separator: , # optional (separator, defaults to ',')\n      ip-patterns: [0.0.0.0] # optional (Java regular expressions for matching trusted IP addresses, '0.0.0.0' matches all addresses)\n      default-group: topic-reader\n      groups: # optional\n        # the name of the user group read from header\n",
                    "rendered": {
                      "text": "      user-header: x-akhq-user # mandatory (the header name that will contain username)\n      groups-header: x-akhq-group # optional (the header name that will contain groups separated by groups-header-separator)\n      groups-header-separator: , # optional (separator, defaults to ',')\n      ip-patterns: [0.0.0.0] # optional (Java regular expressions for matching trusted IP addresses, '0.0.0.0' matches all addresses)\n      default-group: topic-reader\n      groups: # optional\n        # the name of the user group read from header\n",
                      "markdown": "`      user-header: x-akhq-user # mandatory (the header name that will contain username)\n      groups-header: x-akhq-group # optional (the header name that will contain groups separated by groups-header-separator)\n      groups-header-separator: , # optional (separator, defaults to ',')\n      ip-patterns: [0.0.0.0] # optional (Java regular expressions for matching trusted IP addresses, '0.0.0.0' matches all addresses)\n      default-group: topic-reader\n      groups: # optional\n        # the name of the user group read from header\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/jwt.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 32,
                  "endLine": 5,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nAKHQ uses signed JWT tokens to perform authentication.\n\nPlease generate a secret that is at least 256 bits.\n\nYou can use one of the following methods to provide the generated secret to AKHQ.\n\n",
                    "rendered": {
                      "text": "\nAKHQ uses signed JWT tokens to perform authentication.\n\nPlease generate a secret that is at least 256 bits.\n\nYou can use one of the following methods to provide the generated secret to AKHQ.\n\n",
                      "markdown": "`\nAKHQ uses signed JWT tokens to perform authentication.\n\nPlease generate a secret that is at least 256 bits.\n\nYou can use one of the following methods to provide the generated secret to AKHQ.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/groups.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "|-----------------|-----------|--------|------|-----|--------|\n| READ           | X     | X          | X              | X               | X         | X      | X    | X   | X      |\n| CREATE         | X     | X          |                |                 | X         | X      |      |     |        |\n| UPDATE         | X     | X          |                |                 |           | X      |      |     |        |\n| DELETE         | X     | X          | X              |                 | X         | X      |      |     |        |\n| UPDATE_OFFSET  |       |            | X              |                 ",
                    "rendered": {
                      "text": "|-----------------|-----------|--------|------|-----|--------|\n| READ           | X     | X          | X              | X               | X         | X      | X    | X   | X      |\n| CREATE         | X     | X          |                |                 | X         | X      |      |     |        |\n| UPDATE         | X     | X          |                |                 |           | X      |      |     |        |\n| DELETE         | X     | X          | X              |                 | X         | X      |      |     |        |\n| UPDATE_OFFSET  |       |            | X              |                 ",
                      "markdown": "`|-----------------|-----------|--------|------|-----|--------|\n| READ           | X     | X          | X              | X               | X         | X      | X    | X   | X      |\n| CREATE         | X     | X          |                |                 | X         | X      |      |     |        |\n| UPDATE         | X     | X          |                |                 |           | X      |      |     |        |\n| DELETE         | X     | X          | X              |                 | X         | X      |      |     |        |\n| UPDATE_OFFSET  |       |            | X              |                 `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/groups.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 70,
                  "endLine": 17,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n      * `clusters`: list of regular expression that cluster must match at least once to get access\n\n::: warning\nPlease also set the `micronaut.security.token.jwt.signatures.secret.generator.secret` if you set a group.\n",
                    "rendered": {
                      "text": "    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n      * `clusters`: list of regular expression that cluster must match at least once to get access\n\n::: warning\nPlease also set the `micronaut.security.token.jwt.signatures.secret.generator.secret` if you set a group.\n",
                      "markdown": "`    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n      * `clusters`: list of regular expression that cluster must match at least once to get access\n\n::: warning\nPlease also set the `micronaut.security.token.jwt.signatures.secret.generator.secret` if you set a group.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/groups.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 92,
                  "endLine": 16,
                  "endColumn": 96,
                  "snippet": {
                    "text": "  * `key:` a uniq key used as name if not specified\n    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n      * `clusters`: list of regular expression that cluster must match at least once to get access\n\n::: warning\n",
                    "rendered": {
                      "text": "  * `key:` a uniq key used as name if not specified\n    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n      * `clusters`: list of regular expression that cluster must match at least once to get access\n\n::: warning\n",
                      "markdown": "`  * `key:` a uniq key used as name if not specified\n    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n      * `clusters`: list of regular expression that cluster must match at least once to get access\n\n::: warning\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/groups.md"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 10,
                  "endLine": 64,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nA default roles list is predefined in `akhq.security.roles` but you can override it.\nA role contains:\n* `key:` a uniq key used as name\n  * A list of resources/actions associations\n    * `resources:` List of resources (ex: ```[ \"TOPIC\", \"TOPIC_DATA\"]```)\n    * `actions:` Actions allowed on the previous resources (ex: ```[ \"READ\", \"CREATE\"]```)\n",
                    "rendered": {
                      "text": "\nA default roles list is predefined in `akhq.security.roles` but you can override it.\nA role contains:\n* `key:` a uniq key used as name\n  * A list of resources/actions associations\n    * `resources:` List of resources (ex: ```[ \"TOPIC\", \"TOPIC_DATA\"]```)\n    * `actions:` Actions allowed on the previous resources (ex: ```[ \"READ\", \"CREATE\"]```)\n",
                      "markdown": "`\nA default roles list is predefined in `akhq.security.roles` but you can override it.\nA role contains:\n* `key:` a uniq key used as name\n  * A list of resources/actions associations\n    * `resources:` List of resources (ex: ```[ \"TOPIC\", \"TOPIC_DATA\"]```)\n    * `actions:` Actions allowed on the previous resources (ex: ```[ \"READ\", \"CREATE\"]```)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/groups.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 95,
                  "endLine": 46,
                  "endColumn": 101,
                  "snippet": {
                    "text": "\n<div style=\"text-align: center;\">\n\n|                | TOPIC | TOPIC_DATA | CONSUMER_GROUP | CONNECT_CLUSTER | CONNECTOR | SCHEMA | NODE | ACL | KSQLDB |\n|----------------|-------|------------|----------------|-----------------|-----------|--------|------|-----|--------|\n| READ           | X     | X          | X              | X               | X         | X      | X    | X   | X      |\n| CREATE         | X     | X          |                |                 | X         | X      |      |     |        |\n",
                    "rendered": {
                      "text": "\n<div style=\"text-align: center;\">\n\n|                | TOPIC | TOPIC_DATA | CONSUMER_GROUP | CONNECT_CLUSTER | CONNECTOR | SCHEMA | NODE | ACL | KSQLDB |\n|----------------|-------|------------|----------------|-----------------|-----------|--------|------|-----|--------|\n| READ           | X     | X          | X              | X               | X         | X      | X    | X   | X      |\n| CREATE         | X     | X          |                |                 | X         | X      |      |     |        |\n",
                      "markdown": "`\n<div style=\"text-align: center;\">\n\n|                | TOPIC | TOPIC_DATA | CONSUMER_GROUP | CONNECT_CLUSTER | CONNECTOR | SCHEMA | NODE | ACL | KSQLDB |\n|----------------|-------|------------|----------------|-----------------|-----------|--------|------|-----|--------|\n| READ           | X     | X          | X              | X               | X         | X      | X    | X   | X      |\n| CREATE         | X     | X          |                |                 | X         | X      |      |     |        |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/authentifications/groups.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 12,
                  "endLine": 13,
                  "endColumn": 18,
                  "snippet": {
                    "text": "* `akhq.security.default-group`: Default group for all the user even unlogged user\n\n* `akhq.security.groups`: Groups map definition\n  * `key:` a uniq key used as name if not specified\n    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n",
                    "rendered": {
                      "text": "* `akhq.security.default-group`: Default group for all the user even unlogged user\n\n* `akhq.security.groups`: Groups map definition\n  * `key:` a uniq key used as name if not specified\n    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n",
                      "markdown": "`* `akhq.security.default-group`: Default group for all the user even unlogged user\n\n* `akhq.security.groups`: Groups map definition\n  * `key:` a uniq key used as name if not specified\n    * A list of role/patterns/clusters association\n      * `role`: name of an existing role\n      * `patterns`: list of regular expression that resources from the given role must match at least once get access\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/schema-registry/tibco.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 35,
                  "endLine": 4,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n  akhq:\n",
                    "rendered": {
                      "text": "# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n  akhq:\n",
                      "markdown": "`# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n  akhq:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/schema-registry/tibco.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 22,
                  "endLine": 4,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n  akhq:\n",
                    "rendered": {
                      "text": "# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n  akhq:\n",
                      "markdown": "`# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n  akhq:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/schema-registry/tibco.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 65,
                  "endLine": 3,
                  "endColumn": 72,
                  "snippet": {
                    "text": "# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n",
                    "rendered": {
                      "text": "# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n",
                      "markdown": "`# TIBCO schema registry\n\nIf you are using the TIBCO schema registry, you will also need to mount and use the TIBCO Avro client library and its\ndependencies. The akhq service in a docker compose file might look something like:\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/Oauth.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 24,
                  "endLine": 30,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    public Provider getProvider(String key) {\n        providers.putIfAbsent(key, new Provider());\n        return providers.get(key);\n    }\n}\n",
                    "rendered": {
                      "text": "\n    public Provider getProvider(String key) {\n        providers.putIfAbsent(key, new Provider());\n        return providers.get(key);\n    }\n}\n",
                      "markdown": "`\n    public Provider getProvider(String key) {\n        providers.putIfAbsent(key, new Provider());\n        return providers.get(key);\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 81,
                  "endLine": 44,
                  "endColumn": 89,
                  "snippet": {
                    "text": "            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n",
                    "rendered": {
                      "text": "            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n",
                      "markdown": "`            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 58,
                  "endLine": 44,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n",
                    "rendered": {
                      "text": "            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n",
                      "markdown": "`            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 37,
                  "endLine": 44,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n",
                    "rendered": {
                      "text": "            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n",
                      "markdown": "`            }\n        };\n\n        public abstract boolean checkPassword(String plainPassword, String hashedPassword);\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 59,
                  "endLine": 40,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n        };\n\n",
                    "rendered": {
                      "text": "            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n        };\n\n",
                      "markdown": "`            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n        };\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 43,
                  "endLine": 40,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n        };\n\n",
                    "rendered": {
                      "text": "            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n        };\n\n",
                      "markdown": "`            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n        };\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 76,
                  "endLine": 38,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n",
                    "rendered": {
                      "text": "        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n",
                      "markdown": "`        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 53,
                  "endLine": 38,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n",
                    "rendered": {
                      "text": "        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n",
                      "markdown": "`        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 32,
                  "endLine": 38,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n",
                    "rendered": {
                      "text": "        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n",
                      "markdown": "`        },\n        BCRYPT {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                // See http://www.mindrot.org/projects/jBCrypt/\n                return BCrypt.checkpw(plainPassword, hashedPassword);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 49,
                  "endLine": 32,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n                                .toString());\n            }\n        },\n",
                    "rendered": {
                      "text": "            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n                                .toString());\n            }\n        },\n",
                      "markdown": "`            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n                                .toString());\n            }\n        },\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 29,
                  "endLine": 30,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n                                .toString());\n",
                    "rendered": {
                      "text": "        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n                                .toString());\n",
                      "markdown": "`        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n                                .toString());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 76,
                  "endLine": 29,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n",
                    "rendered": {
                      "text": "    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n",
                      "markdown": "`    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 53,
                  "endLine": 29,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n",
                    "rendered": {
                      "text": "    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n",
                      "markdown": "`    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 32,
                  "endLine": 29,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n",
                    "rendered": {
                      "text": "    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n",
                      "markdown": "`    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n                return hashedPassword.equals(\n                        Hashing.sha256()\n                                .hashString(plainPassword, StandardCharsets.UTF_8)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 16,
                  "endLine": 26,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    /**\n     * Password hashing algorithm\n     */\n    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n",
                    "rendered": {
                      "text": "    /**\n     * Password hashing algorithm\n     */\n    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n",
                      "markdown": "`    /**\n     * Password hashing algorithm\n     */\n    public enum PasswordHash {\n        SHA256 {\n            @Override\n            public boolean checkPassword(String plainPassword, String hashedPassword) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endLine": 24,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    }\n\n    /**\n     * Password hashing algorithm\n     */\n    public enum PasswordHash {\n        SHA256 {\n",
                    "rendered": {
                      "text": "    }\n\n    /**\n     * Password hashing algorithm\n     */\n    public enum PasswordHash {\n        SHA256 {\n",
                      "markdown": "`    }\n\n    /**\n     * Password hashing algorithm\n     */\n    public enum PasswordHash {\n        SHA256 {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 57,
                  "endLine": 20,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n",
                      "markdown": "`\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 42,
                  "endLine": 20,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n",
                      "markdown": "`\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 33,
                  "endLine": 20,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n",
                      "markdown": "`\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 15,
                  "endLine": 20,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n",
                      "markdown": "`\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 42,
                  "endLine": 19,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n",
                    "rendered": {
                      "text": "    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n",
                      "markdown": "`    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 26,
                  "endLine": 19,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n",
                    "rendered": {
                      "text": "    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n",
                      "markdown": "`    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n    public boolean isValidPassword(String password) {\n        return passwordHash.checkPassword(password, this.password);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 48,
                  "snippet": {
                    "text": "public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n",
                    "rendered": {
                      "text": "public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n",
                      "markdown": "`public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 25,
                  "endLine": 15,
                  "endColumn": 33,
                  "snippet": {
                    "text": "public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n",
                    "rendered": {
                      "text": "public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n",
                      "markdown": "`public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 12,
                  "endLine": 15,
                  "endColumn": 20,
                  "snippet": {
                    "text": "public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n",
                    "rendered": {
                      "text": "public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n",
                      "markdown": "`public class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n    @SuppressWarnings(\"UnstableApiUsage\")\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/BasicAuth.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 19,
                  "endLine": 14,
                  "endColumn": 27,
                  "snippet": {
                    "text": "@Data\npublic class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n",
                    "rendered": {
                      "text": "@Data\npublic class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n",
                      "markdown": "`@Data\npublic class BasicAuth {\n    private String username;\n    private String password;\n    private PasswordHash passwordHash = PasswordHash.SHA256;\n    private List<String> groups = new ArrayList<>();\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/security/Oidc.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 24,
                  "endLine": 32,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    public Provider getProvider(String key) {\n        providers.putIfAbsent(key, new Provider());\n        return providers.get(key);\n    }\n}\n",
                    "rendered": {
                      "text": "\n    public Provider getProvider(String key) {\n        providers.putIfAbsent(key, new Provider());\n        return providers.get(key);\n    }\n}\n",
                      "markdown": "`\n    public Provider getProvider(String key) {\n        providers.putIfAbsent(key, new Provider());\n        return providers.get(key);\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/Connection.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 24,
                  "endLine": 34,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    public static class SchemaRegistry {\n        String url;\n        String basicAuthUsername;\n        String basicAuthPassword;\n        SchemaRegistryType type = SchemaRegistryType.CONFLUENT;\n        String glueSchemaRegistryName;\n        String awsRegion;\n",
                    "rendered": {
                      "text": "    public static class SchemaRegistry {\n        String url;\n        String basicAuthUsername;\n        String basicAuthPassword;\n        SchemaRegistryType type = SchemaRegistryType.CONFLUENT;\n        String glueSchemaRegistryName;\n        String awsRegion;\n",
                      "markdown": "`    public static class SchemaRegistry {\n        String url;\n        String basicAuthUsername;\n        String basicAuthPassword;\n        SchemaRegistryType type = SchemaRegistryType.CONFLUENT;\n        String glueSchemaRegistryName;\n        String awsRegion;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 20,
                  "endLine": 185,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                return new KsqlDbQueryResult(new ArrayList<>(), new ArrayList<>());\n            }\n            return new KsqlDbQueryResult(\n                rows.get(0).columnNames(),\n                rows.stream().map(row -> row.values().toJsonString()).collect(Collectors.toList())\n            );\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n",
                    "rendered": {
                      "text": "                return new KsqlDbQueryResult(new ArrayList<>(), new ArrayList<>());\n            }\n            return new KsqlDbQueryResult(\n                rows.get(0).columnNames(),\n                rows.stream().map(row -> row.values().toJsonString()).collect(Collectors.toList())\n            );\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n",
                      "markdown": "`                return new KsqlDbQueryResult(new ArrayList<>(), new ArrayList<>());\n            }\n            return new KsqlDbQueryResult(\n                rows.get(0).columnNames(),\n                rows.stream().map(row -> row.values().toJsonString()).collect(Collectors.toList())\n            );\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 16,
                  "endLine": 180,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeQuery(sql, stringObjectHashMap)\n                .get();\n            if (rows.size() == 0) {\n                return new KsqlDbQueryResult(new ArrayList<>(), new ArrayList<>());\n            }\n",
                    "rendered": {
                      "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeQuery(sql, stringObjectHashMap)\n                .get();\n            if (rows.size() == 0) {\n                return new KsqlDbQueryResult(new ArrayList<>(), new ArrayList<>());\n            }\n",
                      "markdown": "`                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeQuery(sql, stringObjectHashMap)\n                .get();\n            if (rows.size() == 0) {\n                return new KsqlDbQueryResult(new ArrayList<>(), new ArrayList<>());\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 16,
                  "endLine": 178,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n            List<Row> rows = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeQuery(sql, stringObjectHashMap)\n                .get();\n            if (rows.size() == 0) {\n",
                    "rendered": {
                      "text": "\n            List<Row> rows = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeQuery(sql, stringObjectHashMap)\n                .get();\n            if (rows.size() == 0) {\n",
                      "markdown": "`\n            List<Row> rows = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeQuery(sql, stringObjectHashMap)\n                .get();\n            if (rows.size() == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 16,
                  "endLine": 163,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeStatement(sql)\n                .get().queryId().orElse(\"\");\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n            throw new IllegalArgumentException(e);\n        }\n",
                    "rendered": {
                      "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeStatement(sql)\n                .get().queryId().orElse(\"\");\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n            throw new IllegalArgumentException(e);\n        }\n",
                      "markdown": "`                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeStatement(sql)\n                .get().queryId().orElse(\"\");\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n            throw new IllegalArgumentException(e);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 16,
                  "endLine": 161,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeStatement(sql)\n                .get().queryId().orElse(\"\");\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n",
                    "rendered": {
                      "text": "        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeStatement(sql)\n                .get().queryId().orElse(\"\");\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n",
                      "markdown": "`        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .executeStatement(sql)\n                .get().queryId().orElse(\"\");\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 16,
                  "endLine": 151,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .insertInto(streamName, row)\n                .get();\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n            throw new IllegalArgumentException(e);\n        }\n",
                    "rendered": {
                      "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .insertInto(streamName, row)\n                .get();\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n            throw new IllegalArgumentException(e);\n        }\n",
                      "markdown": "`                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .insertInto(streamName, row)\n                .get();\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n            throw new IllegalArgumentException(e);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 16,
                  "endLine": 149,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n            this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .insertInto(streamName, row)\n                .get();\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n",
                    "rendered": {
                      "text": "\n            this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .insertInto(streamName, row)\n                .get();\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n",
                      "markdown": "`\n            this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .insertInto(streamName, row)\n                .get();\n        } catch (InvalidRequestException | InterruptedException | ExecutionException e) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 16,
                  "endLine": 129,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listQueries()\n                .get()\n                .stream().map(queryInfo -> new KsqlDbQuery(\n                    queryInfo.getQueryType().name(),\n                    queryInfo.getId(),\n",
                    "rendered": {
                      "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listQueries()\n                .get()\n                .stream().map(queryInfo -> new KsqlDbQuery(\n                    queryInfo.getQueryType().name(),\n                    queryInfo.getId(),\n",
                      "markdown": "`                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listQueries()\n                .get()\n                .stream().map(queryInfo -> new KsqlDbQuery(\n                    queryInfo.getQueryType().name(),\n                    queryInfo.getId(),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 16,
                  "endLine": 127,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listQueries()\n                .get()\n                .stream().map(queryInfo -> new KsqlDbQuery(\n",
                    "rendered": {
                      "text": "        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listQueries()\n                .get()\n                .stream().map(queryInfo -> new KsqlDbQuery(\n",
                      "markdown": "`        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listQueries()\n                .get()\n                .stream().map(queryInfo -> new KsqlDbQuery(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 16,
                  "endLine": 96,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listTables()\n                .get()\n                .stream().map(tableInfo -> new KsqlDbTable(\n                    tableInfo.getName(),\n                    tableInfo.getTopic(),\n",
                    "rendered": {
                      "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listTables()\n                .get()\n                .stream().map(tableInfo -> new KsqlDbTable(\n                    tableInfo.getName(),\n                    tableInfo.getTopic(),\n",
                      "markdown": "`                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listTables()\n                .get()\n                .stream().map(tableInfo -> new KsqlDbTable(\n                    tableInfo.getName(),\n                    tableInfo.getTopic(),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 16,
                  "endLine": 94,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listTables()\n                .get()\n                .stream().map(tableInfo -> new KsqlDbTable(\n",
                    "rendered": {
                      "text": "        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listTables()\n                .get()\n                .stream().map(tableInfo -> new KsqlDbTable(\n",
                      "markdown": "`        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listTables()\n                .get()\n                .stream().map(tableInfo -> new KsqlDbTable(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 16,
                  "endLine": 63,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listStreams()\n                .get()\n                .stream().map(streamInfo -> new KsqlDbStream(\n                    streamInfo.getName(),\n                    streamInfo.getTopic(),\n",
                    "rendered": {
                      "text": "                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listStreams()\n                .get()\n                .stream().map(streamInfo -> new KsqlDbStream(\n                    streamInfo.getName(),\n                    streamInfo.getTopic(),\n",
                      "markdown": "`                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listStreams()\n                .get()\n                .stream().map(streamInfo -> new KsqlDbStream(\n                    streamInfo.getName(),\n                    streamInfo.getTopic(),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 16,
                  "endLine": 61,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listStreams()\n                .get()\n                .stream().map(streamInfo -> new KsqlDbStream(\n",
                    "rendered": {
                      "text": "        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listStreams()\n                .get()\n                .stream().map(streamInfo -> new KsqlDbStream(\n",
                      "markdown": "`        try {\n            return this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .listStreams()\n                .get()\n                .stream().map(streamInfo -> new KsqlDbStream(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 29,
                  "endLine": 32,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            ServerInfo serverInfo = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .serverInfo().get();\n            return new KsqlDbServerInfo(\n                serverInfo.getServerVersion(),\n                serverInfo.getKafkaClusterId(),\n",
                    "rendered": {
                      "text": "            ServerInfo serverInfo = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .serverInfo().get();\n            return new KsqlDbServerInfo(\n                serverInfo.getServerVersion(),\n                serverInfo.getKafkaClusterId(),\n",
                      "markdown": "`            ServerInfo serverInfo = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .serverInfo().get();\n            return new KsqlDbServerInfo(\n                serverInfo.getServerVersion(),\n                serverInfo.getKafkaClusterId(),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/KsqlDbRepository.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 16,
                  "endLine": 31,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            ServerInfo serverInfo = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .serverInfo().get();\n            return new KsqlDbServerInfo(\n                serverInfo.getServerVersion(),\n",
                    "rendered": {
                      "text": "        try {\n            ServerInfo serverInfo = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .serverInfo().get();\n            return new KsqlDbServerInfo(\n                serverInfo.getServerVersion(),\n",
                      "markdown": "`        try {\n            ServerInfo serverInfo = this.kafkaModule\n                .getKsqlDbClient(clusterId)\n                .get(ksqlDbId)\n                .serverInfo().get();\n            return new KsqlDbServerInfo(\n                serverInfo.getServerVersion(),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/AbstractRepository.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 31,
                  "endLine": 13,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            return true;\n        }\n\n        String[] split = search.get().split(\" \");\n\n        long count = Arrays.stream(split)\n            .filter(s -> value.toLowerCase().contains(s.toLowerCase()))\n",
                    "rendered": {
                      "text": "            return true;\n        }\n\n        String[] split = search.get().split(\" \");\n\n        long count = Arrays.stream(split)\n            .filter(s -> value.toLowerCase().contains(s.toLowerCase()))\n",
                      "markdown": "`            return true;\n        }\n\n        String[] split = search.get().split(\" \");\n\n        long count = Arrays.stream(split)\n            .filter(s -> value.toLowerCase().contains(s.toLowerCase()))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 16,
                  "endLine": 266,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            plugin,\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .validateConnectorPluginConfig(new ConnectorPluginConfigDefinition(\n                    Iterables.getLast(Arrays.asList(plugin.getClassName().split(\"/\"))),\n                    config\n",
                    "rendered": {
                      "text": "            plugin,\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .validateConnectorPluginConfig(new ConnectorPluginConfigDefinition(\n                    Iterables.getLast(Arrays.asList(plugin.getClassName().split(\"/\"))),\n                    config\n",
                      "markdown": "`            plugin,\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .validateConnectorPluginConfig(new ConnectorPluginConfigDefinition(\n                    Iterables.getLast(Arrays.asList(plugin.getClassName().split(\"/\"))),\n                    config\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 16,
                  "endLine": 216,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .restartConnectorTask(name, task);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.restartTaskConnector(clusterId, connectId, name, task));\n",
                    "rendered": {
                      "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .restartConnectorTask(name, task);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.restartTaskConnector(clusterId, connectId, name, task));\n",
                      "markdown": "`        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .restartConnectorTask(name, task);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.restartTaskConnector(clusterId, connectId, name, task));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 16,
                  "endLine": 201,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .restartConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.restartConnector(clusterId, connectId, name));\n",
                    "rendered": {
                      "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .restartConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.restartConnector(clusterId, connectId, name));\n",
                      "markdown": "`        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .restartConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.restartConnector(clusterId, connectId, name));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 16,
                  "endLine": 186,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .resumeConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.resumeConnector(clusterId, connectId, name));\n",
                    "rendered": {
                      "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .resumeConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.resumeConnector(clusterId, connectId, name));\n",
                      "markdown": "`        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .resumeConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.resumeConnector(clusterId, connectId, name));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 16,
                  "endLine": 171,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .pauseConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.pauseConnector(clusterId, connectId, name));\n",
                    "rendered": {
                      "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .pauseConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.pauseConnector(clusterId, connectId, name));\n",
                      "markdown": "`        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .pauseConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.pauseConnector(clusterId, connectId, name));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 16,
                  "endLine": 156,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .deleteConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.deleteConnector(clusterId, connectId, name));\n",
                    "rendered": {
                      "text": "        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .deleteConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.deleteConnector(clusterId, connectId, name));\n",
                      "markdown": "`        try {\n            var isSuccess = this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .deleteConnector(name);\n            if (isSuccess) {\n                auditModule.save(ConnectAuditEvent.deleteConnector(clusterId, connectId, name));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 16,
                  "endLine": 142,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .updateConnectorConfig(name, configs);\n        } catch (InvalidRequestException e) {\n            throw new IllegalArgumentException(e);\n",
                    "rendered": {
                      "text": "        try {\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .updateConnectorConfig(name, configs);\n        } catch (InvalidRequestException e) {\n            throw new IllegalArgumentException(e);\n",
                      "markdown": "`        try {\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .updateConnectorConfig(name, configs);\n        } catch (InvalidRequestException e) {\n            throw new IllegalArgumentException(e);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 16,
                  "endLine": 128,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        try {\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .addConnector(new NewConnectorDefinition(name, configs));\n        } catch (InvalidRequestException e) {\n            throw new IllegalArgumentException(e);\n",
                    "rendered": {
                      "text": "        try {\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .addConnector(new NewConnectorDefinition(name, configs));\n        } catch (InvalidRequestException e) {\n            throw new IllegalArgumentException(e);\n",
                      "markdown": "`        try {\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .addConnector(new NewConnectorDefinition(name, configs));\n        } catch (InvalidRequestException e) {\n            throw new IllegalArgumentException(e);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 12,
                  "endLine": 117,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    public List<ConnectPlugin> getPlugins(String clusterId, String connectId) {\n        return this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorPlugins()\n            .stream()\n            .map(s -> mapToConnectPlugin(s, clusterId, connectId))\n",
                    "rendered": {
                      "text": "    public List<ConnectPlugin> getPlugins(String clusterId, String connectId) {\n        return this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorPlugins()\n            .stream()\n            .map(s -> mapToConnectPlugin(s, clusterId, connectId))\n",
                      "markdown": "`    public List<ConnectPlugin> getPlugins(String clusterId, String connectId) {\n        return this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorPlugins()\n            .stream()\n            .map(s -> mapToConnectPlugin(s, clusterId, connectId))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 12,
                  "endLine": 106,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                                                  Map<String, String> configs) {\n        return this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorPlugins()\n            .stream()\n            .filter(connectPlugin -> connectPlugin.getClassName().equals(className))\n",
                    "rendered": {
                      "text": "                                                  Map<String, String> configs) {\n        return this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorPlugins()\n            .stream()\n            .filter(connectPlugin -> connectPlugin.getClassName().equals(className))\n",
                      "markdown": "`                                                  Map<String, String> configs) {\n        return this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorPlugins()\n            .stream()\n            .filter(connectPlugin -> connectPlugin.getClassName().equals(className))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 12,
                  "endLine": 79,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    public List<ConnectDefinition> getDefinitions(String clusterId, String connectId, Optional<String> search, List<String> filters) {\n        ConnectorsWithExpandedMetadata unfiltered = this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorsWithAllExpandedMetadata();\n\n        Collection<ConnectorDefinition> definitions = unfiltered.getAllDefinitions();\n",
                    "rendered": {
                      "text": "    public List<ConnectDefinition> getDefinitions(String clusterId, String connectId, Optional<String> search, List<String> filters) {\n        ConnectorsWithExpandedMetadata unfiltered = this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorsWithAllExpandedMetadata();\n\n        Collection<ConnectorDefinition> definitions = unfiltered.getAllDefinitions();\n",
                      "markdown": "`    public List<ConnectDefinition> getDefinitions(String clusterId, String connectId, Optional<String> search, List<String> filters) {\n        ConnectorsWithExpandedMetadata unfiltered = this.kafkaModule\n            .getConnectRestClient(clusterId)\n            .get(connectId)\n            .getConnectorsWithAllExpandedMetadata();\n\n        Collection<ConnectorDefinition> definitions = unfiltered.getAllDefinitions();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 16,
                  "endLine": 58,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                .getConnector(name),\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .getConnectorStatus(name)\n        );\n    }\n",
                    "rendered": {
                      "text": "                .getConnector(name),\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .getConnectorStatus(name)\n        );\n    }\n",
                      "markdown": "`                .getConnector(name),\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .getConnectorStatus(name)\n        );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 16,
                  "endLine": 54,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        return new ConnectDefinition(\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .getConnector(name),\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n",
                    "rendered": {
                      "text": "        return new ConnectDefinition(\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .getConnector(name),\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n",
                      "markdown": "`        return new ConnectDefinition(\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n                .get(connectId)\n                .getConnector(name),\n            this.kafkaModule\n                .getConnectRestClient(clusterId)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConnectRepository.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 17,
                  "endLine": 72,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        List<ConnectDefinition> definitions = getDefinitions(clusterId, connectId, search, filters);\n\n        // I'm not sure of how to use the last parameter in this case\n        // I look at the implementation for the Schema Registry part, but I don't see how make a similar thing here\n        return PagedList.of(definitions, pagination, list -> list);\n    }\n\n",
                    "rendered": {
                      "text": "        List<ConnectDefinition> definitions = getDefinitions(clusterId, connectId, search, filters);\n\n        // I'm not sure of how to use the last parameter in this case\n        // I look at the implementation for the Schema Registry part, but I don't see how make a similar thing here\n        return PagedList.of(definitions, pagination, list -> list);\n    }\n\n",
                      "markdown": "`        List<ConnectDefinition> definitions = getDefinitions(clusterId, connectId, search, filters);\n\n        // I'm not sure of how to use the last parameter in this case\n        // I look at the implementation for the Schema Registry part, but I don't see how make a similar thing here\n        return PagedList.of(definitions, pagination, list -> list);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Cluster.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 58,
                  "endLine": 29,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        }\n\n        if (result.controller().get() != null) {\n            this.controller = new Node(result.controller().get());\n        }\n    }\n}\n",
                    "rendered": {
                      "text": "        }\n\n        if (result.controller().get() != null) {\n            this.controller = new Node(result.controller().get());\n        }\n    }\n}\n",
                      "markdown": "`        }\n\n        if (result.controller().get() != null) {\n            this.controller = new Node(result.controller().get());\n        }\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Cluster.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 31,
                  "endLine": 28,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            this.nodes.add(new Node(node));\n        }\n\n        if (result.controller().get() != null) {\n            this.controller = new Node(result.controller().get());\n        }\n    }\n",
                    "rendered": {
                      "text": "            this.nodes.add(new Node(node));\n        }\n\n        if (result.controller().get() != null) {\n            this.controller = new Node(result.controller().get());\n        }\n    }\n",
                      "markdown": "`            this.nodes.add(new Node(node));\n        }\n\n        if (result.controller().get() != null) {\n            this.controller = new Node(result.controller().get());\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Cluster.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 62,
                  "endLine": 24,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n\n",
                    "rendered": {
                      "text": "\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n\n",
                      "markdown": "`\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Cluster.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 36,
                  "endLine": 23,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    private Node controller;\n\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n",
                    "rendered": {
                      "text": "    private Node controller;\n\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n",
                      "markdown": "`    private Node controller;\n\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Cluster.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 40,
                  "endLine": 24,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n\n",
                    "rendered": {
                      "text": "\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n\n",
                      "markdown": "`\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n        for(org.apache.kafka.common.Node node : result.nodes().get()) {\n            this.nodes.add(new Node(node));\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Cluster.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 11,
                  "endLine": 20,
                  "endColumn": 17,
                  "snippet": {
                    "text": "public class Cluster {\n    private String id;\n    private final List<Node> nodes = new ArrayList<>();\n    private Node controller;\n\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n",
                    "rendered": {
                      "text": "public class Cluster {\n    private String id;\n    private final List<Node> nodes = new ArrayList<>();\n    private Node controller;\n\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n",
                      "markdown": "`public class Cluster {\n    private String id;\n    private final List<Node> nodes = new ArrayList<>();\n    private Node controller;\n\n    public Cluster(DescribeClusterResult result) throws ExecutionException, InterruptedException {\n        this.id = result.clusterId().get();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Record.java"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 36,
                  "endLine": 330,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            }\n\n            ByteBuffer buffer = ByteBuffer.wrap(payload);\n            byte magicBytes = buffer.get();\n            int schemaId = buffer.getInt();\n\n            if (magicBytes == MAGIC_BYTE && schemaId >= 0) {\n",
                    "rendered": {
                      "text": "            }\n\n            ByteBuffer buffer = ByteBuffer.wrap(payload);\n            byte magicBytes = buffer.get();\n            int schemaId = buffer.getInt();\n\n            if (magicBytes == MAGIC_BYTE && schemaId >= 0) {\n",
                      "markdown": "`            }\n\n            ByteBuffer buffer = ByteBuffer.wrap(payload);\n            byte magicBytes = buffer.get();\n            int schemaId = buffer.getInt();\n\n            if (magicBytes == MAGIC_BYTE && schemaId >= 0) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Record.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 30,
                  "endLine": 168,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        if (bytesKey == null) {\n            return null;\n        } else {\n            return new String(Base64.getEncoder().encode(bytesKey));\n        }\n    }\n\n",
                    "rendered": {
                      "text": "        if (bytesKey == null) {\n            return null;\n        } else {\n            return new String(Base64.getEncoder().encode(bytesKey));\n        }\n    }\n\n",
                      "markdown": "`        if (bytesKey == null) {\n            return null;\n        } else {\n            return new String(Base64.getEncoder().encode(bytesKey));\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Record.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 30,
                  "endLine": 217,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                      if ( !(toType instanceof JsonNode) ) {\n                          return String.valueOf(toType);\n                      }\n                      JsonNode node = (JsonNode) toType;\n                      return node.toString();\n                    }\n                }\n",
                    "rendered": {
                      "text": "                      if ( !(toType instanceof JsonNode) ) {\n                          return String.valueOf(toType);\n                      }\n                      JsonNode node = (JsonNode) toType;\n                      return node.toString();\n                    }\n                }\n",
                      "markdown": "`                      if ( !(toType instanceof JsonNode) ) {\n                          return String.valueOf(toType);\n                      }\n                      JsonNode node = (JsonNode) toType;\n                      return node.toString();\n                    }\n                }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/ProtobufToJsonDeserializerTest.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 48,
                  "endLine": 75,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    private String encodeDescriptorFileToBase64(String descriptorFileName) throws URISyntaxException, IOException {\n        URI uri = ClassLoader.getSystemResource(\"protobuf_desc\").toURI();\n        String protobufDescriptorsFolder = Paths.get(uri).toString();\n\n        String fullName = protobufDescriptorsFolder + File.separator + descriptorFileName;\n        byte[] descriptorFileBytes = Files.readAllBytes(Path.of(fullName));\n",
                    "rendered": {
                      "text": "\n    private String encodeDescriptorFileToBase64(String descriptorFileName) throws URISyntaxException, IOException {\n        URI uri = ClassLoader.getSystemResource(\"protobuf_desc\").toURI();\n        String protobufDescriptorsFolder = Paths.get(uri).toString();\n\n        String fullName = protobufDescriptorsFolder + File.separator + descriptorFileName;\n        byte[] descriptorFileBytes = Files.readAllBytes(Path.of(fullName));\n",
                      "markdown": "`\n    private String encodeDescriptorFileToBase64(String descriptorFileName) throws URISyntaxException, IOException {\n        URI uri = ClassLoader.getSystemResource(\"protobuf_desc\").toURI();\n        String protobufDescriptorsFolder = Paths.get(uri).toString();\n\n        String fullName = protobufDescriptorsFolder + File.separator + descriptorFileName;\n        byte[] descriptorFileBytes = Files.readAllBytes(Path.of(fullName));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/ProtobufToJsonDeserializerTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        protobufDeserializationTopicsMapping = new ProtobufDeserializationTopicsMapping();\n\n        URI uri = ClassLoader.getSystemResource(\"protobuf_desc\").toURI();\n        String protobufDescriptorsFolder = Paths.get(uri).toString();\n        protobufDeserializationTopicsMapping.setDescriptorsFolder(protobufDescriptorsFolder);\n\n        TopicsMapping albumTopicsMapping = new TopicsMapping();\n",
                    "rendered": {
                      "text": "        protobufDeserializationTopicsMapping = new ProtobufDeserializationTopicsMapping();\n\n        URI uri = ClassLoader.getSystemResource(\"protobuf_desc\").toURI();\n        String protobufDescriptorsFolder = Paths.get(uri).toString();\n        protobufDeserializationTopicsMapping.setDescriptorsFolder(protobufDescriptorsFolder);\n\n        TopicsMapping albumTopicsMapping = new TopicsMapping();\n",
                      "markdown": "`        protobufDeserializationTopicsMapping = new ProtobufDeserializationTopicsMapping();\n\n        URI uri = ClassLoader.getSystemResource(\"protobuf_desc\").toURI();\n        String protobufDescriptorsFolder = Paths.get(uri).toString();\n        protobufDeserializationTopicsMapping.setDescriptorsFolder(protobufDescriptorsFolder);\n\n        TopicsMapping albumTopicsMapping = new TopicsMapping();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/ProtobufToJsonDeserializerTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 15,
                  "endLine": 79,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n        String fullName = protobufDescriptorsFolder + File.separator + descriptorFileName;\n        byte[] descriptorFileBytes = Files.readAllBytes(Path.of(fullName));\n        return Base64.getEncoder().encodeToString(descriptorFileBytes);\n    }\n\n    private void createAlbumObject() {\n",
                    "rendered": {
                      "text": "\n        String fullName = protobufDescriptorsFolder + File.separator + descriptorFileName;\n        byte[] descriptorFileBytes = Files.readAllBytes(Path.of(fullName));\n        return Base64.getEncoder().encodeToString(descriptorFileBytes);\n    }\n\n    private void createAlbumObject() {\n",
                      "markdown": "`\n        String fullName = protobufDescriptorsFolder + File.separator + descriptorFileName;\n        byte[] descriptorFileBytes = Files.readAllBytes(Path.of(fullName));\n        return Base64.getEncoder().encodeToString(descriptorFileBytes);\n    }\n\n    private void createAlbumObject() {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/ProtobufToJsonDeserializerTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 17,
                  "endLine": 19,
                  "endColumn": 23,
                  "snippet": {
                    "text": "import java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport java.util.Collections;\nimport java.util.List;\n\n",
                    "rendered": {
                      "text": "import java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport java.util.Collections;\nimport java.util.List;\n\n",
                      "markdown": "`import java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport java.util.Collections;\nimport java.util.List;\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 54,
                  "endLine": 99,
                  "endColumn": 59,
                  "snippet": {
                    "text": "EADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES) + \" for \" + REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES);\r\n\r\n        assertFalse(response.getHeaders().contains(FORBIDDEN_HEADER_SERVER), FORBIDDEN_HEADER_SERVER + \" erroneously exists as header\");\r\n        assertFalse(response.getHeaders().co",
                    "rendered": {
                      "text": "EADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES) + \" for \" + REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES);\r\n\r\n        assertFalse(response.getHeaders().contains(FORBIDDEN_HEADER_SERVER), FORBIDDEN_HEADER_SERVER + \" erroneously exists as header\");\r\n        assertFalse(response.getHeaders().co",
                      "markdown": "`EADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES) + \" for \" + REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES);\r\n\r\n        assertFalse(response.getHeaders().contains(FORBIDDEN_HEADER_SERVER), FORBIDDEN_HEADER_SERVER + \" erroneously exists as header\");\r\n        assertFalse(response.getHeaders().co`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 110,
                  "endLine": 98,
                  "endColumn": 115,
                  "snippet": {
                    "text": ".get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES) + \" for \" + REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES);\r\n\r\n        assertFalse(response.getHeaders().contains(FORBIDDEN_HEADER_SE",
                    "rendered": {
                      "text": ".get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES) + \" for \" + REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES);\r\n\r\n        assertFalse(response.getHeaders().contains(FORBIDDEN_HEADER_SE",
                      "markdown": "`.get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES) + \" for \" + REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES);\r\n\r\n        assertFalse(response.getHeaders().contains(FORBIDDEN_HEADER_SE`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 54,
                  "endLine": 96,
                  "endColumn": 59,
                  "snippet": {
                    "text": "REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.ge",
                    "rendered": {
                      "text": "REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.ge",
                      "markdown": "`REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES),\r\n                \"Wrong value \" + response.ge`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 95,
                  "endLine": 95,
                  "endColumn": 100,
                  "snippet": {
                    "text": "EADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(",
                    "rendered": {
                      "text": "EADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(",
                      "markdown": "`EADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY) + \" for \" + REQUIRED_HEADER_PERMISSIONS_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_X_PERMITTED_CROSS_DOMAIN_POLICIES_VALUE, response.getHeaders().get(`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 54,
                  "endLine": 93,
                  "endColumn": 59,
                  "snippet": {
                    "text": "S_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders()",
                    "rendered": {
                      "text": "S_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders()",
                      "markdown": "`S_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_PERMISSIONS_POLICY),\r\n                \"Wrong value \" + response.getHeaders()`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 105,
                  "endLine": 92,
                  "endColumn": 110,
                  "snippet": {
                    "text": "S_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.ge",
                    "rendered": {
                      "text": "S_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.ge",
                      "markdown": "`S_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_PERMISSIONS_POLICY_VALUE, response.ge`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 54,
                  "endLine": 90,
                  "endColumn": 59,
                  "snippet": {
                    "text": "CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + r",
                    "rendered": {
                      "text": "CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + r",
                      "markdown": "`CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY),\r\n                \"Wrong value \" + r`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 105,
                  "endLine": 89,
                  "endColumn": 110,
                  "snippet": {
                    "text": "R_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, r",
                    "rendered": {
                      "text": "R_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, r",
                      "markdown": "`R_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_RESOURCE_POLICY_VALUE, r`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 54,
                  "endLine": 87,
                  "endColumn": 59,
                  "snippet": {
                    "text": "aders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + respo",
                    "rendered": {
                      "text": "aders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + respo",
                      "markdown": "`aders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY),\r\n                \"Wrong value \" + respo`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 103,
                  "endLine": 86,
                  "endColumn": 108,
                  "snippet": {
                    "text": "sponse.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, respons",
                    "rendered": {
                      "text": "sponse.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, respons",
                      "markdown": "`sponse.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY) + \" for \" + REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_EMBEDDER_POLICY_VALUE, respons`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 54,
                  "endLine": 84,
                  "endColumn": 59,
                  "snippet": {
                    "text": ".getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRE",
                    "rendered": {
                      "text": ".getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRE",
                      "markdown": "`.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRE`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 91,
                  "endLine": 83,
                  "endColumn": 96,
                  "snippet": {
                    "text": "rs().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CRO",
                    "rendered": {
                      "text": "rs().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CRO",
                      "markdown": "`rs().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY) + \" for \" + REQUIRED_HEADER_FEATURE_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CROSS_ORIGIN_OPENER_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CRO`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 54,
                  "endLine": 81,
                  "endColumn": 59,
                  "snippet": {
                    "text": "on.getResponse());\r\n    }\r\n\r\n    private static void assertHeaders(HttpResponse<?> response) {\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CONTENT_SECURITY_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEAD",
                    "rendered": {
                      "text": "on.getResponse());\r\n    }\r\n\r\n    private static void assertHeaders(HttpResponse<?> response) {\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CONTENT_SECURITY_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEAD",
                      "markdown": "`on.getResponse());\r\n    }\r\n\r\n    private static void assertHeaders(HttpResponse<?> response) {\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CONTENT_SECURITY_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEAD`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/middlewares/CustomHttpResponseHeadersFilterTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 100,
                  "endLine": 80,
                  "endColumn": 105,
                  "snippet": {
                    "text": "\r\n    private static void assertHeaders(HttpResponse<?> response) {\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CONTENT_SECURITY_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n",
                    "rendered": {
                      "text": "\r\n    private static void assertHeaders(HttpResponse<?> response) {\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CONTENT_SECURITY_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n",
                      "markdown": "`\r\n    private static void assertHeaders(HttpResponse<?> response) {\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_CONTENT_SECURITY_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY),\r\n                \"Wrong value \" + response.getHeaders().get(REQUIRED_HEADER_CONTENT_SECURITY_POLICY) + \" for \" + REQUIRED_HEADER_CONTENT_SECURITY_POLICY);\r\n\r\n        Assertions.assertEquals(REQUIRED_HEADER_FEATURE_POLICY_VALUE, response.getHeaders().get(REQUIRED_HEADER_FEATURE_POLICY),\r\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/KafkaTestCluster.java"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 61,
                  "endLine": 357,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            new ResourcePattern(ResourceType.GROUP, \"groupConsumer2\", PatternType.LITERAL),\n            new AccessControlEntry(\"test:toto\", \"*\", AclOperation.DESCRIBE, AclPermissionType.ALLOW))\n        );\n        testUtils.getAdminClient().createAcls(bindings).all().get();\n        log.debug(\"bindings acls added\");\n    }\n\n",
                    "rendered": {
                      "text": "            new ResourcePattern(ResourceType.GROUP, \"groupConsumer2\", PatternType.LITERAL),\n            new AccessControlEntry(\"test:toto\", \"*\", AclOperation.DESCRIBE, AclPermissionType.ALLOW))\n        );\n        testUtils.getAdminClient().createAcls(bindings).all().get();\n        log.debug(\"bindings acls added\");\n    }\n\n",
                      "markdown": "`            new ResourcePattern(ResourceType.GROUP, \"groupConsumer2\", PatternType.LITERAL),\n            new AccessControlEntry(\"test:toto\", \"*\", AclOperation.DESCRIBE, AclPermissionType.ALLOW))\n        );\n        testUtils.getAdminClient().createAcls(bindings).all().get();\n        log.debug(\"bindings acls added\");\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/KafkaTestCluster.java"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 147,
                  "endLine": 261,
                  "endColumn": 152,
                  "snippet": {
                    "text": "\n        for (int partition = 0; partition < 3; partition++) {\n            for (int count = 0; count < 50; count++) {\n                producer.send(new ProducerRecord<>(TOPIC_COMPACTED, partition, \"compact-key\", \"Partition(\" + partition + \") Count(\" + count + \")\")).get();\n                Thread.sleep(10L);\n            }\n            Thread.sleep(10L);\n",
                    "rendered": {
                      "text": "\n        for (int partition = 0; partition < 3; partition++) {\n            for (int count = 0; count < 50; count++) {\n                producer.send(new ProducerRecord<>(TOPIC_COMPACTED, partition, \"compact-key\", \"Partition(\" + partition + \") Count(\" + count + \")\")).get();\n                Thread.sleep(10L);\n            }\n            Thread.sleep(10L);\n",
                      "markdown": "`\n        for (int partition = 0; partition < 3; partition++) {\n            for (int count = 0; count < 50; count++) {\n                producer.send(new ProducerRecord<>(TOPIC_COMPACTED, partition, \"compact-key\", \"Partition(\" + partition + \") Count(\" + count + \")\")).get();\n                Thread.sleep(10L);\n            }\n            Thread.sleep(10L);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/KafkaTestCluster.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 16,
                  "endLine": 252,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                new ConfigEntry(TopicConfig.MIN_CLEANABLE_DIRTY_RATIO_CONFIG, \"0\"),\n                new ConfigEntry(TopicConfig.MAX_COMPACTION_LAG_MS_CONFIG, \"1\")\n            ))\n        )).all().get();\n\n        KafkaProducer<String, String> producer = testUtils.getKafkaProducer(\n            StringSerializer.class,\n",
                    "rendered": {
                      "text": "                new ConfigEntry(TopicConfig.MIN_CLEANABLE_DIRTY_RATIO_CONFIG, \"0\"),\n                new ConfigEntry(TopicConfig.MAX_COMPACTION_LAG_MS_CONFIG, \"1\")\n            ))\n        )).all().get();\n\n        KafkaProducer<String, String> producer = testUtils.getKafkaProducer(\n            StringSerializer.class,\n",
                      "markdown": "`                new ConfigEntry(TopicConfig.MIN_CLEANABLE_DIRTY_RATIO_CONFIG, \"0\"),\n                new ConfigEntry(TopicConfig.MAX_COMPACTION_LAG_MS_CONFIG, \"1\")\n            ))\n        )).all().get();\n\n        KafkaProducer<String, String> producer = testUtils.getKafkaProducer(\n            StringSerializer.class,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/KafkaTestCluster.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 43,
                  "endLine": 76,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    public static void main(String[] args) throws Exception {\n        List<String> argsList = Arrays.asList(args);\n\n        if (argsList.size() > 0 && argsList.get(0).equals(\"inject\")) {\n            KafkaTestCluster kafkaTestCluster = new KafkaTestCluster();\n            kafkaTestCluster.injectTestData();\n        } else {\n",
                    "rendered": {
                      "text": "    public static void main(String[] args) throws Exception {\n        List<String> argsList = Arrays.asList(args);\n\n        if (argsList.size() > 0 && argsList.get(0).equals(\"inject\")) {\n            KafkaTestCluster kafkaTestCluster = new KafkaTestCluster();\n            kafkaTestCluster.injectTestData();\n        } else {\n",
                      "markdown": "`    public static void main(String[] args) throws Exception {\n        List<String> argsList = Arrays.asList(args);\n\n        if (argsList.size() > 0 && argsList.get(0).equals(\"inject\")) {\n            KafkaTestCluster kafkaTestCluster = new KafkaTestCluster();\n            kafkaTestCluster.injectTestData();\n        } else {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/KafkaTestCluster.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 45,
                  "endLine": 43,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n@Slf4j\npublic class KafkaTestCluster implements Runnable {\n    private static final Path CS_PATH = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"/akhq-cs.json\");\n\n    public static final String CLUSTER_ID = \"test\";\n\n",
                    "rendered": {
                      "text": "\n@Slf4j\npublic class KafkaTestCluster implements Runnable {\n    private static final Path CS_PATH = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"/akhq-cs.json\");\n\n    public static final String CLUSTER_ID = \"test\";\n\n",
                      "markdown": "`\n@Slf4j\npublic class KafkaTestCluster implements Runnable {\n    private static final Path CS_PATH = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"/akhq-cs.json\");\n\n    public static final String CLUSTER_ID = \"test\";\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application-oidc.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 22,
                  "endLine": 28,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      enabled: true\n      clients:\n        oidc:\n          grant-type: password\n          openid:\n            issuer: \"http://no.url\"\n            token: \"fake-token\"\n",
                    "rendered": {
                      "text": "      enabled: true\n      clients:\n        oidc:\n          grant-type: password\n          openid:\n            issuer: \"http://no.url\"\n            token: \"fake-token\"\n",
                      "markdown": "`      enabled: true\n      clients:\n        oidc:\n          grant-type: password\n          openid:\n            issuer: \"http://no.url\"\n            token: \"fake-token\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application-keycloak.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 22,
                  "endLine": 28,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      enabled: true\n      clients:\n        oidc:\n          grant-type: password\n          openid:\n            issuer: \"http://no.url\"\n            token: \"fake-token\"\n",
                    "rendered": {
                      "text": "      enabled: true\n      clients:\n        oidc:\n          grant-type: password\n          openid:\n            issuer: \"http://no.url\"\n            token: \"fake-token\"\n",
                      "markdown": "`      enabled: true\n      clients:\n        oidc:\n          grant-type: password\n          openid:\n            issuer: \"http://no.url\"\n            token: \"fake-token\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application-rest-api.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  security:\n    basic-auth:\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n    rest:\n",
                    "rendered": {
                      "text": "  security:\n    basic-auth:\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n    rest:\n",
                      "markdown": "`  security:\n    basic-auth:\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n    rest:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application-groovy.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 8,
                  "endLine": 9,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        groups:\n          - limited\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n    groovy:\n",
                    "rendered": {
                      "text": "        groups:\n          - limited\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n    groovy:\n",
                      "markdown": "`        groups:\n          - limited\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n    groovy:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application-groovy.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 8,
                  "endLine": 5,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  security:\n    basic-auth:\n      - username: user\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: admin\n",
                    "rendered": {
                      "text": "  security:\n    basic-auth:\n      - username: user\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: admin\n",
                      "markdown": "`  security:\n    basic-auth:\n      - username: user\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: admin\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Base/Base.jsx"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 19,
                  "endLine": 45,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      title = 'Topics |';\n    }\n    if (page.includes('tail')) {\n      title = 'Live Tail |';\n    }\n    if (page.includes('group')) {\n      title = 'Consumer Groups |';\n",
                    "rendered": {
                      "text": "      title = 'Topics |';\n    }\n    if (page.includes('tail')) {\n      title = 'Live Tail |';\n    }\n    if (page.includes('group')) {\n      title = 'Consumer Groups |';\n",
                      "markdown": "`      title = 'Topics |';\n    }\n    if (page.includes('tail')) {\n      title = 'Live Tail |';\n    }\n    if (page.includes('group')) {\n      title = 'Consumer Groups |';\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Base/Base.jsx"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 62,
                  "endLine": 14,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  state = {\n    clusterId: '',\n    topicId: '',\n    selectedTab: constants.CLUSTER, //cluster | node | topic | tail | group | acls | schema | connect\n    action: '',\n    loading: false,\n    expanded: !!localStorage.getItem('expanded')\n",
                    "rendered": {
                      "text": "  state = {\n    clusterId: '',\n    topicId: '',\n    selectedTab: constants.CLUSTER, //cluster | node | topic | tail | group | acls | schema | connect\n    action: '',\n    loading: false,\n    expanded: !!localStorage.getItem('expanded')\n",
                      "markdown": "`  state = {\n    clusterId: '',\n    topicId: '',\n    selectedTab: constants.CLUSTER, //cluster | node | topic | tail | group | acls | schema | connect\n    action: '',\n    loading: false,\n    expanded: !!localStorage.getItem('expanded')\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Base/Base.jsx"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 47,
                  "endLine": 14,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  state = {\n    clusterId: '',\n    topicId: '',\n    selectedTab: constants.CLUSTER, //cluster | node | topic | tail | group | acls | schema | connect\n    action: '',\n    loading: false,\n    expanded: !!localStorage.getItem('expanded')\n",
                    "rendered": {
                      "text": "  state = {\n    clusterId: '',\n    topicId: '',\n    selectedTab: constants.CLUSTER, //cluster | node | topic | tail | group | acls | schema | connect\n    action: '',\n    loading: false,\n    expanded: !!localStorage.getItem('expanded')\n",
                      "markdown": "`  state = {\n    clusterId: '',\n    topicId: '',\n    selectedTab: constants.CLUSTER, //cluster | node | topic | tail | group | acls | schema | connect\n    action: '',\n    loading: false,\n    expanded: !!localStorage.getItem('expanded')\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/HeaderAuthControllerTest.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 20,
                  "endLine": 120,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        void invalidIp() {\n            AkhqController.AuthUser result = client.toBlocking().retrieve(\n                HttpRequest\n                    .GET(\"/api/me\")\n                    .header(\"x-akhq-user\", \"header-user\")\n                    .header(\"x-akhq-group\", \"limited,extra\"),\n                AkhqController.AuthUser.class\n",
                    "rendered": {
                      "text": "        void invalidIp() {\n            AkhqController.AuthUser result = client.toBlocking().retrieve(\n                HttpRequest\n                    .GET(\"/api/me\")\n                    .header(\"x-akhq-user\", \"header-user\")\n                    .header(\"x-akhq-group\", \"limited,extra\"),\n                AkhqController.AuthUser.class\n",
                      "markdown": "`        void invalidIp() {\n            AkhqController.AuthUser result = client.toBlocking().retrieve(\n                HttpRequest\n                    .GET(\"/api/me\")\n                    .header(\"x-akhq-user\", \"header-user\")\n                    .header(\"x-akhq-group\", \"limited,extra\"),\n                AkhqController.AuthUser.class\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/HeaderAuthControllerTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 16,
                  "endLine": 101,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    void userWithoutAnyGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-invalid\"),\n            AkhqController.AuthUser.class\n        );\n",
                    "rendered": {
                      "text": "    void userWithoutAnyGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-invalid\"),\n            AkhqController.AuthUser.class\n        );\n",
                      "markdown": "`    void userWithoutAnyGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-invalid\"),\n            AkhqController.AuthUser.class\n        );\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/HeaderAuthControllerTest.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 16,
                  "endLine": 82,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    void userWithAdditionalExternalGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user\")\n                .header(\"x-akhq-group\", \"external-limited\"),\n            AkhqController.AuthUser.class\n",
                    "rendered": {
                      "text": "    void userWithAdditionalExternalGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user\")\n                .header(\"x-akhq-group\", \"external-limited\"),\n            AkhqController.AuthUser.class\n",
                      "markdown": "`    void userWithAdditionalExternalGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user\")\n                .header(\"x-akhq-group\", \"external-limited\"),\n            AkhqController.AuthUser.class\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/HeaderAuthControllerTest.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 16,
                  "endLine": 64,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    void externalUserAndGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user-operator\")\n                .header(\"x-akhq-group\", \"external-operator,external-limited\"),\n            AkhqController.AuthUser.class\n",
                    "rendered": {
                      "text": "    void externalUserAndGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user-operator\")\n                .header(\"x-akhq-group\", \"external-operator,external-limited\"),\n            AkhqController.AuthUser.class\n",
                      "markdown": "`    void externalUserAndGroup() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user-operator\")\n                .header(\"x-akhq-group\", \"external-operator,external-limited\"),\n            AkhqController.AuthUser.class\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/HeaderAuthControllerTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 16,
                  "endLine": 47,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    void admin() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-admin\"),\n            AkhqController.AuthUser.class\n        );\n",
                    "rendered": {
                      "text": "    void admin() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-admin\"),\n            AkhqController.AuthUser.class\n        );\n",
                      "markdown": "`    void admin() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-admin\"),\n            AkhqController.AuthUser.class\n        );\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/HeaderAuthControllerTest.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 16,
                  "endLine": 30,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    void user() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user\"),\n            AkhqController.AuthUser.class\n        );\n",
                    "rendered": {
                      "text": "    void user() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user\"),\n            AkhqController.AuthUser.class\n        );\n",
                      "markdown": "`    void user() {\n        AkhqController.AuthUser result = client.toBlocking().retrieve(\n            HttpRequest\n                .GET(\"/api/me\")\n                .header(\"x-akhq-user\", \"header-user\"),\n            AkhqController.AuthUser.class\n        );\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 33,
                  "endLine": 149,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    @Test\n    @Order(9)\n    void taskRestartApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/tasks/0/restart\"));\n\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(9)\n    void taskRestartApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/tasks/0/restart\"));\n\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(9)\n    void taskRestartApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/tasks/0/restart\"));\n\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 33,
                  "endLine": 143,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    @Test\n    @Order(8)\n    void definitionResumeApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/resume\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(8)\n    void definitionResumeApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/resume\"));\n    }\n\n    @Test\n",
                      "markdown": "`    @Test\n    @Order(8)\n    void definitionResumeApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/resume\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 33,
                  "endLine": 137,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    @Test\n    @Order(7)\n    void definitionPauseApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/pause\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(7)\n    void definitionPauseApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/pause\"));\n    }\n\n    @Test\n",
                      "markdown": "`    @Test\n    @Order(7)\n    void definitionPauseApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/pause\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 33,
                  "endLine": 131,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    @Test\n    @Order(6)\n    void definitionRestartApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/restart\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(6)\n    void definitionRestartApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/restart\"));\n    }\n\n    @Test\n",
                      "markdown": "`    @Test\n    @Order(6)\n    void definitionRestartApi() {\n        this.exchange(HttpRequest.GET(CONNECT_URL + \"/restart\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 47,
                  "endLine": 125,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                )\n            )\n        ), ConnectDefinition.class);\n        assertEquals(PATH2, result.getConfigs().get(\"file\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "                )\n            )\n        ), ConnectDefinition.class);\n        assertEquals(PATH2, result.getConfigs().get(\"file\"));\n    }\n\n    @Test\n",
                      "markdown": "`                )\n            )\n        ), ConnectDefinition.class);\n        assertEquals(PATH2, result.getConfigs().get(\"file\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 60,
                  "endLine": 115,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    @Test\n    @Order(5)\n    void updateApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.POST(\n            CONNECT_URL + \"/configs\",\n            ImmutableMap.of(\n                \"configs\",              ImmutableMap.of(\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(5)\n    void updateApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.POST(\n            CONNECT_URL + \"/configs\",\n            ImmutableMap.of(\n                \"configs\",              ImmutableMap.of(\n",
                      "markdown": "`    @Test\n    @Order(5)\n    void updateApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.POST(\n            CONNECT_URL + \"/configs\",\n            ImmutableMap.of(\n                \"configs\",              ImmutableMap.of(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 56,
                  "endLine": 87,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void pluginsApi() {\n        ConnectPlugin result = this.retrieve(HttpRequest.GET(BASE_URL + \"/plugins/org.apache.kafka.connect.file.FileStreamSinkConnector\"), ConnectPlugin.class);\n        assertEquals(\"sink\", result.getType());\n        assertTrue(result.getDefinitions().size() > 0);\n    }\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void pluginsApi() {\n        ConnectPlugin result = this.retrieve(HttpRequest.GET(BASE_URL + \"/plugins/org.apache.kafka.connect.file.FileStreamSinkConnector\"), ConnectPlugin.class);\n        assertEquals(\"sink\", result.getType());\n        assertTrue(result.getDefinitions().size() > 0);\n    }\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void pluginsApi() {\n        ConnectPlugin result = this.retrieve(HttpRequest.GET(BASE_URL + \"/plugins/org.apache.kafka.connect.file.FileStreamSinkConnector\"), ConnectPlugin.class);\n        assertEquals(\"sink\", result.getType());\n        assertTrue(result.getDefinitions().size() > 0);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 66,
                  "endLine": 80,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void pluginsListApi() {\n        List<ConnectPlugin> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/plugins\"), ConnectPlugin.class);\n        assertEquals(2, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void pluginsListApi() {\n        List<ConnectPlugin> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/plugins\"), ConnectPlugin.class);\n        assertEquals(2, result.size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void pluginsListApi() {\n        List<ConnectPlugin> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/plugins\"), ConnectPlugin.class);\n        assertEquals(2, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 34,
                  "endLine": 74,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    @Order(2)\n    void configsApi() {\n        Map result = this.retrieve(HttpRequest.GET(CONNECT_URL + \"/configs\"), Map.class);\n        assertEquals(PATH1, result.get(\"file\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "    @Order(2)\n    void configsApi() {\n        Map result = this.retrieve(HttpRequest.GET(CONNECT_URL + \"/configs\"), Map.class);\n        assertEquals(PATH1, result.get(\"file\"));\n    }\n\n    @Test\n",
                      "markdown": "`    @Order(2)\n    void configsApi() {\n        Map result = this.retrieve(HttpRequest.GET(CONNECT_URL + \"/configs\"), Map.class);\n        assertEquals(PATH1, result.get(\"file\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 46,
                  "endLine": 73,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void configsApi() {\n        Map result = this.retrieve(HttpRequest.GET(CONNECT_URL + \"/configs\"), Map.class);\n        assertEquals(PATH1, result.get(\"file\"));\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void configsApi() {\n        Map result = this.retrieve(HttpRequest.GET(CONNECT_URL + \"/configs\"), Map.class);\n        assertEquals(PATH1, result.get(\"file\"));\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void configsApi() {\n        Map result = this.retrieve(HttpRequest.GET(CONNECT_URL + \"/configs\"), Map.class);\n        assertEquals(PATH1, result.get(\"file\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 85,
                  "endLine": 65,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void tasksApi() {\n        List<ConnectDefinition.TaskDefinition> result = this.retrieveList(HttpRequest.GET(CONNECT_URL + \"/tasks\"), ConnectDefinition.TaskDefinition.class);\n        assertEquals(1, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void tasksApi() {\n        List<ConnectDefinition.TaskDefinition> result = this.retrieveList(HttpRequest.GET(CONNECT_URL + \"/tasks\"), ConnectDefinition.TaskDefinition.class);\n        assertEquals(1, result.size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void tasksApi() {\n        List<ConnectDefinition.TaskDefinition> result = this.retrieveList(HttpRequest.GET(CONNECT_URL + \"/tasks\"), ConnectDefinition.TaskDefinition.class);\n        assertEquals(1, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 60,
                  "endLine": 58,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void homeApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.GET(CONNECT_URL), ConnectDefinition.class);\n        assertEquals(CONNECT_NAME, result.getName());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void homeApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.GET(CONNECT_URL), ConnectDefinition.class);\n        assertEquals(CONNECT_NAME, result.getName());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void homeApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.GET(CONNECT_URL), ConnectDefinition.class);\n        assertEquals(CONNECT_NAME, result.getName());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 70,
                  "endLine": 51,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void listApi() {\n        List<ConnectDefinition> result = this.retrieveList(HttpRequest.GET(BASE_URL), ConnectDefinition.class);\n        assertEquals(1, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void listApi() {\n        List<ConnectDefinition> result = this.retrieveList(HttpRequest.GET(BASE_URL), ConnectDefinition.class);\n        assertEquals(1, result.size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void listApi() {\n        List<ConnectDefinition> result = this.retrieveList(HttpRequest.GET(BASE_URL), ConnectDefinition.class);\n        assertEquals(1, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/ConnectControllerTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 60,
                  "endLine": 32,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void createApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.POST(\n            BASE_URL,\n            ImmutableMap.of(\n                \"name\", CONNECT_NAME,\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void createApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.POST(\n            BASE_URL,\n            ImmutableMap.of(\n                \"name\", CONNECT_NAME,\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void createApi() {\n        ConnectDefinition result = this.retrieve(HttpRequest.POST(\n            BASE_URL,\n            ImmutableMap.of(\n                \"name\", CONNECT_NAME,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/KsqlDbControllerTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 100,
                  "endLine": 55,
                  "endColumn": 105,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void listQueries() {\n        ResultPagedList<KsqlDbQuery> ksqlDbQueryResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/queries\"), KsqlDbQuery.class);\n        assertEquals(1, ksqlDbQueryResultPagedList.getResults().size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void listQueries() {\n        ResultPagedList<KsqlDbQuery> ksqlDbQueryResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/queries\"), KsqlDbQuery.class);\n        assertEquals(1, ksqlDbQueryResultPagedList.getResults().size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void listQueries() {\n        ResultPagedList<KsqlDbQuery> ksqlDbQueryResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/queries\"), KsqlDbQuery.class);\n        assertEquals(1, ksqlDbQueryResultPagedList.getResults().size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/KsqlDbControllerTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 100,
                  "endLine": 48,
                  "endColumn": 105,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void listTables() {\n        ResultPagedList<KsqlDbTable> ksqlDbTableResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/tables\"), KsqlDbTable.class);\n        assertEquals(1, ksqlDbTableResultPagedList.getResults().size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void listTables() {\n        ResultPagedList<KsqlDbTable> ksqlDbTableResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/tables\"), KsqlDbTable.class);\n        assertEquals(1, ksqlDbTableResultPagedList.getResults().size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void listTables() {\n        ResultPagedList<KsqlDbTable> ksqlDbTableResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/tables\"), KsqlDbTable.class);\n        assertEquals(1, ksqlDbTableResultPagedList.getResults().size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/KsqlDbControllerTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 102,
                  "endLine": 41,
                  "endColumn": 107,
                  "snippet": {
                    "text": "    @Test\n    @Order(2)\n    void listStreams() {\n        ResultPagedList<KsqlDbStream> ksqlDbStreamResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/streams\"), KsqlDbStream.class);\n        assertEquals(1, ksqlDbStreamResultPagedList.getResults().size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(2)\n    void listStreams() {\n        ResultPagedList<KsqlDbStream> ksqlDbStreamResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/streams\"), KsqlDbStream.class);\n        assertEquals(1, ksqlDbStreamResultPagedList.getResults().size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(2)\n    void listStreams() {\n        ResultPagedList<KsqlDbStream> ksqlDbStreamResultPagedList = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"/streams\"), KsqlDbStream.class);\n        assertEquals(1, ksqlDbStreamResultPagedList.getResults().size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/KsqlDbControllerTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 63,
                  "endLine": 21,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void info() {\n        KsqlDbServerInfo serverInfo = this.retrieve(HttpRequest.GET(BASE_URL + \"/info\"), KsqlDbServerInfo.class);\n        assertNotNull(serverInfo.getKafkaClusterId());\n        assertEquals(\"7.4.4\", serverInfo.getServerVersion());\n        assertEquals(\"ksql\", serverInfo.getKsqlServiceId());\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void info() {\n        KsqlDbServerInfo serverInfo = this.retrieve(HttpRequest.GET(BASE_URL + \"/info\"), KsqlDbServerInfo.class);\n        assertNotNull(serverInfo.getKafkaClusterId());\n        assertEquals(\"7.4.4\", serverInfo.getServerVersion());\n        assertEquals(\"ksql\", serverInfo.getKsqlServiceId());\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void info() {\n        KsqlDbServerInfo serverInfo = this.retrieve(HttpRequest.GET(BASE_URL + \"/info\"), KsqlDbServerInfo.class);\n        assertNotNull(serverInfo.getKafkaClusterId());\n        assertEquals(\"7.4.4\", serverInfo.getServerVersion());\n        assertEquals(\"ksql\", serverInfo.getKsqlServiceId());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 23,
                  "endLine": 129,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        );\n\n        result = this.retrieve(\n            HttpRequest.GET(BASE_URL + \"/\" + name),\n            ConsumerGroup.class\n        );\n        assertEquals(name, result.getId());\n",
                    "rendered": {
                      "text": "        );\n\n        result = this.retrieve(\n            HttpRequest.GET(BASE_URL + \"/\" + name),\n            ConsumerGroup.class\n        );\n        assertEquals(name, result.getId());\n",
                      "markdown": "`        );\n\n        result = this.retrieve(\n            HttpRequest.GET(BASE_URL + \"/\" + name),\n            ConsumerGroup.class\n        );\n        assertEquals(name, result.getId());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 118,
                  "endLine": 122,
                  "endColumn": 123,
                  "snippet": {
                    "text": "            HttpRequest.GET(BASE_URL + \"/\" + name + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(95L, updated.stream().filter(r -> r.getPartition() == 0).findFirst().orElseThrow().getOffsetLag().get());\n\n        this.exchange(\n            HttpRequest.DELETE(BASE_URL + \"/\" + name)\n",
                    "rendered": {
                      "text": "            HttpRequest.GET(BASE_URL + \"/\" + name + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(95L, updated.stream().filter(r -> r.getPartition() == 0).findFirst().orElseThrow().getOffsetLag().get());\n\n        this.exchange(\n            HttpRequest.DELETE(BASE_URL + \"/\" + name)\n",
                      "markdown": "`            HttpRequest.GET(BASE_URL + \"/\" + name + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(95L, updated.stream().filter(r -> r.getPartition() == 0).findFirst().orElseThrow().getOffsetLag().get());\n\n        this.exchange(\n            HttpRequest.DELETE(BASE_URL + \"/\" + name)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 23,
                  "endLine": 119,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        );\n\n        List<TopicPartition.ConsumerGroupOffset> updated = this.retrieveList(\n            HttpRequest.GET(BASE_URL + \"/\" + name + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(95L, updated.stream().filter(r -> r.getPartition() == 0).findFirst().orElseThrow().getOffsetLag().get());\n",
                    "rendered": {
                      "text": "        );\n\n        List<TopicPartition.ConsumerGroupOffset> updated = this.retrieveList(\n            HttpRequest.GET(BASE_URL + \"/\" + name + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(95L, updated.stream().filter(r -> r.getPartition() == 0).findFirst().orElseThrow().getOffsetLag().get());\n",
                      "markdown": "`        );\n\n        List<TopicPartition.ConsumerGroupOffset> updated = this.retrieveList(\n            HttpRequest.GET(BASE_URL + \"/\" + name + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(95L, updated.stream().filter(r -> r.getPartition() == 0).findFirst().orElseThrow().getOffsetLag().get());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 16,
                  "endLine": 112,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n        this.exchange(\n            HttpRequest\n                .POST(\n                    BASE_URL + \"/\" + name + \"/offsets\",\n                    Collections.singletonList(new GroupController.OffsetsUpdate(KafkaTestCluster.TOPIC_RANDOM, 0, 5L))\n                )\n",
                    "rendered": {
                      "text": "\n        this.exchange(\n            HttpRequest\n                .POST(\n                    BASE_URL + \"/\" + name + \"/offsets\",\n                    Collections.singletonList(new GroupController.OffsetsUpdate(KafkaTestCluster.TOPIC_RANDOM, 0, 5L))\n                )\n",
                      "markdown": "`\n        this.exchange(\n            HttpRequest\n                .POST(\n                    BASE_URL + \"/\" + name + \"/offsets\",\n                    Collections.singletonList(new GroupController.OffsetsUpdate(KafkaTestCluster.TOPIC_RANDOM, 0, 5L))\n                )\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 128,
                  "endLine": 108,
                  "endColumn": 133,
                  "snippet": {
                    "text": "            ConsumerGroup.class\n        );\n        assertEquals(0, result.getMembers().size());\n        assertEquals(0, result.getOffsets().stream().filter(r -> r.getPartition() == 1).findFirst().orElseThrow().getOffsetLag().get());\n\n        this.exchange(\n            HttpRequest\n",
                    "rendered": {
                      "text": "            ConsumerGroup.class\n        );\n        assertEquals(0, result.getMembers().size());\n        assertEquals(0, result.getOffsets().stream().filter(r -> r.getPartition() == 1).findFirst().orElseThrow().getOffsetLag().get());\n\n        this.exchange(\n            HttpRequest\n",
                      "markdown": "`            ConsumerGroup.class\n        );\n        assertEquals(0, result.getMembers().size());\n        assertEquals(0, result.getOffsets().stream().filter(r -> r.getPartition() == 1).findFirst().orElseThrow().getOffsetLag().get());\n\n        this.exchange(\n            HttpRequest\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 23,
                  "endLine": 104,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        consumer.close();\n\n        result = this.retrieve(\n            HttpRequest.GET(BASE_URL + \"/\" + name),\n            ConsumerGroup.class\n        );\n        assertEquals(0, result.getMembers().size());\n",
                    "rendered": {
                      "text": "        consumer.close();\n\n        result = this.retrieve(\n            HttpRequest.GET(BASE_URL + \"/\" + name),\n            ConsumerGroup.class\n        );\n        assertEquals(0, result.getMembers().size());\n",
                      "markdown": "`        consumer.close();\n\n        result = this.retrieve(\n            HttpRequest.GET(BASE_URL + \"/\" + name),\n            ConsumerGroup.class\n        );\n        assertEquals(0, result.getMembers().size());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 40,
                  "endLine": 87,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n    @Test\n",
                      "markdown": "`\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 40,
                  "endLine": 86,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        );\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n",
                    "rendered": {
                      "text": "        );\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n",
                      "markdown": "`        );\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 23,
                  "endLine": 81,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void aclsApi() {\n        List<AccessControl> result = this.retrieveList(\n            HttpRequest.GET(BASE_URL + \"/groupConsumer/acls\"),\n            AccessControl.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void aclsApi() {\n        List<AccessControl> result = this.retrieveList(\n            HttpRequest.GET(BASE_URL + \"/groupConsumer/acls\"),\n            AccessControl.class\n        );\n\n",
                      "markdown": "`    @Test\n    void aclsApi() {\n        List<AccessControl> result = this.retrieveList(\n            HttpRequest.GET(BASE_URL + \"/groupConsumer/acls\"),\n            AccessControl.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 30,
                  "endLine": 75,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        );\n\n        assertEquals(4, result.size());\n        assertEquals(0, result.get(0).getOffset());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        );\n\n        assertEquals(4, result.size());\n        assertEquals(0, result.get(0).getOffset());\n    }\n\n    @Test\n",
                      "markdown": "`        );\n\n        assertEquals(4, result.size());\n        assertEquals(0, result.get(0).getOffset());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 23,
                  "endLine": 70,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void offsetsStartApi() {\n        List<RecordRepository.TimeOffset> result = this.retrieveList(\n            HttpRequest.GET(GROUP_URL + \"/offsets/start?timestamp=2020-03-28T11:40:10.123Z\"),\n            RecordRepository.TimeOffset.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void offsetsStartApi() {\n        List<RecordRepository.TimeOffset> result = this.retrieveList(\n            HttpRequest.GET(GROUP_URL + \"/offsets/start?timestamp=2020-03-28T11:40:10.123Z\"),\n            RecordRepository.TimeOffset.class\n        );\n\n",
                      "markdown": "`    @Test\n    void offsetsStartApi() {\n        List<RecordRepository.TimeOffset> result = this.retrieveList(\n            HttpRequest.GET(GROUP_URL + \"/offsets/start?timestamp=2020-03-28T11:40:10.123Z\"),\n            RecordRepository.TimeOffset.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 61,
                  "endLine": 63,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n    @Test\n    void membersApi() {\n        List<Consumer> result = this.retrieveList(HttpRequest.GET(GROUP_URL + \"/members\"), Consumer.class);\n        assertEquals(1, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "\n    @Test\n    void membersApi() {\n        List<Consumer> result = this.retrieveList(HttpRequest.GET(GROUP_URL + \"/members\"), Consumer.class);\n        assertEquals(1, result.size());\n    }\n\n",
                      "markdown": "`\n    @Test\n    void membersApi() {\n        List<Consumer> result = this.retrieveList(HttpRequest.GET(GROUP_URL + \"/members\"), Consumer.class);\n        assertEquals(1, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 23,
                  "endLine": 55,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void offsetsApi() {\n        List<TopicPartition.ConsumerGroupOffset> result = this.retrieveList(\n            HttpRequest.GET(GROUP_URL + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(9, result.size());\n",
                    "rendered": {
                      "text": "    @Test\n    void offsetsApi() {\n        List<TopicPartition.ConsumerGroupOffset> result = this.retrieveList(\n            HttpRequest.GET(GROUP_URL + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(9, result.size());\n",
                      "markdown": "`    @Test\n    void offsetsApi() {\n        List<TopicPartition.ConsumerGroupOffset> result = this.retrieveList(\n            HttpRequest.GET(GROUP_URL + \"/offsets\"),\n            TopicPartition.ConsumerGroupOffset.class\n        );\n        assertEquals(9, result.size());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 56,
                  "endLine": 48,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n    @Test\n    void homeApi() {\n        ConsumerGroup result = this.retrieve(HttpRequest.GET(GROUP_URL), ConsumerGroup.class);\n        assertEquals(\"stream-test-example\", result.getId());\n    }\n\n",
                    "rendered": {
                      "text": "\n    @Test\n    void homeApi() {\n        ConsumerGroup result = this.retrieve(HttpRequest.GET(GROUP_URL), ConsumerGroup.class);\n        assertEquals(\"stream-test-example\", result.getId());\n    }\n\n",
                      "markdown": "`\n    @Test\n    void homeApi() {\n        ConsumerGroup result = this.retrieve(HttpRequest.GET(GROUP_URL), ConsumerGroup.class);\n        assertEquals(\"stream-test-example\", result.getId());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 62,
                  "endLine": 43,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n    }\n\n    @Test\n",
                      "markdown": "`        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 54,
                  "endLine": 42,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n    }\n\n",
                    "rendered": {
                      "text": "\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n    }\n\n",
                      "markdown": "`\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 51,
                  "endLine": 40,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), ConsumerGroup.class);\n        assertEquals(5, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n",
                    "rendered": {
                      "text": "        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), ConsumerGroup.class);\n        assertEquals(5, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n",
                      "markdown": "`        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), ConsumerGroup.class);\n        assertEquals(5, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n        assertEquals(2, result.getResults().size());\n        assertEquals(\"consumer-5\", result.getResults().get(0).getId());\n        assertEquals(\"stream-test-example\",result.getResults().get(1).getId());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/GroupControllerTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 51,
                  "endLine": 37,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    void listApi() {\n        ResultPagedList<ConsumerGroup> result;\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), ConsumerGroup.class);\n        assertEquals(5, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n",
                    "rendered": {
                      "text": "    void listApi() {\n        ResultPagedList<ConsumerGroup> result;\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), ConsumerGroup.class);\n        assertEquals(5, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n",
                      "markdown": "`    void listApi() {\n        ResultPagedList<ConsumerGroup> result;\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), ConsumerGroup.class);\n        assertEquals(5, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), ConsumerGroup.class);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/NodeControllerTest.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 23,
                  "endLine": 67,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void nodeLogApi() {\n        List<LogDir> result = this.retrieveList(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/logs\"),\n            LogDir.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void nodeLogApi() {\n        List<LogDir> result = this.retrieveList(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/logs\"),\n            LogDir.class\n        );\n\n",
                      "markdown": "`    @Test\n    void nodeLogApi() {\n        List<LogDir> result = this.retrieveList(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/logs\"),\n            LogDir.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/NodeControllerTest.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 23,
                  "endLine": 54,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        String s = String.valueOf(new Random().nextInt((Integer.MAX_VALUE - Integer.MAX_VALUE/2) + 1) + Integer.MAX_VALUE/2);\n\n        List<Config> result = this.retrieveList(\n            HttpRequest.POST(\n                \"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/configs\",\n                ImmutableMap.of(\"configs\", ImmutableMap.of(\"max.connections.per.ip\", s))\n            ),\n",
                    "rendered": {
                      "text": "        String s = String.valueOf(new Random().nextInt((Integer.MAX_VALUE - Integer.MAX_VALUE/2) + 1) + Integer.MAX_VALUE/2);\n\n        List<Config> result = this.retrieveList(\n            HttpRequest.POST(\n                \"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/configs\",\n                ImmutableMap.of(\"configs\", ImmutableMap.of(\"max.connections.per.ip\", s))\n            ),\n",
                      "markdown": "`        String s = String.valueOf(new Random().nextInt((Integer.MAX_VALUE - Integer.MAX_VALUE/2) + 1) + Integer.MAX_VALUE/2);\n\n        List<Config> result = this.retrieveList(\n            HttpRequest.POST(\n                \"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/configs\",\n                ImmutableMap.of(\"configs\", ImmutableMap.of(\"max.connections.per.ip\", s))\n            ),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/NodeControllerTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 23,
                  "endLine": 42,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void nodeConfigApi() {\n        List<Config> result = this.retrieveList(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/configs\"),\n            Config.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void nodeConfigApi() {\n        List<Config> result = this.retrieveList(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/configs\"),\n            Config.class\n        );\n\n",
                      "markdown": "`    @Test\n    void nodeConfigApi() {\n        List<Config> result = this.retrieveList(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0/configs\"),\n            Config.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/NodeControllerTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 23,
                  "endLine": 32,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void nodeApi() {\n        Node result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0\"),\n            Node.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void nodeApi() {\n        Node result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0\"),\n            Node.class\n        );\n\n",
                      "markdown": "`    @Test\n    void nodeApi() {\n        Node result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0\"),\n            Node.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/NodeControllerTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 23,
                  "endLine": 22,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void listApi() {\n        Cluster result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node\"),\n            Cluster.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void listApi() {\n        Cluster result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node\"),\n            Cluster.class\n        );\n\n",
                      "markdown": "`    @Test\n    void listApi() {\n        Cluster result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node\"),\n            Cluster.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/NodeControllerTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "endLine": 31,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n    @Test\n    void nodeApi() {\n        Node result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0\"),\n            Node.class\n        );\n",
                    "rendered": {
                      "text": "\n    @Test\n    void nodeApi() {\n        Node result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0\"),\n            Node.class\n        );\n",
                      "markdown": "`\n    @Test\n    void nodeApi() {\n        Node result = this.retrieve(\n            HttpRequest.GET(\"/api/\" +  KafkaTestCluster.CLUSTER_ID + \"/node/0\"),\n            Node.class\n        );\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AvroToJsonDeserializerTest.java"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 31,
                  "endLine": 158,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    private Schema resolveSchema(String schemaName) throws URISyntaxException, IOException {\n        URI uri = ClassLoader.getSystemResource(\"avro\").toURI();\n        File schemaFile = Paths.get(uri).resolve(schemaName).toFile();\n\n        return new Schema.Parser().parse(schemaFile);\n    }\n",
                    "rendered": {
                      "text": "\n    private Schema resolveSchema(String schemaName) throws URISyntaxException, IOException {\n        URI uri = ClassLoader.getSystemResource(\"avro\").toURI();\n        File schemaFile = Paths.get(uri).resolve(schemaName).toFile();\n\n        return new Schema.Parser().parse(schemaFile);\n    }\n",
                      "markdown": "`\n    private Schema resolveSchema(String schemaName) throws URISyntaxException, IOException {\n        URI uri = ClassLoader.getSystemResource(\"avro\").toURI();\n        File schemaFile = Paths.get(uri).resolve(schemaName).toFile();\n\n        return new Schema.Parser().parse(schemaFile);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AvroToJsonDeserializerTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 40,
                  "endLine": 148,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        DatumWriter<T> writer = new GenericDatumWriter<>(schema);\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        Encoder encoder = EncoderFactory.get().binaryEncoder(bos, null);\n        writer.write(datum, encoder);\n        encoder.flush();\n        bos.close();\n",
                    "rendered": {
                      "text": "\n        DatumWriter<T> writer = new GenericDatumWriter<>(schema);\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        Encoder encoder = EncoderFactory.get().binaryEncoder(bos, null);\n        writer.write(datum, encoder);\n        encoder.flush();\n        bos.close();\n",
                      "markdown": "`\n        DatumWriter<T> writer = new GenericDatumWriter<>(schema);\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        Encoder encoder = EncoderFactory.get().binaryEncoder(bos, null);\n        writer.write(datum, encoder);\n        encoder.flush();\n        bos.close();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AvroToJsonDeserializerTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 39,
                  "endLine": 43,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        avroDeserializationTopicsMapping = new Connection.Deserialization.AvroDeserializationTopicsMapping();\n\n        URI uri = ClassLoader.getSystemResource(\"avro\").toURI();\n        String avroSchemaFolder = Paths.get(uri).toString();\n        avroDeserializationTopicsMapping.setSchemasFolder(avroSchemaFolder);\n\n        AvroTopicsMapping albumTopicsMapping = new AvroTopicsMapping();\n",
                    "rendered": {
                      "text": "        avroDeserializationTopicsMapping = new Connection.Deserialization.AvroDeserializationTopicsMapping();\n\n        URI uri = ClassLoader.getSystemResource(\"avro\").toURI();\n        String avroSchemaFolder = Paths.get(uri).toString();\n        avroDeserializationTopicsMapping.setSchemasFolder(avroSchemaFolder);\n\n        AvroTopicsMapping albumTopicsMapping = new AvroTopicsMapping();\n",
                      "markdown": "`        avroDeserializationTopicsMapping = new Connection.Deserialization.AvroDeserializationTopicsMapping();\n\n        URI uri = ClassLoader.getSystemResource(\"avro\").toURI();\n        String avroSchemaFolder = Paths.get(uri).toString();\n        avroDeserializationTopicsMapping.setSchemasFolder(avroSchemaFolder);\n\n        AvroTopicsMapping albumTopicsMapping = new AvroTopicsMapping();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/BookProto.java"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 39,
                  "endLine": 957,
                  "endColumn": 44,
                  "snippet": {
                    "text": "          com.google.protobuf.WrappersProto.getDescriptor(),\n        });\n    internal_static_org_akhq_utils_Book_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Book_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Book_descriptor,\n",
                    "rendered": {
                      "text": "          com.google.protobuf.WrappersProto.getDescriptor(),\n        });\n    internal_static_org_akhq_utils_Book_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Book_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Book_descriptor,\n",
                      "markdown": "`          com.google.protobuf.WrappersProto.getDescriptor(),\n        });\n    internal_static_org_akhq_utils_Book_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Book_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Book_descriptor,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/ComplexProto.java"
                },
                "region": {
                  "startLine": 1268,
                  "startColumn": 39,
                  "endLine": 1268,
                  "endColumn": 44,
                  "snippet": {
                    "text": "          com.google.protobuf.AnyProto.getDescriptor(),\n        });\n    internal_static_org_akhq_utils_Complex_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Complex_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Complex_descriptor,\n",
                    "rendered": {
                      "text": "          com.google.protobuf.AnyProto.getDescriptor(),\n        });\n    internal_static_org_akhq_utils_Complex_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Complex_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Complex_descriptor,\n",
                      "markdown": "`          com.google.protobuf.AnyProto.getDescriptor(),\n        });\n    internal_static_org_akhq_utils_Complex_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Complex_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Complex_descriptor,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/FilmProto.java"
                },
                "region": {
                  "startLine": 1112,
                  "startColumn": 39,
                  "endLine": 1112,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        new com.google.protobuf.Descriptors.FileDescriptor[] {\n        });\n    internal_static_org_akhq_utils_Film_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Film_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Film_descriptor,\n",
                    "rendered": {
                      "text": "        new com.google.protobuf.Descriptors.FileDescriptor[] {\n        });\n    internal_static_org_akhq_utils_Film_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Film_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Film_descriptor,\n",
                      "markdown": "`        new com.google.protobuf.Descriptors.FileDescriptor[] {\n        });\n    internal_static_org_akhq_utils_Film_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Film_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Film_descriptor,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/FilmProto.java"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 24,
                  "endLine": 953,
                  "endColumn": 29,
                  "snippet": {
                    "text": "       * @return The starring at the given index.\n       */\n      public java.lang.String getStarring(int index) {\n        return starring_.get(index);\n      }\n      /**\n       * <code>repeated string starring = 5;</code>\n",
                    "rendered": {
                      "text": "       * @return The starring at the given index.\n       */\n      public java.lang.String getStarring(int index) {\n        return starring_.get(index);\n      }\n      /**\n       * <code>repeated string starring = 5;</code>\n",
                      "markdown": "`       * @return The starring at the given index.\n       */\n      public java.lang.String getStarring(int index) {\n        return starring_.get(index);\n      }\n      /**\n       * <code>repeated string starring = 5;</code>\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/FilmProto.java"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 22,
                  "endLine": 312,
                  "endColumn": 27,
                  "snippet": {
                    "text": "     * @return The starring at the given index.\n     */\n    public java.lang.String getStarring(int index) {\n      return starring_.get(index);\n    }\n    /**\n     * <code>repeated string starring = 5;</code>\n",
                    "rendered": {
                      "text": "     * @return The starring at the given index.\n     */\n    public java.lang.String getStarring(int index) {\n      return starring_.get(index);\n    }\n    /**\n     * <code>repeated string starring = 5;</code>\n",
                      "markdown": "`     * @return The starring at the given index.\n     */\n    public java.lang.String getStarring(int index) {\n      return starring_.get(index);\n    }\n    /**\n     * <code>repeated string starring = 5;</code>\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AvroDeserializerTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 25,
                  "endLine": 107,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        GenericRecord expectedRecord = AvroSerializer.recordSerializer(expectedMap, schema);\n        Map<String, Object> result = AvroDeserializer.recordDeserializer(expectedRecord);\n\n        assertThat(result.get(fieldName), is(converted));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        GenericRecord expectedRecord = AvroSerializer.recordSerializer(expectedMap, schema);\n        Map<String, Object> result = AvroDeserializer.recordDeserializer(expectedRecord);\n\n        assertThat(result.get(fieldName), is(converted));\n    }\n\n    @Test\n",
                      "markdown": "`        GenericRecord expectedRecord = AvroSerializer.recordSerializer(expectedMap, schema);\n        Map<String, Object> result = AvroDeserializer.recordDeserializer(expectedRecord);\n\n        assertThat(result.get(fieldName), is(converted));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AlbumProto.java"
                },
                "region": {
                  "startLine": 1112,
                  "startColumn": 39,
                  "endLine": 1112,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        new com.google.protobuf.Descriptors.FileDescriptor[] {\n        });\n    internal_static_org_akhq_utils_Album_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Album_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Album_descriptor,\n",
                    "rendered": {
                      "text": "        new com.google.protobuf.Descriptors.FileDescriptor[] {\n        });\n    internal_static_org_akhq_utils_Album_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Album_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Album_descriptor,\n",
                      "markdown": "`        new com.google.protobuf.Descriptors.FileDescriptor[] {\n        });\n    internal_static_org_akhq_utils_Album_descriptor =\n      getDescriptor().getMessageTypes().get(0);\n    internal_static_org_akhq_utils_Album_fieldAccessorTable = new\n      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n        internal_static_org_akhq_utils_Album_descriptor,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AlbumProto.java"
                },
                "region": {
                  "startLine": 954,
                  "startColumn": 25,
                  "endLine": 954,
                  "endColumn": 30,
                  "snippet": {
                    "text": "       * @return The songTitle at the given index.\n       */\n      public java.lang.String getSongTitle(int index) {\n        return songTitle_.get(index);\n      }\n      /**\n       * <code>repeated string song_title = 4;</code>\n",
                    "rendered": {
                      "text": "       * @return The songTitle at the given index.\n       */\n      public java.lang.String getSongTitle(int index) {\n        return songTitle_.get(index);\n      }\n      /**\n       * <code>repeated string song_title = 4;</code>\n",
                      "markdown": "`       * @return The songTitle at the given index.\n       */\n      public java.lang.String getSongTitle(int index) {\n        return songTitle_.get(index);\n      }\n      /**\n       * <code>repeated string song_title = 4;</code>\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AlbumProto.java"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 22,
                  "endLine": 814,
                  "endColumn": 27,
                  "snippet": {
                    "text": "       * @return The artist at the given index.\n       */\n      public java.lang.String getArtist(int index) {\n        return artist_.get(index);\n      }\n      /**\n       * <code>repeated string artist = 2;</code>\n",
                    "rendered": {
                      "text": "       * @return The artist at the given index.\n       */\n      public java.lang.String getArtist(int index) {\n        return artist_.get(index);\n      }\n      /**\n       * <code>repeated string artist = 2;</code>\n",
                      "markdown": "`       * @return The artist at the given index.\n       */\n      public java.lang.String getArtist(int index) {\n        return artist_.get(index);\n      }\n      /**\n       * <code>repeated string artist = 2;</code>\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AlbumProto.java"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 23,
                  "endLine": 309,
                  "endColumn": 28,
                  "snippet": {
                    "text": "     * @return The songTitle at the given index.\n     */\n    public java.lang.String getSongTitle(int index) {\n      return songTitle_.get(index);\n    }\n    /**\n     * <code>repeated string song_title = 4;</code>\n",
                    "rendered": {
                      "text": "     * @return The songTitle at the given index.\n     */\n    public java.lang.String getSongTitle(int index) {\n      return songTitle_.get(index);\n    }\n    /**\n     * <code>repeated string song_title = 4;</code>\n",
                      "markdown": "`     * @return The songTitle at the given index.\n     */\n    public java.lang.String getSongTitle(int index) {\n      return songTitle_.get(index);\n    }\n    /**\n     * <code>repeated string song_title = 4;</code>\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/utils/AlbumProto.java"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 20,
                  "endLine": 264,
                  "endColumn": 25,
                  "snippet": {
                    "text": "     * @return The artist at the given index.\n     */\n    public java.lang.String getArtist(int index) {\n      return artist_.get(index);\n    }\n    /**\n     * <code>repeated string artist = 2;</code>\n",
                    "rendered": {
                      "text": "     * @return The artist at the given index.\n     */\n    public java.lang.String getArtist(int index) {\n      return artist_.get(index);\n    }\n    /**\n     * <code>repeated string artist = 2;</code>\n",
                      "markdown": "`     * @return The artist at the given index.\n     */\n    public java.lang.String getArtist(int index) {\n      return artist_.get(index);\n    }\n    /**\n     * <code>repeated string artist = 2;</code>\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/codeql-analysis.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 23,
                  "endLine": 34,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n",
                    "rendered": {
                      "text": "    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n",
                      "markdown": "`    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/codeql-analysis.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 16,
                  "endLine": 48,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      uses: github/codeql-action/init@v3\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n",
                    "rendered": {
                      "text": "      uses: github/codeql-action/init@v3\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n",
                      "markdown": "`      uses: github/codeql-action/init@v3\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/codeql-analysis.yml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n",
                    "rendered": {
                      "text": "\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n",
                      "markdown": "`\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/codeql-analysis.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 9,
                  "endLine": 39,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n",
                    "rendered": {
                      "text": "        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n",
                      "markdown": "`        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/codeql-analysis.yml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 9,
                  "endLine": 4,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\nname: \"CodeQL\"\n\n",
                    "rendered": {
                      "text": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\nname: \"CodeQL\"\n\n",
                      "markdown": "`# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\nname: \"CodeQL\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 10,
                  "endLine": 140,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata for Docker\n        id: meta\n",
                    "rendered": {
                      "text": "        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata for Docker\n        id: meta\n",
                      "markdown": "`        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata for Docker\n        id: meta\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 42,
                  "endLine": 132,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3\n",
                    "rendered": {
                      "text": "        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3\n",
                      "markdown": "`        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 10,
                  "endLine": 132,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3\n",
                    "rendered": {
                      "text": "        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3\n",
                      "markdown": "`        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 34,
                  "endLine": 143,
                  "snippet": {
                    "text": "          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata for Docker\n        id: meta\n        uses: docker/metadata-action@v5\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n",
                    "rendered": {
                      "text": "          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata for Docker\n        id: meta\n        uses: docker/metadata-action@v5\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n",
                      "markdown": "`          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata for Docker\n        id: meta\n        uses: docker/metadata-action@v5\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 20,
                  "endLine": 123,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        uses: docker/setup-qemu-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n",
                    "rendered": {
                      "text": "        uses: docker/setup-qemu-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n",
                      "markdown": "`        uses: docker/setup-qemu-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 7,
                  "endLine": 119,
                  "snippet": {
                    "text": "            build/dist/akhq-*.tar\n            build/dist/akhq-*.zip\n\n      # Docker\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n",
                    "rendered": {
                      "text": "            build/dist/akhq-*.tar\n            build/dist/akhq-*.zip\n\n      # Docker\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n",
                      "markdown": "`            build/dist/akhq-*.tar\n            build/dist/akhq-*.zip\n\n      # Docker\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n        if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/')\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 59,
                  "endLine": 87,
                  "endColumn": 63,
                  "snippet": {
                    "text": "          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n        uses: actions/upload-artifact@v4\n",
                    "rendered": {
                      "text": "          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n        uses: actions/upload-artifact@v4\n",
                      "markdown": "`          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n        uses: actions/upload-artifact@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 9,
                  "endLine": 87,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n        uses: actions/upload-artifact@v4\n",
                    "rendered": {
                      "text": "          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n        uses: actions/upload-artifact@v4\n",
                      "markdown": "`          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n        uses: actions/upload-artifact@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 59,
                  "endLine": 86,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n",
                    "rendered": {
                      "text": "        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n",
                      "markdown": "`        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 9,
                  "endLine": 86,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n",
                    "rendered": {
                      "text": "        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n",
                      "markdown": "`        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n\n      - name: Upload jar\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "endLine": 84,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      # Upload artifacts\n      - name: Copy jar to docker\n        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n",
                    "rendered": {
                      "text": "      # Upload artifacts\n      - name: Copy jar to docker\n        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n",
                      "markdown": "`      # Upload artifacts\n      - name: Copy jar to docker\n        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n          find build/distributions/akhq-*.zip -type f -exec cp \"{}\" build/dist/ \";\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 25,
                  "endLine": 83,
                  "snippet": {
                    "text": "        run: ./gradlew shadowJar distTar distZip --no-daemon\n\n      # Upload artifacts\n      - name: Copy jar to docker\n        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n",
                    "rendered": {
                      "text": "        run: ./gradlew shadowJar distTar distZip --no-daemon\n\n      # Upload artifacts\n      - name: Copy jar to docker\n        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n",
                      "markdown": "`        run: ./gradlew shadowJar distTar distZip --no-daemon\n\n      # Upload artifacts\n      - name: Copy jar to docker\n        run: |\n          cp build/libs/akhq-*-all.jar docker/app/akhq.jar\n          mkdir -p build/dist/\n          find build/distributions/akhq-*.tar -type f -exec cp \"{}\" build/dist/ \";\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 19,
                  "endLine": 76,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        with:\n          report_paths: '**/build/test-results/**/TEST-*.xml'\n\n      # Shadow Jar, Tar and Zip\n      - name: Build jars and distribution archives\n        if: success()\n        run: ./gradlew shadowJar distTar distZip --no-daemon\n",
                    "rendered": {
                      "text": "        with:\n          report_paths: '**/build/test-results/**/TEST-*.xml'\n\n      # Shadow Jar, Tar and Zip\n      - name: Build jars and distribution archives\n        if: success()\n        run: ./gradlew shadowJar distTar distZip --no-daemon\n",
                      "markdown": "`        with:\n          report_paths: '**/build/test-results/**/TEST-*.xml'\n\n      # Shadow Jar, Tar and Zip\n      - name: Build jars and distribution archives\n        if: success()\n        run: ./gradlew shadowJar distTar distZip --no-daemon\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 15,
                  "endLine": 52,
                  "snippet": {
                    "text": "      - name: Node cache\n        uses: actions/cache@v4\n        with:\n          path: node\n          key: \"${{ runner.os }}-node-${{ hashFiles('**/*.gradle') }}\"\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n",
                    "rendered": {
                      "text": "      - name: Node cache\n        uses: actions/cache@v4\n        with:\n          path: node\n          key: \"${{ runner.os }}-node-${{ hashFiles('**/*.gradle') }}\"\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n",
                      "markdown": "`      - name: Node cache\n        uses: actions/cache@v4\n        with:\n          path: node\n          key: \"${{ runner.os }}-node-${{ hashFiles('**/*.gradle') }}\"\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/main.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 13,
                  "endLine": 48,
                  "endColumn": 19,
                  "snippet": {
                    "text": "          key: \"${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}\"\n          restore-keys: |\n            ${{ runner.os }}-node-\n      - name: Node cache\n        uses: actions/cache@v4\n        with:\n          path: node\n",
                    "rendered": {
                      "text": "          key: \"${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}\"\n          restore-keys: |\n            ${{ runner.os }}-node-\n      - name: Node cache\n        uses: actions/cache@v4\n        with:\n          path: node\n",
                      "markdown": "`          key: \"${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}\"\n          restore-keys: |\n            ${{ runner.os }}-node-\n      - name: Node cache\n        uses: actions/cache@v4\n        with:\n          path: node\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "endLine": 57,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      - name: Add helm charts\n        run: |\n          rm -rf tmp-helm/.git\n          cp -R tmp-helm/* docs/.vuepress/dist/\n\n      # Deploy\n      - name: Deploy\n",
                    "rendered": {
                      "text": "      - name: Add helm charts\n        run: |\n          rm -rf tmp-helm/.git\n          cp -R tmp-helm/* docs/.vuepress/dist/\n\n      # Deploy\n      - name: Deploy\n",
                      "markdown": "`      - name: Add helm charts\n        run: |\n          rm -rf tmp-helm/.git\n          cp -R tmp-helm/* docs/.vuepress/dist/\n\n      # Deploy\n      - name: Deploy\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 9,
                  "endLine": 37,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      - name: Add some files\n        run: |\n          cp LICENSE helm/akhq/LICENSE\n          cp README.md helm/akhq/README.md\n\n      # Helm charts\n      - uses: J12934/helm-gh-pages-action@master\n",
                    "rendered": {
                      "text": "      - name: Add some files\n        run: |\n          cp LICENSE helm/akhq/LICENSE\n          cp README.md helm/akhq/README.md\n\n      # Helm charts\n      - uses: J12934/helm-gh-pages-action@master\n",
                      "markdown": "`      - name: Add some files\n        run: |\n          cp LICENSE helm/akhq/LICENSE\n          cp README.md helm/akhq/README.md\n\n      # Helm charts\n      - uses: J12934/helm-gh-pages-action@master\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 9,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      # Copy for helm\n      - name: Add some files\n        run: |\n          cp LICENSE helm/akhq/LICENSE\n          cp README.md helm/akhq/README.md\n\n      # Helm charts\n",
                    "rendered": {
                      "text": "      # Copy for helm\n      - name: Add some files\n        run: |\n          cp LICENSE helm/akhq/LICENSE\n          cp README.md helm/akhq/README.md\n\n      # Helm charts\n",
                      "markdown": "`      # Copy for helm\n      - name: Add some files\n        run: |\n          cp LICENSE helm/akhq/LICENSE\n          cp README.md helm/akhq/README.md\n\n      # Helm charts\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 19,
                  "endLine": 18,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v4\n\n      # Setup\n      - name: Setup Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v4\n\n      # Setup\n      - name: Setup Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n",
                      "markdown": "`      - uses: actions/checkout@v4\n\n      # Setup\n      - name: Setup Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 51,
                  "endLine": 162,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    expect(headers).toHaveLength(2);\n  });\n\n  it('renders only two columns on first header', ({ expect }) => {\n    let firstHeader = container.querySelector('#firstHeader');\n    let columns = firstHeader.querySelectorAll('#headerColumn');\n    expect(columns).toHaveLength(2);\n",
                    "rendered": {
                      "text": "    expect(headers).toHaveLength(2);\n  });\n\n  it('renders only two columns on first header', ({ expect }) => {\n    let firstHeader = container.querySelector('#firstHeader');\n    let columns = firstHeader.querySelectorAll('#headerColumn');\n    expect(columns).toHaveLength(2);\n",
                      "markdown": "`    expect(headers).toHaveLength(2);\n  });\n\n  it('renders only two columns on first header', ({ expect }) => {\n    let firstHeader = container.querySelector('#firstHeader');\n    let columns = firstHeader.querySelectorAll('#headerColumn');\n    expect(columns).toHaveLength(2);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 30,
                  "endLine": 157,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    expect(value).toEqual(TABLE_DELETE);\n  });\n\n  it('renders two headers', ({ expect }) => {\n    let headers = container.querySelectorAll('thead');\n    expect(headers).toHaveLength(2);\n  });\n",
                    "rendered": {
                      "text": "    expect(value).toEqual(TABLE_DELETE);\n  });\n\n  it('renders two headers', ({ expect }) => {\n    let headers = container.querySelectorAll('thead');\n    expect(headers).toHaveLength(2);\n  });\n",
                      "markdown": "`    expect(value).toEqual(TABLE_DELETE);\n  });\n\n  it('renders two headers', ({ expect }) => {\n    let headers = container.querySelectorAll('thead');\n    expect(headers).toHaveLength(2);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 28,
                  "endLine": 151,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    expect(value).toEqual(TABLE_CONFIG);\n  });\n\n  it('does delete logic', ({ expect }) => {\n    let remove = container.querySelector(`#${TABLE_DELETE}`);\n    Simulate.click(remove);\n    expect(value).toEqual(TABLE_DELETE);\n",
                    "rendered": {
                      "text": "    expect(value).toEqual(TABLE_CONFIG);\n  });\n\n  it('does delete logic', ({ expect }) => {\n    let remove = container.querySelector(`#${TABLE_DELETE}`);\n    Simulate.click(remove);\n    expect(value).toEqual(TABLE_DELETE);\n",
                      "markdown": "`    expect(value).toEqual(TABLE_CONFIG);\n  });\n\n  it('does delete logic', ({ expect }) => {\n    let remove = container.querySelector(`#${TABLE_DELETE}`);\n    Simulate.click(remove);\n    expect(value).toEqual(TABLE_DELETE);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 28,
                  "endLine": 145,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    expect(value).toEqual(TABLE_DETAILS);\n  });\n\n  it('does config logic', ({ expect }) => {\n    let config = container.querySelector(`#${TABLE_CONFIG}`);\n    Simulate.click(config);\n    expect(value).toEqual(TABLE_CONFIG);\n",
                    "rendered": {
                      "text": "    expect(value).toEqual(TABLE_DETAILS);\n  });\n\n  it('does config logic', ({ expect }) => {\n    let config = container.querySelector(`#${TABLE_CONFIG}`);\n    Simulate.click(config);\n    expect(value).toEqual(TABLE_CONFIG);\n",
                      "markdown": "`    expect(value).toEqual(TABLE_DETAILS);\n  });\n\n  it('does config logic', ({ expect }) => {\n    let config = container.querySelector(`#${TABLE_CONFIG}`);\n    Simulate.click(config);\n    expect(value).toEqual(TABLE_CONFIG);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 29,
                  "endLine": 139,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    expect(value).toEqual(TABLE_EDIT);\n  });\n\n  it('does details logic', ({ expect }) => {\n    let details = container.querySelector(`#${TABLE_DETAILS}`);\n    Simulate.click(details);\n    expect(value).toEqual(TABLE_DETAILS);\n",
                    "rendered": {
                      "text": "    expect(value).toEqual(TABLE_EDIT);\n  });\n\n  it('does details logic', ({ expect }) => {\n    let details = container.querySelector(`#${TABLE_DETAILS}`);\n    Simulate.click(details);\n    expect(value).toEqual(TABLE_DETAILS);\n",
                      "markdown": "`    expect(value).toEqual(TABLE_EDIT);\n  });\n\n  it('does details logic', ({ expect }) => {\n    let details = container.querySelector(`#${TABLE_DETAILS}`);\n    Simulate.click(details);\n    expect(value).toEqual(TABLE_DETAILS);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 26,
                  "endLine": 133,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    expect(value).toEqual(TABLE_ADD);\n  });\n\n  it('does edit logic', ({ expect }) => {\n    let edit = container.querySelector(`#${TABLE_EDIT}`);\n    Simulate.click(edit);\n    expect(value).toEqual(TABLE_EDIT);\n",
                    "rendered": {
                      "text": "    expect(value).toEqual(TABLE_ADD);\n  });\n\n  it('does edit logic', ({ expect }) => {\n    let edit = container.querySelector(`#${TABLE_EDIT}`);\n    Simulate.click(edit);\n    expect(value).toEqual(TABLE_EDIT);\n",
                      "markdown": "`    expect(value).toEqual(TABLE_ADD);\n  });\n\n  it('does edit logic', ({ expect }) => {\n    let edit = container.querySelector(`#${TABLE_EDIT}`);\n    Simulate.click(edit);\n    expect(value).toEqual(TABLE_EDIT);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 25,
                  "endLine": 127,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    expect(text).toEqual('test');\n  });\n\n  it('does add logic', ({ expect }) => {\n    let add = container.querySelector('#add');\n    Simulate.click(add);\n    expect(value).toEqual(TABLE_ADD);\n",
                    "rendered": {
                      "text": "    expect(text).toEqual('test');\n  });\n\n  it('does add logic', ({ expect }) => {\n    let add = container.querySelector('#add');\n    Simulate.click(add);\n    expect(value).toEqual(TABLE_ADD);\n",
                      "markdown": "`    expect(text).toEqual('test');\n  });\n\n  it('does add logic', ({ expect }) => {\n    let add = container.querySelector('#add');\n    Simulate.click(add);\n    expect(value).toEqual(TABLE_ADD);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 36,
                  "endLine": 120,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    expect(empty.textContent).toBe('No data available');\n  });\n\n  it('changes custom cell value', ({ expect }) => {\n    let input = container.querySelector('td #name');\n    input.value = 'test';\n    Simulate.change(input);\n",
                    "rendered": {
                      "text": "    expect(empty.textContent).toBe('No data available');\n  });\n\n  it('changes custom cell value', ({ expect }) => {\n    let input = container.querySelector('td #name');\n    input.value = 'test';\n    Simulate.change(input);\n",
                      "markdown": "`    expect(empty.textContent).toBe('No data available');\n  });\n\n  it('changes custom cell value', ({ expect }) => {\n    let input = container.querySelector('td #name');\n    input.value = 'test';\n    Simulate.change(input);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 24,
                  "endLine": 114,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    expect(container.querySelectorAll('tbody tr')).toHaveLength(2);\n  });\n\n  it('renders empty', ({ expect }) => {\n    const { container } = render(<Table columns={columns} data={[]} />);\n    const empty = container.querySelector('td div');\n    expect(empty.textContent).toBe('No data available');\n",
                    "rendered": {
                      "text": "    expect(container.querySelectorAll('tbody tr')).toHaveLength(2);\n  });\n\n  it('renders empty', ({ expect }) => {\n    const { container } = render(<Table columns={columns} data={[]} />);\n    const empty = container.querySelector('td div');\n    expect(empty.textContent).toBe('No data available');\n",
                      "markdown": "`    expect(container.querySelectorAll('tbody tr')).toHaveLength(2);\n  });\n\n  it('renders empty', ({ expect }) => {\n    const { container } = render(<Table columns={columns} data={[]} />);\n    const empty = container.querySelector('td div');\n    expect(empty.textContent).toBe('No data available');\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 31,
                  "endLine": 110,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    />\n  );\n\n  it('renders successfully', ({ expect }) => {\n    expect(container.querySelectorAll('tbody tr')).toHaveLength(2);\n  });\n\n",
                    "rendered": {
                      "text": "    />\n  );\n\n  it('renders successfully', ({ expect }) => {\n    expect(container.querySelectorAll('tbody tr')).toHaveLength(2);\n  });\n\n",
                      "markdown": "`    />\n  );\n\n  it('renders successfully', ({ expect }) => {\n    expect(container.querySelectorAll('tbody tr')).toHaveLength(2);\n  });\n\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Table/Table.test.jsx"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 22,
                  "endLine": 3,
                  "endColumn": 26,
                  "snippet": {
                    "text": "/*eslint-disable*/\nimport React from 'react';\nimport { describe, it, vi } from 'vitest';\nimport Table from './Table';\nimport { render } from '@testing-library/react';\nimport {\n",
                    "rendered": {
                      "text": "/*eslint-disable*/\nimport React from 'react';\nimport { describe, it, vi } from 'vitest';\nimport Table from './Table';\nimport { render } from '@testing-library/react';\nimport {\n",
                      "markdown": "`/*eslint-disable*/\nimport React from 'react';\nimport { describe, it, vi } from 'vitest';\nimport Table from './Table';\nimport { render } from '@testing-library/react';\nimport {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/ConsumerGroup/ConsumerGroupDetail/ConsumerGroup.jsx"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 19,
                  "endLine": 130,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                    to={`/ui/${clusterId}/group/${consumerGroupId}/offsets`}\n                    className=\"btn btn-primary\"\n                  >\n                    Update Offsets\n                  </Link>\n                )}\n              </li>\n",
                    "rendered": {
                      "text": "                    to={`/ui/${clusterId}/group/${consumerGroupId}/offsets`}\n                    className=\"btn btn-primary\"\n                  >\n                    Update Offsets\n                  </Link>\n                )}\n              </li>\n",
                      "markdown": "`                    to={`/ui/${clusterId}/group/${consumerGroupId}/offsets`}\n                    className=\"btn btn-primary\"\n                  >\n                    Update Offsets\n                  </Link>\n                )}\n              </li>\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Node/NodeDetail/index.jsx"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 6,
                  "endLine": 1,
                  "endColumn": 12,
                  "snippet": {
                    "text": "import Node from './Node';\n\nexport default Node;\n",
                    "rendered": {
                      "text": "import Node from './Node';\n\nexport default Node;\n",
                      "markdown": "`import Node from './Node';\n\nexport default Node;\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Node/NodeList/NodesList.jsx"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 14,
                  "endLine": 48,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    setState();\n\n    this.getApi(uriNodePartitions(clusterId)).then(value => {\n      for (let node of value.data) {\n        const topicNode = tableNodes[node.id];\n        tableNodes[node.id].partition = topicNode\n          ? node.countLeader +\n",
                    "rendered": {
                      "text": "    setState();\n\n    this.getApi(uriNodePartitions(clusterId)).then(value => {\n      for (let node of value.data) {\n        const topicNode = tableNodes[node.id];\n        tableNodes[node.id].partition = topicNode\n          ? node.countLeader +\n",
                      "markdown": "`    setState();\n\n    this.getApi(uriNodePartitions(clusterId)).then(value => {\n      for (let node of value.data) {\n        const topicNode = tableNodes[node.id];\n        tableNodes[node.id].partition = topicNode\n          ? node.countLeader +\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    const { search } = this.state;\n\n    Object.keys(search).forEach(value => {\n      const searchFilter = query.get(`searchBy${capitalizeTxt(value)}`);\n      if (searchFilter) {\n        const pos = searchFilter.lastIndexOf('_');\n        search[value].text = searchFilter.substr(0, pos);\n",
                    "rendered": {
                      "text": "    const { search } = this.state;\n\n    Object.keys(search).forEach(value => {\n      const searchFilter = query.get(`searchBy${capitalizeTxt(value)}`);\n      if (searchFilter) {\n        const pos = searchFilter.lastIndexOf('_');\n        search[value].text = searchFilter.substr(0, pos);\n",
                      "markdown": "`    const { search } = this.state;\n\n    Object.keys(search).forEach(value => {\n      const searchFilter = query.get(`searchBy${capitalizeTxt(value)}`);\n      if (searchFilter) {\n        const pos = searchFilter.lastIndexOf('_');\n        search[value].text = searchFilter.substr(0, pos);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 62,
                  "endLine": 184,
                  "endColumn": 67,
                  "snippet": {
                    "text": "      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n          this._getMessages(false, true);\n",
                    "rendered": {
                      "text": "      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n          this._getMessages(false, true);\n",
                      "markdown": "`      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n          this._getMessages(false, true);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 38,
                  "endLine": 184,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n          this._getMessages(false, true);\n",
                    "rendered": {
                      "text": "      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n          this._getMessages(false, true);\n",
                      "markdown": "`      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n          this._getMessages(false, true);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 17,
                  "endLine": 183,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            : prevState.dateTimeFormat\n      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n",
                    "rendered": {
                      "text": "            : prevState.dateTimeFormat\n      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n",
                      "markdown": "`            : prevState.dateTimeFormat\n      }),\n      () => {\n        if (query.get('single') !== null) {\n          this._getSingleMessage(query.get('partition'), query.get('offset'));\n          this.setState({ canDownload: true });\n        } else if (Object.keys(this.state.offsets).length) {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 49,
                  "endLine": 175,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n        dateTimeFormat:\n          uiOptions && uiOptions.topicData && uiOptions.topicData.dateTimeFormat\n",
                    "rendered": {
                      "text": "        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n        dateTimeFormat:\n          uiOptions && uiOptions.topicData && uiOptions.topicData.dateTimeFormat\n",
                      "markdown": "`        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n        dateTimeFormat:\n          uiOptions && uiOptions.topicData && uiOptions.topicData.dateTimeFormat\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 17,
                  "endLine": 174,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n        dateTimeFormat:\n",
                    "rendered": {
                      "text": "        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n        dateTimeFormat:\n",
                      "markdown": "`        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n        dateTimeFormat:\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 66,
                  "endLine": 173,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n",
                    "rendered": {
                      "text": "        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n",
                      "markdown": "`        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 42,
                  "endLine": 173,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n",
                    "rendered": {
                      "text": "        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n",
                      "markdown": "`        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n            : this.state.offsets,\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 22,
                  "endLine": 172,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n",
                    "rendered": {
                      "text": "          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n",
                      "markdown": "`          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n          : query.get('after')\n            ? this._getOffsetsByAfterString(query.get('after'))\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 49,
                  "endLine": 170,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n",
                    "rendered": {
                      "text": "        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n",
                      "markdown": "`        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 28,
                  "endLine": 170,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n",
                    "rendered": {
                      "text": "        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n",
                      "markdown": "`        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n        offsets: query.get('offset')\n          ? this._getOffsetsByOffset(query.get('partition'), query.get('offset'))\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 26,
                  "endLine": 168,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n",
                    "rendered": {
                      "text": "        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n",
                      "markdown": "`        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n        search: this._buildSearchFromQueryString(query),\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 26,
                  "endLine": 167,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n",
                    "rendered": {
                      "text": "            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n",
                      "markdown": "`            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n        offsetsSearch: query.get('after') ? query.get('after') : this.state.offsetsSearch,\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 57,
                  "endLine": 166,
                  "endColumn": 62,
                  "snippet": {
                    "text": "            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n",
                    "rendered": {
                      "text": "            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n",
                      "markdown": "`            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 23,
                  "endLine": 166,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n",
                    "rendered": {
                      "text": "            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n",
                      "markdown": "`            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n          : this.state.endDatetime,\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 49,
                  "endLine": 165,
                  "endColumn": 54,
                  "snippet": {
                    "text": "          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n",
                    "rendered": {
                      "text": "          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n",
                      "markdown": "`          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 24,
                  "endLine": 165,
                  "endColumn": 29,
                  "snippet": {
                    "text": "          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n",
                    "rendered": {
                      "text": "          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n",
                      "markdown": "`          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n        partition: query.get('partition') ? query.get('partition') : this.state.partition,\n        datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : this.state.datetime,\n        endDatetime: query.get('endTimestamp')\n          ? new Date(query.get('endTimestamp'))\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 17,
                  "endLine": 161,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        selectedTopic: topicId,\n        registryType: this.props.registryType,\n        sortBy: query.get('sort')\n          ? query.get('sort')\n          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n",
                    "rendered": {
                      "text": "        selectedTopic: topicId,\n        registryType: this.props.registryType,\n        sortBy: query.get('sort')\n          ? query.get('sort')\n          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n",
                      "markdown": "`        selectedTopic: topicId,\n        registryType: this.props.registryType,\n        sortBy: query.get('sort')\n          ? query.get('sort')\n          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n            : this.state.sortBy,\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 21,
                  "endLine": 160,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        selectedCluster: clusterId,\n        selectedTopic: topicId,\n        registryType: this.props.registryType,\n        sortBy: query.get('sort')\n          ? query.get('sort')\n          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n",
                    "rendered": {
                      "text": "        selectedCluster: clusterId,\n        selectedTopic: topicId,\n        registryType: this.props.registryType,\n        sortBy: query.get('sort')\n          ? query.get('sort')\n          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n",
                      "markdown": "`        selectedCluster: clusterId,\n        selectedTopic: topicId,\n        registryType: this.props.registryType,\n        sortBy: query.get('sort')\n          ? query.get('sort')\n          : uiOptions && uiOptions.topicData && uiOptions.topicData.sort\n            ? uiOptions.topicData.sort\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 30,
                  "endLine": 136,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n        () => {\n",
                    "rendered": {
                      "text": "          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n        () => {\n",
                      "markdown": "`          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n        () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 65,
                  "endLine": 135,
                  "endColumn": 70,
                  "snippet": {
                    "text": "          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n",
                    "rendered": {
                      "text": "          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n",
                      "markdown": "`          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 28,
                  "endLine": 135,
                  "endColumn": 33,
                  "snippet": {
                    "text": "          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n",
                    "rendered": {
                      "text": "          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n",
                      "markdown": "`          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n        },\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 59,
                  "endLine": 134,
                  "endColumn": 64,
                  "snippet": {
                    "text": "          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n",
                    "rendered": {
                      "text": "          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n",
                      "markdown": "`          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 25,
                  "endLine": 134,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n",
                    "rendered": {
                      "text": "          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n",
                      "markdown": "`          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n          search: this._buildSearchFromQueryString(query)\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 26,
                  "endLine": 133,
                  "endColumn": 31,
                  "snippet": {
                    "text": "          selectedCluster: clusterId,\n          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n",
                    "rendered": {
                      "text": "          selectedCluster: clusterId,\n          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n",
                      "markdown": "`          selectedCluster: clusterId,\n          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n          offsetsSearch: query.get('after'),\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 23,
                  "endLine": 132,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        {\n          selectedCluster: clusterId,\n          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n",
                    "rendered": {
                      "text": "        {\n          selectedCluster: clusterId,\n          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n",
                      "markdown": "`        {\n          selectedCluster: clusterId,\n          selectedTopic: topicId,\n          sortBy: query.get('sort'),\n          partition: query.get('partition'),\n          datetime: query.get('timestamp') ? new Date(query.get('timestamp')) : '',\n          endDatetime: query.get('endTimestamp') ? new Date(query.get('endTimestamp')) : '',\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 58,
                  "endLine": 575,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  _deleteCompactMessage = () => {\n    const { selectedCluster, selectedTopic, compactMessageToDelete: message } = this.state;\n\n    const encodedkey = Buffer.from(message.key).toString('base64');\n    const deleteData = { partition: parseInt(message.partition), key: encodedkey };\n    this.removeApi(\n      uriTopicDataDelete(selectedCluster, selectedTopic, parseInt(message.partition), encodedkey),\n",
                    "rendered": {
                      "text": "  _deleteCompactMessage = () => {\n    const { selectedCluster, selectedTopic, compactMessageToDelete: message } = this.state;\n\n    const encodedkey = Buffer.from(message.key).toString('base64');\n    const deleteData = { partition: parseInt(message.partition), key: encodedkey };\n    this.removeApi(\n      uriTopicDataDelete(selectedCluster, selectedTopic, parseInt(message.partition), encodedkey),\n",
                      "markdown": "`  _deleteCompactMessage = () => {\n    const { selectedCluster, selectedTopic, compactMessageToDelete: message } = this.state;\n\n    const encodedkey = Buffer.from(message.key).toString('base64');\n    const deleteData = { partition: parseInt(message.partition), key: encodedkey };\n    this.removeApi(\n      uriTopicDataDelete(selectedCluster, selectedTopic, parseInt(message.partition), encodedkey),\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 44,
                  "endLine": 252,
                  "endColumn": 52,
                  "snippet": {
                    "text": "              const lastResult = results[results.length - 1];\n              const percentDiff = lastResult.percent - lastPercentVal;\n\n              // to avoid UI slowdowns, only update the percentage in fixed increments\n              if (percentDiff >= percentUpdateDelta) {\n                lastPercentVal = lastResult.percent;\n                self.setState({\n",
                    "rendered": {
                      "text": "              const lastResult = results[results.length - 1];\n              const percentDiff = lastResult.percent - lastPercentVal;\n\n              // to avoid UI slowdowns, only update the percentage in fixed increments\n              if (percentDiff >= percentUpdateDelta) {\n                lastPercentVal = lastResult.percent;\n                self.setState({\n",
                      "markdown": "`              const lastResult = results[results.length - 1];\n              const percentDiff = lastResult.percent - lastPercentVal;\n\n              // to avoid UI slowdowns, only update the percentage in fixed increments\n              if (percentDiff >= percentUpdateDelta) {\n                lastPercentVal = lastResult.percent;\n                self.setState({\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 1150,
                  "startColumn": 35,
                  "endLine": 1151,
                  "snippet": {
                    "text": "                        )\n                      }\n                    >\n                      Show relative time\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      onClick={() =>\n                        this._handleOnDateTimeFormatChanged(\n",
                    "rendered": {
                      "text": "                        )\n                      }\n                    >\n                      Show relative time\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      onClick={() =>\n                        this._handleOnDateTimeFormatChanged(\n",
                      "markdown": "`                        )\n                      }\n                    >\n                      Show relative time\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      onClick={() =>\n                        this._handleOnDateTimeFormatChanged(\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 1140,
                  "startColumn": 19,
                  "endLine": 1140,
                  "endColumn": 25,
                  "snippet": {
                    "text": "              <li>\n                <Dropdown>\n                  <Dropdown.Toggle className=\"nav-link dropdown-toggle\">\n                    Time Format: ({this.state.dateTimeFormat})\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item\n",
                    "rendered": {
                      "text": "              <li>\n                <Dropdown>\n                  <Dropdown.Toggle className=\"nav-link dropdown-toggle\">\n                    Time Format: ({this.state.dateTimeFormat})\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item\n",
                      "markdown": "`              <li>\n                <Dropdown>\n                  <Dropdown.Toggle className=\"nav-link dropdown-toggle\">\n                    Time Format: ({this.state.dateTimeFormat})\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/TopicData/TopicData.jsx"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 29,
                  "endLine": 710,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          { replace: true }\n        );\n      } else {\n        toast.warn(`Unable to find the registry schema with id  ${id} !`);\n      }\n    });\n  }\n",
                    "rendered": {
                      "text": "          { replace: true }\n        );\n      } else {\n        toast.warn(`Unable to find the registry schema with id  ${id} !`);\n      }\n    });\n  }\n",
                      "markdown": "`          { replace: true }\n        );\n      } else {\n        toast.warn(`Unable to find the registry schema with id  ${id} !`);\n      }\n    });\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/converters.jsx"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 34,
                  "endLine": 37,
                  "endColumn": 40,
                  "snippet": {
                    "text": " * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n  let milli = value.milli || 0;\n",
                    "rendered": {
                      "text": " * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n  let milli = value.milli || 0;\n",
                      "markdown": "` * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n  let milli = value.milli || 0;\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/converters.jsx"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 68,
                  "endLine": 36,
                  "endColumn": 74,
                  "snippet": {
                    "text": "/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n",
                    "rendered": {
                      "text": "/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n",
                      "markdown": "`/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/converters.jsx"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 32,
                  "endLine": 36,
                  "endColumn": 38,
                  "snippet": {
                    "text": "/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n",
                    "rendered": {
                      "text": "/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n",
                      "markdown": "`/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\nexport function formatDateTime(value, format, utc = false) {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/converters.jsx"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 45,
                  "endLine": 35,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\n",
                    "rendered": {
                      "text": "\n/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\n",
                      "markdown": "`\n/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/converters.jsx"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 15,
                  "endLine": 35,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\n",
                    "rendered": {
                      "text": "\n/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\n",
                      "markdown": "`\n/**\n * If the utc parameter is true (which is the default value),\n * the date and time will be converted to UTC time before formatting.\n * If utc is false, the date and time will be formatted in the local time zone.\n * Finally, the formatted date and time string is returned as a string\n */\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/constants.jsx"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 13,
                  "endLine": 69,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  STRING: 'STRING',\n  LONG: 'LONG',\n  CLASS: 'CLASS',\n  PASSWORD: 'PASSWORD',\n  INT: 'INT',\n  LIST: 'LIST',\n  BOOLEAN: 'BOOLEAN',\n",
                    "rendered": {
                      "text": "  STRING: 'STRING',\n  LONG: 'LONG',\n  CLASS: 'CLASS',\n  PASSWORD: 'PASSWORD',\n  INT: 'INT',\n  LIST: 'LIST',\n  BOOLEAN: 'BOOLEAN',\n",
                      "markdown": "`  STRING: 'STRING',\n  LONG: 'LONG',\n  CLASS: 'CLASS',\n  PASSWORD: 'PASSWORD',\n  INT: 'INT',\n  LIST: 'LIST',\n  BOOLEAN: 'BOOLEAN',\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/constants.jsx"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 2,
                  "endLine": 69,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  STRING: 'STRING',\n  LONG: 'LONG',\n  CLASS: 'CLASS',\n  PASSWORD: 'PASSWORD',\n  INT: 'INT',\n  LIST: 'LIST',\n  BOOLEAN: 'BOOLEAN',\n",
                    "rendered": {
                      "text": "  STRING: 'STRING',\n  LONG: 'LONG',\n  CLASS: 'CLASS',\n  PASSWORD: 'PASSWORD',\n  INT: 'INT',\n  LIST: 'LIST',\n  BOOLEAN: 'BOOLEAN',\n",
                      "markdown": "`  STRING: 'STRING',\n  LONG: 'LONG',\n  CLASS: 'CLASS',\n  PASSWORD: 'PASSWORD',\n  INT: 'INT',\n  LIST: 'LIST',\n  BOOLEAN: 'BOOLEAN',\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/constants.jsx"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 12,
                  "endLine": 35,
                  "endColumn": 18,
                  "snippet": {
                    "text": "export const CLUSTER = 'cluster';\nexport const NODE = 'node';\nexport const TOPIC = 'topic';\nexport const TAIL = 'tail';\nexport const GROUP = 'group';\nexport const ACLS = 'acls';\nexport const SCHEMA = 'schema';\n",
                    "rendered": {
                      "text": "export const CLUSTER = 'cluster';\nexport const NODE = 'node';\nexport const TOPIC = 'topic';\nexport const TAIL = 'tail';\nexport const GROUP = 'group';\nexport const ACLS = 'acls';\nexport const SCHEMA = 'schema';\n",
                      "markdown": "`export const CLUSTER = 'cluster';\nexport const NODE = 'node';\nexport const TOPIC = 'topic';\nexport const TAIL = 'tail';\nexport const GROUP = 'group';\nexport const ACLS = 'acls';\nexport const SCHEMA = 'schema';\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/constants.jsx"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 12,
                  "endLine": 33,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n// Tab names/route names\nexport const CLUSTER = 'cluster';\nexport const NODE = 'node';\nexport const TOPIC = 'topic';\nexport const TAIL = 'tail';\nexport const GROUP = 'group';\n",
                    "rendered": {
                      "text": "\n// Tab names/route names\nexport const CLUSTER = 'cluster';\nexport const NODE = 'node';\nexport const TOPIC = 'topic';\nexport const TAIL = 'tail';\nexport const GROUP = 'group';\n",
                      "markdown": "`\n// Tab names/route names\nexport const CLUSTER = 'cluster';\nexport const NODE = 'node';\nexport const TOPIC = 'topic';\nexport const TAIL = 'tail';\nexport const GROUP = 'group';\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docker-compose.yml"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 7,
                  "endLine": 143,
                  "snippet": {
                    "text": "    depends_on:\n      - kafka\n    command:\n      - bash\n      - -c\n      - |\n        kafkacat -P -b kafka:9092 -t json << EOF\n        {\"_id\":\"5c4b2b45ab234c86955f0802\",\"index\":0,\"guid\":\"d3637b06-9940-4958-9f82-639001c14c34\"}\n",
                    "rendered": {
                      "text": "    depends_on:\n      - kafka\n    command:\n      - bash\n      - -c\n      - |\n        kafkacat -P -b kafka:9092 -t json << EOF\n        {\"_id\":\"5c4b2b45ab234c86955f0802\",\"index\":0,\"guid\":\"d3637b06-9940-4958-9f82-639001c14c34\"}\n",
                      "markdown": "`    depends_on:\n      - kafka\n    command:\n      - bash\n      - -c\n      - |\n        kafkacat -P -b kafka:9092 -t json << EOF\n        {\"_id\":\"5c4b2b45ab234c86955f0802\",\"index\":0,\"guid\":\"d3637b06-9940-4958-9f82-639001c14c34\"}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docker-compose.yml"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 7,
                  "endLine": 143,
                  "snippet": {
                    "text": "    depends_on:\n      - kafka\n    command:\n      - bash\n      - -c\n      - |\n        kafkacat -P -b kafka:9092 -t json << EOF\n        {\"_id\":\"5c4b2b45ab234c86955f0802\",\"index\":0,\"guid\":\"d3637b06-9940-4958-9f82-639001c14c34\"}\n",
                    "rendered": {
                      "text": "    depends_on:\n      - kafka\n    command:\n      - bash\n      - -c\n      - |\n        kafkacat -P -b kafka:9092 -t json << EOF\n        {\"_id\":\"5c4b2b45ab234c86955f0802\",\"index\":0,\"guid\":\"d3637b06-9940-4958-9f82-639001c14c34\"}\n",
                      "markdown": "`    depends_on:\n      - kafka\n    command:\n      - bash\n      - -c\n      - |\n        kafkacat -P -b kafka:9092 -t json << EOF\n        {\"_id\":\"5c4b2b45ab234c86955f0802\",\"index\":0,\"guid\":\"d3637b06-9940-4958-9f82-639001c14c34\"}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/Connect.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 22,
                  "endLine": 19,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n    String sslKeyStorePassword;\n\n\n}\n",
                    "rendered": {
                      "text": "    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n    String sslKeyStorePassword;\n\n\n}\n",
                      "markdown": "`    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n    String sslKeyStorePassword;\n\n\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/Connect.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 24,
                  "endLine": 17,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    String basicAuthUsername;\n    String basicAuthPassword;\n    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n    String sslKeyStorePassword;\n\n",
                    "rendered": {
                      "text": "    String basicAuthUsername;\n    String basicAuthPassword;\n    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n    String sslKeyStorePassword;\n\n",
                      "markdown": "`    String basicAuthUsername;\n    String basicAuthPassword;\n    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n    String sslKeyStorePassword;\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/Connect.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 20,
                  "endLine": 15,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    String name;\n    URL url;\n    String basicAuthUsername;\n    String basicAuthPassword;\n    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n",
                    "rendered": {
                      "text": "    String name;\n    URL url;\n    String basicAuthUsername;\n    String basicAuthPassword;\n    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n",
                      "markdown": "`    String name;\n    URL url;\n    String basicAuthUsername;\n    String basicAuthPassword;\n    String sslTrustStore;\n    String sslTrustStorePassword;\n    String sslKeyStore;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/protobuf.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 30,
                  "endLine": 29,
                  "endColumn": 36,
                  "snippet": {
                    "text": "GlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGc",
                    "rendered": {
                      "text": "GlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGc",
                      "markdown": "`GlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGc`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/protobuf.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 30,
                  "endLine": 26,
                  "endColumn": 36,
                  "snippet": {
                    "text": "ok like as follows:\n\n```yaml\nakhq:\n  connections:\n    kafka:\n      properties:\n        # standard kafka properties\n      deserialization:\n        protobuf:\n          descriptors-folder: \"/app/protobuf_desc\"\n          topics-mapping:\n            - topic-regex: \"album.*\"\n              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              v",
                    "rendered": {
                      "text": "ok like as follows:\n\n```yaml\nakhq:\n  connections:\n    kafka:\n      properties:\n        # standard kafka properties\n      deserialization:\n        protobuf:\n          descriptors-folder: \"/app/protobuf_desc\"\n          topics-mapping:\n            - topic-regex: \"album.*\"\n              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              v",
                      "markdown": "`ok like as follows:\n\n```yaml\nakhq:\n  connections:\n    kafka:\n      properties:\n        # standard kafka properties\n      deserialization:\n        protobuf:\n          descriptors-folder: \"/app/protobuf_desc\"\n          topics-mapping:\n            - topic-regex: \"album.*\"\n              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              v`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/protobuf.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 92,
                  "endLine": 5,
                  "endColumn": 98,
                  "snippet": {
                    "text": "# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n",
                    "rendered": {
                      "text": "# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n",
                      "markdown": "`# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/protobuf.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 56,
                  "endLine": 5,
                  "endColumn": 62,
                  "snippet": {
                    "text": "# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n",
                    "rendered": {
                      "text": "# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n",
                      "markdown": "`# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/protobuf.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 38,
                  "endLine": 29,
                  "endColumn": 344,
                  "snippet": {
                    "text": "              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGcHJvdG8z\"\n              value-message-type: \"org.akhq.utils.Film\"\n            - topic-regex: \"test.*\"\n              descriptor-file: \"other.desc\"\n",
                    "rendered": {
                      "text": "              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGcHJvdG8z\"\n              value-message-type: \"org.akhq.utils.Film\"\n            - topic-regex: \"test.*\"\n              descriptor-file: \"other.desc\"\n",
                      "markdown": "`              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGcHJvdG8z\"\n              value-message-type: \"org.akhq.utils.Film\"\n            - topic-regex: \"test.*\"\n              descriptor-file: \"other.desc\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/protobuf.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 91,
                  "endLine": 5,
                  "endColumn": 99,
                  "snippet": {
                    "text": "# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n",
                    "rendered": {
                      "text": "# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n",
                      "markdown": "`# Protobuf deserialization\n\nTo deserialize topics containing data in Protobuf format, you can set topics mapping:\nfor each `topic-regex` you can specify `descriptor-file-base64` (descriptor file encoded to Base64 format),\nor you can put descriptor files in `descriptors-folder` and specify `descriptor-file` name,\nalso specify corresponding message types for keys and values.\nIf, for example, keys are not in Protobuf format, `key-message-type` can be omitted,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 467,
                  "endLine": 121,
                  "endColumn": 475,
                  "snippet": {
                    "text": "x_kafka\" oauth.jwks.endpoint.uri=\"https:/<url keycloak>//auth/realms/sandbox_kafka/protocol/openid-connect/certs\" oauth.username.claim=\"preferred_username\" oauth.client.id=\"kafka-producer-client\" oauth.client.secret=\"\" oauth.ssl.truststore.location=\"kafka.server.truststore.jks\" oauth.ssl.truststore.password=\"xxxxx\" oauth.ssl.truststore.type=\"jks\" oauth.ssl.endpoint_identification_algorithm=\"\" oauth.token.endpoint.uri=\"https:///auth/realms/sandbox_kafka/protocol/openid-connect/token\";\n        sasl.login.callback.handler.class: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n        se",
                    "rendered": {
                      "text": "x_kafka\" oauth.jwks.endpoint.uri=\"https:/<url keycloak>//auth/realms/sandbox_kafka/protocol/openid-connect/certs\" oauth.username.claim=\"preferred_username\" oauth.client.id=\"kafka-producer-client\" oauth.client.secret=\"\" oauth.ssl.truststore.location=\"kafka.server.truststore.jks\" oauth.ssl.truststore.password=\"xxxxx\" oauth.ssl.truststore.type=\"jks\" oauth.ssl.endpoint_identification_algorithm=\"\" oauth.token.endpoint.uri=\"https:///auth/realms/sandbox_kafka/protocol/openid-connect/token\";\n        sasl.login.callback.handler.class: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n        se",
                      "markdown": "`x_kafka\" oauth.jwks.endpoint.uri=\"https:/<url keycloak>//auth/realms/sandbox_kafka/protocol/openid-connect/certs\" oauth.username.claim=\"preferred_username\" oauth.client.id=\"kafka-producer-client\" oauth.client.secret=\"\" oauth.ssl.truststore.location=\"kafka.server.truststore.jks\" oauth.ssl.truststore.password=\"xxxxx\" oauth.ssl.truststore.type=\"jks\" oauth.ssl.endpoint_identification_algorithm=\"\" oauth.token.endpoint.uri=\"https:///auth/realms/sandbox_kafka/protocol/openid-connect/token\";\n        sasl.login.callback.handler.class: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n        se`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 33,
                  "endLine": 97,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n          basic-auth-username: avnadmin\n          basic-auth-password: {{password}}\n```\n\n\n",
                    "rendered": {
                      "text": "        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n          basic-auth-username: avnadmin\n          basic-auth-password: {{password}}\n```\n\n\n",
                      "markdown": "`        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n          basic-auth-username: avnadmin\n          basic-auth-password: {{password}}\n```\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 21,
                  "endLine": 97,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n          basic-auth-username: avnadmin\n          basic-auth-password: {{password}}\n```\n\n\n",
                    "rendered": {
                      "text": "        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n          basic-auth-username: avnadmin\n          basic-auth-password: {{password}}\n```\n\n\n",
                      "markdown": "`        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n          basic-auth-username: avnadmin\n          basic-auth-password: {{password}}\n```\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 53,
                  "endLine": 92,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n      connect:\n        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n",
                    "rendered": {
                      "text": "        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n      connect:\n        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n",
                      "markdown": "`        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n      connect:\n        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 41,
                  "endLine": 92,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n      connect:\n        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n",
                    "rendered": {
                      "text": "        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n      connect:\n        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n",
                      "markdown": "`        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n      connect:\n        - name: connect-1\n          url: \"https://{{host}}.aivencloud.com:{{port}}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 31,
                  "endLine": 89,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n        basic-auth-username: avnadmin\n        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n",
                    "rendered": {
                      "text": "        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n        basic-auth-username: avnadmin\n        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n",
                      "markdown": "`        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n        basic-auth-username: avnadmin\n        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 19,
                  "endLine": 89,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n        basic-auth-username: avnadmin\n        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n",
                    "rendered": {
                      "text": "        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n        basic-auth-username: avnadmin\n        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n",
                      "markdown": "`        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n        basic-auth-username: avnadmin\n        basic-auth-password: {{password}}\n        properties:\n          schema.registry.ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n          schema.registry.ssl.truststore.password: {{password}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 28,
                  "endLine": 84,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n",
                    "rendered": {
                      "text": "        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n",
                      "markdown": "`        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 16,
                  "endLine": 84,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n",
                    "rendered": {
                      "text": "        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n",
                      "markdown": "`        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n        type: \"confluent\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 33,
                  "endLine": 83,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n",
                    "rendered": {
                      "text": "        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n",
                      "markdown": "`        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 21,
                  "endLine": 83,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n",
                    "rendered": {
                      "text": "        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n",
                      "markdown": "`        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n        ssl.key.password: {{password}}\n      schema-registry:\n        url: \"https://{{host}}.aivencloud.com:12838\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 35,
                  "endLine": 80,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        bootstrap.servers: \"{{host}}.aivencloud.com:12835\"\n        security.protocol: SSL\n        ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n",
                    "rendered": {
                      "text": "        bootstrap.servers: \"{{host}}.aivencloud.com:12835\"\n        security.protocol: SSL\n        ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n",
                      "markdown": "`        bootstrap.servers: \"{{host}}.aivencloud.com:12835\"\n        security.protocol: SSL\n        ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 23,
                  "endLine": 80,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        bootstrap.servers: \"{{host}}.aivencloud.com:12835\"\n        security.protocol: SSL\n        ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n",
                    "rendered": {
                      "text": "        bootstrap.servers: \"{{host}}.aivencloud.com:12835\"\n        security.protocol: SSL\n        ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n",
                      "markdown": "`        bootstrap.servers: \"{{host}}.aivencloud.com:12835\"\n        security.protocol: SSL\n        ssl.truststore.location: {{path}}/avnadmin.truststore.jks\n        ssl.truststore.password: {{password}}\n        ssl.keystore.type: \"PKCS12\"\n        ssl.keystore.location: {{path}}/avnadmin.keystore.p12\n        ssl.keystore.password: {{password}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 19,
                  "endLine": 57,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n        basic-auth-password: \"{{ schemaRegistryPaswword }}\"\n\n```\n\n",
                    "rendered": {
                      "text": "      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n        basic-auth-password: \"{{ schemaRegistryPaswword }}\"\n\n```\n\n",
                      "markdown": "`      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n        basic-auth-password: \"{{ schemaRegistryPaswword }}\"\n\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 140,
                  "endLine": 53,
                  "endColumn": 148,
                  "snippet": {
                    "text": "        bootstrap.servers: \"{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud:9092\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: PLAIN\n        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{ kafkaUsername }}\" password=\"{{ kafkaPassword }}\";\n      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n",
                    "rendered": {
                      "text": "        bootstrap.servers: \"{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud:9092\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: PLAIN\n        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{ kafkaUsername }}\" password=\"{{ kafkaPassword }}\";\n      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n",
                      "markdown": "`        bootstrap.servers: \"{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud:9092\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: PLAIN\n        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{ kafkaUsername }}\" password=\"{{ kafkaPassword }}\";\n      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 122,
                  "endLine": 53,
                  "endColumn": 130,
                  "snippet": {
                    "text": "        bootstrap.servers: \"{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud:9092\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: PLAIN\n        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{ kafkaUsername }}\" password=\"{{ kafkaPassword }}\";\n      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n",
                    "rendered": {
                      "text": "        bootstrap.servers: \"{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud:9092\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: PLAIN\n        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{ kafkaUsername }}\" password=\"{{ kafkaPassword }}\";\n      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n",
                      "markdown": "`        bootstrap.servers: \"{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud:9092\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: PLAIN\n        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{ kafkaUsername }}\" password=\"{{ kafkaPassword }}\";\n      schema-registry:\n        url: \"https://{{ cluster }}.{{ region }}.{{ cloud }}.confluent.cloud\"\n        basic-auth-username: \"{{ schemaRegistryUsername }}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 47,
                  "endLine": 24,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n    * `basic-auth-username`: ksqlDB basic auth username\n    * `basic-auth-password`: ksqlDB basic auth password\n\n## Basic cluster with plain auth\n\n",
                    "rendered": {
                      "text": "    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n    * `basic-auth-username`: ksqlDB basic auth username\n    * `basic-auth-password`: ksqlDB basic auth password\n\n## Basic cluster with plain auth\n\n",
                      "markdown": "`    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n    * `basic-auth-username`: ksqlDB basic auth username\n    * `basic-auth-password`: ksqlDB basic auth password\n\n## Basic cluster with plain auth\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 18,
                  "endLine": 24,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n    * `basic-auth-username`: ksqlDB basic auth username\n    * `basic-auth-password`: ksqlDB basic auth password\n\n## Basic cluster with plain auth\n\n",
                    "rendered": {
                      "text": "    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n    * `basic-auth-username`: ksqlDB basic auth username\n    * `basic-auth-password`: ksqlDB basic auth password\n\n## Basic cluster with plain auth\n\n",
                      "markdown": "`    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n    * `basic-auth-username`: ksqlDB basic auth username\n    * `basic-auth-password`: ksqlDB basic auth password\n\n## Basic cluster with plain auth\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 42,
                  "endLine": 19,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n",
                    "rendered": {
                      "text": "    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n",
                      "markdown": "`    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 21,
                  "endLine": 19,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n",
                    "rendered": {
                      "text": "    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n",
                      "markdown": "`    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n    * `name`: ksqlDB name\n    * `url`: ksqlDB url\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 46,
                  "endLine": 17,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n",
                    "rendered": {
                      "text": "    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n",
                      "markdown": "`    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 23,
                  "endLine": 17,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n",
                    "rendered": {
                      "text": "    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n",
                      "markdown": "`    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n    * `ssl-key-store-password`: key-store-password\n  * `ksqldb`: *(optional list, define each ksqlDB instance as an element of a list)*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 48,
                  "endLine": 15,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    * `name`: connect name\n    * `url`: connect url\n    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n",
                    "rendered": {
                      "text": "    * `name`: connect name\n    * `url`: connect url\n    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n",
                      "markdown": "`    * `name`: connect name\n    * `url`: connect url\n    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 18,
                  "endLine": 15,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    * `name`: connect name\n    * `url`: connect url\n    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n",
                    "rendered": {
                      "text": "    * `name`: connect name\n    * `url`: connect url\n    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n",
                      "markdown": "`    * `name`: connect name\n    * `url`: connect url\n    * `basic-auth-username`: connect basic auth username\n    * `basic-auth-password`: connect basic auth password\n    * `ssl-trust-store`: /app/truststore.jks\n    * `ssl-trust-store-password`: trust-store-password\n    * `ssl-key-store`: /app/truststore.jks\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 56,
                  "endLine": 9,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    * `url`: the schema registry url\n    * `type`: the type of schema registry used, either 'confluent' or 'tibco'\n    * `basic-auth-username`: schema registry basic auth username\n    * `basic-auth-password`: schema registry basic auth password\n    * `properties`: all the configurations for registry client, especially ssl configuration\n  * `connect`: *(optional list, define each connector as an element of a list)*\n    * `name`: connect name\n",
                    "rendered": {
                      "text": "    * `url`: the schema registry url\n    * `type`: the type of schema registry used, either 'confluent' or 'tibco'\n    * `basic-auth-username`: schema registry basic auth username\n    * `basic-auth-password`: schema registry basic auth password\n    * `properties`: all the configurations for registry client, especially ssl configuration\n  * `connect`: *(optional list, define each connector as an element of a list)*\n    * `name`: connect name\n",
                      "markdown": "`    * `url`: the schema registry url\n    * `type`: the type of schema registry used, either 'confluent' or 'tibco'\n    * `basic-auth-username`: schema registry basic auth username\n    * `basic-auth-password`: schema registry basic auth password\n    * `properties`: all the configurations for registry client, especially ssl configuration\n  * `connect`: *(optional list, define each connector as an element of a list)*\n    * `name`: connect name\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 18,
                  "endLine": 9,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    * `url`: the schema registry url\n    * `type`: the type of schema registry used, either 'confluent' or 'tibco'\n    * `basic-auth-username`: schema registry basic auth username\n    * `basic-auth-password`: schema registry basic auth password\n    * `properties`: all the configurations for registry client, especially ssl configuration\n  * `connect`: *(optional list, define each connector as an element of a list)*\n    * `name`: connect name\n",
                    "rendered": {
                      "text": "    * `url`: the schema registry url\n    * `type`: the type of schema registry used, either 'confluent' or 'tibco'\n    * `basic-auth-username`: schema registry basic auth username\n    * `basic-auth-password`: schema registry basic auth password\n    * `properties`: all the configurations for registry client, especially ssl configuration\n  * `connect`: *(optional list, define each connector as an element of a list)*\n    * `name`: connect name\n",
                      "markdown": "`    * `url`: the schema registry url\n    * `type`: the type of schema registry used, either 'confluent' or 'tibco'\n    * `basic-auth-username`: schema registry basic auth username\n    * `basic-auth-password`: schema registry basic auth password\n    * `properties`: all the configurations for registry client, especially ssl configuration\n  * `connect`: *(optional list, define each connector as an element of a list)*\n    * `name`: connect name\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/brokers.md"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 7,
                  "endLine": 66,
                  "endColumn": 8,
                  "snippet": {
                    "text": "Configuration example for kafka cluster secured by ssl for saas provider like aiven (full https & basic auth):\n\nYou need to generate a jks & p12 file from pem, cert files give by saas provider.\n```bash\nopenssl pkcs12 -export -inkey service.key -in service.cert -out client.keystore.p12 -name service_key\nkeytool -import -file ca.pem -alias CA -keystore client.truststore.jks\n```\n\n",
                    "rendered": {
                      "text": "Configuration example for kafka cluster secured by ssl for saas provider like aiven (full https & basic auth):\n\nYou need to generate a jks & p12 file from pem, cert files give by saas provider.\n```bash\nopenssl pkcs12 -export -inkey service.key -in service.cert -out client.keystore.p12 -name service_key\nkeytool -import -file ca.pem -alias CA -keystore client.truststore.jks\n```\n\n",
                      "markdown": "`Configuration example for kafka cluster secured by ssl for saas provider like aiven (full https & basic auth):\n\nYou need to generate a jks & p12 file from pem, cert files give by saas provider.\n```bash\nopenssl pkcs12 -export -inkey service.key -in service.cert -out client.keystore.p12 -name service_key\nkeytool -import -file ca.pem -alias CA -keystore client.truststore.jks\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/akhq.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 50,
                  "endLine": 32,
                  "endColumn": 58,
                  "snippet": {
                    "text": "* `akhq.ui-options.topic.default-view` is default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM) (default: HIDE_INTERNAL)\n* `akhq.ui-options.topic.skip-consumer-groups` hide consumer groups columns on topic list\n* `akhq.ui-options.topic.skip-last-record` hide the last records on topic list\n* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n",
                    "rendered": {
                      "text": "* `akhq.ui-options.topic.default-view` is default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM) (default: HIDE_INTERNAL)\n* `akhq.ui-options.topic.skip-consumer-groups` hide consumer groups columns on topic list\n* `akhq.ui-options.topic.skip-last-record` hide the last records on topic list\n* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n",
                      "markdown": "`* `akhq.ui-options.topic.default-view` is default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM) (default: HIDE_INTERNAL)\n* `akhq.ui-options.topic.skip-consumer-groups` hide consumer groups columns on topic list\n* `akhq.ui-options.topic.skip-last-record` hide the last records on topic list\n* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/akhq.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 31,
                  "endLine": 38,
                  "endColumn": 37,
                  "snippet": {
                    "text": "* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n\n### Inject some css or javascript\n* `akhq.html-head`: Append some head tags on the webserver application\nMostly useful in order to inject some css or javascript to customize the web application.\n\nExamples, add a environment information on the left menu:\n",
                    "rendered": {
                      "text": "* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n\n### Inject some css or javascript\n* `akhq.html-head`: Append some head tags on the webserver application\nMostly useful in order to inject some css or javascript to customize the web application.\n\nExamples, add a environment information on the left menu:\n",
                      "markdown": "`* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n\n### Inject some css or javascript\n* `akhq.html-head`: Append some head tags on the webserver application\nMostly useful in order to inject some css or javascript to customize the web application.\n\nExamples, add a environment information on the left menu:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/akhq.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 44,
                  "endLine": 35,
                  "endColumn": 50,
                  "snippet": {
                    "text": "* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n\n### Inject some css or javascript\n* `akhq.html-head`: Append some head tags on the webserver application\n",
                    "rendered": {
                      "text": "* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n\n### Inject some css or javascript\n* `akhq.html-head`: Append some head tags on the webserver application\n",
                      "markdown": "`* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n\n### Inject some css or javascript\n* `akhq.html-head`: Append some head tags on the webserver application\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/akhq.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 50,
                  "endLine": 32,
                  "endColumn": 58,
                  "snippet": {
                    "text": "* `akhq.ui-options.topic.default-view` is default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM) (default: HIDE_INTERNAL)\n* `akhq.ui-options.topic.skip-consumer-groups` hide consumer groups columns on topic list\n* `akhq.ui-options.topic.skip-last-record` hide the last records on topic list\n* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n",
                    "rendered": {
                      "text": "* `akhq.ui-options.topic.default-view` is default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM) (default: HIDE_INTERNAL)\n* `akhq.ui-options.topic.skip-consumer-groups` hide consumer groups columns on topic list\n* `akhq.ui-options.topic.skip-last-record` hide the last records on topic list\n* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n",
                      "markdown": "`* `akhq.ui-options.topic.default-view` is default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM) (default: HIDE_INTERNAL)\n* `akhq.ui-options.topic.skip-consumer-groups` hide consumer groups columns on topic list\n* `akhq.ui-options.topic.skip-last-record` hide the last records on topic list\n* `akhq.ui-options.topic.show-all-consumer-groups` expand lists of consumer groups on topic list\n\n### Topic Data\n* `akhq.ui-options.topic-data.sort`: default sort order (OLDEST, NEWEST) (default: OLDEST)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/others.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 206,
                  "endLine": 18,
                  "endColumn": 210,
                  "snippet": {
                    "text": "\n### Activating SSL\n\nWhen using HTTPS for communication, Micronaut will need to get the certificate within Netty. This uses classes of the java.base package which are no longer activated inside the JDK we use. The configuration at the bottom needs to be extended by this environment variable:\n\n```\nJDK_JAVA_OPTIONS: --add-exports\\=java.base/sun.security.x509\\=ALL-UNNAMED\n",
                    "rendered": {
                      "text": "\n### Activating SSL\n\nWhen using HTTPS for communication, Micronaut will need to get the certificate within Netty. This uses classes of the java.base package which are no longer activated inside the JDK we use. The configuration at the bottom needs to be extended by this environment variable:\n\n```\nJDK_JAVA_OPTIONS: --add-exports\\=java.base/sun.security.x509\\=ALL-UNNAMED\n",
                      "markdown": "`\n### Activating SSL\n\nWhen using HTTPS for communication, Micronaut will need to get the certificate within Netty. This uses classes of the java.base package which are no longer activated inside the JDK we use. The configuration at the bottom needs to be extended by this environment variable:\n\n```\nJDK_JAVA_OPTIONS: --add-exports\\=java.base/sun.security.x509\\=ALL-UNNAMED\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/audit.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 21,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  - Delete a subject\n- Kafka connect\n  - Create new connector\n  - Update existing connector\n  - Pause and resume connector\n  - Restart connector or task\n  - Delete connector\n",
                    "rendered": {
                      "text": "  - Delete a subject\n- Kafka connect\n  - Create new connector\n  - Update existing connector\n  - Pause and resume connector\n  - Restart connector or task\n  - Delete connector\n",
                      "markdown": "`  - Delete a subject\n- Kafka connect\n  - Create new connector\n  - Update existing connector\n  - Pause and resume connector\n  - Restart connector or task\n  - Delete connector\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/audit.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "endLine": 16,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  - Delete consumer group\n- Schema registry\n  - Create new schema for a subject\n  - Update existing schema for a subject\n  - Change compatibility level of a subject\n  - Delete a subject\n- Kafka connect\n",
                    "rendered": {
                      "text": "  - Delete consumer group\n- Schema registry\n  - Create new schema for a subject\n  - Update existing schema for a subject\n  - Change compatibility level of a subject\n  - Delete a subject\n- Kafka connect\n",
                      "markdown": "`  - Delete consumer group\n- Schema registry\n  - Create new schema for a subject\n  - Update existing schema for a subject\n  - Change compatibility level of a subject\n  - Delete a subject\n- Kafka connect\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/audit.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  - Topic partition increase\n  - Topic deletion\n- Consumer group level\n  - Update offsets\n  - Delete offsets\n  - Delete consumer group\n- Schema registry\n",
                    "rendered": {
                      "text": "  - Topic partition increase\n  - Topic deletion\n- Consumer group level\n  - Update offsets\n  - Delete offsets\n  - Delete consumer group\n- Schema registry\n",
                      "markdown": "`  - Topic partition increase\n  - Topic deletion\n- Consumer group level\n  - Update offsets\n  - Delete offsets\n  - Delete consumer group\n- Schema registry\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/schemaregistry/AvroSerializer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 34,
                  "endLine": 97,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        outputStream.write(schemaRegistryType.getMagicByte());\n        outputStream.write(ByteBuffer.allocate(SCHEMA_ID_SIZE).putInt(schemaId).array());\n\n        Encoder e = EncoderFactory.get().binaryEncoder(outputStream, null);\n\n        w.write(genericRecord, e);\n        e.flush();\n",
                    "rendered": {
                      "text": "        outputStream.write(schemaRegistryType.getMagicByte());\n        outputStream.write(ByteBuffer.allocate(SCHEMA_ID_SIZE).putInt(schemaId).array());\n\n        Encoder e = EncoderFactory.get().binaryEncoder(outputStream, null);\n\n        w.write(genericRecord, e);\n        e.flush();\n",
                      "markdown": "`        outputStream.write(schemaRegistryType.getMagicByte());\n        outputStream.write(ByteBuffer.allocate(SCHEMA_ID_SIZE).putInt(schemaId).array());\n\n        Encoder e = EncoderFactory.get().binaryEncoder(outputStream, null);\n\n        w.write(genericRecord, e);\n        e.flush();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/schemaregistry/AvroSerializer.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        } catch (IOException e) {\n            // rollback to jsonDecoder to handle special schema like \"string\"\n            DatumReader<Object> reader = new GenericDatumReader<>(schema);\n            Decoder decoder = DecoderFactory.get().jsonDecoder(schema, json);\n            genericRecord = reader.read(null, decoder);\n        }\n\n",
                    "rendered": {
                      "text": "        } catch (IOException e) {\n            // rollback to jsonDecoder to handle special schema like \"string\"\n            DatumReader<Object> reader = new GenericDatumReader<>(schema);\n            Decoder decoder = DecoderFactory.get().jsonDecoder(schema, json);\n            genericRecord = reader.read(null, decoder);\n        }\n\n",
                      "markdown": "`        } catch (IOException e) {\n            // rollback to jsonDecoder to handle special schema like \"string\"\n            DatumReader<Object> reader = new GenericDatumReader<>(schema);\n            Decoder decoder = DecoderFactory.get().jsonDecoder(schema, json);\n            genericRecord = reader.read(null, decoder);\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/schemaregistry/AvroSerializer.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        } catch (IOException e) {\n            // rollback to jsonDecoder to handle special schema like \"string\"\n            DatumReader<Object> reader = new GenericDatumReader<>(schema);\n            Decoder decoder = DecoderFactory.get().jsonDecoder(schema, json);\n            genericRecord = reader.read(null, decoder);\n        }\n\n",
                    "rendered": {
                      "text": "        } catch (IOException e) {\n            // rollback to jsonDecoder to handle special schema like \"string\"\n            DatumReader<Object> reader = new GenericDatumReader<>(schema);\n            Decoder decoder = DecoderFactory.get().jsonDecoder(schema, json);\n            genericRecord = reader.read(null, decoder);\n        }\n\n",
                      "markdown": "`        } catch (IOException e) {\n            // rollback to jsonDecoder to handle special schema like \"string\"\n            DatumReader<Object> reader = new GenericDatumReader<>(schema);\n            Decoder decoder = DecoderFactory.get().jsonDecoder(schema, json);\n            genericRecord = reader.read(null, decoder);\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 32,
                  "endLine": 387,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            }\n        }\n\n        return this.ksqlDbClient.get(clusterId);\n    }\n}\n",
                    "rendered": {
                      "text": "            }\n        }\n\n        return this.ksqlDbClient.get(clusterId);\n    }\n}\n",
                      "markdown": "`            }\n        }\n\n        return this.ksqlDbClient.get(clusterId);\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 46,
                  "endLine": 372,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n                    ClientOptions options = ClientOptions.create()\n                        .setHost(uri.getHost().get())\n                        .setPort(uri.getPort().get())\n                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n",
                    "rendered": {
                      "text": "\n                    ClientOptions options = ClientOptions.create()\n                        .setHost(uri.getHost().get())\n                        .setPort(uri.getPort().get())\n                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n",
                      "markdown": "`\n                    ClientOptions options = ClientOptions.create()\n                        .setHost(uri.getHost().get())\n                        .setPort(uri.getPort().get())\n                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 46,
                  "endLine": 371,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                    URIBuilder uri = URIBuilder.fromString(ksqlDb.getUrl().toString());\n\n                    ClientOptions options = ClientOptions.create()\n                        .setHost(uri.getHost().get())\n                        .setPort(uri.getPort().get())\n                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n",
                    "rendered": {
                      "text": "                    URIBuilder uri = URIBuilder.fromString(ksqlDb.getUrl().toString());\n\n                    ClientOptions options = ClientOptions.create()\n                        .setHost(uri.getHost().get())\n                        .setPort(uri.getPort().get())\n                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n",
                      "markdown": "`                    URIBuilder uri = URIBuilder.fromString(ksqlDb.getUrl().toString());\n\n                    ClientOptions options = ClientOptions.create()\n                        .setHost(uri.getHost().get())\n                        .setPort(uri.getPort().get())\n                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 37,
                  "endLine": 352,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            }\n        }\n\n        return this.connectRestClient.get(clusterId);\n    }\n\n    private final Map<String, Map<String, Client>> ksqlDbClient = new HashMap<>();\n",
                    "rendered": {
                      "text": "            }\n        }\n\n        return this.connectRestClient.get(clusterId);\n    }\n\n    private final Map<String, Map<String, Client>> ksqlDbClient = new HashMap<>();\n",
                      "markdown": "`            }\n        }\n\n        return this.connectRestClient.get(clusterId);\n    }\n\n    private final Map<String, Map<String, Client>> ksqlDbClient = new HashMap<>();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 34,
                  "endLine": 305,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            this.registryClient.put(clusterId, client);\n        }\n\n        return this.registryClient.get(clusterId);\n    }\n\n    private final Map<String, Map<String, KafkaConnectClient>> connectRestClient = new HashMap<>();\n",
                    "rendered": {
                      "text": "            this.registryClient.put(clusterId, client);\n        }\n\n        return this.registryClient.get(clusterId);\n    }\n\n    private final Map<String, Map<String, KafkaConnectClient>> connectRestClient = new HashMap<>();\n",
                      "markdown": "`            this.registryClient.put(clusterId, client);\n        }\n\n        return this.registryClient.get(clusterId);\n    }\n\n    private final Map<String, Map<String, KafkaConnectClient>> connectRestClient = new HashMap<>();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 29,
                  "endLine": 179,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            }\n        }\n\n        return this.producers.get(clusterId);\n    }\n\n    public AvroSchemaProvider getAvroSchemaProvider(String clusterId) throws InvalidClusterException {\n",
                    "rendered": {
                      "text": "            }\n        }\n\n        return this.producers.get(clusterId);\n    }\n\n    public AvroSchemaProvider getAvroSchemaProvider(String clusterId) throws InvalidClusterException {\n",
                      "markdown": "`            }\n        }\n\n        return this.producers.get(clusterId);\n    }\n\n    public AvroSchemaProvider getAvroSchemaProvider(String clusterId) throws InvalidClusterException {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 31,
                  "endLine": 130,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            this.adminClient.put(clusterId, AdminClient.create(this.getAdminProperties(clusterId)));\n        }\n\n        return this.adminClient.get(clusterId);\n    }\n\n    public KafkaConsumer<byte[], byte[]> getConsumer(String clusterId) throws InvalidClusterException {\n",
                    "rendered": {
                      "text": "            this.adminClient.put(clusterId, AdminClient.create(this.getAdminProperties(clusterId)));\n        }\n\n        return this.adminClient.get(clusterId);\n    }\n\n    public KafkaConsumer<byte[], byte[]> getConsumer(String clusterId) throws InvalidClusterException {\n",
                      "markdown": "`            this.adminClient.put(clusterId, AdminClient.create(this.getAdminProperties(clusterId)));\n        }\n\n        return this.adminClient.get(clusterId);\n    }\n\n    public KafkaConsumer<byte[], byte[]> getConsumer(String clusterId) throws InvalidClusterException {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 12,
                  "endLine": 69,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            .stream()\n            .filter(r -> r.getName().equals(cluster))\n            .findFirst()\n            .get();\n    }\n\n    private Properties getDefaultsProperties(List<? extends AbstractProperties> current, String type) {\n",
                    "rendered": {
                      "text": "            .stream()\n            .filter(r -> r.getName().equals(cluster))\n            .findFirst()\n            .get();\n    }\n\n    private Properties getDefaultsProperties(List<? extends AbstractProperties> current, String type) {\n",
                      "markdown": "`            .stream()\n            .filter(r -> r.getName().equals(cluster))\n            .findFirst()\n            .get();\n    }\n\n    private Properties getDefaultsProperties(List<? extends AbstractProperties> current, String type) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 106,
                  "endLine": 377,
                  "endColumn": 114,
                  "snippet": {
                    "text": "                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n                    if (ksqlDb.getBasicAuthUsername() != null && ksqlDb.getBasicAuthPassword() != null) {\n                        options.setBasicAuthCredentials(ksqlDb.getBasicAuthUsername(), ksqlDb.getBasicAuthPassword());\n                    }\n                    Client client = Client.create(options);\n\n",
                    "rendered": {
                      "text": "                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n                    if (ksqlDb.getBasicAuthUsername() != null && ksqlDb.getBasicAuthPassword() != null) {\n                        options.setBasicAuthCredentials(ksqlDb.getBasicAuthUsername(), ksqlDb.getBasicAuthPassword());\n                    }\n                    Client client = Client.create(options);\n\n",
                      "markdown": "`                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n                    if (ksqlDb.getBasicAuthUsername() != null && ksqlDb.getBasicAuthPassword() != null) {\n                        options.setBasicAuthCredentials(ksqlDb.getBasicAuthUsername(), ksqlDb.getBasicAuthPassword());\n                    }\n                    Client client = Client.create(options);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 84,
                  "endLine": 376,
                  "endColumn": 92,
                  "snippet": {
                    "text": "                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n                    if (ksqlDb.getBasicAuthUsername() != null && ksqlDb.getBasicAuthPassword() != null) {\n                        options.setBasicAuthCredentials(ksqlDb.getBasicAuthUsername(), ksqlDb.getBasicAuthPassword());\n                    }\n                    Client client = Client.create(options);\n",
                    "rendered": {
                      "text": "                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n                    if (ksqlDb.getBasicAuthUsername() != null && ksqlDb.getBasicAuthPassword() != null) {\n                        options.setBasicAuthCredentials(ksqlDb.getBasicAuthUsername(), ksqlDb.getBasicAuthPassword());\n                    }\n                    Client client = Client.create(options);\n",
                      "markdown": "`                        .setUseTls(ksqlDb.isUseTls())\n                        .setUseAlpn(ksqlDb.isUseAlpn())\n                        .setVerifyHost(ksqlDb.isVerifyHost());\n                    if (ksqlDb.getBasicAuthUsername() != null && ksqlDb.getBasicAuthPassword() != null) {\n                        options.setBasicAuthCredentials(ksqlDb.getBasicAuthUsername(), ksqlDb.getBasicAuthPassword());\n                    }\n                    Client client = Client.create(options);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 50,
                  "endLine": 343,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                    if (connect.getSslKeyStore() != null) {\n                        configuration.useKeyStore(\n                            new File(connect.getSslKeyStore()),\n                            connect.getSslKeyStorePassword()\n                        );\n                    }\n                    mapConnects.put(connect.getName(), new KafkaConnectClient(configuration));\n",
                    "rendered": {
                      "text": "                    if (connect.getSslKeyStore() != null) {\n                        configuration.useKeyStore(\n                            new File(connect.getSslKeyStore()),\n                            connect.getSslKeyStorePassword()\n                        );\n                    }\n                    mapConnects.put(connect.getName(), new KafkaConnectClient(configuration));\n",
                      "markdown": "`                    if (connect.getSslKeyStore() != null) {\n                        configuration.useKeyStore(\n                            new File(connect.getSslKeyStore()),\n                            connect.getSslKeyStorePassword()\n                        );\n                    }\n                    mapConnects.put(connect.getName(), new KafkaConnectClient(configuration));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 52,
                  "endLine": 336,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                    if (connect.getSslTrustStore() != null) {\n                        configuration.useTrustStore(\n                            new File(connect.getSslTrustStore()),\n                            connect.getSslTrustStorePassword()\n                        );\n                    }\n\n",
                    "rendered": {
                      "text": "                    if (connect.getSslTrustStore() != null) {\n                        configuration.useTrustStore(\n                            new File(connect.getSslTrustStore()),\n                            connect.getSslTrustStorePassword()\n                        );\n                    }\n\n",
                      "markdown": "`                    if (connect.getSslTrustStore() != null) {\n                        configuration.useTrustStore(\n                            new File(connect.getSslTrustStore()),\n                            connect.getSslTrustStorePassword()\n                        );\n                    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 48,
                  "endLine": 329,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    if (connect.getBasicAuthUsername() != null) {\n                        configuration.useBasicAuth(\n                            connect.getBasicAuthUsername(),\n                            connect.getBasicAuthPassword()\n                        );\n                    }\n\n",
                    "rendered": {
                      "text": "                    if (connect.getBasicAuthUsername() != null) {\n                        configuration.useBasicAuth(\n                            connect.getBasicAuthUsername(),\n                            connect.getBasicAuthPassword()\n                        );\n                    }\n\n",
                      "markdown": "`                    if (connect.getBasicAuthUsername() != null) {\n                        configuration.useBasicAuth(\n                            connect.getBasicAuthUsername(),\n                            connect.getBasicAuthPassword()\n                        );\n                    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/KafkaModule.java"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 75,
                  "endLine": 262,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                        ImmutableMap.of(\n                            \"schema.registry.basic.auth.user.info\",\n                            connection.getSchemaRegistry().getBasicAuthUsername() + \":\" +\n                                connection.getSchemaRegistry().getBasicAuthPassword()\n                        )\n                    );\n                restService.setBasicAuthCredentialProvider(basicAuthCredentialProvider);\n",
                    "rendered": {
                      "text": "                        ImmutableMap.of(\n                            \"schema.registry.basic.auth.user.info\",\n                            connection.getSchemaRegistry().getBasicAuthUsername() + \":\" +\n                                connection.getSchemaRegistry().getBasicAuthPassword()\n                        )\n                    );\n                restService.setBasicAuthCredentialProvider(basicAuthCredentialProvider);\n",
                      "markdown": "`                        ImmutableMap.of(\n                            \"schema.registry.basic.auth.user.info\",\n                            connection.getSchemaRegistry().getBasicAuthUsername() + \":\" +\n                                connection.getSchemaRegistry().getBasicAuthPassword()\n                        )\n                    );\n                restService.setBasicAuthCredentialProvider(basicAuthCredentialProvider);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 49,
                  "endLine": 428,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        throws ExecutionException {\n        final Map<String, TopicDescription> topics = describeTopics(clusterId, List.of(topicName));\n        if (topics.containsKey(topicName)) {\n            final TopicDescription topic = topics.get(topicName);\n            final Set<TopicPartition> topicPartitions = topic.partitions().stream()\n                .map(p -> new TopicPartition(topicName, p.partition()))\n                .collect(toSet());\n",
                    "rendered": {
                      "text": "        throws ExecutionException {\n        final Map<String, TopicDescription> topics = describeTopics(clusterId, List.of(topicName));\n        if (topics.containsKey(topicName)) {\n            final TopicDescription topic = topics.get(topicName);\n            final Set<TopicPartition> topicPartitions = topic.partitions().stream()\n                .map(p -> new TopicPartition(topicName, p.partition()))\n                .collect(toSet());\n",
                      "markdown": "`        throws ExecutionException {\n        final Map<String, TopicDescription> topics = describeTopics(clusterId, List.of(topicName));\n        if (topics.containsKey(topicName)) {\n            final TopicDescription topic = topics.get(topicName);\n            final Set<TopicPartition> topicPartitions = topic.partitions().stream()\n                .map(p -> new TopicPartition(topicName, p.partition()))\n                .collect(toSet());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 42,
                  "endLine": 421,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            ));\n        }\n\n        return describeAcls.get(clusterId).get(filter);\n    }\n\n    public void deleteConsumerGroupOffsets(String clusterId, String groupName, String topicName)\n",
                    "rendered": {
                      "text": "            ));\n        }\n\n        return describeAcls.get(clusterId).get(filter);\n    }\n\n    public void deleteConsumerGroupOffsets(String clusterId, String groupName, String topicName)\n",
                      "markdown": "`            ));\n        }\n\n        return describeAcls.get(clusterId).get(filter);\n    }\n\n    public void deleteConsumerGroupOffsets(String clusterId, String groupName, String topicName)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 27,
                  "endLine": 421,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            ));\n        }\n\n        return describeAcls.get(clusterId).get(filter);\n    }\n\n    public void deleteConsumerGroupOffsets(String clusterId, String groupName, String topicName)\n",
                    "rendered": {
                      "text": "            ));\n        }\n\n        return describeAcls.get(clusterId).get(filter);\n    }\n\n    public void deleteConsumerGroupOffsets(String clusterId, String groupName, String topicName)\n",
                      "markdown": "`            ));\n        }\n\n        return describeAcls.get(clusterId).get(filter);\n    }\n\n    public void deleteConsumerGroupOffsets(String clusterId, String groupName, String topicName)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 28,
                  "endLine": 403,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                        return kafkaModule.getAdminClient(clusterId)\n                            .describeAcls(filter)\n                            .values()\n                            .get();\n                    } catch (ApiException e) {\n                        if (e.getCause() instanceof SecurityDisabledException || e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException) {\n                            return Collections.emptyList();\n",
                    "rendered": {
                      "text": "                        return kafkaModule.getAdminClient(clusterId)\n                            .describeAcls(filter)\n                            .values()\n                            .get();\n                    } catch (ApiException e) {\n                        if (e.getCause() instanceof SecurityDisabledException || e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException) {\n                            return Collections.emptyList();\n",
                      "markdown": "`                        return kafkaModule.getAdminClient(clusterId)\n                            .describeAcls(filter)\n                            .values()\n                            .get();\n                    } catch (ApiException e) {\n                        if (e.getCause() instanceof SecurityDisabledException || e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException) {\n                            return Collections.emptyList();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 29,
                  "endLine": 397,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        describeAcls.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.describeAcls.get(clusterId).containsKey(filter)) {\n            this.describeAcls.get(clusterId).put(filter, Logger.call(\n                () -> {\n                    try {\n                        return kafkaModule.getAdminClient(clusterId)\n",
                    "rendered": {
                      "text": "        describeAcls.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.describeAcls.get(clusterId).containsKey(filter)) {\n            this.describeAcls.get(clusterId).put(filter, Logger.call(\n                () -> {\n                    try {\n                        return kafkaModule.getAdminClient(clusterId)\n",
                      "markdown": "`        describeAcls.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.describeAcls.get(clusterId).containsKey(filter)) {\n            this.describeAcls.get(clusterId).put(filter, Logger.call(\n                () -> {\n                    try {\n                        return kafkaModule.getAdminClient(clusterId)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 30,
                  "endLine": 396,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    public Collection<AclBinding> describeAcls(String clusterId, AclBindingFilter filter) throws ExecutionException, InterruptedException {\n        describeAcls.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.describeAcls.get(clusterId).containsKey(filter)) {\n            this.describeAcls.get(clusterId).put(filter, Logger.call(\n                () -> {\n                    try {\n",
                    "rendered": {
                      "text": "    public Collection<AclBinding> describeAcls(String clusterId, AclBindingFilter filter) throws ExecutionException, InterruptedException {\n        describeAcls.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.describeAcls.get(clusterId).containsKey(filter)) {\n            this.describeAcls.get(clusterId).put(filter, Logger.call(\n                () -> {\n                    try {\n",
                      "markdown": "`    public Collection<AclBinding> describeAcls(String clusterId, AclBindingFilter filter) throws ExecutionException, InterruptedException {\n        describeAcls.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.describeAcls.get(clusterId).containsKey(filter)) {\n            this.describeAcls.get(clusterId).put(filter, Logger.call(\n                () -> {\n                    try {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 12,
                  "endLine": 362,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        }\n\n        return this.describeConfigs\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> e.getKey().type() == type)\n",
                    "rendered": {
                      "text": "        }\n\n        return this.describeConfigs\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> e.getKey().type() == type)\n",
                      "markdown": "`        }\n\n        return this.describeConfigs\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> e.getKey().type() == type)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 32,
                  "endLine": 358,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                names\n            );\n\n            this.describeConfigs.get(clusterId).putAll(description);\n        }\n\n        return this.describeConfigs\n",
                    "rendered": {
                      "text": "                names\n            );\n\n            this.describeConfigs.get(clusterId).putAll(description);\n        }\n\n        return this.describeConfigs\n",
                      "markdown": "`                names\n            );\n\n            this.describeConfigs.get(clusterId).putAll(description);\n        }\n\n        return this.describeConfigs\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 28,
                  "endLine": 341,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                                .collect(Collectors.toList())\n                            )\n                            .all()\n                            .get();\n                    } catch (ExecutionException e) {\n                        if (e.getCause() instanceof SecurityDisabledException || e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException) {\n                            return ImmutableMap.of();\n",
                    "rendered": {
                      "text": "                                .collect(Collectors.toList())\n                            )\n                            .all()\n                            .get();\n                    } catch (ExecutionException e) {\n                        if (e.getCause() instanceof SecurityDisabledException || e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException) {\n                            return ImmutableMap.of();\n",
                      "markdown": "`                                .collect(Collectors.toList())\n                            )\n                            .all()\n                            .get();\n                    } catch (ExecutionException e) {\n                        if (e.getCause() instanceof SecurityDisabledException || e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException) {\n                            return ImmutableMap.of();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 51,
                  "endLine": 325,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        describeConfigs.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(names);\n        list.removeIf(value -> this.describeConfigs.get(clusterId).entrySet()\n            .stream()\n            .filter(entry -> entry.getKey().type() == type)\n            .anyMatch(entry -> entry.getKey().name().equals(value))\n",
                    "rendered": {
                      "text": "        describeConfigs.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(names);\n        list.removeIf(value -> this.describeConfigs.get(clusterId).entrySet()\n            .stream()\n            .filter(entry -> entry.getKey().type() == type)\n            .anyMatch(entry -> entry.getKey().name().equals(value))\n",
                      "markdown": "`        describeConfigs.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(names);\n        list.removeIf(value -> this.describeConfigs.get(clusterId).entrySet()\n            .stream()\n            .filter(entry -> entry.getKey().type() == type)\n            .anyMatch(entry -> entry.getKey().name().equals(value))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 27,
                  "endLine": 316,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            ));\n        }\n\n        return this.logDirs.get(clusterId);\n    }\n\n    private Map<String, Map<ConfigResource, Config>> describeConfigs = new HashMap<>();\n",
                    "rendered": {
                      "text": "            ));\n        }\n\n        return this.logDirs.get(clusterId);\n    }\n\n    private Map<String, Map<ConfigResource, Config>> describeConfigs = new HashMap<>();\n",
                      "markdown": "`            ));\n        }\n\n        return this.logDirs.get(clusterId);\n    }\n\n    private Map<String, Map<ConfigResource, Config>> describeConfigs = new HashMap<>();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 28,
                  "endLine": 297,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                                .collect(Collectors.toList())\n                            )\n                            .allDescriptions()\n                            .get();\n                    } catch (ExecutionException e) {\n                        if (e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException || e.getCause() instanceof UnsupportedVersionException ||\n                            e.getCause() instanceof TimeoutException) {\n",
                    "rendered": {
                      "text": "                                .collect(Collectors.toList())\n                            )\n                            .allDescriptions()\n                            .get();\n                    } catch (ExecutionException e) {\n                        if (e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException || e.getCause() instanceof UnsupportedVersionException ||\n                            e.getCause() instanceof TimeoutException) {\n",
                      "markdown": "`                                .collect(Collectors.toList())\n                            )\n                            .allDescriptions()\n                            .get();\n                    } catch (ExecutionException e) {\n                        if (e.getCause() instanceof ClusterAuthorizationException || e.getCause() instanceof TopicAuthorizationException || e.getCause() instanceof UnsupportedVersionException ||\n                            e.getCause() instanceof TimeoutException) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 84,
                  "endLine": 291,
                  "endColumn": 89,
                  "snippet": {
                    "text": "                () -> {\n                    try {\n                        return kafkaModule.getAdminClient(clusterId)\n                            .describeLogDirs(this.describeCluster(clusterId).nodes().get()\n                                .stream()\n                                .map(Node::id)\n                                .collect(Collectors.toList())\n",
                    "rendered": {
                      "text": "                () -> {\n                    try {\n                        return kafkaModule.getAdminClient(clusterId)\n                            .describeLogDirs(this.describeCluster(clusterId).nodes().get()\n                                .stream()\n                                .map(Node::id)\n                                .collect(Collectors.toList())\n",
                      "markdown": "`                () -> {\n                    try {\n                        return kafkaModule.getAdminClient(clusterId)\n                            .describeLogDirs(this.describeCluster(clusterId).nodes().get()\n                                .stream()\n                                .map(Node::id)\n                                .collect(Collectors.toList())\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 54,
                  "endLine": 276,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            ));\n        }\n\n        return this.consumerGroupOffset.get(clusterId).get(groupId);\n    }\n\n    public void clearConsumerGroupsOffsets() {\n",
                    "rendered": {
                      "text": "            ));\n        }\n\n        return this.consumerGroupOffset.get(clusterId).get(groupId);\n    }\n\n    public void clearConsumerGroupsOffsets() {\n",
                      "markdown": "`            ));\n        }\n\n        return this.consumerGroupOffset.get(clusterId).get(groupId);\n    }\n\n    public void clearConsumerGroupsOffsets() {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 39,
                  "endLine": 276,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            ));\n        }\n\n        return this.consumerGroupOffset.get(clusterId).get(groupId);\n    }\n\n    public void clearConsumerGroupsOffsets() {\n",
                    "rendered": {
                      "text": "            ));\n        }\n\n        return this.consumerGroupOffset.get(clusterId).get(groupId);\n    }\n\n    public void clearConsumerGroupsOffsets() {\n",
                      "markdown": "`            ));\n        }\n\n        return this.consumerGroupOffset.get(clusterId).get(groupId);\n    }\n\n    public void clearConsumerGroupsOffsets() {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 36,
                  "endLine": 267,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        consumerGroupOffset.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.consumerGroupOffset.get(clusterId).containsKey(groupId)) {\n            this.consumerGroupOffset.get(clusterId).put(groupId, Logger.call(\n                kafkaModule.getAdminClient(clusterId)\n                    .listConsumerGroupOffsets(groupId)\n                    .partitionsToOffsetAndMetadata(),\n",
                    "rendered": {
                      "text": "        consumerGroupOffset.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.consumerGroupOffset.get(clusterId).containsKey(groupId)) {\n            this.consumerGroupOffset.get(clusterId).put(groupId, Logger.call(\n                kafkaModule.getAdminClient(clusterId)\n                    .listConsumerGroupOffsets(groupId)\n                    .partitionsToOffsetAndMetadata(),\n",
                      "markdown": "`        consumerGroupOffset.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.consumerGroupOffset.get(clusterId).containsKey(groupId)) {\n            this.consumerGroupOffset.get(clusterId).put(groupId, Logger.call(\n                kafkaModule.getAdminClient(clusterId)\n                    .listConsumerGroupOffsets(groupId)\n                    .partitionsToOffsetAndMetadata(),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 37,
                  "endLine": 266,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    public Map<TopicPartition, OffsetAndMetadata> consumerGroupsOffsets(String clusterId, String groupId) throws ExecutionException {\n        consumerGroupOffset.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.consumerGroupOffset.get(clusterId).containsKey(groupId)) {\n            this.consumerGroupOffset.get(clusterId).put(groupId, Logger.call(\n                kafkaModule.getAdminClient(clusterId)\n                    .listConsumerGroupOffsets(groupId)\n",
                    "rendered": {
                      "text": "    public Map<TopicPartition, OffsetAndMetadata> consumerGroupsOffsets(String clusterId, String groupId) throws ExecutionException {\n        consumerGroupOffset.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.consumerGroupOffset.get(clusterId).containsKey(groupId)) {\n            this.consumerGroupOffset.get(clusterId).put(groupId, Logger.call(\n                kafkaModule.getAdminClient(clusterId)\n                    .listConsumerGroupOffsets(groupId)\n",
                      "markdown": "`    public Map<TopicPartition, OffsetAndMetadata> consumerGroupsOffsets(String clusterId, String groupId) throws ExecutionException {\n        consumerGroupOffset.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        if (!this.consumerGroupOffset.get(clusterId).containsKey(groupId)) {\n            this.consumerGroupOffset.get(clusterId).put(groupId, Logger.call(\n                kafkaModule.getAdminClient(clusterId)\n                    .listConsumerGroupOffsets(groupId)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 12,
                  "endLine": 239,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        }\n\n        return this.describeConsumerGroups\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> groups.contains(e.getKey()))\n",
                    "rendered": {
                      "text": "        }\n\n        return this.describeConsumerGroups\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> groups.contains(e.getKey()))\n",
                      "markdown": "`        }\n\n        return this.describeConsumerGroups\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> groups.contains(e.getKey()))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 39,
                  "endLine": 235,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                groups\n            );\n\n            this.describeConsumerGroups.get(clusterId).putAll(description);\n        }\n\n        return this.describeConsumerGroups\n",
                    "rendered": {
                      "text": "                groups\n            );\n\n            this.describeConsumerGroups.get(clusterId).putAll(description);\n        }\n\n        return this.describeConsumerGroups\n",
                      "markdown": "`                groups\n            );\n\n            this.describeConsumerGroups.get(clusterId).putAll(description);\n        }\n\n        return this.describeConsumerGroups\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 58,
                  "endLine": 224,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        describeConsumerGroups.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(groups);\n        list.removeIf(value -> this.describeConsumerGroups.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, ConsumerGroupDescription> description = Logger.call(\n",
                    "rendered": {
                      "text": "        describeConsumerGroups.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(groups);\n        list.removeIf(value -> this.describeConsumerGroups.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, ConsumerGroupDescription> description = Logger.call(\n",
                      "markdown": "`        describeConsumerGroups.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(groups);\n        list.removeIf(value -> this.describeConsumerGroups.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, ConsumerGroupDescription> description = Logger.call(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 38,
                  "endLine": 215,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            ));\n        }\n\n        return this.listConsumerGroups.get(clusterId);\n    }\n\n    private Map<String, Map<String, ConsumerGroupDescription>> describeConsumerGroups = new HashMap<>();\n",
                    "rendered": {
                      "text": "            ));\n        }\n\n        return this.listConsumerGroups.get(clusterId);\n    }\n\n    private Map<String, Map<String, ConsumerGroupDescription>> describeConsumerGroups = new HashMap<>();\n",
                      "markdown": "`            ));\n        }\n\n        return this.listConsumerGroups.get(clusterId);\n    }\n\n    private Map<String, Map<String, ConsumerGroupDescription>> describeConsumerGroups = new HashMap<>();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 41,
                  "endLine": 201,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            this.describeTopicsOffsets.get(clusterId).putAll(finalOffsets);\n        }\n\n        return this.describeTopicsOffsets.get(clusterId);\n    }\n\n    private final Map<String, Collection<ConsumerGroupListing>> listConsumerGroups = new HashMap<>();\n",
                    "rendered": {
                      "text": "            this.describeTopicsOffsets.get(clusterId).putAll(finalOffsets);\n        }\n\n        return this.describeTopicsOffsets.get(clusterId);\n    }\n\n    private final Map<String, Collection<ConsumerGroupListing>> listConsumerGroups = new HashMap<>();\n",
                      "markdown": "`            this.describeTopicsOffsets.get(clusterId).putAll(finalOffsets);\n        }\n\n        return this.describeTopicsOffsets.get(clusterId);\n    }\n\n    private final Map<String, Collection<ConsumerGroupListing>> listConsumerGroups = new HashMap<>();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 38,
                  "endLine": 198,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                topics\n            );\n\n            this.describeTopicsOffsets.get(clusterId).putAll(finalOffsets);\n        }\n\n        return this.describeTopicsOffsets.get(clusterId);\n",
                    "rendered": {
                      "text": "                topics\n            );\n\n            this.describeTopicsOffsets.get(clusterId).putAll(finalOffsets);\n        }\n\n        return this.describeTopicsOffsets.get(clusterId);\n",
                      "markdown": "`                topics\n            );\n\n            this.describeTopicsOffsets.get(clusterId).putAll(finalOffsets);\n        }\n\n        return this.describeTopicsOffsets.get(clusterId);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 44,
                  "endLine": 188,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                                    new Partition.Offsets(\n                                        begin.getKey().partition(),\n                                        begin.getValue() != null ? begin.getValue().offset() : ends.get(begin.getKey()),\n                                        ends.get(begin.getKey())\n                                    ),\n                                toList()\n                            )\n",
                    "rendered": {
                      "text": "                                    new Partition.Offsets(\n                                        begin.getKey().partition(),\n                                        begin.getValue() != null ? begin.getValue().offset() : ends.get(begin.getKey()),\n                                        ends.get(begin.getKey())\n                                    ),\n                                toList()\n                            )\n",
                      "markdown": "`                                    new Partition.Offsets(\n                                        begin.getKey().partition(),\n                                        begin.getValue() != null ? begin.getValue().offset() : ends.get(begin.getKey()),\n                                        ends.get(begin.getKey())\n                                    ),\n                                toList()\n                            )\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 99,
                  "endLine": 187,
                  "endColumn": 104,
                  "snippet": {
                    "text": "                                begin ->\n                                    new Partition.Offsets(\n                                        begin.getKey().partition(),\n                                        begin.getValue() != null ? begin.getValue().offset() : ends.get(begin.getKey()),\n                                        ends.get(begin.getKey())\n                                    ),\n                                toList()\n",
                    "rendered": {
                      "text": "                                begin ->\n                                    new Partition.Offsets(\n                                        begin.getKey().partition(),\n                                        begin.getValue() != null ? begin.getValue().offset() : ends.get(begin.getKey()),\n                                        ends.get(begin.getKey())\n                                    ),\n                                toList()\n",
                      "markdown": "`                                begin ->\n                                    new Partition.Offsets(\n                                        begin.getKey().partition(),\n                                        begin.getValue() != null ? begin.getValue().offset() : ends.get(begin.getKey()),\n                                        ends.get(begin.getKey())\n                                    ),\n                                toList()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 57,
                  "endLine": 152,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        describeTopicsOffsets.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(topics);\n        list.removeIf(value -> this.describeTopicsOffsets.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, List<Partition.Offsets>> finalOffsets = Logger.call(\n",
                    "rendered": {
                      "text": "        describeTopicsOffsets.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(topics);\n        list.removeIf(value -> this.describeTopicsOffsets.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, List<Partition.Offsets>> finalOffsets = Logger.call(\n",
                      "markdown": "`        describeTopicsOffsets.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(topics);\n        list.removeIf(value -> this.describeTopicsOffsets.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, List<Partition.Offsets>> finalOffsets = Logger.call(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 12,
                  "endLine": 91,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        }\n\n        return this.describeTopics\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> topics.contains(e.getKey()))\n",
                    "rendered": {
                      "text": "        }\n\n        return this.describeTopics\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> topics.contains(e.getKey()))\n",
                      "markdown": "`        }\n\n        return this.describeTopics\n            .get(clusterId)\n            .entrySet()\n            .stream()\n            .filter(e -> topics.contains(e.getKey()))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 31,
                  "endLine": 87,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                topics\n            );\n\n            this.describeTopics.get(clusterId).putAll(description);\n        }\n\n        return this.describeTopics\n",
                    "rendered": {
                      "text": "                topics\n            );\n\n            this.describeTopics.get(clusterId).putAll(description);\n        }\n\n        return this.describeTopics\n",
                      "markdown": "`                topics\n            );\n\n            this.describeTopics.get(clusterId).putAll(description);\n        }\n\n        return this.describeTopics\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 50,
                  "endLine": 76,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        describeTopics.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(topics);\n        list.removeIf(value -> this.describeTopics.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, TopicDescription> description = Logger.call(\n",
                    "rendered": {
                      "text": "        describeTopics.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(topics);\n        list.removeIf(value -> this.describeTopics.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, TopicDescription> description = Logger.call(\n",
                      "markdown": "`        describeTopics.computeIfAbsent(clusterId, s -> new HashMap<>());\n\n        List<String> list = new ArrayList<>(topics);\n        list.removeIf(value -> this.describeTopics.get(clusterId).containsKey(value));\n\n        if (list.size() > 0) {\n            Map<String, TopicDescription> description = Logger.call(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 30,
                  "endLine": 67,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            ));\n        }\n\n        return this.listTopics.get(clusterId);\n    }\n\n    private final Map<String, Map<String, TopicDescription>> describeTopics = new HashMap<>();\n",
                    "rendered": {
                      "text": "            ));\n        }\n\n        return this.listTopics.get(clusterId);\n    }\n\n    private final Map<String, Map<String, TopicDescription>> describeTopics = new HashMap<>();\n",
                      "markdown": "`            ));\n        }\n\n        return this.listTopics.get(clusterId);\n    }\n\n    private final Map<String, Map<String, TopicDescription>> describeTopics = new HashMap<>();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/modules/AbstractKafkaWrapper.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 27,
                  "endLine": 52,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n            return cluster;\n        }\n        return this.cluster.get(clusterId);\n    }\n\n    private Map<String, Collection<TopicListing>> listTopics = new HashMap<>();\n",
                    "rendered": {
                      "text": "\n            return cluster;\n        }\n        return this.cluster.get(clusterId);\n    }\n\n    private Map<String, Collection<TopicListing>> listTopics = new HashMap<>();\n",
                      "markdown": "`\n            return cluster;\n        }\n        return this.cluster.get(clusterId);\n    }\n\n    private Map<String, Collection<TopicListing>> listTopics = new HashMap<>();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/NodeController.java"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 37,
                  "endLine": 154,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    private Node findNode(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return this.clusterRepository.get(cluster)\n            .getNodes()\n            .stream()\n            .filter(e -> e.getId() == nodeId)\n",
                    "rendered": {
                      "text": "    private Node findNode(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return this.clusterRepository.get(cluster)\n            .getNodes()\n            .stream()\n            .filter(e -> e.getId() == nodeId)\n",
                      "markdown": "`    private Node findNode(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return this.clusterRepository.get(cluster)\n            .getNodes()\n            .stream()\n            .filter(e -> e.getId() == nodeId)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/NodeController.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 37,
                  "endLine": 92,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    public Cluster list(String cluster) throws ExecutionException, InterruptedException {\n        checkIfClusterAllowed(cluster);\n\n        return this.clusterRepository.get(cluster);\n    }\n\n    @Get(\"api/{cluster}/node/{nodeId}\")\n",
                    "rendered": {
                      "text": "    public Cluster list(String cluster) throws ExecutionException, InterruptedException {\n        checkIfClusterAllowed(cluster);\n\n        return this.clusterRepository.get(cluster);\n    }\n\n    @Get(\"api/{cluster}/node/{nodeId}\")\n",
                      "markdown": "`    public Cluster list(String cluster) throws ExecutionException, InterruptedException {\n        checkIfClusterAllowed(cluster);\n\n        return this.clusterRepository.get(cluster);\n    }\n\n    @Get(\"api/{cluster}/node/{nodeId}\")\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/NodeController.java"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 11,
                  "endLine": 151,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        return updated;\n    }\n\n    private Node findNode(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return this.clusterRepository.get(cluster)\n",
                    "rendered": {
                      "text": "        return updated;\n    }\n\n    private Node findNode(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return this.clusterRepository.get(cluster)\n",
                      "markdown": "`        return updated;\n    }\n\n    private Node findNode(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return this.clusterRepository.get(cluster)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/NodeController.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 10,
                  "endLine": 97,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    @Get(\"api/{cluster}/node/{nodeId}\")\n    @Operation(tags = {\"node\"}, summary = \"Retrieve a nodes\")\n    public Node node(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return findNode(cluster, nodeId);\n",
                    "rendered": {
                      "text": "\n    @Get(\"api/{cluster}/node/{nodeId}\")\n    @Operation(tags = {\"node\"}, summary = \"Retrieve a nodes\")\n    public Node node(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return findNode(cluster, nodeId);\n",
                      "markdown": "`\n    @Get(\"api/{cluster}/node/{nodeId}\")\n    @Operation(tags = {\"node\"}, summary = \"Retrieve a nodes\")\n    public Node node(String cluster, Integer nodeId) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, nodeId.toString());\n\n        return findNode(cluster, nodeId);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/TopicController.java"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 36,
                  "endLine": 506,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                AtomicBoolean continueSearch = new AtomicBoolean(true);\n                AtomicBoolean isFirstBatch = new AtomicBoolean(true);\n\n                while(continueSearch.get()) {\n                    recordRepository\n                        .search(topic, options)\n                        .observeOn(Schedulers.io())\n",
                    "rendered": {
                      "text": "                AtomicBoolean continueSearch = new AtomicBoolean(true);\n                AtomicBoolean isFirstBatch = new AtomicBoolean(true);\n\n                while(continueSearch.get()) {\n                    recordRepository\n                        .search(topic, options)\n                        .observeOn(Schedulers.io())\n",
                      "markdown": "`                AtomicBoolean continueSearch = new AtomicBoolean(true);\n                AtomicBoolean isFirstBatch = new AtomicBoolean(true);\n\n                while(continueSearch.get()) {\n                    recordRepository\n                        .search(topic, options)\n                        .observeOn(Schedulers.io())\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/TopicController.java"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 73,
                  "endLine": 338,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    @Operation(tags = {\"topic\"}, summary = \"Increase partition for a topic\")\n    public HttpResponse<?> increasePartition(String cluster, String topicName, @Body Map<String, Integer> config) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, topicName);\n        this.topicRepository.increasePartition(cluster, topicName, config.get(\"partition\"));\n\n        return HttpResponse.accepted();\n    }\n",
                    "rendered": {
                      "text": "    @Operation(tags = {\"topic\"}, summary = \"Increase partition for a topic\")\n    public HttpResponse<?> increasePartition(String cluster, String topicName, @Body Map<String, Integer> config) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, topicName);\n        this.topicRepository.increasePartition(cluster, topicName, config.get(\"partition\"));\n\n        return HttpResponse.accepted();\n    }\n",
                      "markdown": "`    @Operation(tags = {\"topic\"}, summary = \"Increase partition for a topic\")\n    public HttpResponse<?> increasePartition(String cluster, String topicName, @Body Map<String, Integer> config) throws ExecutionException, InterruptedException {\n        checkIfClusterAndResourceAllowed(cluster, topicName);\n        this.topicRepository.increasePartition(cluster, topicName, config.get(\"partition\"));\n\n        return HttpResponse.accepted();\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/TopicController.java"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 12,
                  "endLine": 371,
                  "endColumn": 18,
                  "snippet": {
                    "text": "                Base64.getDecoder().decode(key)\n            ),\n            schemaRegistryRepository.getSchemaRegistryType(cluster),\n            Base64.getDecoder().decode(key),\n            null,\n            new ArrayList<>(),\n            topicRepository.findByName(cluster, topicName),\n",
                    "rendered": {
                      "text": "                Base64.getDecoder().decode(key)\n            ),\n            schemaRegistryRepository.getSchemaRegistryType(cluster),\n            Base64.getDecoder().decode(key),\n            null,\n            new ArrayList<>(),\n            topicRepository.findByName(cluster, topicName),\n",
                      "markdown": "`                Base64.getDecoder().decode(key)\n            ),\n            schemaRegistryRepository.getSchemaRegistryType(cluster),\n            Base64.getDecoder().decode(key),\n            null,\n            new ArrayList<>(),\n            topicRepository.findByName(cluster, topicName),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/TopicController.java"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 16,
                  "endLine": 368,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                cluster,\n                topicName,\n                partition,\n                Base64.getDecoder().decode(key)\n            ),\n            schemaRegistryRepository.getSchemaRegistryType(cluster),\n            Base64.getDecoder().decode(key),\n",
                    "rendered": {
                      "text": "                cluster,\n                topicName,\n                partition,\n                Base64.getDecoder().decode(key)\n            ),\n            schemaRegistryRepository.getSchemaRegistryType(cluster),\n            Base64.getDecoder().decode(key),\n",
                      "markdown": "`                cluster,\n                topicName,\n                partition,\n                Base64.getDecoder().decode(key)\n            ),\n            schemaRegistryRepository.getSchemaRegistryType(cluster),\n            Base64.getDecoder().decode(key),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/AkhqController.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 61,
                  "endLine": 226,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        // return rights for the default group\n        if (!applicationContext.containsBean(SecurityService.class)\n            || applicationContext.getBean(SecurityService.class).getAuthentication().isEmpty()) {\n            return expandRoles(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        // Authentication enabled and user logged in\n",
                    "rendered": {
                      "text": "        // return rights for the default group\n        if (!applicationContext.containsBean(SecurityService.class)\n            || applicationContext.getBean(SecurityService.class).getAuthentication().isEmpty()) {\n            return expandRoles(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        // Authentication enabled and user logged in\n",
                      "markdown": "`        // return rights for the default group\n        if (!applicationContext.containsBean(SecurityService.class)\n            || applicationContext.getBean(SecurityService.class).getAuthentication().isEmpty()) {\n            return expandRoles(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        // Authentication enabled and user logged in\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/SchemaController.java"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 63,
                  "endLine": 194,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            .filter(s -> topic == null || s.getSubject().contains(topic))\n            .findFirst()\n            // If there is a topic but no match, return the first one that matches to handle subjects not following TopicNameStrategy\n            .orElseGet(() -> schemas.isEmpty() ? null : schemas.get(0));\n    }\n\n    @Get(\"api/{cluster}/schema/{subject}/version\")\n",
                    "rendered": {
                      "text": "            .filter(s -> topic == null || s.getSubject().contains(topic))\n            .findFirst()\n            // If there is a topic but no match, return the first one that matches to handle subjects not following TopicNameStrategy\n            .orElseGet(() -> schemas.isEmpty() ? null : schemas.get(0));\n    }\n\n    @Get(\"api/{cluster}/schema/{subject}/version\")\n",
                      "markdown": "`            .filter(s -> topic == null || s.getSubject().contains(topic))\n            .findFirst()\n            // If there is a topic but no match, return the first one that matches to handle subjects not following TopicNameStrategy\n            .orElseGet(() -> schemas.isEmpty() ? null : schemas.get(0));\n    }\n\n    @Get(\"api/{cluster}/schema/{subject}/version\")\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/App.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 48,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ),\n    tags = {\n        @Tag(name = \"AKHQ\", description = \"AKHQ api\"),\n        @Tag(name = \"node\", description = \"Kafka Node api\"),\n        @Tag(name = \"topic\", description = \"Kafka Topic api\"),\n        @Tag(name = \"topic data\", description = \"Kafka Topic data api\"),\n        @Tag(name = \"consumer group\", description = \"Kafka Consumer group api\"),\n",
                    "rendered": {
                      "text": "    ),\n    tags = {\n        @Tag(name = \"AKHQ\", description = \"AKHQ api\"),\n        @Tag(name = \"node\", description = \"Kafka Node api\"),\n        @Tag(name = \"topic\", description = \"Kafka Topic api\"),\n        @Tag(name = \"topic data\", description = \"Kafka Topic data api\"),\n        @Tag(name = \"consumer group\", description = \"Kafka Consumer group api\"),\n",
                      "markdown": "`    ),\n    tags = {\n        @Tag(name = \"AKHQ\", description = \"AKHQ api\"),\n        @Tag(name = \"node\", description = \"Kafka Node api\"),\n        @Tag(name = \"topic\", description = \"Kafka Topic api\"),\n        @Tag(name = \"topic data\", description = \"Kafka Topic data api\"),\n        @Tag(name = \"consumer group\", description = \"Kafka Consumer group api\"),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/resources/application.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 46,
                  "endLine": 7,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  io:\n    watch:\n      paths: src/main\n      restart: false # enabled dev server with env vars MICRONAUT_IO_WATCH_RESTART=true\n  server:\n    thread-selection: AUTO\n    max-request-size: 10485760\n",
                    "rendered": {
                      "text": "  io:\n    watch:\n      paths: src/main\n      restart: false # enabled dev server with env vars MICRONAUT_IO_WATCH_RESTART=true\n  server:\n    thread-selection: AUTO\n    max-request-size: 10485760\n",
                      "markdown": "`  io:\n    watch:\n      paths: src/main\n      restart: false # enabled dev server with env vars MICRONAUT_IO_WATCH_RESTART=true\n  server:\n    thread-selection: AUTO\n    max-request-size: 10485760\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/mapper/OidcUserDetailsMapperTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 54,
                  "endLine": 130,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(\"clerical1\", username);\n",
                    "rendered": {
                      "text": "        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(\"clerical1\", username);\n",
                      "markdown": "`        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(\"clerical1\", username);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/mapper/OidcUserDetailsMapperTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 63,
                  "endLine": 129,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n",
                    "rendered": {
                      "text": "        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n",
                      "markdown": "`        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/mapper/OidcUserDetailsMapperTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 60,
                  "endLine": 128,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n",
                    "rendered": {
                      "text": "        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n",
                      "markdown": "`        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/mapper/OidcUserDetailsMapperTest.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 66,
                  "endLine": 127,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\n        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n",
                    "rendered": {
                      "text": "\n        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n",
                      "markdown": "`\n        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/mapper/OidcUserDetailsMapperTest.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 54,
                  "endLine": 111,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(\"clerical1\", username);\n",
                    "rendered": {
                      "text": "        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(\"clerical1\", username);\n",
                      "markdown": "`        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(\"clerical1\", username);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/mapper/OidcUserDetailsMapperTest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 63,
                  "endLine": 110,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n",
                    "rendered": {
                      "text": "        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n",
                      "markdown": "`        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n        String username = mapper.getUsername(provider, jwtOpenIdClaims);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/mapper/OidcUserDetailsMapperTest.java"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 60,
                  "endLine": 109,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n",
                    "rendered": {
                      "text": "        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n",
                      "markdown": "`        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/mapper/OidcUserDetailsMapperTest.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 66,
                  "endLine": 108,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\n        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n",
                    "rendered": {
                      "text": "\n        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n",
                      "markdown": "`\n        List<String> oidcGroups = mapper.getOidcGroups(provider, jwtOpenIdClaims);\n        Assertions.assertEquals(4, oidcGroups.size());\n        Assertions.assertEquals(\"default-roles-ttcntt\", oidcGroups.get(0));\n        Assertions.assertEquals(\"offline_access\", oidcGroups.get(1));\n        Assertions.assertEquals(\"uma_authorization\", oidcGroups.get(2));\n        Assertions.assertEquals(\"clerical\", oidcGroups.get(3));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 118,
                  "endLine": 217,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(0));\n    }\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(0));\n    }\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(0));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 96,
                  "endLine": 217,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(0));\n    }\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(0));\n    }\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(0));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 57,
                  "endLine": 215,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 25,
                  "endLine": 191,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 25,
                  "endLine": 189,
                  "endColumn": 30,
                  "snippet": {
                    "text": ");\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain",
                    "rendered": {
                      "text": ");\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain",
                      "markdown": "`);\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 25,
                  "endLine": 187,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n",
                    "rendered": {
                      "text": "\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n",
                      "markdown": "`\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 27,
                  "endLine": 186,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 28,
                  "endLine": 185,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n",
                      "markdown": "`        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 25,
                  "endLine": 182,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 25,
                  "endLine": 180,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                    "rendered": {
                      "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                      "markdown": "`   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      `"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 25,
                  "endLine": 178,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 27,
                  "endLine": 177,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 28,
                  "endLine": 176,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 118,
                  "endLine": 173,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 96,
                  "endLine": 173,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 58,
                  "endLine": 171,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 25,
                  "endLine": 146,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 25,
                  "endLine": 144,
                  "endColumn": 30,
                  "snippet": {
                    "text": ");\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain",
                    "rendered": {
                      "text": ");\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain",
                      "markdown": "`);\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 25,
                  "endLine": 142,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n",
                    "rendered": {
                      "text": "\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n",
                      "markdown": "`\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 27,
                  "endLine": 141,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 28,
                  "endLine": 140,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n",
                      "markdown": "`        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(groups.get(\"operator\").size(), 2);\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 25,
                  "endLine": 137,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 25,
                  "endLine": 135,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                    "rendered": {
                      "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                      "markdown": "`   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      `"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 25,
                  "endLine": 133,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 27,
                  "endLine": 132,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 28,
                  "endLine": 131,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 118,
                  "endLine": 128,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 96,
                  "endLine": 128,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 57,
                  "endLine": 126,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 25,
                  "endLine": 100,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 25,
                  "endLine": 98,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                    "rendered": {
                      "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                      "markdown": "`   assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      `"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 25,
                  "endLine": 96,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 27,
                  "endLine": 95,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 28,
                  "endLine": 94,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 118,
                  "endLine": 91,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 96,
                  "endLine": 91,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 57,
                  "endLine": 89,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 89,
                  "endLine": 232,
                  "endColumn": 97,
                  "snippet": {
                    "text": "\n        AuthenticationException authenticationException = assertThrows(AuthenticationException.class, () -> {\n            Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                    \"user\",\n                    \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "\n        AuthenticationException authenticationException = assertThrows(AuthenticationException.class, () -> {\n            Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                    \"user\",\n                    \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`\n        AuthenticationException authenticationException = assertThrows(AuthenticationException.class, () -> {\n            Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                    \"user\",\n                    \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 89,
                  "endLine": 208,
                  "endColumn": 97,
                  "snippet": {
                    "text": "        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Collections.singletonList((\"ldap-other-group\"))));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Collections.singletonList((\"ldap-other-group\"))));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Collections.singletonList((\"ldap-other-group\"))));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 97,
                  "endLine": 164,
                  "endColumn": 105,
                  "snippet": {
                    "text": "        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(List.of(\"ldap-admin\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                        .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                                        \"user2\",\n                                        \"pass\"\n                        ))).blockingFirst();\n",
                    "rendered": {
                      "text": "        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(List.of(\"ldap-admin\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                        .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                                        \"user2\",\n                                        \"pass\"\n                        ))).blockingFirst();\n",
                      "markdown": "`        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(List.of(\"ldap-admin\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                        .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                                        \"user2\",\n                                        \"pass\"\n                        ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 89,
                  "endLine": 119,
                  "endColumn": 97,
                  "snippet": {
                    "text": "        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Arrays.asList(\"ldap-admin\", \"ldap-operator\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Arrays.asList(\"ldap-admin\", \"ldap-operator\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Arrays.asList(\"ldap-admin\", \"ldap-operator\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/LdapAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 89,
                  "endLine": 81,
                  "endColumn": 97,
                  "snippet": {
                    "text": "        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Collections.singletonList(\"ldap-admin\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Collections.singletonList(\"ldap-admin\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`        when(ldapGroupProcessor.process(anyString(), any(LdapSearchResult.class), any(SearchProvider.class))).thenReturn(new HashSet<>(Collections.singletonList(\"ldap-admin\")));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(ldapAuthenticationProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                      "markdown": "`        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 25,
                  "endLine": 66,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 27,
                  "endLine": 65,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 28,
                  "endLine": 64,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 118,
                  "endLine": 61,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 96,
                  "endLine": 61,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 71,
                  "endLine": 59,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"MyUser3!@yàhöù.com\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 25,
                  "endLine": 44,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                      "markdown": "`        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 25,
                  "endLine": 42,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 27,
                  "endLine": 41,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 28,
                  "endLine": 40,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(groups.get(\"limited\").size(), 3);\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 118,
                  "endLine": 37,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 96,
                  "endLine": 37,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 57,
                  "endLine": 35,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 67,
                  "endLine": 88,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    @Test\n    void failed_PasswordInvalid() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"invalid-pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "    @Test\n    void failed_PasswordInvalid() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"invalid-pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`    @Test\n    void failed_PasswordInvalid() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"invalid-pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 16,
                  "endLine": 86,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    }\n\n    @Test\n    void failed_PasswordInvalid() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n",
                    "rendered": {
                      "text": "    }\n\n    @Test\n    void failed_PasswordInvalid() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n",
                      "markdown": "`    }\n\n    @Test\n    void failed_PasswordInvalid() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 63,
                  "endLine": 75,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    @Test\n    void failed_UserNotFound() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"user2\",\n                \"pass2\"\n            ))).blockingFirst();\n",
                    "rendered": {
                      "text": "    @Test\n    void failed_UserNotFound() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"user2\",\n                \"pass2\"\n            ))).blockingFirst();\n",
                      "markdown": "`    @Test\n    void failed_UserNotFound() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"user2\",\n                \"pass2\"\n            ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 63,
                  "endLine": 51,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    @Test\n    void successCase() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"MyUser3!@yàhöù.com\",\n                \"pass\"\n            ))).blockingFirst();\n",
                    "rendered": {
                      "text": "    @Test\n    void successCase() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"MyUser3!@yàhöù.com\",\n                \"pass\"\n            ))).blockingFirst();\n",
                      "markdown": "`    @Test\n    void successCase() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"MyUser3!@yàhöù.com\",\n                \"pass\"\n            ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/BasicAuthAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 63,
                  "endLine": 28,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    @Test\n    void success() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n",
                    "rendered": {
                      "text": "    @Test\n    void success() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n",
                      "markdown": "`    @Test\n    void success() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 103,
                  "endLine": 258,
                  "endColumn": 108,
                  "snippet": {
                    "text": "        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(roles.keySet(), hasSize(0));\n    }\n",
                    "rendered": {
                      "text": "        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(roles.keySet(), hasSize(0));\n    }\n",
                      "markdown": "`        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(roles.keySet(), hasSize(0));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 81,
                  "endLine": 258,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(roles.keySet(), hasSize(0));\n    }\n",
                    "rendered": {
                      "text": "        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(roles.keySet(), hasSize(0));\n    }\n",
                      "markdown": "`        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(roles.keySet(), hasSize(0));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 57,
                  "endLine": 256,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                ))).blockingFirst();\n\n        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "                ))).blockingFirst();\n\n        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`                ))).blockingFirst();\n\n        assertTrue(response.isAuthenticated());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List> roles = (Map<String, List>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 25,
                  "endLine": 232,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 25,
                  "endLine": 230,
                  "endColumn": 30,
                  "snippet": {
                    "text": ");\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain",
                    "rendered": {
                      "text": ");\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain",
                      "markdown": "`);\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 25,
                  "endLine": 228,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n",
                    "rendered": {
                      "text": "\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n",
                      "markdown": "`\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 30,
                  "endLine": 227,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 28,
                  "endLine": 226,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n",
                      "markdown": "`        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 25,
                  "endLine": 223,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 25,
                  "endLine": 221,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                    "rendered": {
                      "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                      "markdown": "`   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      `"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 25,
                  "endLine": 219,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 30,
                  "endLine": 218,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 28,
                  "endLine": 217,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 118,
                  "endLine": 214,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 96,
                  "endLine": 214,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 58,
                  "endLine": 212,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user2\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 25,
                  "endLine": 186,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test-operator.*\", \"test-operator.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 25,
                  "endLine": 184,
                  "endColumn": 30,
                  "snippet": {
                    "text": ");\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain",
                    "rendered": {
                      "text": ");\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain",
                      "markdown": "`);\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            contain`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 25,
                  "endLine": 182,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n",
                    "rendered": {
                      "text": "\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n",
                      "markdown": "`\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\".*\", \".*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 30,
                  "endLine": 181,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n        assertThat(groups.get(\"operator\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 28,
                  "endLine": 180,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n",
                      "markdown": "`        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n        assertEquals(2, groups.get(\"operator\").size());\n        assertThat(groups.get(\"operator\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-data-admin\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 25,
                  "endLine": 177,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n\n        assertNotNull(groups.get(\"operator\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 25,
                  "endLine": 175,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                    "rendered": {
                      "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                      "markdown": "`   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      `"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 25,
                  "endLine": 173,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 30,
                  "endLine": 172,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 28,
                  "endLine": 171,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 118,
                  "endLine": 168,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 96,
                  "endLine": 168,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(2));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 57,
                  "endLine": 166,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 25,
                  "endLine": 140,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 25,
                  "endLine": 138,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                    "rendered": {
                      "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                      "markdown": "`   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      `"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 25,
                  "endLine": 136,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 30,
                  "endLine": 135,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 28,
                  "endLine": 134,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 118,
                  "endLine": 131,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 96,
                  "endLine": 131,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 57,
                  "endLine": 129,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 25,
                  "endLine": 104,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n",
                      "markdown": "`            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"test.*\", \"test.*\", \"user.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 25,
                  "endLine": 102,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                    "rendered": {
                      "text": "   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      ",
                      "markdown": "`   assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getPatterns).flatMap(Collection::stream).collect(Collectors.toList()),\n      `"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 25,
                  "endLine": 100,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n            containsInAnyOrder(\"pub.*\", \"pub.*\", \"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 30,
                  "endLine": 99,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getClusters).flatMap(Collection::stream).collect(Collectors.toList()),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 28,
                  "endLine": 98,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertEquals(3, groups.get(\"limited\").size());\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()),\n            containsInAnyOrder(\"topic-read\", \"topic-write\", \"schema-delete\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 118,
                  "endLine": 95,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 96,
                  "endLine": 95,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 57,
                  "endLine": 93,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 71,
                  "endLine": 271,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        Mockito.when(openIdTokenResponseValidator.validate(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any()))\n                .thenReturn(Optional.empty());\n        Flowable authenticateRequest = Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            )));\n",
                    "rendered": {
                      "text": "        Mockito.when(openIdTokenResponseValidator.validate(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any()))\n                .thenReturn(Optional.empty());\n        Flowable authenticateRequest = Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            )));\n",
                      "markdown": "`        Mockito.when(openIdTokenResponseValidator.validate(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any()))\n                .thenReturn(Optional.empty());\n        Flowable authenticateRequest = Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            )));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 75,
                  "endLine": 250,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 75,
                  "endLine": 205,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user2\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user2\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user2\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 75,
                  "endLine": 159,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 75,
                  "endLine": 122,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/authentication/OidcAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 75,
                  "endLine": 86,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Input/Input.test.jsx"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 39,
                  "endLine": 40,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    expect(error.textContent).toBe(props.error);\n  });\n\n  it('should not render error text', ({ expect }) => {\n    const error = container.querySelectorAll('#input-error');\n    expect(error).toHaveLength(0);\n  });\n",
                    "rendered": {
                      "text": "    expect(error.textContent).toBe(props.error);\n  });\n\n  it('should not render error text', ({ expect }) => {\n    const error = container.querySelectorAll('#input-error');\n    expect(error).toHaveLength(0);\n  });\n",
                      "markdown": "`    expect(error.textContent).toBe(props.error);\n  });\n\n  it('should not render error text', ({ expect }) => {\n    const error = container.querySelectorAll('#input-error');\n    expect(error).toHaveLength(0);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Input/Input.test.jsx"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 48,
                  "endLine": 33,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    expect(testText).toBe('checkTest');\n  });\n\n  it('should render error text successfully', ({ expect }) => {\n    props.error = 'test error';\n    const { container } = render(<Input {...props} />);\n    const error = container.querySelector('#input-error');\n",
                    "rendered": {
                      "text": "    expect(testText).toBe('checkTest');\n  });\n\n  it('should render error text successfully', ({ expect }) => {\n    props.error = 'test error';\n    const { container } = render(<Input {...props} />);\n    const error = container.querySelector('#input-error');\n",
                      "markdown": "`    expect(testText).toBe('checkTest');\n  });\n\n  it('should render error text successfully', ({ expect }) => {\n    props.error = 'test error';\n    const { container } = render(<Input {...props} />);\n    const error = container.querySelector('#input-error');\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Input/Input.test.jsx"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 42,
                  "endLine": 26,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    expect(input).toHaveLength(1);\n  });\n\n  it('should change text successfully', ({ expect }) => {\n    const input = container.querySelector(`#${props.name}`);\n    input.value = 'checkTest';\n    Simulate.change(input);\n",
                    "rendered": {
                      "text": "    expect(input).toHaveLength(1);\n  });\n\n  it('should change text successfully', ({ expect }) => {\n    const input = container.querySelector(`#${props.name}`);\n    input.value = 'checkTest';\n    Simulate.change(input);\n",
                      "markdown": "`    expect(input).toHaveLength(1);\n  });\n\n  it('should change text successfully', ({ expect }) => {\n    const input = container.querySelector(`#${props.name}`);\n    input.value = 'checkTest';\n    Simulate.change(input);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Input/Input.test.jsx"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 42,
                  "endLine": 21,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n  const { container } = render(<Input {...props} />);\n\n  it('should render text successfully', ({ expect }) => {\n    const input = container.querySelectorAll(`#${props.name}`);\n    expect(input).toHaveLength(1);\n  });\n",
                    "rendered": {
                      "text": "\n  const { container } = render(<Input {...props} />);\n\n  it('should render text successfully', ({ expect }) => {\n    const input = container.querySelectorAll(`#${props.name}`);\n    expect(input).toHaveLength(1);\n  });\n",
                      "markdown": "`\n  const { container } = render(<Input {...props} />);\n\n  it('should render text successfully', ({ expect }) => {\n    const input = container.querySelectorAll(`#${props.name}`);\n    expect(input).toHaveLength(1);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Select/Select.test.jsx"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 45,
                  "endLine": 29,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    expect(options.length).toBe(2);\n  });\n\n  it('should change options successfully', ({ expect }) => {\n    const options = container.querySelectorAll('option');\n    const opt1 = options.item(0);\n    const opt2 = options.item(1);\n",
                    "rendered": {
                      "text": "    expect(options.length).toBe(2);\n  });\n\n  it('should change options successfully', ({ expect }) => {\n    const options = container.querySelectorAll('option');\n    const opt1 = options.item(0);\n    const opt2 = options.item(1);\n",
                      "markdown": "`    expect(options.length).toBe(2);\n  });\n\n  it('should change options successfully', ({ expect }) => {\n    const options = container.querySelectorAll('option');\n    const opt1 = options.item(0);\n    const opt2 = options.item(1);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Select/Select.test.jsx"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 49,
                  "endLine": 24,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n  const { container } = render(<Select {...props} />);\n\n  it('should render radio group successfully', ({ expect }) => {\n    const options = container.querySelectorAll('option');\n    expect(options.length).toBe(2);\n  });\n",
                    "rendered": {
                      "text": "\n  const { container } = render(<Select {...props} />);\n\n  it('should render radio group successfully', ({ expect }) => {\n    const options = container.querySelectorAll('option');\n    expect(options.length).toBe(2);\n  });\n",
                      "markdown": "`\n  const { container } = render(<Select {...props} />);\n\n  it('should render radio group successfully', ({ expect }) => {\n    const options = container.querySelectorAll('option');\n    expect(options.length).toBe(2);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/RadioGroup/RadioGroup.test.jsx"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 45,
                  "endLine": 51,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    expect(options.length).toBe(4);\n  });\n\n  it('should change options successfully', ({ expect }) => {\n    const radio = container.querySelectorAll('input');\n\n    const opt1 = radio.item(1);\n",
                    "rendered": {
                      "text": "    expect(options.length).toBe(4);\n  });\n\n  it('should change options successfully', ({ expect }) => {\n    const radio = container.querySelectorAll('input');\n\n    const opt1 = radio.item(1);\n",
                      "markdown": "`    expect(options.length).toBe(4);\n  });\n\n  it('should change options successfully', ({ expect }) => {\n    const radio = container.querySelectorAll('input');\n\n    const opt1 = radio.item(1);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/RadioGroup/RadioGroup.test.jsx"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 49,
                  "endLine": 46,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n  const { container } = render(<RadioGroup {...props} />);\n\n  it('should render radio group successfully', ({ expect }) => {\n    const options = container.querySelectorAll('input');\n    expect(options.length).toBe(4);\n  });\n",
                    "rendered": {
                      "text": "\n  const { container } = render(<RadioGroup {...props} />);\n\n  it('should render radio group successfully', ({ expect }) => {\n    const options = container.querySelectorAll('input');\n    expect(options.length).toBe(4);\n  });\n",
                      "markdown": "`\n  const { container } = render(<RadioGroup {...props} />);\n\n  it('should render radio group successfully', ({ expect }) => {\n    const options = container.querySelectorAll('input');\n    expect(options.length).toBe(4);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Form.test.jsx"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 23,
                  "endLine": 30,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema', ({ expect }) => {\n    TestForm.state.formData = {\n      test: 'test'\n    };\n",
                    "rendered": {
                      "text": "    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema', ({ expect }) => {\n    TestForm.state.formData = {\n      test: 'test'\n    };\n",
                      "markdown": "`    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema', ({ expect }) => {\n    TestForm.state.formData = {\n      test: 'test'\n    };\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Form.test.jsx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 23,
                  "endLine": 20,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema property', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 'testinho ' });\n    expect(validatePropertyResponse).not.toBe(null);\n  });\n",
                    "rendered": {
                      "text": "    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema property', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 'testinho ' });\n    expect(validatePropertyResponse).not.toBe(null);\n  });\n",
                      "markdown": "`    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema property', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 'testinho ' });\n    expect(validatePropertyResponse).not.toBe(null);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Form.test.jsx"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 47,
                  "endLine": 30,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema', ({ expect }) => {\n    TestForm.state.formData = {\n      test: 'test'\n    };\n",
                    "rendered": {
                      "text": "    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema', ({ expect }) => {\n    TestForm.state.formData = {\n      test: 'test'\n    };\n",
                      "markdown": "`    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema', ({ expect }) => {\n    TestForm.state.formData = {\n      test: 'test'\n    };\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Form.test.jsx"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 46,
                  "endLine": 25,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    expect(validatePropertyResponse).not.toBe(null);\n  });\n\n  it('should validate schema successfully', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validate();\n    expect(validatePropertyResponse).toBe(null);\n  });\n",
                    "rendered": {
                      "text": "    expect(validatePropertyResponse).not.toBe(null);\n  });\n\n  it('should validate schema successfully', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validate();\n    expect(validatePropertyResponse).toBe(null);\n  });\n",
                      "markdown": "`    expect(validatePropertyResponse).not.toBe(null);\n  });\n\n  it('should validate schema successfully', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validate();\n    expect(validatePropertyResponse).toBe(null);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Form.test.jsx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 56,
                  "endLine": 20,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema property', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 'testinho ' });\n    expect(validatePropertyResponse).not.toBe(null);\n  });\n",
                    "rendered": {
                      "text": "    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema property', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 'testinho ' });\n    expect(validatePropertyResponse).not.toBe(null);\n  });\n",
                      "markdown": "`    expect(validatePropertyResponse).toBe(null);\n  });\n\n  it('should send error at validate schema property', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 'testinho ' });\n    expect(validatePropertyResponse).not.toBe(null);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/components/Form/Form.test.jsx"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 55,
                  "endLine": 15,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    test: 12\n  };\n\n  it('should validate schema property successfully', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 12 });\n    expect(validatePropertyResponse).toBe(null);\n  });\n",
                    "rendered": {
                      "text": "    test: 12\n  };\n\n  it('should validate schema property successfully', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 12 });\n    expect(validatePropertyResponse).toBe(null);\n  });\n",
                      "markdown": "`    test: 12\n  };\n\n  it('should validate schema property successfully', ({ expect }) => {\n    let validatePropertyResponse = TestForm.validateProperty({ name: 'test', value: 12 });\n    expect(validatePropertyResponse).toBe(null);\n  });\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Node/NodeDetail/Node.jsx"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 5,
                  "endLine": 10,
                  "endColumn": 11,
                  "snippet": {
                    "text": "import { Link } from 'react-router-dom';\nimport { withRouter } from '../../../utils/withRouter';\n\nclass Node extends Component {\n  state = {\n    host: '',\n    port: '',\n",
                    "rendered": {
                      "text": "import { Link } from 'react-router-dom';\nimport { withRouter } from '../../../utils/withRouter';\n\nclass Node extends Component {\n  state = {\n    host: '',\n    port: '',\n",
                      "markdown": "`import { Link } from 'react-router-dom';\nimport { withRouter } from '../../../utils/withRouter';\n\nclass Node extends Component {\n  state = {\n    host: '',\n    port: '',\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Tail/index.jsx"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 6,
                  "endLine": 1,
                  "endColumn": 12,
                  "snippet": {
                    "text": "import Tail from './Tail';\n\nexport default Tail;\n",
                    "rendered": {
                      "text": "import Tail from './Tail';\n\nexport default Tail;\n",
                      "markdown": "`import Tail from './Tail';\n\nexport default Tail;\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Tail/Tail.jsx"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 26,
                  "endLine": 65,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      });\n    } else {\n      this.setState({ topics: [], selectedTopics: topics }, () => {\n        if (query && query.get('topicId')) {\n          this.setState({ selectedStatus: STATUS.STARTED });\n          this.startEventSource();\n        }\n",
                    "rendered": {
                      "text": "      });\n    } else {\n      this.setState({ topics: [], selectedTopics: topics }, () => {\n        if (query && query.get('topicId')) {\n          this.setState({ selectedStatus: STATUS.STARTED });\n          this.startEventSource();\n        }\n",
                      "markdown": "`      });\n    } else {\n      this.setState({ topics: [], selectedTopics: topics }, () => {\n        if (query && query.get('topicId')) {\n          this.setState({ selectedStatus: STATUS.STARTED });\n          this.startEventSource();\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Tail/Tail.jsx"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 26,
                  "endLine": 58,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    if (data) {\n      this.setState({ topics: data, selectedTopics: topics }, () => {\n        if (query && query.get('topicId')) {\n          this.setState({ selectedStatus: STATUS.STARTED });\n          this.startEventSource();\n        }\n",
                    "rendered": {
                      "text": "\n    if (data) {\n      this.setState({ topics: data, selectedTopics: topics }, () => {\n        if (query && query.get('topicId')) {\n          this.setState({ selectedStatus: STATUS.STARTED });\n          this.startEventSource();\n        }\n",
                      "markdown": "`\n    if (data) {\n      this.setState({ topics: data, selectedTopics: topics }, () => {\n        if (query && query.get('topicId')) {\n          this.setState({ selectedStatus: STATUS.STARTED });\n          this.startEventSource();\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Tail/Tail.jsx"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 21,
                  "endLine": 53,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    data = data.data;\n    let topics = [];\n    if (query && query.get('topicId')) {\n      topics = [query.get('topicId')];\n    }\n\n    if (data) {\n",
                    "rendered": {
                      "text": "    data = data.data;\n    let topics = [];\n    if (query && query.get('topicId')) {\n      topics = [query.get('topicId')];\n    }\n\n    if (data) {\n",
                      "markdown": "`    data = data.data;\n    let topics = [];\n    if (query && query.get('topicId')) {\n      topics = [query.get('topicId')];\n    }\n\n    if (data) {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Tail/Tail.jsx"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 22,
                  "endLine": 52,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    let data = await this.getApi(uriTopicsName(clusterId));\n    data = data.data;\n    let topics = [];\n    if (query && query.get('topicId')) {\n      topics = [query.get('topicId')];\n    }\n\n",
                    "rendered": {
                      "text": "    let data = await this.getApi(uriTopicsName(clusterId));\n    data = data.data;\n    let topics = [];\n    if (query && query.get('topicId')) {\n      topics = [query.get('topicId')];\n    }\n\n",
                      "markdown": "`    let data = await this.getApi(uriTopicsName(clusterId));\n    data = data.data;\n    let topics = [];\n    if (query && query.get('topicId')) {\n      topics = [query.get('topicId')];\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Tail/Tail.jsx"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 30,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nconst MAX_RECORDS = [50, 100, 250, 500, 1000, 2500];\n\nclass Tail extends Root {\n  state = {\n    search: '',\n    dropdownSearch: '',\n",
                    "rendered": {
                      "text": "\nconst MAX_RECORDS = [50, 100, 250, 500, 1000, 2500];\n\nclass Tail extends Root {\n  state = {\n    search: '',\n    dropdownSearch: '',\n",
                      "markdown": "`\nconst MAX_RECORDS = [50, 100, 250, 500, 1000, 2500];\n\nclass Tail extends Root {\n  state = {\n    search: '',\n    dropdownSearch: '',\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectList/ConnectList.jsx"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 58,
                  "endLine": 82,
                  "endColumn": 63,
                  "snippet": {
                    "text": "          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConnectDefinitions(false);\n",
                    "rendered": {
                      "text": "          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConnectDefinitions(false);\n",
                      "markdown": "`          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConnectDefinitions(false);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectList/ConnectList.jsx"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 29,
                  "endLine": 82,
                  "endColumn": 34,
                  "snippet": {
                    "text": "          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConnectDefinitions(false);\n",
                    "rendered": {
                      "text": "          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConnectDefinitions(false);\n",
                      "markdown": "`          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConnectDefinitions(false);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectList/ConnectList.jsx"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 39,
                  "endLine": 81,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n",
                    "rendered": {
                      "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n",
                      "markdown": "`        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectList/ConnectList.jsx"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 54,
                  "endLine": 54,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConnectDefinitions();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConnectDefinitions();\n",
                      "markdown": "`    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConnectDefinitions();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectList/ConnectList.jsx"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 25,
                  "endLine": 54,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConnectDefinitions();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConnectDefinitions();\n",
                      "markdown": "`    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConnectDefinitions();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectList/ConnectList.jsx"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 57,
                  "endLine": 53,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectList/ConnectList.jsx"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 35,
                  "endLine": 53,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectCreate/ConnectCreate.jsx"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 22,
                  "endLine": 87,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            def = Joi.number().required();\n            break;\n          case constants.TYPES.PASSWORD:\n            def = Joi.password().required();\n            break;\n          case constants.TYPES.BOOLEAN:\n            def = Joi.boolean().required();\n",
                    "rendered": {
                      "text": "            def = Joi.number().required();\n            break;\n          case constants.TYPES.PASSWORD:\n            def = Joi.password().required();\n            break;\n          case constants.TYPES.BOOLEAN:\n            def = Joi.boolean().required();\n",
                      "markdown": "`            def = Joi.number().required();\n            break;\n          case constants.TYPES.PASSWORD:\n            def = Joi.password().required();\n            break;\n          case constants.TYPES.BOOLEAN:\n            def = Joi.boolean().required();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectCreate/ConnectCreate.jsx"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 31,
                  "endLine": 86,
                  "endColumn": 39,
                  "snippet": {
                    "text": "          case constants.TYPES.SHORT:\n            def = Joi.number().required();\n            break;\n          case constants.TYPES.PASSWORD:\n            def = Joi.password().required();\n            break;\n          case constants.TYPES.BOOLEAN:\n",
                    "rendered": {
                      "text": "          case constants.TYPES.SHORT:\n            def = Joi.number().required();\n            break;\n          case constants.TYPES.PASSWORD:\n            def = Joi.password().required();\n            break;\n          case constants.TYPES.BOOLEAN:\n",
                      "markdown": "`          case constants.TYPES.SHORT:\n            def = Joi.number().required();\n            break;\n          case constants.TYPES.PASSWORD:\n            def = Joi.password().required();\n            break;\n          case constants.TYPES.BOOLEAN:\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBInfo/KsqlDBInfo.jsx"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 20,
                  "endLine": 33,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        value: info['kafkaClusterId']\n      },\n      {\n        title: 'Ksql service id',\n        value: info['ksqlServiceId']\n      }\n    ];\n",
                    "rendered": {
                      "text": "        value: info['kafkaClusterId']\n      },\n      {\n        title: 'Ksql service id',\n        value: info['ksqlServiceId']\n      }\n    ];\n",
                      "markdown": "`        value: info['kafkaClusterId']\n      },\n      {\n        title: 'Ksql service id',\n        value: info['ksqlServiceId']\n      }\n    ];\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicProduce/TopicProduce.test.jsx"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 51,
                  "endLine": 45,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    expect(headers.children.length).toBe(2);\n  });\n\n  it('should remove a header from headers list', ({ expect }) => {\n    const element = <TopicProduce />;\n\n    const { container, rerender } = render(element);\n",
                    "rendered": {
                      "text": "    expect(headers.children.length).toBe(2);\n  });\n\n  it('should remove a header from headers list', ({ expect }) => {\n    const element = <TopicProduce />;\n\n    const { container, rerender } = render(element);\n",
                      "markdown": "`    expect(headers.children.length).toBe(2);\n  });\n\n  it('should remove a header from headers list', ({ expect }) => {\n    const element = <TopicProduce />;\n\n    const { container, rerender } = render(element);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicProduce/TopicProduce.test.jsx"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 50,
                  "endLine": 31,
                  "endColumn": 58,
                  "snippet": {
                    "text": "});\n\ndescribe('TopicProduce', () => {\n  it('should add a new header to headers list', ({ expect }) => {\n    const element = <TopicProduce />;\n\n    const { container, rerender } = render(element);\n",
                    "rendered": {
                      "text": "});\n\ndescribe('TopicProduce', () => {\n  it('should add a new header to headers list', ({ expect }) => {\n    const element = <TopicProduce />;\n\n    const { container, rerender } = render(element);\n",
                      "markdown": "`});\n\ndescribe('TopicProduce', () => {\n  it('should add a new header to headers list', ({ expect }) => {\n    const element = <TopicProduce />;\n\n    const { container, rerender } = render(element);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicProduce/TopicProduce.test.jsx"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 22,
                  "endLine": 3,
                  "endColumn": 26,
                  "snippet": {
                    "text": "/*eslint-disable*/\nimport React from 'react';\nimport { describe, it, vi } from 'vitest';\nimport TopicProduce from './TopicProduce';\nimport { render } from '@testing-library/react';\n\n",
                    "rendered": {
                      "text": "/*eslint-disable*/\nimport React from 'react';\nimport { describe, it, vi } from 'vitest';\nimport TopicProduce from './TopicProduce';\nimport { render } from '@testing-library/react';\n\n",
                      "markdown": "`/*eslint-disable*/\nimport React from 'react';\nimport { describe, it, vi } from 'vitest';\nimport TopicProduce from './TopicProduce';\nimport { render } from '@testing-library/react';\n\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 42,
                  "endLine": 72,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n",
                    "rendered": {
                      "text": "  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n",
                      "markdown": "`  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 20,
                  "endLine": 18,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n",
                    "rendered": {
                      "text": "    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n",
                      "markdown": "`    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 20,
                  "endLine": 16,
                  "endColumn": 28,
                  "snippet": {
                    "text": "const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n",
                    "rendered": {
                      "text": "const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n",
                      "markdown": "`const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 26,
                  "snippet": {
                    "text": "// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n",
                    "rendered": {
                      "text": "// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n",
                      "markdown": "`// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 16,
                  "endLine": 46,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n",
                    "rendered": {
                      "text": "                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n",
                      "markdown": "`                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 16,
                  "endLine": 33,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n",
                    "rendered": {
                      "text": "        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n",
                      "markdown": "`        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 58,
                  "endLine": 115,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n",
                    "rendered": {
                      "text": "        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n",
                      "markdown": "`        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 15,
                  "endLine": 71,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n",
                    "rendered": {
                      "text": "    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n",
                      "markdown": "`    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "endLine": 66,
                  "endColumn": 26,
                  "snippet": {
                    "text": "}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n",
                    "rendered": {
                      "text": "}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n",
                      "markdown": "`}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 33,
                  "endLine": 61,
                  "endColumn": 42,
                  "snippet": {
                    "text": "      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n",
                    "rendered": {
                      "text": "      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n",
                      "markdown": "`      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 33,
                  "endLine": 47,
                  "endColumn": 39,
                  "snippet": {
                    "text": "              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n",
                    "rendered": {
                      "text": "              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n",
                      "markdown": "`              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 33,
                  "endLine": 34,
                  "endColumn": 42,
                  "snippet": {
                    "text": "          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n",
                    "rendered": {
                      "text": "          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n",
                      "markdown": "`          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/serviceWorker.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 43,
                  "endLine": 1,
                  "endColumn": 52,
                  "snippet": {
                    "text": "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n",
                    "rendered": {
                      "text": "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n",
                      "markdown": "`// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 4,
                  "endLine": 227,
                  "endColumn": 10,
                  "snippet": {
                    "text": "#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n",
                    "rendered": {
                      "text": "#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n",
                      "markdown": "`#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 27,
                  "endLine": 61,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n",
                    "rendered": {
                      "text": "#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n",
                      "markdown": "`#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 53,
                  "endLine": 36,
                  "endColumn": 58,
                  "snippet": {
                    "text": "#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n",
                    "rendered": {
                      "text": "#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n",
                      "markdown": "`#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 9,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 7,
                  "endLine": 245,
                  "endColumn": 12,
                  "snippet": {
                    "text": "eval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\n",
                    "rendered": {
                      "text": "eval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\n",
                      "markdown": "`eval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 7,
                  "endLine": 244,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n",
                    "rendered": {
                      "text": "\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n",
                      "markdown": "`\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 23,
                  "endLine": 229,
                  "endColumn": 30,
                  "snippet": {
                    "text": "#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n",
                    "rendered": {
                      "text": "#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n",
                      "markdown": "`#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 4,
                  "endLine": 227,
                  "endColumn": 10,
                  "snippet": {
                    "text": "#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n",
                    "rendered": {
                      "text": "#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n",
                      "markdown": "`#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 15,
                  "endLine": 218,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n",
                    "rendered": {
                      "text": "        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n",
                      "markdown": "`        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 32,
                  "endLine": 208,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n",
                    "rendered": {
                      "text": "# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n",
                      "markdown": "`# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 15,
                  "endLine": 61,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n",
                    "rendered": {
                      "text": "#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n",
                      "markdown": "`#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "endLine": 57,
                  "endColumn": 20,
                  "snippet": {
                    "text": "#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n",
                    "rendered": {
                      "text": "#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n",
                      "markdown": "`#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 12,
                  "endLine": 42,
                  "endColumn": 20,
                  "snippet": {
                    "text": "#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n",
                    "rendered": {
                      "text": "#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n",
                      "markdown": "`#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 70,
                  "endLine": 33,
                  "snippet": {
                    "text": "#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n",
                    "rendered": {
                      "text": "#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n",
                      "markdown": "`#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 7,
                  "endLine": 32,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n",
                    "rendered": {
                      "text": "#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n",
                      "markdown": "`#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 11,
                  "endLine": 30,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n",
                    "rendered": {
                      "text": "#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n",
                      "markdown": "`#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 69,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n",
                    "rendered": {
                      "text": "#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n",
                      "markdown": "`#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 19,
                  "endLine": 21,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n",
                    "rendered": {
                      "text": "\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n",
                      "markdown": "`\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/helm.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 123,
                  "endLine": 59,
                  "endColumn": 131,
                  "snippet": {
                    "text": "          bootstrap.servers: <your bootsrapservers:9096>\n          security.protocol: SASL_SSL\n          sasl.mechanism: SCRAM-SHA-512\n          sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"username\" password=\"password\";\n\ningress:\n  enabled: true\n",
                    "rendered": {
                      "text": "          bootstrap.servers: <your bootsrapservers:9096>\n          security.protocol: SASL_SSL\n          sasl.mechanism: SCRAM-SHA-512\n          sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"username\" password=\"password\";\n\ningress:\n  enabled: true\n",
                      "markdown": "`          bootstrap.servers: <your bootsrapservers:9096>\n          security.protocol: SASL_SSL\n          sasl.mechanism: SCRAM-SHA-512\n          sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"username\" password=\"password\";\n\ningress:\n  enabled: true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/helm.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 113,
                  "endLine": 59,
                  "endColumn": 121,
                  "snippet": {
                    "text": "          bootstrap.servers: <your bootsrapservers:9096>\n          security.protocol: SASL_SSL\n          sasl.mechanism: SCRAM-SHA-512\n          sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"username\" password=\"password\";\n\ningress:\n  enabled: true\n",
                    "rendered": {
                      "text": "          bootstrap.servers: <your bootsrapservers:9096>\n          security.protocol: SASL_SSL\n          sasl.mechanism: SCRAM-SHA-512\n          sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"username\" password=\"password\";\n\ningress:\n  enabled: true\n",
                      "markdown": "`          bootstrap.servers: <your bootsrapservers:9096>\n          security.protocol: SASL_SSL\n          sasl.mechanism: SCRAM-SHA-512\n          sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"username\" password=\"password\";\n\ningress:\n  enabled: true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/helm.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          groups:\n            - admin\n        - username: changeme\n          password: changeme\n          groups:\n            - reader\n    server:\n",
                    "rendered": {
                      "text": "          groups:\n            - admin\n        - username: changeme\n          password: changeme\n          groups:\n            - reader\n    server:\n",
                      "markdown": "`          groups:\n            - admin\n        - username: changeme\n          password: changeme\n          groups:\n            - reader\n    server:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/helm.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      default-group: no-roles        \n      basic-auth:\n        - username: changeme\n          password: changeme\n          groups:\n            - admin\n        - username: changeme\n",
                    "rendered": {
                      "text": "      default-group: no-roles        \n      basic-auth:\n        - username: changeme\n          password: changeme\n          groups:\n            - admin\n        - username: changeme\n",
                      "markdown": "`      default-group: no-roles        \n      basic-auth:\n        - username: changeme\n          password: changeme\n          groups:\n            - admin\n        - username: changeme\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/helm.md"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 37,
                  "endLine": 74,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    alb.ingress.kubernetes.io/load-balancer-attributes: 'routing.http2.enabled=true,idle_timeout.timeout_seconds=60'\n    alb.ingress.kubernetes.io/healthcheck-path: \"/api/me\"\n    alb.ingress.kubernetes.io/subnets: <your_subnets>\n    external-dns.alpha.kubernetes.io/hostname: \"akhq.domain\"\n    alb.ingress.kubernetes.io/certificate-arn: \"your_acm_here\"\n    alb.ingress.kubernetes.io/ssl-policy: \"ELBSecurityPolicy-TLS-1-2-2017-01\"\n    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: \"tls\"\n",
                    "rendered": {
                      "text": "    alb.ingress.kubernetes.io/load-balancer-attributes: 'routing.http2.enabled=true,idle_timeout.timeout_seconds=60'\n    alb.ingress.kubernetes.io/healthcheck-path: \"/api/me\"\n    alb.ingress.kubernetes.io/subnets: <your_subnets>\n    external-dns.alpha.kubernetes.io/hostname: \"akhq.domain\"\n    alb.ingress.kubernetes.io/certificate-arn: \"your_acm_here\"\n    alb.ingress.kubernetes.io/ssl-policy: \"ELBSecurityPolicy-TLS-1-2-2017-01\"\n    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: \"tls\"\n",
                      "markdown": "`    alb.ingress.kubernetes.io/load-balancer-attributes: 'routing.http2.enabled=true,idle_timeout.timeout_seconds=60'\n    alb.ingress.kubernetes.io/healthcheck-path: \"/api/me\"\n    alb.ingress.kubernetes.io/subnets: <your_subnets>\n    external-dns.alpha.kubernetes.io/hostname: \"akhq.domain\"\n    alb.ingress.kubernetes.io/certificate-arn: \"your_acm_here\"\n    alb.ingress.kubernetes.io/ssl-policy: \"ELBSecurityPolicy-TLS-1-2-2017-01\"\n    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: \"tls\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/helm.md"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 42,
                  "endLine": 70,
                  "snippet": {
                    "text": "    kubernetes.io/ingress.class: 'alb'\n    alb.ingress.kubernetes.io/group.name: \"akhq\"\n    alb.ingress.kubernetes.io/scheme: internal\n    alb.ingress.kubernetes.io/target-type: ip\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTPS\":443},{\"HTTPS\":80}]'\n    alb.ingress.kubernetes.io/load-balancer-attributes: 'routing.http2.enabled=true,idle_timeout.timeout_seconds=60'\n    alb.ingress.kubernetes.io/healthcheck-path: \"/api/me\"\n    alb.ingress.kubernetes.io/subnets: <your_subnets>\n",
                    "rendered": {
                      "text": "    kubernetes.io/ingress.class: 'alb'\n    alb.ingress.kubernetes.io/group.name: \"akhq\"\n    alb.ingress.kubernetes.io/scheme: internal\n    alb.ingress.kubernetes.io/target-type: ip\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTPS\":443},{\"HTTPS\":80}]'\n    alb.ingress.kubernetes.io/load-balancer-attributes: 'routing.http2.enabled=true,idle_timeout.timeout_seconds=60'\n    alb.ingress.kubernetes.io/healthcheck-path: \"/api/me\"\n    alb.ingress.kubernetes.io/subnets: <your_subnets>\n",
                      "markdown": "`    kubernetes.io/ingress.class: 'alb'\n    alb.ingress.kubernetes.io/group.name: \"akhq\"\n    alb.ingress.kubernetes.io/scheme: internal\n    alb.ingress.kubernetes.io/target-type: ip\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTPS\":443},{\"HTTPS\":80}]'\n    alb.ingress.kubernetes.io/load-balancer-attributes: 'routing.http2.enabled=true,idle_timeout.timeout_seconds=60'\n    alb.ingress.kubernetes.io/healthcheck-path: \"/api/me\"\n    alb.ingress.kubernetes.io/subnets: <your_subnets>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 63,
                  "endLine": 53,
                  "endColumn": 70,
                  "snippet": {
                    "text": "## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n\n",
                    "rendered": {
                      "text": "## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n\n",
                      "markdown": "`## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 22,
                  "endLine": 53,
                  "endColumn": 29,
                  "snippet": {
                    "text": "## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n\n",
                    "rendered": {
                      "text": "## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n\n",
                      "markdown": "`## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 18,
                  "endLine": 52,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n",
                    "rendered": {
                      "text": "\n## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n",
                      "markdown": "`\n## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\nThis will remove the AKHQ binaries and give you this error: `\n/usr/local/bin/docker-entrypoint.sh: 9: exec: ./akhq: not found`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 9,
                  "endLine": 50,
                  "endColumn": 16,
                  "snippet": {
                    "text": "* `CLASSPATH`: additional Java classpath entries. Must be used to specify the location of the TIBCO Avro client library\n  jar if a 'tibco' schema registry type is used\n\n## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\n",
                    "rendered": {
                      "text": "* `CLASSPATH`: additional Java classpath entries. Must be used to specify the location of the TIBCO Avro client library\n  jar if a 'tibco' schema registry type is used\n\n## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\n",
                      "markdown": "`* `CLASSPATH`: additional Java classpath entries. Must be used to specify the location of the TIBCO Avro client library\n  jar if a 'tibco' schema registry type is used\n\n## How to mount configuration file\n\nTake care when you mount configuration files to not remove akhq files located on /app.\nYou need to explicitly mount the `/app/application.yml` and not mount the `/app` directory.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 8,
                  "endLine": 42,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nIf you do not override the `JVM_OPTS_FILE`, the docker container will take the defaults one instead.\n\nThe AKHQ docker image supports 4 environment variables to handle configuration :\n* `AKHQ_CONFIGURATION`: a string that contains the full configuration in yml that will be written on\n  /app/configuration.yml on the container.\n* `MICRONAUT_APPLICATION_JSON`: a string that contains the full configuration in JSON format\n",
                    "rendered": {
                      "text": "\nIf you do not override the `JVM_OPTS_FILE`, the docker container will take the defaults one instead.\n\nThe AKHQ docker image supports 4 environment variables to handle configuration :\n* `AKHQ_CONFIGURATION`: a string that contains the full configuration in yml that will be written on\n  /app/configuration.yml on the container.\n* `MICRONAUT_APPLICATION_JSON`: a string that contains the full configuration in JSON format\n",
                      "markdown": "`\nIf you do not override the `JVM_OPTS_FILE`, the docker container will take the defaults one instead.\n\nThe AKHQ docker image supports 4 environment variables to handle configuration :\n* `AKHQ_CONFIGURATION`: a string that contains the full configuration in yml that will be written on\n  /app/configuration.yml on the container.\n* `MICRONAUT_APPLICATION_JSON`: a string that contains the full configuration in JSON format\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 47,
                  "endLine": 40,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      - /tmp/application.yml:/app/application.yml\n```\n\nIf you do not override the `JVM_OPTS_FILE`, the docker container will take the defaults one instead.\n\nThe AKHQ docker image supports 4 environment variables to handle configuration :\n* `AKHQ_CONFIGURATION`: a string that contains the full configuration in yml that will be written on\n",
                    "rendered": {
                      "text": "      - /tmp/application.yml:/app/application.yml\n```\n\nIf you do not override the `JVM_OPTS_FILE`, the docker container will take the defaults one instead.\n\nThe AKHQ docker image supports 4 environment variables to handle configuration :\n* `AKHQ_CONFIGURATION`: a string that contains the full configuration in yml that will be written on\n",
                      "markdown": "`      - /tmp/application.yml:/app/application.yml\n```\n\nIf you do not override the `JVM_OPTS_FILE`, the docker container will take the defaults one instead.\n\nThe AKHQ docker image supports 4 environment variables to handle configuration :\n* `AKHQ_CONFIGURATION`: a string that contains the full configuration in yml that will be written on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nOverride the `JVM_OPTS_FILE` with docker run:\n\n```sh\ndocker run -d \\\n    --env JVM_OPTS_FILE={{path-of-your-jvm.options-file}}\n    -p 8080:8080 \\\n    -v /tmp/application.yml:/app/application.yml \\\n",
                    "rendered": {
                      "text": "\nOverride the `JVM_OPTS_FILE` with docker run:\n\n```sh\ndocker run -d \\\n    --env JVM_OPTS_FILE={{path-of-your-jvm.options-file}}\n    -p 8080:8080 \\\n    -v /tmp/application.yml:/app/application.yml \\\n",
                      "markdown": "`\nOverride the `JVM_OPTS_FILE` with docker run:\n\n```sh\ndocker run -d \\\n    --env JVM_OPTS_FILE={{path-of-your-jvm.options-file}}\n    -p 8080:8080 \\\n    -v /tmp/application.yml:/app/application.yml \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 33,
                  "endLine": 15,
                  "endColumn": 41,
                  "snippet": {
                    "text": "your own with an Environment Variable. With the `JVM_OPTS_FILE` environment variable, you can override the jvm.options file by passing\nthe path of your file instead.\n\nOverride the `JVM_OPTS_FILE` with docker run:\n\n```sh\ndocker run -d \\\n",
                    "rendered": {
                      "text": "your own with an Environment Variable. With the `JVM_OPTS_FILE` environment variable, you can override the jvm.options file by passing\nthe path of your file instead.\n\nOverride the `JVM_OPTS_FILE` with docker run:\n\n```sh\ndocker run -d \\\n",
                      "markdown": "`your own with an Environment Variable. With the `JVM_OPTS_FILE` environment variable, you can override the jvm.options file by passing\nthe path of your file instead.\n\nOverride the `JVM_OPTS_FILE` with docker run:\n\n```sh\ndocker run -d \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 15,
                  "endLine": 11,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n## Run with another jvm.options file\n\nBy default, the docker container will run with a [jvm.options](https://github.com/tchiotludo/akhq/blob/dev/docker/app/jvm.options) file, you can override it with\nyour own with an Environment Variable. With the `JVM_OPTS_FILE` environment variable, you can override the jvm.options file by passing\nthe path of your file instead.\n\n",
                    "rendered": {
                      "text": "\n## Run with another jvm.options file\n\nBy default, the docker container will run with a [jvm.options](https://github.com/tchiotludo/akhq/blob/dev/docker/app/jvm.options) file, you can override it with\nyour own with an Environment Variable. With the `JVM_OPTS_FILE` environment variable, you can override the jvm.options file by passing\nthe path of your file instead.\n\n",
                      "markdown": "`\n## Run with another jvm.options file\n\nBy default, the docker container will run with a [jvm.options](https://github.com/tchiotludo/akhq/blob/dev/docker/app/jvm.options) file, you can override it with\nyour own with an Environment Variable. With the `JVM_OPTS_FILE` environment variable, you can override the jvm.options file by passing\nthe path of your file instead.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 15,
                  "endLine": 6,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n## Pass custom Java opts\n\nBy default, the docker container will allow a custom JVM options setting the environments vars `JAVA_OPTS`.\nFor example, if you want to change the default timezone, just add `-e \"JAVA_OPTS=-Duser.timezone=Europe/Paris\"`\n\n## Run with another jvm.options file\n",
                    "rendered": {
                      "text": "\n## Pass custom Java opts\n\nBy default, the docker container will allow a custom JVM options setting the environments vars `JAVA_OPTS`.\nFor example, if you want to change the default timezone, just add `-e \"JAVA_OPTS=-Duser.timezone=Europe/Paris\"`\n\n## Run with another jvm.options file\n",
                      "markdown": "`\n## Pass custom Java opts\n\nBy default, the docker container will allow a custom JVM options setting the environments vars `JAVA_OPTS`.\nFor example, if you want to change the default timezone, just add `-e \"JAVA_OPTS=-Duser.timezone=Europe/Paris\"`\n\n## Run with another jvm.options file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/configuration/docker.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 2,
                  "snippet": {
                    "text": "# Docker\n\n\n## Pass custom Java opts\n\n",
                    "rendered": {
                      "text": "# Docker\n\n\n## Pass custom Java opts\n\n",
                      "markdown": "`# Docker\n\n\n## Pass custom Java opts\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 30,
                  "endLine": 55,
                  "endColumn": 34,
                  "snippet": {
                    "text": ".yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in `Secret`\n  * Both values will be merged at startup\n* Apply the chart:\n```sh\nhelm install --name=akhq-release-name  .\n```\n",
                    "rendered": {
                      "text": ".yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in `Secret`\n  * Both values will be merged at startup\n* Apply the chart:\n```sh\nhelm install --name=akhq-release-name  .\n```\n",
                      "markdown": "`.yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in `Secret`\n  * Both values will be merged at startup\n* Apply the chart:\n```sh\nhelm install --name=akhq-release-name  .\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 9,
                  "snippet": {
                    "text": "uirements\n\n* Chart version >=0.1.1 requires Kubernetes version >=1.14\n* Chart version 0.1.0 works on previous Kubernetes versions\n```sh\nhelm install akhq akhq/akhq --version 0.1.0\n```\n\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be s",
                    "rendered": {
                      "text": "uirements\n\n* Chart version >=0.1.1 requires Kubernetes version >=1.14\n* Chart version 0.1.0 works on previous Kubernetes versions\n```sh\nhelm install akhq akhq/akhq --version 0.1.0\n```\n\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be s",
                      "markdown": "`uirements\n\n* Chart version >=0.1.1 requires Kubernetes version >=1.14\n* Chart version 0.1.0 works on previous Kubernetes versions\n```sh\nhelm install akhq akhq/akhq --version 0.1.0\n```\n\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be s`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 91,
                  "endLine": 5,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\nFirst you need a [configuration files](./configuration/README.md) in order to configure AKHQ connections to Kafka Brokers.\n\nConfiguration file default path is `/app/application.yml` (for YML file), so expected to be at the same folder as AKHQ application files. Configuration file path can target any path through `MICRONAUT_CONFIG_FILES` environment variable, for example: `MICRONAUT_CONFIG_FILES=/somepath/application.yml`.\n\n### Docker\n\n",
                    "rendered": {
                      "text": "\nFirst you need a [configuration files](./configuration/README.md) in order to configure AKHQ connections to Kafka Brokers.\n\nConfiguration file default path is `/app/application.yml` (for YML file), so expected to be at the same folder as AKHQ application files. Configuration file path can target any path through `MICRONAUT_CONFIG_FILES` environment variable, for example: `MICRONAUT_CONFIG_FILES=/somepath/application.yml`.\n\n### Docker\n\n",
                      "markdown": "`\nFirst you need a [configuration files](./configuration/README.md) in order to configure AKHQ connections to Kafka Brokers.\n\nConfiguration file default path is `/app/application.yml` (for YML file), so expected to be at the same folder as AKHQ application files. Configuration file path can target any path through `MICRONAUT_CONFIG_FILES` environment variable, for example: `MICRONAUT_CONFIG_FILES=/somepath/application.yml`.\n\n### Docker\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 95,
                  "endLine": 54,
                  "endColumn": 101,
                  "snippet": {
                    "text": "ation` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in `Secret`\n  * Both values will be merged at startup\n* Apply the chart:\n```sh\nhelm install --name=akhq-release-name  .\n```\n",
                    "rendered": {
                      "text": "ation` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in `Secret`\n  * Both values will be merged at startup\n* Apply the chart:\n```sh\nhelm install --name=akhq-release-name  .\n```\n",
                      "markdown": "`ation` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in `Secret`\n  * Both values will be merged at startup\n* Apply the chart:\n```sh\nhelm install --name=akhq-release-name  .\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 79,
                  "endLine": 53,
                  "endColumn": 85,
                  "snippet": {
                    "text": "ing git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/bl",
                    "rendered": {
                      "text": "ing git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/bl",
                      "markdown": "`ing git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n  * `secrets` values will contains all sensitive configurations (with credentials) that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/bl`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "endLine": 50,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n",
                    "rendered": {
                      "text": "\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n",
                      "markdown": "`\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n* Update helm values located in [values.yaml](https://github.com/tchiotludo/akhq/blob/dev/helm/akhq/values.yaml)\n  * `configuration` values will contains all related configuration that you can find in [application.example.yml](https://github.com/tchiotludo/akhq/blob/dev/application.example.yml) and will be store in a `ConfigMap`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 48,
                  "snippet": {
                    "text": "helm install akhq akhq/akhq --version 0.1.0\n```\n\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n",
                    "rendered": {
                      "text": "helm install akhq akhq/akhq --version 0.1.0\n```\n\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n",
                      "markdown": "`helm install akhq akhq/akhq --version 0.1.0\n```\n\n### Using git\n* Clone the repository:\n```sh\ngit clone https://github.com/tchiotludo/akhq && cd akhq/helm/akhq\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 5,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n### Docker\n\n```sh\ndocker run -d \\\n    -p 8080:8080 \\\n    -v /tmp/application.yml:/app/application.yml \\\n    tchiotludo/akhq\n",
                    "rendered": {
                      "text": "\n### Docker\n\n```sh\ndocker run -d \\\n    -p 8080:8080 \\\n    -v /tmp/application.yml:/app/application.yml \\\n    tchiotludo/akhq\n",
                      "markdown": "`\n### Docker\n\n```sh\ndocker run -d \\\n    -p 8080:8080 \\\n    -v /tmp/application.yml:/app/application.yml \\\n    tchiotludo/akhq\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/installation.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 8,
                  "snippet": {
                    "text": "\nConfiguration file default path is `/app/application.yml` (for YML file), so expected to be at the same folder as AKHQ application files. Configuration file path can target any path through `MICRONAUT_CONFIG_FILES` environment variable, for example: `MICRONAUT_CONFIG_FILES=/somepath/application.yml`.\n\n### Docker\n\n```sh\ndocker run -d \\\n    -p 8080:8080 \\\n",
                    "rendered": {
                      "text": "\nConfiguration file default path is `/app/application.yml` (for YML file), so expected to be at the same folder as AKHQ application files. Configuration file path can target any path through `MICRONAUT_CONFIG_FILES` environment variable, for example: `MICRONAUT_CONFIG_FILES=/somepath/application.yml`.\n\n### Docker\n\n```sh\ndocker run -d \\\n    -p 8080:8080 \\\n",
                      "markdown": "`\nConfiguration file default path is `/app/application.yml` (for YML file), so expected to be at the same folder as AKHQ application files. Configuration file path can target any path through `MICRONAUT_CONFIG_FILES` environment variable, for example: `MICRONAUT_CONFIG_FILES=/somepath/application.yml`.\n\n### Docker\n\n```sh\ndocker run -d \\\n    -p 8080:8080 \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/debug.md"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/io.micronaut.security\n\n\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/org.akhq.configs\n```\n",
                    "rendered": {
                      "text": "       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/io.micronaut.security\n\n\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/org.akhq.configs\n```\n",
                      "markdown": "`       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/io.micronaut.security\n\n\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/org.akhq.configs\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/debug.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7,
                  "endLine": 29,
                  "endColumn": 5,
                  "snippet": {
                    "text": "## Debugging authentication\n\nDebugging auth can be done by increasing log level on Micronaut that handle most of the authentication part :\n```bash\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/io.micronaut.security\n\n",
                    "rendered": {
                      "text": "## Debugging authentication\n\nDebugging auth can be done by increasing log level on Micronaut that handle most of the authentication part :\n```bash\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/io.micronaut.security\n\n",
                      "markdown": "`## Debugging authentication\n\nDebugging auth can be done by increasing log level on Micronaut that handle most of the authentication part :\n```bash\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/io.micronaut.security\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/debug.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 19,
                  "endColumn": 5,
                  "snippet": {
                    "text": "## Debugging AKHQ performance issues\n\nYou can debug all query duration from AKHQ with this commands\n```bash\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/org.akhq\n```\n",
                    "rendered": {
                      "text": "## Debugging AKHQ performance issues\n\nYou can debug all query duration from AKHQ with this commands\n```bash\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/org.akhq\n```\n",
                      "markdown": "`## Debugging AKHQ performance issues\n\nYou can debug all query duration from AKHQ with this commands\n```bash\ncurl -i -X POST -H \"Content-Type: application/json\" \\\n       -d '{ \"configuredLevel\": \"TRACE\" }' \\\n       http://localhost:28081/loggers/org.akhq\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/debug.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 96,
                  "endLine": 9,
                  "endColumn": 101,
                  "snippet": {
                    "text": "You can disable it, change the port or restrict access only for authenticated users following micronaut configuration below.\n\n\n* `/info` [Info Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#infoEndpoint) with git status information.\n* `/health` [Health Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#healthEndpoint)\n* `/loggers` [Loggers Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#loggersEndpoint)\n* `/metrics` [Metrics Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#metricsEndpoint)\n",
                    "rendered": {
                      "text": "You can disable it, change the port or restrict access only for authenticated users following micronaut configuration below.\n\n\n* `/info` [Info Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#infoEndpoint) with git status information.\n* `/health` [Health Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#healthEndpoint)\n* `/loggers` [Loggers Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#loggersEndpoint)\n* `/metrics` [Metrics Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#metricsEndpoint)\n",
                      "markdown": "`You can disable it, change the port or restrict access only for authenticated users following micronaut configuration below.\n\n\n* `/info` [Info Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#infoEndpoint) with git status information.\n* `/health` [Health Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#healthEndpoint)\n* `/loggers` [Loggers Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#loggersEndpoint)\n* `/metrics` [Metrics Endpoint](https://docs.micronaut.io/snapshot/guide/index.html#metricsEndpoint)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 91,
                  "endLine": 44,
                  "endColumn": 96,
                  "snippet": {
                    "text": "  * Gradle (bundled with IDEA)\n  * [Lombok](https://plugins.jetbrains.com/plugin/6317-lombok)\n\nFirst run a Kafka server locally. Therefore, you need to start Zookeeper first by opening a CMD and doing:\n```bash\n$KAFKA_HOME\\bin\\windows\\zookeeper-server-start.bat config\\zookeper.properties\n$KAFKA_HOME\\bin\\windows\\kafka-server-start.bat config\\server.properties\n",
                    "rendered": {
                      "text": "  * Gradle (bundled with IDEA)\n  * [Lombok](https://plugins.jetbrains.com/plugin/6317-lombok)\n\nFirst run a Kafka server locally. Therefore, you need to start Zookeeper first by opening a CMD and doing:\n```bash\n$KAFKA_HOME\\bin\\windows\\zookeeper-server-start.bat config\\zookeper.properties\n$KAFKA_HOME\\bin\\windows\\kafka-server-start.bat config\\server.properties\n",
                      "markdown": "`  * Gradle (bundled with IDEA)\n  * [Lombok](https://plugins.jetbrains.com/plugin/6317-lombok)\n\nFirst run a Kafka server locally. Therefore, you need to start Zookeeper first by opening a CMD and doing:\n```bash\n$KAFKA_HOME\\bin\\windows\\zookeeper-server-start.bat config\\zookeper.properties\n$KAFKA_HOME\\bin\\windows\\kafka-server-start.bat config\\server.properties\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 7,
                  "endLine": 52,
                  "endColumn": 4,
                  "snippet": {
                    "text": "```\nA zero-config Kafka server should be up and running locally on your machine now. For further details or troubleshooting\nsee [Kafka Getting started guide](https://kafka.apache.org/quickstart). In the next step we're going to checkout AKHQ from GitHub:\n```bash\ngit clone https://github.com/tchiotludo/akhq.git\n```\n\nOpen the checked out directory in IntelliJ IDEA. The current version (0.25.0) of AKHQ is built with Java 17. If you\n",
                    "rendered": {
                      "text": "```\nA zero-config Kafka server should be up and running locally on your machine now. For further details or troubleshooting\nsee [Kafka Getting started guide](https://kafka.apache.org/quickstart). In the next step we're going to checkout AKHQ from GitHub:\n```bash\ngit clone https://github.com/tchiotludo/akhq.git\n```\n\nOpen the checked out directory in IntelliJ IDEA. The current version (0.25.0) of AKHQ is built with Java 17. If you\n",
                      "markdown": "````\nA zero-config Kafka server should be up and running locally on your machine now. For further details or troubleshooting\nsee [Kafka Getting started guide](https://kafka.apache.org/quickstart). In the next step we're going to checkout AKHQ from GitHub:\n```bash\ngit clone https://github.com/tchiotludo/akhq.git\n```\n\nOpen the checked out directory in IntelliJ IDEA. The current version (0.25.0) of AKHQ is built with Java 17. If you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n* OS: Windows (10)\n* Kafka (2.6.0) is downloaded and extracted, the installation directory is referred to as $KAFKA_HOME in the latter\n* Git is installed and configured\n* IntelliJ IDEA (Community Edition 2020.2) with the following plugins installed:\n  * Gradle (bundled with IDEA)\n  * [Lombok](https://plugins.jetbrains.com/plugin/6317-lombok)\n",
                    "rendered": {
                      "text": "\n* OS: Windows (10)\n* Kafka (2.6.0) is downloaded and extracted, the installation directory is referred to as $KAFKA_HOME in the latter\n* Git is installed and configured\n* IntelliJ IDEA (Community Edition 2020.2) with the following plugins installed:\n  * Gradle (bundled with IDEA)\n  * [Lombok](https://plugins.jetbrains.com/plugin/6317-lombok)\n",
                      "markdown": "`\n* OS: Windows (10)\n* Kafka (2.6.0) is downloaded and extracted, the installation directory is referred to as $KAFKA_HOME in the latter\n* Git is installed and configured\n* IntelliJ IDEA (Community Edition 2020.2) with the following plugins installed:\n  * Gradle (bundled with IDEA)\n  * [Lombok](https://plugins.jetbrains.com/plugin/6317-lombok)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 74,
                  "endLine": 34,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n## Setup local dev environment on Windows\n\nIn case you want to develop for AKHQ on Windows with IntelliJ IDEA without Docker (for any reason) you can follow this\nbrief guide. For the following steps, please, make sure you meet these requirements:\n\n* OS: Windows (10)\n",
                    "rendered": {
                      "text": "\n## Setup local dev environment on Windows\n\nIn case you want to develop for AKHQ on Windows with IntelliJ IDEA without Docker (for any reason) you can follow this\nbrief guide. For the following steps, please, make sure you meet these requirements:\n\n* OS: Windows (10)\n",
                      "markdown": "`\n## Setup local dev environment on Windows\n\nIn case you want to develop for AKHQ on Windows with IntelliJ IDEA without Docker (for any reason) you can follow this\nbrief guide. For the following steps, please, make sure you meet these requirements:\n\n* OS: Windows (10)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 12,
                  "endLine": 25,
                  "endColumn": 20,
                  "snippet": {
                    "text": "## Development Server\n\nA docker-compose is provided to start a development environment.\nJust install docker & docker-compose, clone the repository and issue a simple `docker-compose -f docker-compose-dev.yml up` to start a dev server.\nDev server is a java server & webpack-dev-server with live reload.\n\nThe configuration for the dev server is in `application.dev.yml`.\n",
                    "rendered": {
                      "text": "## Development Server\n\nA docker-compose is provided to start a development environment.\nJust install docker & docker-compose, clone the repository and issue a simple `docker-compose -f docker-compose-dev.yml up` to start a dev server.\nDev server is a java server & webpack-dev-server with live reload.\n\nThe configuration for the dev server is in `application.dev.yml`.\n",
                      "markdown": "`## Development Server\n\nA docker-compose is provided to start a development environment.\nJust install docker & docker-compose, clone the repository and issue a simple `docker-compose -f docker-compose-dev.yml up` to start a dev server.\nDev server is a java server & webpack-dev-server with live reload.\n\nThe configuration for the dev server is in `application.dev.yml`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 105,
                  "endLine": 17,
                  "endColumn": 7,
                  "snippet": {
                    "text": "Get it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\nOr build it with a `./gradlew shadowJar`, the jar will be located here `build/libs/akhq-*.jar`\n\n",
                    "rendered": {
                      "text": "Get it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\nOr build it with a `./gradlew shadowJar`, the jar will be located here `build/libs/akhq-*.jar`\n\n",
                      "markdown": "`Get it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\nOr build it with a `./gradlew shadowJar`, the jar will be located here `build/libs/akhq-*.jar`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 31,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\nOr build it with a `./gradlew shadowJar`, the jar will be located here `build/libs/akhq-*.jar`\n",
                    "rendered": {
                      "text": "\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\nOr build it with a `./gradlew shadowJar`, the jar will be located here `build/libs/akhq-*.jar`\n",
                      "markdown": "`\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\nOr build it with a `./gradlew shadowJar`, the jar will be located here `build/libs/akhq-*.jar`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 7,
                  "endLine": 15,
                  "endColumn": 7,
                  "snippet": {
                    "text": "The dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\n",
                    "rendered": {
                      "text": "The dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\n",
                      "markdown": "`The dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\ndocker cp akhq:/app/akhq.jar .\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 11,
                  "endLine": 13,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nThe dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\n",
                    "rendered": {
                      "text": "\nThe dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\n",
                      "markdown": "`\nThe dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n\nGet it from docker image\n```bash\ndocker pull tchiotludo/akhq:dev\ndocker run --rm --name=akhq -v /tmp/akhq/application-dev.yml:/app/application.yml -it tchiotludo/akhq:dev\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 7,
                  "endLine": 8,
                  "endColumn": 7,
                  "snippet": {
                    "text": "## Early dev image\n\nYou can have access to last feature / bug fix with docker dev image automatically build on tag `dev`\n```bash\ndocker pull tchiotludo/akhq:dev\n```\n\nThe dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n",
                    "rendered": {
                      "text": "## Early dev image\n\nYou can have access to last feature / bug fix with docker dev image automatically build on tag `dev`\n```bash\ndocker pull tchiotludo/akhq:dev\n```\n\nThe dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n",
                      "markdown": "`## Early dev image\n\nYou can have access to last feature / bug fix with docker dev image automatically build on tag `dev`\n```bash\ndocker pull tchiotludo/akhq:dev\n```\n\nThe dev jar is not publish on GitHub, you have 2 solutions to have the `dev` jar :\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/docs/dev.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 50,
                  "endLine": 6,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n## Early dev image\n\nYou can have access to last feature / bug fix with docker dev image automatically build on tag `dev`\n```bash\ndocker pull tchiotludo/akhq:dev\n```\n",
                    "rendered": {
                      "text": "\n## Early dev image\n\nYou can have access to last feature / bug fix with docker dev image automatically build on tag `dev`\n```bash\ndocker pull tchiotludo/akhq:dev\n```\n",
                      "markdown": "`\n## Early dev image\n\nYou can have access to last feature / bug fix with docker dev image automatically build on tag `dev`\n```bash\ndocker pull tchiotludo/akhq:dev\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/.vuepress/components/Index.vue"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 13,
                  "endLine": 547,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    computed: {\n    },\n    created() {\n        axios.get(\"/contributors.html\")\n            .then(value => {\n                this.contributors = value.data;\n            })\n",
                    "rendered": {
                      "text": "    computed: {\n    },\n    created() {\n        axios.get(\"/contributors.html\")\n            .then(value => {\n                this.contributors = value.data;\n            })\n",
                      "markdown": "`    computed: {\n    },\n    created() {\n        axios.get(\"/contributors.html\")\n            .then(value => {\n                this.contributors = value.data;\n            })\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/.vuepress/components/Index.vue"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 86,
                  "endLine": 450,
                  "endColumn": 92,
                  "snippet": {
                    "text": "                                        <div class=\"row\">\n                                            <div class=\"mu-about-info\">\n                                                <h3>Companies Supporting AKHQ</h3>\n                                                <p>These support consists in providing time for contribution to core\n                                                    contributors.</p>\n                                                <div class=\"mu-about-info-companies text-center\">\n                                                    <span class=\"mu-about-image\">\n",
                    "rendered": {
                      "text": "                                        <div class=\"row\">\n                                            <div class=\"mu-about-info\">\n                                                <h3>Companies Supporting AKHQ</h3>\n                                                <p>These support consists in providing time for contribution to core\n                                                    contributors.</p>\n                                                <div class=\"mu-about-info-companies text-center\">\n                                                    <span class=\"mu-about-image\">\n",
                      "markdown": "`                                        <div class=\"row\">\n                                            <div class=\"mu-about-info\">\n                                                <h3>Companies Supporting AKHQ</h3>\n                                                <p>These support consists in providing time for contribution to core\n                                                    contributors.</p>\n                                                <div class=\"mu-about-info-companies text-center\">\n                                                    <span class=\"mu-about-image\">\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/AvroWireFormatConverter.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 38,
                  "endLine": 43,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            value != null &&\n                contentTypeIter.hasNext() &&\n                value.length > 0 &&\n                ByteBuffer.wrap(value).get() != magicByte\n        ) {\n            String headerValue = new String(contentTypeIter.next().value());\n            Matcher matcher = AVRO_CONTENT_TYPE_PATTERN.matcher(headerValue);\n",
                    "rendered": {
                      "text": "            value != null &&\n                contentTypeIter.hasNext() &&\n                value.length > 0 &&\n                ByteBuffer.wrap(value).get() != magicByte\n        ) {\n            String headerValue = new String(contentTypeIter.next().value());\n            Matcher matcher = AVRO_CONTENT_TYPE_PATTERN.matcher(headerValue);\n",
                      "markdown": "`            value != null &&\n                contentTypeIter.hasNext() &&\n                value.length > 0 &&\n                ByteBuffer.wrap(value).get() != magicByte\n        ) {\n            String headerValue = new String(contentTypeIter.next().value());\n            Matcher matcher = AVRO_CONTENT_TYPE_PATTERN.matcher(headerValue);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/CustomDeserializerRepository.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 43,
                  "endLine": 39,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                new AvroToJsonDeserializer(this.kafkaModule.getConnection(clusterId).getDeserialization().getAvroRaw(), this.avroToJsonSerializer)\n            );\n        }\n        return this.avroToJsonDeserializers.get(clusterId);\n    }\n}\n",
                    "rendered": {
                      "text": "                new AvroToJsonDeserializer(this.kafkaModule.getConnection(clusterId).getDeserialization().getAvroRaw(), this.avroToJsonSerializer)\n            );\n        }\n        return this.avroToJsonDeserializers.get(clusterId);\n    }\n}\n",
                      "markdown": "`                new AvroToJsonDeserializer(this.kafkaModule.getConnection(clusterId).getDeserialization().getAvroRaw(), this.avroToJsonSerializer)\n            );\n        }\n        return this.avroToJsonDeserializers.get(clusterId);\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/CustomDeserializerRepository.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 47,
                  "endLine": 29,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                    new ProtobufToJsonDeserializer(this.kafkaModule.getConnection(clusterId).getDeserialization().getProtobuf())\n            );\n        }\n        return this.protobufToJsonDeserializers.get(clusterId);\n    }\n\n    public AvroToJsonDeserializer getAvroToJsonDeserializer(String clusterId) {\n",
                    "rendered": {
                      "text": "                    new ProtobufToJsonDeserializer(this.kafkaModule.getConnection(clusterId).getDeserialization().getProtobuf())\n            );\n        }\n        return this.protobufToJsonDeserializers.get(clusterId);\n    }\n\n    public AvroToJsonDeserializer getAvroToJsonDeserializer(String clusterId) {\n",
                      "markdown": "`                    new ProtobufToJsonDeserializer(this.kafkaModule.getConnection(clusterId).getDeserialization().getProtobuf())\n            );\n        }\n        return this.protobufToJsonDeserializers.get(clusterId);\n    }\n\n    public AvroToJsonDeserializer getAvroToJsonDeserializer(String clusterId) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConsumerGroupRepository.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 34,
                  "endLine": 97,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            .map(consumerGroupDescription -> new ConsumerGroup(\n                consumerGroupDescription,\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()),\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()).keySet().stream()\n                    .map(TopicPartition::topic)\n                    .distinct()\n                    .collect(Collectors.toMap(Function.identity(), topicTopicsOffsets::get))\n",
                    "rendered": {
                      "text": "            .map(consumerGroupDescription -> new ConsumerGroup(\n                consumerGroupDescription,\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()),\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()).keySet().stream()\n                    .map(TopicPartition::topic)\n                    .distinct()\n                    .collect(Collectors.toMap(Function.identity(), topicTopicsOffsets::get))\n",
                      "markdown": "`            .map(consumerGroupDescription -> new ConsumerGroup(\n                consumerGroupDescription,\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()),\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()).keySet().stream()\n                    .map(TopicPartition::topic)\n                    .distinct()\n                    .collect(Collectors.toMap(Function.identity(), topicTopicsOffsets::get))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConsumerGroupRepository.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 34,
                  "endLine": 96,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        return consumerDescriptions.values().stream()\n            .map(consumerGroupDescription -> new ConsumerGroup(\n                consumerGroupDescription,\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()),\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()).keySet().stream()\n                    .map(TopicPartition::topic)\n                    .distinct()\n",
                    "rendered": {
                      "text": "        return consumerDescriptions.values().stream()\n            .map(consumerGroupDescription -> new ConsumerGroup(\n                consumerGroupDescription,\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()),\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()).keySet().stream()\n                    .map(TopicPartition::topic)\n                    .distinct()\n",
                      "markdown": "`        return consumerDescriptions.values().stream()\n            .map(consumerGroupDescription -> new ConsumerGroup(\n                consumerGroupDescription,\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()),\n                groupGroupsOffsets.get(consumerGroupDescription.groupId()).keySet().stream()\n                    .map(TopicPartition::topic)\n                    .distinct()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConfigRepository.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 51,
                  "endLine": 108,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n                return !(current).equals(request.get(configFn.apply(config)));\n            })\n            .map(config -> config.withValue(request.get(configFn.apply(config))))\n            .collect(Collectors.toList());\n    }\n}",
                    "rendered": {
                      "text": "\n                return !(current).equals(request.get(configFn.apply(config)));\n            })\n            .map(config -> config.withValue(request.get(configFn.apply(config))))\n            .collect(Collectors.toList());\n    }\n}",
                      "markdown": "`\n                return !(current).equals(request.get(configFn.apply(config)));\n            })\n            .map(config -> config.withValue(request.get(configFn.apply(config))))\n            .collect(Collectors.toList());\n    }\n}`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConfigRepository.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 48,
                  "endLine": 106,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            .filter(config -> {\n                String current = config.getValue() == null ? \"\" : config.getValue();\n\n                return !(current).equals(request.get(configFn.apply(config)));\n            })\n            .map(config -> config.withValue(request.get(configFn.apply(config))))\n            .collect(Collectors.toList());\n",
                    "rendered": {
                      "text": "            .filter(config -> {\n                String current = config.getValue() == null ? \"\" : config.getValue();\n\n                return !(current).equals(request.get(configFn.apply(config)));\n            })\n            .map(config -> config.withValue(request.get(configFn.apply(config))))\n            .collect(Collectors.toList());\n",
                      "markdown": "`            .filter(config -> {\n                String current = config.getValue() == null ? \"\" : config.getValue();\n\n                return !(current).equals(request.get(configFn.apply(config)));\n            })\n            .map(config -> config.withValue(request.get(configFn.apply(config))))\n            .collect(Collectors.toList());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConfigRepository.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 12,
                  "endLine": 77,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            .collect(Collectors.toList());\n\n        this.find(clusterId, type, Collections.singletonList(name))\n            .get(name)\n            .stream()\n            .filter(config -> config.getSource().name().startsWith(\"DYNAMIC_\"))\n            .filter(config -> !configNamesToReset.contains(config.getName()))\n",
                    "rendered": {
                      "text": "            .collect(Collectors.toList());\n\n        this.find(clusterId, type, Collections.singletonList(name))\n            .get(name)\n            .stream()\n            .filter(config -> config.getSource().name().startsWith(\"DYNAMIC_\"))\n            .filter(config -> !configNamesToReset.contains(config.getName()))\n",
                      "markdown": "`            .collect(Collectors.toList());\n\n        this.find(clusterId, type, Collections.singletonList(name))\n            .get(name)\n            .stream()\n            .filter(config -> config.getSource().name().startsWith(\"DYNAMIC_\"))\n            .filter(config -> !configNamesToReset.contains(config.getName()))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConfigRepository.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 76,
                  "endLine": 37,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    }\n\n    public List<Config> findByTopic(String clusterId, String name) throws ExecutionException, InterruptedException {\n        return this.findByTopics(clusterId, Collections.singletonList(name)).get(name);\n    }\n\n    public Map<String, List<Config>> findByTopics(String clusterId, List<String> names) throws ExecutionException, InterruptedException {\n",
                    "rendered": {
                      "text": "    }\n\n    public List<Config> findByTopic(String clusterId, String name) throws ExecutionException, InterruptedException {\n        return this.findByTopics(clusterId, Collections.singletonList(name)).get(name);\n    }\n\n    public Map<String, List<Config>> findByTopics(String clusterId, List<String> names) throws ExecutionException, InterruptedException {\n",
                      "markdown": "`    }\n\n    public List<Config> findByTopic(String clusterId, String name) throws ExecutionException, InterruptedException {\n        return this.findByTopics(clusterId, Collections.singletonList(name)).get(name);\n    }\n\n    public Map<String, List<Config>> findByTopics(String clusterId, List<String> names) throws ExecutionException, InterruptedException {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/ConfigRepository.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 77,
                  "endLine": 22,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    AbstractKafkaWrapper kafkaWrapper;\n\n    public List<Config> findByBroker(String clusterId, Integer name) throws ExecutionException, InterruptedException {\n        return this.findByBrokers(clusterId, Collections.singletonList(name)).get(String.valueOf(name));\n    }\n\n    public Map<String, List<Config>> findByBrokers(String clusterId, List<Integer> names) throws ExecutionException, InterruptedException {\n",
                    "rendered": {
                      "text": "    AbstractKafkaWrapper kafkaWrapper;\n\n    public List<Config> findByBroker(String clusterId, Integer name) throws ExecutionException, InterruptedException {\n        return this.findByBrokers(clusterId, Collections.singletonList(name)).get(String.valueOf(name));\n    }\n\n    public Map<String, List<Config>> findByBrokers(String clusterId, List<Integer> names) throws ExecutionException, InterruptedException {\n",
                      "markdown": "`    AbstractKafkaWrapper kafkaWrapper;\n\n    public List<Config> findByBroker(String clusterId, Integer name) throws ExecutionException, InterruptedException {\n        return this.findByBrokers(clusterId, Collections.singletonList(name)).get(String.valueOf(name));\n    }\n\n    public Map<String, List<Config>> findByBrokers(String clusterId, List<Integer> names) throws ExecutionException, InterruptedException {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 45,
                  "endLine": 364,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            }\n            this.awsGlueKafkaDeserializers.put(clusterId, new GlueSchemaRegistryKafkaDeserializer(DefaultCredentialsProvider.builder().build(), params));\n        }\n        return this.awsGlueKafkaDeserializers.get(clusterId);\n    }\n\n    static {\n",
                    "rendered": {
                      "text": "            }\n            this.awsGlueKafkaDeserializers.put(clusterId, new GlueSchemaRegistryKafkaDeserializer(DefaultCredentialsProvider.builder().build(), params));\n        }\n        return this.awsGlueKafkaDeserializers.get(clusterId);\n    }\n\n    static {\n",
                      "markdown": "`            }\n            this.awsGlueKafkaDeserializers.put(clusterId, new GlueSchemaRegistryKafkaDeserializer(DefaultCredentialsProvider.builder().build(), params));\n        }\n        return this.awsGlueKafkaDeserializers.get(clusterId);\n    }\n\n    static {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 43,
                  "endLine": 336,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            this.kafkaProtoDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaProtoDeserializers.get(clusterId);\n    }\n\n    public SchemaRegistryType getSchemaRegistryType(String clusterId) {\n",
                    "rendered": {
                      "text": "            this.kafkaProtoDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaProtoDeserializers.get(clusterId);\n    }\n\n    public SchemaRegistryType getSchemaRegistryType(String clusterId) {\n",
                      "markdown": "`            this.kafkaProtoDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaProtoDeserializers.get(clusterId);\n    }\n\n    public SchemaRegistryType getSchemaRegistryType(String clusterId) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 42,
                  "endLine": 320,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            this.kafkaJsonDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaJsonDeserializers.get(clusterId);\n    }\n\n    public Deserializer getKafkaProtoDeserializer(String clusterId) {\n",
                    "rendered": {
                      "text": "            this.kafkaJsonDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaJsonDeserializers.get(clusterId);\n    }\n\n    public Deserializer getKafkaProtoDeserializer(String clusterId) {\n",
                      "markdown": "`            this.kafkaJsonDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaJsonDeserializers.get(clusterId);\n    }\n\n    public Deserializer getKafkaProtoDeserializer(String clusterId) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 42,
                  "endLine": 304,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            this.kafkaAvroDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaAvroDeserializers.get(clusterId);\n    }\n\n    public Deserializer getKafkaJsonDeserializer(String clusterId) {\n",
                    "rendered": {
                      "text": "            this.kafkaAvroDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaAvroDeserializers.get(clusterId);\n    }\n\n    public Deserializer getKafkaJsonDeserializer(String clusterId) {\n",
                      "markdown": "`            this.kafkaAvroDeserializers.put(clusterId, deserializer);\n        }\n\n        return this.kafkaAvroDeserializers.get(clusterId);\n    }\n\n    public Deserializer getKafkaJsonDeserializer(String clusterId) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 19,
                  "endLine": 236,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        auditModule.save(SchemaAuditEvent.deleteSchema(clusterId, subject, list.get(0)));\n\n        return list.get(0);\n    }\n\n    public int deleteVersion(String clusterId, String subject, int version) throws IOException, RestClientException {\n",
                    "rendered": {
                      "text": "\n        auditModule.save(SchemaAuditEvent.deleteSchema(clusterId, subject, list.get(0)));\n\n        return list.get(0);\n    }\n\n    public int deleteVersion(String clusterId, String subject, int version) throws IOException, RestClientException {\n",
                      "markdown": "`\n        auditModule.save(SchemaAuditEvent.deleteSchema(clusterId, subject, list.get(0)));\n\n        return list.get(0);\n    }\n\n    public int deleteVersion(String clusterId, String subject, int version) throws IOException, RestClientException {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 79,
                  "endLine": 234,
                  "endColumn": 84,
                  "snippet": {
                    "text": "            throw new IllegalArgumentException(\"Invalid subject '\" + subject + \"'\");\n        }\n\n        auditModule.save(SchemaAuditEvent.deleteSchema(clusterId, subject, list.get(0)));\n\n        return list.get(0);\n    }\n",
                    "rendered": {
                      "text": "            throw new IllegalArgumentException(\"Invalid subject '\" + subject + \"'\");\n        }\n\n        auditModule.save(SchemaAuditEvent.deleteSchema(clusterId, subject, list.get(0)));\n\n        return list.get(0);\n    }\n",
                      "markdown": "`            throw new IllegalArgumentException(\"Invalid subject '\" + subject + \"'\");\n        }\n\n        auditModule.save(SchemaAuditEvent.deleteSchema(clusterId, subject, list.get(0)));\n\n        return list.get(0);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 38,
                  "endLine": 133,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            return List.of();\n        }\n\n        return maybeRegistryRestClient.get()\n            .getAllVersionsById(id)\n            .stream()\n            .map(v -> new Schema(id, v.getSubject(), v.getVersion()))\n",
                    "rendered": {
                      "text": "            return List.of();\n        }\n\n        return maybeRegistryRestClient.get()\n            .getAllVersionsById(id)\n            .stream()\n            .map(v -> new Schema(id, v.getSubject(), v.getVersion()))\n",
                      "markdown": "`            return List.of();\n        }\n\n        return maybeRegistryRestClient.get()\n            .getAllVersionsById(id)\n            .stream()\n            .map(v -> new Schema(id, v.getSubject(), v.getVersion()))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 38,
                  "endLine": 103,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        if(maybeRegistryRestClient.isEmpty()){\n            return List.of();\n        }\n        return maybeRegistryRestClient.get()\n            .getAllSubjects()\n            .stream()\n            .filter(s -> isSearchMatch(search, s) && isMatchRegex(filters, s))\n",
                    "rendered": {
                      "text": "        if(maybeRegistryRestClient.isEmpty()){\n            return List.of();\n        }\n        return maybeRegistryRestClient.get()\n            .getAllSubjects()\n            .stream()\n            .filter(s -> isSearchMatch(search, s) && isMatchRegex(filters, s))\n",
                      "markdown": "`        if(maybeRegistryRestClient.isEmpty()){\n            return List.of();\n        }\n        return maybeRegistryRestClient.get()\n            .getAllSubjects()\n            .stream()\n            .filter(s -> isSearchMatch(search, s) && isMatchRegex(filters, s))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 125,
                  "endLine": 290,
                  "endColumn": 133,
                  "snippet": {
                    "text": "().getBasicAuthUsername() != null) {\n                        config.put(\"ftl.username\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername());\n                        config.put(\"ftl.password\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthPassword());\n                    }\n                    config.putAll(this.kafkaModule.getConnection(clusterId).getProperties());\n                    deserializer.configure(config, false);\n                } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodExcep",
                    "rendered": {
                      "text": "().getBasicAuthUsername() != null) {\n                        config.put(\"ftl.username\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername());\n                        config.put(\"ftl.password\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthPassword());\n                    }\n                    config.putAll(this.kafkaModule.getConnection(clusterId).getProperties());\n                    deserializer.configure(config, false);\n                } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodExcep",
                      "markdown": "`().getBasicAuthUsername() != null) {\n                        config.put(\"ftl.username\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername());\n                        config.put(\"ftl.password\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthPassword());\n                    }\n                    config.putAll(this.kafkaModule.getConnection(clusterId).getProperties());\n                    deserializer.configure(config, false);\n                } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodExcep`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 40,
                  "endLine": 290,
                  "endColumn": 48,
                  "snippet": {
                    "text": ";\n                    if (this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername() != null) {\n                        config.put(\"ftl.username\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername());\n                        config.put(\"ftl.password\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthPassword());\n                    }\n                    config.putAll(this.kafkaModule.getConnection(clusterId).getProperties());\n                    deserializer.configure(config, false);\n                } catch (Instantiat",
                    "rendered": {
                      "text": ";\n                    if (this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername() != null) {\n                        config.put(\"ftl.username\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername());\n                        config.put(\"ftl.password\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthPassword());\n                    }\n                    config.putAll(this.kafkaModule.getConnection(clusterId).getProperties());\n                    deserializer.configure(config, false);\n                } catch (Instantiat",
                      "markdown": "`;\n                    if (this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername() != null) {\n                        config.put(\"ftl.username\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthUsername());\n                        config.put(\"ftl.password\", this.kafkaModule.getConnection(clusterId).getSchemaRegistry().getBasicAuthPassword());\n                    }\n                    config.putAll(this.kafkaModule.getConnection(clusterId).getProperties());\n                    deserializer.configure(config, false);\n                } catch (Instantiat`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 72,
                  "endLine": 217,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        Schema latestVersion = getLatestVersion(clusterId, subject);\n\n        if (latestVersion.getId() != registerSchemaResponse.getId()) {\n            throw new IllegalArgumentException(\"Invalid id from registry expect \" + registerSchemaResponse.getId() + \" got last version \" + latestVersion.getId());\n        }\n\n        auditModule.save(SchemaAuditEvent.createOrUpdateSchema(clusterId, subject, latestVersion.getId(), latestVersion.getVersion()));\n",
                    "rendered": {
                      "text": "        Schema latestVersion = getLatestVersion(clusterId, subject);\n\n        if (latestVersion.getId() != registerSchemaResponse.getId()) {\n            throw new IllegalArgumentException(\"Invalid id from registry expect \" + registerSchemaResponse.getId() + \" got last version \" + latestVersion.getId());\n        }\n\n        auditModule.save(SchemaAuditEvent.createOrUpdateSchema(clusterId, subject, latestVersion.getId(), latestVersion.getVersion()));\n",
                      "markdown": "`        Schema latestVersion = getLatestVersion(clusterId, subject);\n\n        if (latestVersion.getId() != registerSchemaResponse.getId()) {\n            throw new IllegalArgumentException(\"Invalid id from registry expect \" + registerSchemaResponse.getId() + \" got last version \" + latestVersion.getId());\n        }\n\n        auditModule.save(SchemaAuditEvent.createOrUpdateSchema(clusterId, subject, latestVersion.getId(), latestVersion.getVersion()));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/SchemaRegistryRepository.java"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 69,
                  "endLine": 184,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    }\n\n    public Schema lookUpSubjectVersion(String clusterId, String subject, org.apache.avro.Schema schema, boolean deleted) throws IOException, RestClientException {\n        io.confluent.kafka.schemaregistry.client.rest.entities.Schema find = this.kafkaModule\n            .getRegistryRestClient(clusterId)\n            .lookUpSubjectVersion(schema.toString(), subject, deleted);\n\n",
                    "rendered": {
                      "text": "    }\n\n    public Schema lookUpSubjectVersion(String clusterId, String subject, org.apache.avro.Schema schema, boolean deleted) throws IOException, RestClientException {\n        io.confluent.kafka.schemaregistry.client.rest.entities.Schema find = this.kafkaModule\n            .getRegistryRestClient(clusterId)\n            .lookUpSubjectVersion(schema.toString(), subject, deleted);\n\n",
                      "markdown": "`    }\n\n    public Schema lookUpSubjectVersion(String clusterId, String subject, org.apache.avro.Schema schema, boolean deleted) throws IOException, RestClientException {\n        io.confluent.kafka.schemaregistry.client.rest.entities.Schema find = this.kafkaModule\n            .getRegistryRestClient(clusterId)\n            .lookUpSubjectVersion(schema.toString(), subject, deleted);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 1312,
                  "startColumn": 104,
                  "endLine": 1312,
                  "endColumn": 109,
                  "snippet": {
                    "text": "            for (Record record : records) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) < record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) > record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                }\n            }\n",
                    "rendered": {
                      "text": "            for (Record record : records) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) < record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) > record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                }\n            }\n",
                      "markdown": "`            for (Record record : records) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) < record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) > record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 1310,
                  "startColumn": 97,
                  "endLine": 1310,
                  "endColumn": 102,
                  "snippet": {
                    "text": "urn paginationLink(next);\n        }\n\n        public String pagination(List<Record> records) {\n            Map<Integer, Long> next = new HashMap<>(this.after);\n            for (Record record : records) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) < record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) > record.getOffset())) {\n                    ne",
                    "rendered": {
                      "text": "urn paginationLink(next);\n        }\n\n        public String pagination(List<Record> records) {\n            Map<Integer, Long> next = new HashMap<>(this.after);\n            for (Record record : records) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) < record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) > record.getOffset())) {\n                    ne",
                      "markdown": "`urn paginationLink(next);\n        }\n\n        public String pagination(List<Record> records) {\n            Map<Integer, Long> next = new HashMap<>(this.after);\n            for (Record record : records) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) < record.getOffset())) {\n                    next.put(record.getPartition(), record.getOffset());\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(record.getPartition()) || next.get(record.getPartition()) > record.getOffset())) {\n                    ne`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 98,
                  "endLine": 1299,
                  "endColumn": 103,
                  "snippet": {
                    "text": "            for (Map.Entry<Integer, SearchEvent.Offset> offset : offsets.entrySet()) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) < offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) > offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                }\n            }\n",
                    "rendered": {
                      "text": "            for (Map.Entry<Integer, SearchEvent.Offset> offset : offsets.entrySet()) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) < offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) > offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                }\n            }\n",
                      "markdown": "`            for (Map.Entry<Integer, SearchEvent.Offset> offset : offsets.entrySet()) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) < offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) > offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 1297,
                  "startColumn": 91,
                  "endLine": 1297,
                  "endColumn": 96,
                  "snippet": {
                    "text": "            Map<Integer, Long> next = new HashMap<>(this.after);\n\n            for (Map.Entry<Integer, SearchEvent.Offset> offset : offsets.entrySet()) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) < offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) > offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n",
                    "rendered": {
                      "text": "            Map<Integer, Long> next = new HashMap<>(this.after);\n\n            for (Map.Entry<Integer, SearchEvent.Offset> offset : offsets.entrySet()) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) < offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) > offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n",
                      "markdown": "`            Map<Integer, Long> next = new HashMap<>(this.after);\n\n            for (Map.Entry<Integer, SearchEvent.Offset> offset : offsets.entrySet()) {\n                if (this.sort == Sort.OLDEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) < offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n                } else if (this.sort == Sort.NEWEST && (!next.containsKey(offset.getKey()) || next.get(offset.getKey()) > offset.getValue().current)) {\n                    next.put(offset.getKey(), offset.getValue().current);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 1006,
                  "startColumn": 77,
                  "endLine": 1006,
                  "endColumn": 82,
                  "snippet": {
                    "text": "                    record.offset()\n                );\n\n                Record current = newRecord(record, options, state.getTopics().get(record.topic()));\n                if (matchFilters(options, current)) {\n                    list.add(current);\n                    log.trace(\n",
                    "rendered": {
                      "text": "                    record.offset()\n                );\n\n                Record current = newRecord(record, options, state.getTopics().get(record.topic()));\n                if (matchFilters(options, current)) {\n                    list.add(current);\n                    log.trace(\n",
                      "markdown": "`                    record.offset()\n                );\n\n                Record current = newRecord(record, options, state.getTopics().get(record.topic()));\n                if (matchFilters(options, current)) {\n                    list.add(current);\n                    log.trace(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 942,
                  "startColumn": 40,
                  "endLine": 942,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        }\n\n        private void updateProgress(Record record) {\n            Offset offset = this.offsets.get(record.getPartition());\n            offset.current = record.getOffset();\n        }\n\n",
                    "rendered": {
                      "text": "        }\n\n        private void updateProgress(Record record) {\n            Offset offset = this.offsets.get(record.getPartition());\n            offset.current = record.getOffset();\n        }\n\n",
                      "markdown": "`        }\n\n        private void updateProgress(Record record) {\n            Offset offset = this.offsets.get(record.getPartition());\n            offset.current = record.getOffset();\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 33,
                  "endLine": 740,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                emitter.onNext(currentEvent.end(searchEvent.getAfter()));\n            }\n            // More records than expected, send the records and then stop\n            else if (matchesCount.get() >= options.getSize()) {\n                currentEvent.emptyPoll = 666;\n                emitter.onNext(currentEvent.progress(options));\n            }\n",
                    "rendered": {
                      "text": "                emitter.onNext(currentEvent.end(searchEvent.getAfter()));\n            }\n            // More records than expected, send the records and then stop\n            else if (matchesCount.get() >= options.getSize()) {\n                currentEvent.emptyPoll = 666;\n                emitter.onNext(currentEvent.progress(options));\n            }\n",
                      "markdown": "`                emitter.onNext(currentEvent.end(searchEvent.getAfter()));\n            }\n            // More records than expected, send the records and then stop\n            else if (matchesCount.get() >= options.getSize()) {\n                currentEvent.emptyPoll = 666;\n                emitter.onNext(currentEvent.progress(options));\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 32,
                  "endLine": 713,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            List<Record> list = new ArrayList<>();\n\n            for (Record record : sortedRecords) {\n                if (matchesCount.get() >= options.size) {\n                    break;\n                }\n\n",
                    "rendered": {
                      "text": "            List<Record> list = new ArrayList<>();\n\n            for (Record record : sortedRecords) {\n                if (matchesCount.get() >= options.size) {\n                    break;\n                }\n\n",
                      "markdown": "`            List<Record> list = new ArrayList<>();\n\n            for (Record record : sortedRecords) {\n                if (matchesCount.get() >= options.size) {\n                    break;\n                }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 652,
                  "startColumn": 10,
                  "endLine": 652,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            partition,\n            key,\n            null\n        )).get();\n    }\n\n    public Flowable<Event<SearchEvent>> search(Topic topic, Options options) throws ExecutionException, InterruptedException {\n",
                    "rendered": {
                      "text": "            partition,\n            key,\n            null\n        )).get();\n    }\n\n    public Flowable<Event<SearchEvent>> search(Topic topic, Options options) throws ExecutionException, InterruptedException {\n",
                      "markdown": "`            partition,\n            key,\n            null\n        )).get();\n    }\n\n    public Flowable<Event<SearchEvent>> search(Topic topic, Options options) throws ExecutionException, InterruptedException {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 58,
                  "endLine": 638,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n        } else {\n            valueAsBytes = value.filter(Predicate.not(String::isEmpty)).map(String::getBytes).orElse(null);\n        }\n",
                    "rendered": {
                      "text": "        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n        } else {\n            valueAsBytes = value.filter(Predicate.not(String::isEmpty)).map(String::getBytes).orElse(null);\n        }\n",
                      "markdown": "`        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n        } else {\n            valueAsBytes = value.filter(Predicate.not(String::isEmpty)).map(String::getBytes).orElse(null);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 92,
                  "endLine": 636,
                  "endColumn": 97,
                  "snippet": {
                    "text": "        }\n\n        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n        } else {\n",
                    "rendered": {
                      "text": "        }\n\n        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n        } else {\n",
                      "markdown": "`        }\n\n        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n        } else {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 94,
                  "endLine": 635,
                  "endColumn": 99,
                  "snippet": {
                    "text": "            }\n        }\n\n        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n",
                    "rendered": {
                      "text": "            }\n        }\n\n        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n",
                      "markdown": "`            }\n        }\n\n        if (value.isPresent() && valueSchema.isPresent() && StringUtils.isNotEmpty(valueSchema.get())) {\n            Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, valueSchema.get());\n            SchemaSerializer valueSerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n            valueAsBytes = valueSerializer.serialize(value.get());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 108,
                  "endLine": 627,
                  "endColumn": 113,
                  "snippet": {
                    "text": "            }\n        } else {\n            try {\n                if (Topic.isCompacted(configRepository.findByTopic(clusterId, value.isEmpty() ? null : value.get()))) {\n                    throw new IllegalArgumentException(\"Key missing for produce onto compacted topic\");\n                }\n            } catch (ExecutionException ex) {\n",
                    "rendered": {
                      "text": "            }\n        } else {\n            try {\n                if (Topic.isCompacted(configRepository.findByTopic(clusterId, value.isEmpty() ? null : value.get()))) {\n                    throw new IllegalArgumentException(\"Key missing for produce onto compacted topic\");\n                }\n            } catch (ExecutionException ex) {\n",
                      "markdown": "`            }\n        } else {\n            try {\n                if (Topic.isCompacted(configRepository.findByTopic(clusterId, value.isEmpty() ? null : value.get()))) {\n                    throw new IllegalArgumentException(\"Key missing for produce onto compacted topic\");\n                }\n            } catch (ExecutionException ex) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 56,
                  "endLine": 621,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n            } else {\n                keyAsBytes = key.filter(Predicate.not(String::isEmpty)).map(String::getBytes).orElse(null);\n            }\n",
                    "rendered": {
                      "text": "            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n            } else {\n                keyAsBytes = key.filter(Predicate.not(String::isEmpty)).map(String::getBytes).orElse(null);\n            }\n",
                      "markdown": "`            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n            } else {\n                keyAsBytes = key.filter(Predicate.not(String::isEmpty)).map(String::getBytes).orElse(null);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 94,
                  "endLine": 619,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n        if (key.isPresent()) {\n            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n            } else {\n",
                    "rendered": {
                      "text": "\n        if (key.isPresent()) {\n            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n            } else {\n",
                      "markdown": "`\n        if (key.isPresent()) {\n            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n            } else {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 73,
                  "endLine": 618,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        byte[] valueAsBytes;\n\n        if (key.isPresent()) {\n            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n",
                    "rendered": {
                      "text": "        byte[] valueAsBytes;\n\n        if (key.isPresent()) {\n            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n",
                      "markdown": "`        byte[] valueAsBytes;\n\n        if (key.isPresent()) {\n            if (keySchema.isPresent() && StringUtils.isNotEmpty(keySchema.get())) {\n                Schema schema = schemaRegistryRepository.getLatestVersion(clusterId, keySchema.get());\n                SchemaSerializer keySerializer = serializerFactory.createSerializer(clusterId, schema.getId());\n                keyAsBytes = keySerializer.serialize(key.get());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 104,
                  "endLine": 599,
                  "endColumn": 109,
                  "snippet": {
                    "text": "    private void deleteRecords(String clusterId, Map<TopicPartition, RecordsToDelete> recordsToDelete) throws InterruptedException, ExecutionException {\n        var deleted = kafkaModule.getAdminClient(clusterId).deleteRecords(recordsToDelete).lowWatermarks();\n        for (Map.Entry<TopicPartition, KafkaFuture<DeletedRecords>> entry : deleted.entrySet()){\n            log.debug(entry.getKey().topic() + \" \" + entry.getKey().partition() + \" \" + entry.getValue().get().lowWatermark());\n        }\n    }\n\n",
                    "rendered": {
                      "text": "    private void deleteRecords(String clusterId, Map<TopicPartition, RecordsToDelete> recordsToDelete) throws InterruptedException, ExecutionException {\n        var deleted = kafkaModule.getAdminClient(clusterId).deleteRecords(recordsToDelete).lowWatermarks();\n        for (Map.Entry<TopicPartition, KafkaFuture<DeletedRecords>> entry : deleted.entrySet()){\n            log.debug(entry.getKey().topic() + \" \" + entry.getKey().partition() + \" \" + entry.getValue().get().lowWatermark());\n        }\n    }\n\n",
                      "markdown": "`    private void deleteRecords(String clusterId, Map<TopicPartition, RecordsToDelete> recordsToDelete) throws InterruptedException, ExecutionException {\n        var deleted = kafkaModule.getAdminClient(clusterId).deleteRecords(recordsToDelete).lowWatermarks();\n        for (Map.Entry<TopicPartition, KafkaFuture<DeletedRecords>> entry : deleted.entrySet()){\n            log.debug(entry.getKey().topic() + \" \" + entry.getKey().partition() + \" \" + entry.getValue().get().lowWatermark());\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 12,
                  "endLine": 547,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                    ))\n                    .collect(Collectors.toList())\n            ))\n            .get();\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "                    ))\n                    .collect(Collectors.toList())\n            ))\n            .get();\n    }\n\n    /**\n",
                      "markdown": "`                    ))\n                    .collect(Collectors.toList())\n            ))\n            .get();\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 74,
                  "endLine": 511,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        // Distinguish between single record produce, and multiple messages\n        if (Boolean.TRUE.equals(multiMessage) && value.isPresent()) {\n            // Split key-value pairs and produce them\n            for (KeyValue<String, String> kvPair : splitMultiMessage(value.get(), keyValueSeparator.orElseThrow())) {\n                produceResults.add(produce(clusterId, topic, Optional.of(kvPair.getValue()), headers, Optional.of(kvPair.getKey()),\n                    partition, timestamp, keySchema, valueSchema));\n            }\n",
                    "rendered": {
                      "text": "        // Distinguish between single record produce, and multiple messages\n        if (Boolean.TRUE.equals(multiMessage) && value.isPresent()) {\n            // Split key-value pairs and produce them\n            for (KeyValue<String, String> kvPair : splitMultiMessage(value.get(), keyValueSeparator.orElseThrow())) {\n                produceResults.add(produce(clusterId, topic, Optional.of(kvPair.getValue()), headers, Optional.of(kvPair.getKey()),\n                    partition, timestamp, keySchema, valueSchema));\n            }\n",
                      "markdown": "`        // Distinguish between single record produce, and multiple messages\n        if (Boolean.TRUE.equals(multiMessage) && value.isPresent()) {\n            // Split key-value pairs and produce them\n            for (KeyValue<String, String> kvPair : splitMultiMessage(value.get(), keyValueSeparator.orElseThrow())) {\n                produceResults.add(produce(clusterId, topic, Optional.of(kvPair.getValue()), headers, Optional.of(kvPair.getKey()),\n                    partition, timestamp, keySchema, valueSchema));\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 68,
                  "endLine": 443,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        Field field = consumer.getClass().getDeclaredField(\"client\");\n        field.setAccessible(true);\n\n        ConsumerNetworkClient client = (ConsumerNetworkClient) field.get(consumer);\n\n        while(!client.hasReadyNodes(System.currentTimeMillis())) {\n            Thread.sleep(100);\n",
                    "rendered": {
                      "text": "        Field field = consumer.getClass().getDeclaredField(\"client\");\n        field.setAccessible(true);\n\n        ConsumerNetworkClient client = (ConsumerNetworkClient) field.get(consumer);\n\n        while(!client.hasReadyNodes(System.currentTimeMillis())) {\n            Thread.sleep(100);\n",
                      "markdown": "`        Field field = consumer.getClass().getDeclaredField(\"client\");\n        field.setAccessible(true);\n\n        ConsumerNetworkClient client = (ConsumerNetworkClient) field.get(consumer);\n\n        while(!client.hasReadyNodes(System.currentTimeMillis())) {\n            Thread.sleep(100);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 40,
                  "endLine": 406,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n                // If there is an after parameter in the request use this one\n                if (options.after.containsKey(partition.getId())) {\n                    last = options.after.get(partition.getId()) - 1;\n                }\n\n                if (last < 0) {\n",
                    "rendered": {
                      "text": "\n                // If there is an after parameter in the request use this one\n                if (options.after.containsKey(partition.getId())) {\n                    last = options.after.get(partition.getId()) - 1;\n                }\n\n                if (last < 0) {\n",
                      "markdown": "`\n                // If there is an after parameter in the request use this one\n                if (options.after.containsKey(partition.getId())) {\n                    last = options.after.get(partition.getId()) - 1;\n                }\n\n                if (last < 0) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 41,
                  "endLine": 385,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        return getFirstOffset(consumer, partition, options)\n            .map(first -> {\n                if (options.after.size() > 0 && options.after.containsKey(partition.getId())) {\n                    first = options.after.get(partition.getId()) + 1;\n                }\n\n                if (first > partition.getLastOffset()) {\n",
                    "rendered": {
                      "text": "        return getFirstOffset(consumer, partition, options)\n            .map(first -> {\n                if (options.after.size() > 0 && options.after.containsKey(partition.getId())) {\n                    first = options.after.get(partition.getId()) + 1;\n                }\n\n                if (first > partition.getLastOffset()) {\n",
                      "markdown": "`        return getFirstOffset(consumer, partition, options)\n            .map(first -> {\n                if (options.after.size() > 0 && options.after.containsKey(partition.getId())) {\n                    first = options.after.get(partition.getId()) + 1;\n                }\n\n                if (first > partition.getLastOffset()) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 91,
                  "endLine": 121,
                  "endColumn": 96,
                  "snippet": {
                    "text": "                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n                            records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                        }\n                    }\n\n",
                    "rendered": {
                      "text": "                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n                            records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                        }\n                    }\n\n",
                      "markdown": "`                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n                            records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                        }\n                    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 48,
                  "endLine": 119,
                  "endColumn": 53,
                  "snippet": {
                    "text": "                    if (!records.containsKey(record.topic())) {\n                        records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n                            records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                        }\n",
                    "rendered": {
                      "text": "                    if (!records.containsKey(record.topic())) {\n                        records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n                            records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                        }\n",
                      "markdown": "`                    if (!records.containsKey(record.topic())) {\n                        records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n                            records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 87,
                  "endLine": 117,
                  "endColumn": 92,
                  "snippet": {
                    "text": "            this.poll(consumer)\n                .forEach(record -> {\n                    if (!records.containsKey(record.topic())) {\n                        records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n",
                    "rendered": {
                      "text": "            this.poll(consumer)\n                .forEach(record -> {\n                    if (!records.containsKey(record.topic())) {\n                        records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n",
                      "markdown": "`            this.poll(consumer)\n                .forEach(record -> {\n                    if (!records.containsKey(record.topic())) {\n                        records.put(record.topic(), newRecord(record, clusterId, topics.get(record.topic())));\n                    } else {\n                        Record current = records.get(record.topic());\n                        if (current.getTimestamp().toInstant().toEpochMilli() < record.timestamp()) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 1277,
                  "startColumn": 24,
                  "endLine": 1277,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        public Options(Environment environment, String clusterId, String topic) {\n            this.sort = Sort.OLDEST;\n            //noinspection ConstantConditions\n            this.size = environment.getProperty(\"akhq.topic-data.size\", Integer.class, 50);\n\n            this.clusterId = clusterId;\n            this.topic = topic;\n",
                    "rendered": {
                      "text": "        public Options(Environment environment, String clusterId, String topic) {\n            this.sort = Sort.OLDEST;\n            //noinspection ConstantConditions\n            this.size = environment.getProperty(\"akhq.topic-data.size\", Integer.class, 50);\n\n            this.clusterId = clusterId;\n            this.topic = topic;\n",
                      "markdown": "`        public Options(Environment environment, String clusterId, String topic) {\n            this.sort = Sort.OLDEST;\n            //noinspection ConstantConditions\n            this.size = environment.getProperty(\"akhq.topic-data.size\", Integer.class, 50);\n\n            this.clusterId = clusterId;\n            this.topic = topic;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 18,
                  "endLine": 892,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    private List<String> extractSearchPatterns(String searchString) {\n        return Arrays.stream(searchString.toLowerCase().split(SEARCH_SPLIT_REGEX, -1))\n            .map(s -> {\n                // Update pattern enclosed with double quotes by removing backslashes and start/end double quotes\n                s = s.replaceAll(\"\\\\\\\\\", \"\");\n                return s.startsWith(\"\\\"\") ? s.substring(1, s.length() - 1) : s;\n            }).collect(Collectors.toList());\n",
                    "rendered": {
                      "text": "    private List<String> extractSearchPatterns(String searchString) {\n        return Arrays.stream(searchString.toLowerCase().split(SEARCH_SPLIT_REGEX, -1))\n            .map(s -> {\n                // Update pattern enclosed with double quotes by removing backslashes and start/end double quotes\n                s = s.replaceAll(\"\\\\\\\\\", \"\");\n                return s.startsWith(\"\\\"\") ? s.substring(1, s.length() - 1) : s;\n            }).collect(Collectors.toList());\n",
                      "markdown": "`    private List<String> extractSearchPatterns(String searchString) {\n        return Arrays.stream(searchString.toLowerCase().split(SEARCH_SPLIT_REGEX, -1))\n            .map(s -> {\n                // Update pattern enclosed with double quotes by removing backslashes and start/end double quotes\n                s = s.replaceAll(\"\\\\\\\\\", \"\");\n                return s.startsWith(\"\\\"\") ? s.substring(1, s.length() - 1) : s;\n            }).collect(Collectors.toList());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 1269,
                  "startColumn": 15,
                  "endLine": 1269,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        private String topic;\n        private int size;\n        private Map<Integer, Long> after = new HashMap<>();\n        private Sort sort;\n        private Integer partition;\n        private Long timestamp;\n        private Long endTimestamp;\n",
                    "rendered": {
                      "text": "        private String topic;\n        private int size;\n        private Map<Integer, Long> after = new HashMap<>();\n        private Sort sort;\n        private Integer partition;\n        private Long timestamp;\n        private Long endTimestamp;\n",
                      "markdown": "`        private String topic;\n        private int size;\n        private Map<Integer, Long> after = new HashMap<>();\n        private Sort sort;\n        private Integer partition;\n        private Long timestamp;\n        private Long endTimestamp;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/RecordRepository.java"
                },
                "region": {
                  "startLine": 1262,
                  "startColumn": 19,
                  "endLine": 1262,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    @Getter\n    @Setter\n    public static class Options extends BaseOptions {\n        public enum Sort {\n            OLDEST,\n            NEWEST,\n        }\n",
                    "rendered": {
                      "text": "    @Getter\n    @Setter\n    public static class Options extends BaseOptions {\n        public enum Sort {\n            OLDEST,\n            NEWEST,\n        }\n",
                      "markdown": "`    @Getter\n    @Setter\n    public static class Options extends BaseOptions {\n        public enum Sort {\n            OLDEST,\n            NEWEST,\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/repositories/TopicRepository.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 36,
                  "endLine": 97,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    new Topic(\n                        description.getValue(),\n                        logDirRepository.findByTopic(clusterId, description.getValue().name()),\n                        topicOffsets.get(description.getValue().name()),\n                        isInternal(description.getValue().name()),\n                        isStream(description.getValue().name())\n                    )\n",
                    "rendered": {
                      "text": "                    new Topic(\n                        description.getValue(),\n                        logDirRepository.findByTopic(clusterId, description.getValue().name()),\n                        topicOffsets.get(description.getValue().name()),\n                        isInternal(description.getValue().name()),\n                        isStream(description.getValue().name())\n                    )\n",
                      "markdown": "`                    new Topic(\n                        description.getValue(),\n                        logDirRepository.findByTopic(clusterId, description.getValue().name()),\n                        topicOffsets.get(description.getValue().name()),\n                        isInternal(description.getValue().name()),\n                        isStream(description.getValue().name())\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/ErrorController.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 50,
                  "endLine": 95,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n                            annotation.getValues().get(\"action\"))));\n                }\n            } else {\n                return HttpResponse.unauthorized().body(new JsonError(\"User not authenticated or token expired\"));\n",
                    "rendered": {
                      "text": "                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n                            annotation.getValues().get(\"action\"))));\n                }\n            } else {\n                return HttpResponse.unauthorized().body(new JsonError(\"User not authenticated or token expired\"));\n",
                      "markdown": "`                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n                            annotation.getValues().get(\"action\"))));\n                }\n            } else {\n                return HttpResponse.unauthorized().body(new JsonError(\"User not authenticated or token expired\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/ErrorController.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 50,
                  "endLine": 94,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n                            annotation.getValues().get(\"action\"))));\n                }\n            } else {\n",
                    "rendered": {
                      "text": "\n                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n                            annotation.getValues().get(\"action\"))));\n                }\n            } else {\n",
                      "markdown": "`\n                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n                            annotation.getValues().get(\"action\"))));\n                }\n            } else {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/ErrorController.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 95,
                  "endLine": 90,
                  "endColumn": 100,
                  "snippet": {
                    "text": "nt() &&\n                    ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).hasAnnotation(AKHQSecured.class)) {\n                    AnnotationValue<AKHQSecured> annotation =\n                        ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).getAnnotation(AKHQSecured.class);\n\n                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n  ",
                    "rendered": {
                      "text": "nt() &&\n                    ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).hasAnnotation(AKHQSecured.class)) {\n                    AnnotationValue<AKHQSecured> annotation =\n                        ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).getAnnotation(AKHQSecured.class);\n\n                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n  ",
                      "markdown": "`nt() &&\n                    ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).hasAnnotation(AKHQSecured.class)) {\n                    AnnotationValue<AKHQSecured> annotation =\n                        ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).getAnnotation(AKHQSecured.class);\n\n                    return HttpResponse.status(HttpStatus.FORBIDDEN)\n                        .body(new JsonError(String.format(\"Unauthorized: missing permission on resource %s and action %s\",\n                            annotation.getValues().get(\"resource\"),\n  `"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/ErrorController.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 91,
                  "endLine": 88,
                  "endColumn": 96,
                  "snippet": {
                    "text": "        if (request.getUri().toString().startsWith(\"/api\")) {\n            if (e.isForbidden()) {\n                if (request.getAttribute(HttpAttributes.ROUTE_MATCH).isPresent() &&\n                    ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).hasAnnotation(AKHQSecured.class)) {\n                    AnnotationValue<AKHQSecured> annotation =\n                        ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).getAnnotation(AKHQSecured.class);\n\n",
                    "rendered": {
                      "text": "        if (request.getUri().toString().startsWith(\"/api\")) {\n            if (e.isForbidden()) {\n                if (request.getAttribute(HttpAttributes.ROUTE_MATCH).isPresent() &&\n                    ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).hasAnnotation(AKHQSecured.class)) {\n                    AnnotationValue<AKHQSecured> annotation =\n                        ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).getAnnotation(AKHQSecured.class);\n\n",
                      "markdown": "`        if (request.getUri().toString().startsWith(\"/api\")) {\n            if (e.isForbidden()) {\n                if (request.getAttribute(HttpAttributes.ROUTE_MATCH).isPresent() &&\n                    ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).hasAnnotation(AKHQSecured.class)) {\n                    AnnotationValue<AKHQSecured> annotation =\n                        ((UriRouteMatch<?, ?>) request.getAttribute(HttpAttributes.ROUTE_MATCH).get()).getAnnotation(AKHQSecured.class);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/AbstractController.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 52,
                  "endLine": 95,
                  "endColumn": 57,
                  "snippet": {
                    "text": "                .anyMatch(c -> Pattern.matches(c, cluster)))\n            // Iterate over all the roles of the user remaining groups to extract the restriction attribute for the\n            // given cluster and resource\n            .map(gb -> securityProperties.getRoles().get(gb.getRole())\n                .stream()\n                // Find roles with a resource and action matching the calling method AKHQSecured annotation\n                .filter(role -> role.getResources().contains(annotation.resource())\n",
                    "rendered": {
                      "text": "                .anyMatch(c -> Pattern.matches(c, cluster)))\n            // Iterate over all the roles of the user remaining groups to extract the restriction attribute for the\n            // given cluster and resource\n            .map(gb -> securityProperties.getRoles().get(gb.getRole())\n                .stream()\n                // Find roles with a resource and action matching the calling method AKHQSecured annotation\n                .filter(role -> role.getResources().contains(annotation.resource())\n",
                      "markdown": "`                .anyMatch(c -> Pattern.matches(c, cluster)))\n            // Iterate over all the roles of the user remaining groups to extract the restriction attribute for the\n            // given cluster and resource\n            .map(gb -> securityProperties.getRoles().get(gb.getRole())\n                .stream()\n                // Find roles with a resource and action matching the calling method AKHQSecured annotation\n                .filter(role -> role.getResources().contains(annotation.resource())\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/AbstractController.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 56,
                  "endLine": 56,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n        // Add the default group if there is one\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            groups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        // Add user groups\n",
                    "rendered": {
                      "text": "\n        // Add the default group if there is one\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            groups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        // Add user groups\n",
                      "markdown": "`\n        // Add the default group if there is one\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            groups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        // Add user groups\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/controllers/AbstractController.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 42,
                  "endLine": 55,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        var groups = new ArrayList<Group>();\n\n        // Add the default group if there is one\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            groups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n",
                    "rendered": {
                      "text": "        var groups = new ArrayList<Group>();\n\n        // Add the default group if there is one\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            groups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n",
                      "markdown": "`        var groups = new ArrayList<Group>();\n\n        // Add the default group if there is one\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            groups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/VersionProvider.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 38,
                  "endLine": 37,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                    .flatMap(properties -> Stream\n                        .of(\n                            properties.get(\"git.tags\"),\n                            properties.get(\"git.branch\")\n                        )\n                    )\n            )\n",
                    "rendered": {
                      "text": "                    .flatMap(properties -> Stream\n                        .of(\n                            properties.get(\"git.tags\"),\n                            properties.get(\"git.branch\")\n                        )\n                    )\n            )\n",
                      "markdown": "`                    .flatMap(properties -> Stream\n                        .of(\n                            properties.get(\"git.tags\"),\n                            properties.get(\"git.branch\")\n                        )\n                    )\n            )\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/VersionProvider.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 38,
                  "endLine": 36,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                    .stream()\n                    .flatMap(properties -> Stream\n                        .of(\n                            properties.get(\"git.tags\"),\n                            properties.get(\"git.branch\")\n                        )\n                    )\n",
                    "rendered": {
                      "text": "                    .stream()\n                    .flatMap(properties -> Stream\n                        .of(\n                            properties.get(\"git.tags\"),\n                            properties.get(\"git.branch\")\n                        )\n                    )\n",
                      "markdown": "`                    .stream()\n                    .flatMap(properties -> Stream\n                        .of(\n                            properties.get(\"git.tags\"),\n                            properties.get(\"git.branch\")\n                        )\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/VersionProvider.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 63,
                  "endLine": 30,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                new PropertiesPropertySourceLoader()\n                    .load(\"classpath:gradle\", environment)\n                    .stream()\n                    .flatMap(properties -> Stream.of(properties.get(\"version\"))),\n                new PropertiesPropertySourceLoader()\n                    .load(\"classpath:git\", environment)\n                    .stream()\n",
                    "rendered": {
                      "text": "                new PropertiesPropertySourceLoader()\n                    .load(\"classpath:gradle\", environment)\n                    .stream()\n                    .flatMap(properties -> Stream.of(properties.get(\"version\"))),\n                new PropertiesPropertySourceLoader()\n                    .load(\"classpath:git\", environment)\n                    .stream()\n",
                      "markdown": "`                new PropertiesPropertySourceLoader()\n                    .load(\"classpath:gradle\", environment)\n                    .stream()\n                    .flatMap(properties -> Stream.of(properties.get(\"version\"))),\n                new PropertiesPropertySourceLoader()\n                    .load(\"classpath:git\", environment)\n                    .stream()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/AvroToJsonDeserializer.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 33,
                  "endLine": 110,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        if (isKey) {\n            schema = keySchemas.get(matchingConfig.getTopicRegex());\n        } else {\n            schema = valueSchemas.get(matchingConfig.getTopicRegex());\n        }\n\n        if (schema == null) {\n",
                    "rendered": {
                      "text": "        if (isKey) {\n            schema = keySchemas.get(matchingConfig.getTopicRegex());\n        } else {\n            schema = valueSchemas.get(matchingConfig.getTopicRegex());\n        }\n\n        if (schema == null) {\n",
                      "markdown": "`        if (isKey) {\n            schema = keySchemas.get(matchingConfig.getTopicRegex());\n        } else {\n            schema = valueSchemas.get(matchingConfig.getTopicRegex());\n        }\n\n        if (schema == null) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/AvroToJsonDeserializer.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 31,
                  "endLine": 108,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        Schema schema;\n        if (isKey) {\n            schema = keySchemas.get(matchingConfig.getTopicRegex());\n        } else {\n            schema = valueSchemas.get(matchingConfig.getTopicRegex());\n        }\n",
                    "rendered": {
                      "text": "\n        Schema schema;\n        if (isKey) {\n            schema = keySchemas.get(matchingConfig.getTopicRegex());\n        } else {\n            schema = valueSchemas.get(matchingConfig.getTopicRegex());\n        }\n",
                      "markdown": "`\n        Schema schema;\n        if (isKey) {\n            schema = keySchemas.get(matchingConfig.getTopicRegex());\n        } else {\n            schema = valueSchemas.get(matchingConfig.getTopicRegex());\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/AvroToJsonDeserializer.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 64,
                  "endLine": 29,
                  "endColumn": 69,
                  "snippet": {
                    "text": " */\n@Slf4j\npublic class AvroToJsonDeserializer {\n    private final DecoderFactory decoderFactory = DecoderFactory.get();\n    private final Map<String, Schema> keySchemas;\n    private final Map<String, Schema> valueSchemas;\n    private final List<AvroTopicsMapping> topicsMapping;\n",
                    "rendered": {
                      "text": " */\n@Slf4j\npublic class AvroToJsonDeserializer {\n    private final DecoderFactory decoderFactory = DecoderFactory.get();\n    private final Map<String, Schema> keySchemas;\n    private final Map<String, Schema> valueSchemas;\n    private final List<AvroTopicsMapping> topicsMapping;\n",
                      "markdown": "` */\n@Slf4j\npublic class AvroToJsonDeserializer {\n    private final DecoderFactory decoderFactory = DecoderFactory.get();\n    private final Map<String, Schema> keySchemas;\n    private final Map<String, Schema> valueSchemas;\n    private final List<AvroTopicsMapping> topicsMapping;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/AccessControl.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 26,
                  "endLine": 32,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    }\n\n    public static String decodePrincipal(String encodedPrincipal) {\n        return new String(Base64.getDecoder().decode(encodedPrincipal));\n    }\n\n    public AccessControl(String principal, Collection<AclBinding> aclBinding) {\n",
                    "rendered": {
                      "text": "    }\n\n    public static String decodePrincipal(String encodedPrincipal) {\n        return new String(Base64.getDecoder().decode(encodedPrincipal));\n    }\n\n    public AccessControl(String principal, Collection<AclBinding> aclBinding) {\n",
                      "markdown": "`    }\n\n    public static String decodePrincipal(String encodedPrincipal) {\n        return new String(Base64.getDecoder().decode(encodedPrincipal));\n    }\n\n    public AccessControl(String principal, Collection<AclBinding> aclBinding) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/AccessControl.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 15,
                  "endLine": 28,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    private String encodedPrincipal;\n\n    public static String encodePrincipal(String principal) {\n        return Base64.getEncoder().encodeToString(principal.getBytes());\n    }\n\n    public static String decodePrincipal(String encodedPrincipal) {\n",
                    "rendered": {
                      "text": "    private String encodedPrincipal;\n\n    public static String encodePrincipal(String principal) {\n        return Base64.getEncoder().encodeToString(principal.getBytes());\n    }\n\n    public static String decodePrincipal(String encodedPrincipal) {\n",
                      "markdown": "`    private String encodedPrincipal;\n\n    public static String encodePrincipal(String principal) {\n        return Base64.getEncoder().encodeToString(principal.getBytes());\n    }\n\n    public static String decodePrincipal(String encodedPrincipal) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/middlewares/CustomHttpResponseHeadersFilter.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 85,
                  "endLine": 49,
                  "endColumn": 90,
                  "snippet": {
                    "text": "                    }\r\n                } else {\r\n                    if (mutableHttpResponse.getHeaders().contains(responseHeader.getKey())) {\r\n                        String existingHeaderValue = mutableHttpResponse.getHeaders().get(responseHeader.getKey());\r\n                        mutableHttpResponse.getHeaders().set(responseHeader.getKey(), responseHeader.getValue());\r\n                        LOG.trace(\"Replaced existing header '{}' by value {} (value was '{}')\", responseHeader.getKey(), responseHeader.getValue(), existingHeaderValue);\r\n                    } else {\r\n",
                    "rendered": {
                      "text": "                    }\r\n                } else {\r\n                    if (mutableHttpResponse.getHeaders().contains(responseHeader.getKey())) {\r\n                        String existingHeaderValue = mutableHttpResponse.getHeaders().get(responseHeader.getKey());\r\n                        mutableHttpResponse.getHeaders().set(responseHeader.getKey(), responseHeader.getValue());\r\n                        LOG.trace(\"Replaced existing header '{}' by value {} (value was '{}')\", responseHeader.getKey(), responseHeader.getValue(), existingHeaderValue);\r\n                    } else {\r\n",
                      "markdown": "`                    }\r\n                } else {\r\n                    if (mutableHttpResponse.getHeaders().contains(responseHeader.getKey())) {\r\n                        String existingHeaderValue = mutableHttpResponse.getHeaders().get(responseHeader.getKey());\r\n                        mutableHttpResponse.getHeaders().set(responseHeader.getKey(), responseHeader.getValue());\r\n                        LOG.trace(\"Replaced existing header '{}' by value {} (value was '{}')\", responseHeader.getKey(), responseHeader.getValue(), existingHeaderValue);\r\n                    } else {\r\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/middlewares/CustomHttpResponseHeadersFilter.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 85,
                  "endLine": 41,
                  "endColumn": 90,
                  "snippet": {
                    "text": ").entrySet().forEach(responseHeader -> {\r\n                if (responseHeader.getValue().equals(REMOVE_HEADER_VALUE)) {\r\n                    if (mutableHttpResponse.getHeaders().contains(responseHeader.getKey())) {\r\n                        String existingHeaderValue = mutableHttpResponse.getHeaders().get(responseHeader.getKey());\r\n                        mutableHttpResponse.getHeaders().remove(responseHeader.getKey());\r\n                        LOG.trace(\"Removed header '{}' (value was '{}')\", responseHeader.getKey(), existingHeaderValue);\r\n                    } else {\r\n                        LOG.tr",
                    "rendered": {
                      "text": ").entrySet().forEach(responseHeader -> {\r\n                if (responseHeader.getValue().equals(REMOVE_HEADER_VALUE)) {\r\n                    if (mutableHttpResponse.getHeaders().contains(responseHeader.getKey())) {\r\n                        String existingHeaderValue = mutableHttpResponse.getHeaders().get(responseHeader.getKey());\r\n                        mutableHttpResponse.getHeaders().remove(responseHeader.getKey());\r\n                        LOG.trace(\"Removed header '{}' (value was '{}')\", responseHeader.getKey(), existingHeaderValue);\r\n                    } else {\r\n                        LOG.tr",
                      "markdown": "`).entrySet().forEach(responseHeader -> {\r\n                if (responseHeader.getValue().equals(REMOVE_HEADER_VALUE)) {\r\n                    if (mutableHttpResponse.getHeaders().contains(responseHeader.getKey())) {\r\n                        String existingHeaderValue = mutableHttpResponse.getHeaders().get(responseHeader.getKey());\r\n                        mutableHttpResponse.getHeaders().remove(responseHeader.getKey());\r\n                        LOG.trace(\"Removed header '{}' (value was '{}')\", responseHeader.getKey(), existingHeaderValue);\r\n                    } else {\r\n                        LOG.tr`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 36,
                  "endLine": 38,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n}",
                    "rendered": {
                      "text": "        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n}",
                      "markdown": "`        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n}`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 21,
                  "endLine": 37,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n",
                    "rendered": {
                      "text": "    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n",
                      "markdown": "`    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 44,
                  "endLine": 36,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n",
                    "rendered": {
                      "text": "    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n",
                      "markdown": "`    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 21,
                  "endLine": 36,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n",
                    "rendered": {
                      "text": "    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n",
                      "markdown": "`    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 16,
                  "endLine": 34,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    }\n\n    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n",
                    "rendered": {
                      "text": "    }\n\n    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n",
                      "markdown": "`    }\n\n    @Test\n    void isValidPasswordBCryptValid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 37,
                  "endLine": 30,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n    @Test\n",
                      "markdown": "`        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 21,
                  "endLine": 29,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n",
                    "rendered": {
                      "text": "    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n",
                      "markdown": "`    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 44,
                  "endLine": 28,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n",
                    "rendered": {
                      "text": "    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n",
                      "markdown": "`    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 21,
                  "endLine": 28,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n",
                    "rendered": {
                      "text": "    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n",
                      "markdown": "`    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 16,
                  "endLine": 26,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    }\n\n    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n",
                    "rendered": {
                      "text": "    }\n\n    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n",
                      "markdown": "`    }\n\n    @Test\n    void isValidPasswordBCryptInvalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPasswordHash(BasicAuth.PasswordHash.BCRYPT);\n        basicAuth.setPassword(\"$2a$10$AtmQQDDSWnqsskzRxX1vGO0k6txZcJv.XlWRWA13.QOPq1wGB0DjS\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 36,
                  "endLine": 22,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n    @Test\n",
                      "markdown": "`    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 21,
                  "endLine": 21,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n",
                      "markdown": "`    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 16,
                  "endLine": 19,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n\n    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n",
                    "rendered": {
                      "text": "\n\n    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n",
                      "markdown": "`\n\n    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 37,
                  "endLine": 14,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n\n",
                    "rendered": {
                      "text": "    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n\n",
                      "markdown": "`    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 21,
                  "endLine": 13,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n",
                      "markdown": "`    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 16,
                  "endLine": 11,
                  "endColumn": 24,
                  "snippet": {
                    "text": "class BasicAuthTest {\n\n    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n",
                    "rendered": {
                      "text": "class BasicAuthTest {\n\n    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n",
                      "markdown": "`class BasicAuthTest {\n\n    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 30,
                  "endLine": 21,
                  "endColumn": 96,
                  "snippet": {
                    "text": "    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n",
                      "markdown": "`    @Test\n    void isValidPasswordSha256Valid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertTrue(basicAuth.isValidPassword(\"TestAKHQ\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/BasicAuthTest.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 30,
                  "endLine": 13,
                  "endColumn": 96,
                  "snippet": {
                    "text": "    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n",
                      "markdown": "`    @Test\n    void isValidPasswordSha256Invalid() {\n        BasicAuth basicAuth = new BasicAuth();\n        basicAuth.setPassword(\"ec04b8cb3cb42d6e28f4472c33efe93e41b138637e5223d7d758c5bceff11df8\");\n        assertFalse(basicAuth.isValidPassword(\"Bad\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/ConnectRepositoryTest.java"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 22,
                  "endLine": 134,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            KafkaTestCluster.CLUSTER_ID,\n            \"connect-2\",\n            \"ConnectRepositoryTest2\"\n        ).getConfigs().get(\"file\"));\n\n        repository.delete(KafkaTestCluster.CLUSTER_ID, \"connect-1\",\"ConnectRepositoryTest1\");\n        repository.delete(KafkaTestCluster.CLUSTER_ID, \"connect-2\",\"ConnectRepositoryTest2\");\n",
                    "rendered": {
                      "text": "            KafkaTestCluster.CLUSTER_ID,\n            \"connect-2\",\n            \"ConnectRepositoryTest2\"\n        ).getConfigs().get(\"file\"));\n\n        repository.delete(KafkaTestCluster.CLUSTER_ID, \"connect-1\",\"ConnectRepositoryTest1\");\n        repository.delete(KafkaTestCluster.CLUSTER_ID, \"connect-2\",\"ConnectRepositoryTest2\");\n",
                      "markdown": "`            KafkaTestCluster.CLUSTER_ID,\n            \"connect-2\",\n            \"ConnectRepositoryTest2\"\n        ).getConfigs().get(\"file\"));\n\n        repository.delete(KafkaTestCluster.CLUSTER_ID, \"connect-1\",\"ConnectRepositoryTest1\");\n        repository.delete(KafkaTestCluster.CLUSTER_ID, \"connect-2\",\"ConnectRepositoryTest2\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/ConnectRepositoryTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 22,
                  "endLine": 128,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            KafkaTestCluster.CLUSTER_ID,\n            \"connect-1\",\n            \"ConnectRepositoryTest1\"\n        ).getConfigs().get(\"file\"));\n\n        assertEquals(path2, repository.getDefinition(\n            KafkaTestCluster.CLUSTER_ID,\n",
                    "rendered": {
                      "text": "            KafkaTestCluster.CLUSTER_ID,\n            \"connect-1\",\n            \"ConnectRepositoryTest1\"\n        ).getConfigs().get(\"file\"));\n\n        assertEquals(path2, repository.getDefinition(\n            KafkaTestCluster.CLUSTER_ID,\n",
                      "markdown": "`            KafkaTestCluster.CLUSTER_ID,\n            \"connect-1\",\n            \"ConnectRepositoryTest1\"\n        ).getConfigs().get(\"file\"));\n\n        assertEquals(path2, repository.getDefinition(\n            KafkaTestCluster.CLUSTER_ID,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/ConnectRepositoryTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 22,
                  "endLine": 100,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            KafkaTestCluster.CLUSTER_ID,\n            \"connect-2\",\n            \"ConnectRepositoryTest2\"\n        ).getConfigs().get(\"file\"));\n\n        repository.update(\n            KafkaTestCluster.CLUSTER_ID,\n",
                    "rendered": {
                      "text": "            KafkaTestCluster.CLUSTER_ID,\n            \"connect-2\",\n            \"ConnectRepositoryTest2\"\n        ).getConfigs().get(\"file\"));\n\n        repository.update(\n            KafkaTestCluster.CLUSTER_ID,\n",
                      "markdown": "`            KafkaTestCluster.CLUSTER_ID,\n            \"connect-2\",\n            \"ConnectRepositoryTest2\"\n        ).getConfigs().get(\"file\"));\n\n        repository.update(\n            KafkaTestCluster.CLUSTER_ID,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/ConnectRepositoryTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 22,
                  "endLine": 94,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            KafkaTestCluster.CLUSTER_ID,\n            \"connect-1\",\n            \"ConnectRepositoryTest1\"\n        ).getConfigs().get(\"file\"));\n\n        assertEquals(path1, repository.getDefinition(\n            KafkaTestCluster.CLUSTER_ID,\n",
                    "rendered": {
                      "text": "            KafkaTestCluster.CLUSTER_ID,\n            \"connect-1\",\n            \"ConnectRepositoryTest1\"\n        ).getConfigs().get(\"file\"));\n\n        assertEquals(path1, repository.getDefinition(\n            KafkaTestCluster.CLUSTER_ID,\n",
                      "markdown": "`            KafkaTestCluster.CLUSTER_ID,\n            \"connect-1\",\n            \"ConnectRepositoryTest1\"\n        ).getConfigs().get(\"file\"));\n\n        assertEquals(path1, repository.getDefinition(\n            KafkaTestCluster.CLUSTER_ID,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/AccessControlRepositoryTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "endLine": 31,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    void findAllWithFilter() throws ExecutionException, InterruptedException {\n        var searchResult = aclRepository.findAll(KafkaTestCluster.CLUSTER_ID, Optional.of(\"toto\") ,List.of(\"user.*\"));\n        assertEquals(1, searchResult.size());\n        assertEquals(\"user:toto\", searchResult.get(0).getPrincipal());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "    void findAllWithFilter() throws ExecutionException, InterruptedException {\n        var searchResult = aclRepository.findAll(KafkaTestCluster.CLUSTER_ID, Optional.of(\"toto\") ,List.of(\"user.*\"));\n        assertEquals(1, searchResult.size());\n        assertEquals(\"user:toto\", searchResult.get(0).getPrincipal());\n    }\n\n    @Test\n",
                      "markdown": "`    void findAllWithFilter() throws ExecutionException, InterruptedException {\n        var searchResult = aclRepository.findAll(KafkaTestCluster.CLUSTER_ID, Optional.of(\"toto\") ,List.of(\"user.*\"));\n        assertEquals(1, searchResult.size());\n        assertEquals(\"user:toto\", searchResult.get(0).getPrincipal());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/RecordRepositoryTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 19,
                  "endLine": 325,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        } while (hasNext.get());\n\n        return size.get();\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "\n        } while (hasNext.get());\n\n        return size.get();\n    }\n\n    @Test\n",
                      "markdown": "`\n        } while (hasNext.get());\n\n        return size.get();\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/RecordRepositoryTest.java"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 24,
                  "endLine": 323,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                }\n            });\n\n        } while (hasNext.get());\n\n        return size.get();\n    }\n",
                    "rendered": {
                      "text": "                }\n            });\n\n        } while (hasNext.get());\n\n        return size.get();\n    }\n",
                      "markdown": "`                }\n            });\n\n        } while (hasNext.get());\n\n        return size.get();\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/RecordRepositoryTest.java"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 46,
                  "endLine": 278,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            .filter(record -> Objects.equals(record.getKey(), keyJsonString))\n            .findFirst();\n        assertTrue(consumedRecord.isPresent());\n        Record recordToAssert = consumedRecord.get();\n        assertEquals(recordToAssert.getKey(), keyJsonString);\n        assertEquals(recordToAssert.getValue(), recordAsJsonString);\n        assertEquals(recordToAssert.getValueSchemaId(), String.valueOf(valueJsonSchema.getId()));\n",
                    "rendered": {
                      "text": "            .filter(record -> Objects.equals(record.getKey(), keyJsonString))\n            .findFirst();\n        assertTrue(consumedRecord.isPresent());\n        Record recordToAssert = consumedRecord.get();\n        assertEquals(recordToAssert.getKey(), keyJsonString);\n        assertEquals(recordToAssert.getValue(), recordAsJsonString);\n        assertEquals(recordToAssert.getValueSchemaId(), String.valueOf(valueJsonSchema.getId()));\n",
                      "markdown": "`            .filter(record -> Objects.equals(record.getKey(), keyJsonString))\n            .findFirst();\n        assertTrue(consumedRecord.isPresent());\n        Record recordToAssert = consumedRecord.get();\n        assertEquals(recordToAssert.getKey(), keyJsonString);\n        assertEquals(recordToAssert.getValue(), recordAsJsonString);\n        assertEquals(recordToAssert.getValueSchemaId(), String.valueOf(valueJsonSchema.getId()));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/RecordRepositoryTest.java"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 67,
                  "endLine": 194,
                  "endColumn": 72,
                  "snippet": {
                    "text": "            if (datas.size() == 0) {\n                hasNext = false;\n            } else if (after != null) {\n                options.setAfter(after.getParametersByName(\"after\").get(0).getValue());\n            }\n        } while (hasNext);\n\n",
                    "rendered": {
                      "text": "            if (datas.size() == 0) {\n                hasNext = false;\n            } else if (after != null) {\n                options.setAfter(after.getParametersByName(\"after\").get(0).getValue());\n            }\n        } while (hasNext);\n\n",
                      "markdown": "`            if (datas.size() == 0) {\n                hasNext = false;\n            } else if (after != null) {\n                options.setAfter(after.getParametersByName(\"after\").get(0).getValue());\n            }\n        } while (hasNext);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/RecordRepositoryTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 74,
                  "endLine": 143,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            .filter(record -> record.getKey().equals(\"1\"))\n            .findFirst();\n\n        avroRecord.orElseThrow(() -> new NoSuchElementException(\"Unable to find key 1\"));\n        avroRecord.ifPresent(record -> {\n            assertThat(record.getValue(), containsString(\"\\\"breed\\\":\\\"ABYSSINIAN\\\"\"));\n            assertThat(record.getValue(), containsString(\"\\\"name\\\":\\\"WaWa\\\"\"));\n",
                    "rendered": {
                      "text": "            .filter(record -> record.getKey().equals(\"1\"))\n            .findFirst();\n\n        avroRecord.orElseThrow(() -> new NoSuchElementException(\"Unable to find key 1\"));\n        avroRecord.ifPresent(record -> {\n            assertThat(record.getValue(), containsString(\"\\\"breed\\\":\\\"ABYSSINIAN\\\"\"));\n            assertThat(record.getValue(), containsString(\"\\\"name\\\":\\\"WaWa\\\"\"));\n",
                      "markdown": "`            .filter(record -> record.getKey().equals(\"1\"))\n            .findFirst();\n\n        avroRecord.orElseThrow(() -> new NoSuchElementException(\"Unable to find key 1\"));\n        avroRecord.ifPresent(record -> {\n            assertThat(record.getValue(), containsString(\"\\\"breed\\\":\\\"ABYSSINIAN\\\"\"));\n            assertThat(record.getValue(), containsString(\"\\\"name\\\":\\\"WaWa\\\"\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KsqlDBEmbedded.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 39,
                  "endLine": 46,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            Instant.now()\n        );\n\n        listeners = (String) properties.get(\"listeners\");\n\n        ksqlRestApplication.startAsync();\n\n",
                    "rendered": {
                      "text": "            Instant.now()\n        );\n\n        listeners = (String) properties.get(\"listeners\");\n\n        ksqlRestApplication.startAsync();\n\n",
                      "markdown": "`            Instant.now()\n        );\n\n        listeners = (String) properties.get(\"listeners\");\n\n        ksqlRestApplication.startAsync();\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KsqlDBEmbedded.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 46,
                  "endLine": 76,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n        ksqlRestApplication.shutdown();\n\n        log.debug(\"Shutdown of embedded KsqlDB at {} completed\", listeners);\n    }\n}\n",
                    "rendered": {
                      "text": "\n        ksqlRestApplication.shutdown();\n\n        log.debug(\"Shutdown of embedded KsqlDB at {} completed\", listeners);\n    }\n}\n",
                      "markdown": "`\n        ksqlRestApplication.shutdown();\n\n        log.debug(\"Shutdown of embedded KsqlDB at {} completed\", listeners);\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KsqlDBEmbedded.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 48,
                  "endLine": 72,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    }\n\n    public void stop() throws InterruptedException {\n        log.debug(\"Shutting down embedded KsqlDB at {} ...\", listeners);\n\n        ksqlRestApplication.shutdown();\n\n",
                    "rendered": {
                      "text": "    }\n\n    public void stop() throws InterruptedException {\n        log.debug(\"Shutting down embedded KsqlDB at {} ...\", listeners);\n\n        ksqlRestApplication.shutdown();\n\n",
                      "markdown": "`    }\n\n    public void stop() throws InterruptedException {\n        log.debug(\"Shutting down embedded KsqlDB at {} ...\", listeners);\n\n        ksqlRestApplication.shutdown();\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KsqlDBEmbedded.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 51,
                  "endLine": 50,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n        ksqlRestApplication.startAsync();\n\n        log.debug(\"Startup of embedded Kafka KsqlDB at {} completed ...\", listeners);\n    }\n\n    private Map<String, String> effectiveConfigFrom(final Properties initialConfig) {\n",
                    "rendered": {
                      "text": "\n        ksqlRestApplication.startAsync();\n\n        log.debug(\"Startup of embedded Kafka KsqlDB at {} completed ...\", listeners);\n    }\n\n    private Map<String, String> effectiveConfigFrom(final Properties initialConfig) {\n",
                      "markdown": "`\n        ksqlRestApplication.startAsync();\n\n        log.debug(\"Startup of embedded Kafka KsqlDB at {} completed ...\", listeners);\n    }\n\n    private Map<String, String> effectiveConfigFrom(final Properties initialConfig) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AclsControllerTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 56,
                  "endLine": 28,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    @Test\n    @Disabled(\"Break on github actions\")\n    void principalApi() {\n        AccessControl result = this.retrieve(HttpRequest.GET(ACL_URL), AccessControl.class);\n        assertEquals(\"user:toto\", result.getPrincipal());\n        assertEquals(5, result.getAcls().size());\n    }\n",
                    "rendered": {
                      "text": "    @Test\n    @Disabled(\"Break on github actions\")\n    void principalApi() {\n        AccessControl result = this.retrieve(HttpRequest.GET(ACL_URL), AccessControl.class);\n        assertEquals(\"user:toto\", result.getPrincipal());\n        assertEquals(5, result.getAcls().size());\n    }\n",
                      "markdown": "`    @Test\n    @Disabled(\"Break on github actions\")\n    void principalApi() {\n        AccessControl result = this.retrieve(HttpRequest.GET(ACL_URL), AccessControl.class);\n        assertEquals(\"user:toto\", result.getPrincipal());\n        assertEquals(5, result.getAcls().size());\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AclsControllerTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 66,
                  "endLine": 21,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    @Test\n    @Disabled(\"Break on github actions\")\n    void listApi() {\n        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL), AccessControl.class);\n        assertEquals(2, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Disabled(\"Break on github actions\")\n    void listApi() {\n        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL), AccessControl.class);\n        assertEquals(2, result.size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Disabled(\"Break on github actions\")\n    void listApi() {\n        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL), AccessControl.class);\n        assertEquals(2, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 37,
                  "endLine": 138,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        assertEquals(subject1Schema1Response.getSubject(), subject1FromSchemaIdAndTopic.getSubject());\n\n        var subject2FromSchemaIdAndTopic =\n            this.retrieve(HttpRequest.GET(BASE_URL + \"/id/\" + subject1Schema1Response.getId() + \"?topic=subjectTopic2\"), Schema.class);\n        assertEquals(subject2Schema1Response.getId(), subject2FromSchemaIdAndTopic.getId());\n        assertEquals(subject2Schema1Response.getSubject(), subject2FromSchemaIdAndTopic.getSubject());\n\n",
                    "rendered": {
                      "text": "        assertEquals(subject1Schema1Response.getSubject(), subject1FromSchemaIdAndTopic.getSubject());\n\n        var subject2FromSchemaIdAndTopic =\n            this.retrieve(HttpRequest.GET(BASE_URL + \"/id/\" + subject1Schema1Response.getId() + \"?topic=subjectTopic2\"), Schema.class);\n        assertEquals(subject2Schema1Response.getId(), subject2FromSchemaIdAndTopic.getId());\n        assertEquals(subject2Schema1Response.getSubject(), subject2FromSchemaIdAndTopic.getSubject());\n\n",
                      "markdown": "`        assertEquals(subject1Schema1Response.getSubject(), subject1FromSchemaIdAndTopic.getSubject());\n\n        var subject2FromSchemaIdAndTopic =\n            this.retrieve(HttpRequest.GET(BASE_URL + \"/id/\" + subject1Schema1Response.getId() + \"?topic=subjectTopic2\"), Schema.class);\n        assertEquals(subject2Schema1Response.getId(), subject2FromSchemaIdAndTopic.getId());\n        assertEquals(subject2Schema1Response.getSubject(), subject2FromSchemaIdAndTopic.getSubject());\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 37,
                  "endLine": 133,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n        // Searching subject by schema ID should give the right subject depending on the topic\n        var subject1FromSchemaIdAndTopic =\n            this.retrieve(HttpRequest.GET(BASE_URL + \"/id/\" + subject1Schema1Response.getId() + \"?topic=subjectTopic1\"), Schema.class);\n        assertEquals(subject1Schema1Response.getId(), subject1FromSchemaIdAndTopic.getId());\n        assertEquals(subject1Schema1Response.getSubject(), subject1FromSchemaIdAndTopic.getSubject());\n\n",
                    "rendered": {
                      "text": "\n        // Searching subject by schema ID should give the right subject depending on the topic\n        var subject1FromSchemaIdAndTopic =\n            this.retrieve(HttpRequest.GET(BASE_URL + \"/id/\" + subject1Schema1Response.getId() + \"?topic=subjectTopic1\"), Schema.class);\n        assertEquals(subject1Schema1Response.getId(), subject1FromSchemaIdAndTopic.getId());\n        assertEquals(subject1Schema1Response.getSubject(), subject1FromSchemaIdAndTopic.getSubject());\n\n",
                      "markdown": "`\n        // Searching subject by schema ID should give the right subject depending on the topic\n        var subject1FromSchemaIdAndTopic =\n            this.retrieve(HttpRequest.GET(BASE_URL + \"/id/\" + subject1Schema1Response.getId() + \"?topic=subjectTopic1\"), Schema.class);\n        assertEquals(subject1Schema1Response.getId(), subject1FromSchemaIdAndTopic.getId());\n        assertEquals(subject1Schema1Response.getSubject(), subject1FromSchemaIdAndTopic.getSubject());\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 63,
                  "endLine": 120,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n        // Subject v1 and v2 should be different\n        assertNotEquals(subject1Schema1Response.getId(), subject1Schema1V2Response.getId());\n",
                    "rendered": {
                      "text": "\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n        // Subject v1 and v2 should be different\n        assertNotEquals(subject1Schema1Response.getId(), subject1Schema1V2Response.getId());\n",
                      "markdown": "`\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n        // Subject v1 and v2 should be different\n        assertNotEquals(subject1Schema1Response.getId(), subject1Schema1V2Response.getId());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 65,
                  "endLine": 119,
                  "endColumn": 71,
                  "snippet": {
                    "text": "            Schema.Config.CompatibilityLevelConfig.FORWARD);\n\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n        // Subject v1 and v2 should be different\n",
                    "rendered": {
                      "text": "            Schema.Config.CompatibilityLevelConfig.FORWARD);\n\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n        // Subject v1 and v2 should be different\n",
                      "markdown": "`            Schema.Config.CompatibilityLevelConfig.FORWARD);\n\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n        // Subject v1 and v2 should be different\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 63,
                  "endLine": 118,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        var subject2Schema1 = new Schema(\"subjectTopic2-value\", SchemaRegistryRepositoryTest.SCHEMA_1_V1,\n            Schema.Config.CompatibilityLevelConfig.FORWARD);\n\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n",
                    "rendered": {
                      "text": "        var subject2Schema1 = new Schema(\"subjectTopic2-value\", SchemaRegistryRepositoryTest.SCHEMA_1_V1,\n            Schema.Config.CompatibilityLevelConfig.FORWARD);\n\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n",
                      "markdown": "`        var subject2Schema1 = new Schema(\"subjectTopic2-value\", SchemaRegistryRepositoryTest.SCHEMA_1_V1,\n            Schema.Config.CompatibilityLevelConfig.FORWARD);\n\n        var subject1Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject1Schema1), Schema.class);\n        var subject1Schema1V2Response = this.retrieve(HttpRequest.POST(BASE_URL + \"/subjectTopic1-value\", subject1Schema1V2), Schema.class);\n        var subject2Schema1Response = this.retrieve(HttpRequest.POST(BASE_URL, subject2Schema1), Schema.class);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 59,
                  "endLine": 91,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n    @Test\n    void versionsApi() {\n        List<Schema> result = this.retrieveList(HttpRequest.GET(SCHEMA_URL + \"/version\"), Schema.class);\n        assertEquals(1, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "\n    @Test\n    void versionsApi() {\n        List<Schema> result = this.retrieveList(HttpRequest.GET(SCHEMA_URL + \"/version\"), Schema.class);\n        assertEquals(1, result.size());\n    }\n\n",
                      "markdown": "`\n    @Test\n    void versionsApi() {\n        List<Schema> result = this.retrieveList(HttpRequest.GET(SCHEMA_URL + \"/version\"), Schema.class);\n        assertEquals(1, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 61,
                  "endLine": 80,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        );\n\n        // version is deletd\n        List<Schema> versions = this.retrieveList(HttpRequest.GET(SCHEMA_URL), Schema.class);\n        assertEquals(1, versions.size());\n\n        // delete\n",
                    "rendered": {
                      "text": "        );\n\n        // version is deletd\n        List<Schema> versions = this.retrieveList(HttpRequest.GET(SCHEMA_URL), Schema.class);\n        assertEquals(1, versions.size());\n\n        // delete\n",
                      "markdown": "`        );\n\n        // version is deletd\n        List<Schema> versions = this.retrieveList(HttpRequest.GET(SCHEMA_URL), Schema.class);\n        assertEquals(1, versions.size());\n\n        // delete\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 42,
                  "endLine": 71,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        assertTrue(e.getMessage().contains(\"already exists\"));\n\n        // update\n        result = this.retrieve(HttpRequest.POST(BASE_URL + \"/\" + SCHEMA_1_V1.getSubject(), SCHEMA_1_V2), Schema.class);\n        assertEquals(SCHEMA_1_V2.getSchema(), result.getSchema());\n\n        // delete version\n",
                    "rendered": {
                      "text": "        assertTrue(e.getMessage().contains(\"already exists\"));\n\n        // update\n        result = this.retrieve(HttpRequest.POST(BASE_URL + \"/\" + SCHEMA_1_V1.getSubject(), SCHEMA_1_V2), Schema.class);\n        assertEquals(SCHEMA_1_V2.getSchema(), result.getSchema());\n\n        // delete version\n",
                      "markdown": "`        assertTrue(e.getMessage().contains(\"already exists\"));\n\n        // update\n        result = this.retrieve(HttpRequest.POST(BASE_URL + \"/\" + SCHEMA_1_V1.getSubject(), SCHEMA_1_V2), Schema.class);\n        assertEquals(SCHEMA_1_V2.getSchema(), result.getSchema());\n\n        // delete version\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 41,
                  "endLine": 65,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        HttpClientResponseException e = assertThrows(\n            HttpClientResponseException.class,\n            () -> {\n                this.retrieve(HttpRequest.POST(BASE_URL, SCHEMA_1_V1), Schema.class);\n            }\n        );\n        assertTrue(e.getMessage().contains(\"already exists\"));\n",
                    "rendered": {
                      "text": "        HttpClientResponseException e = assertThrows(\n            HttpClientResponseException.class,\n            () -> {\n                this.retrieve(HttpRequest.POST(BASE_URL, SCHEMA_1_V1), Schema.class);\n            }\n        );\n        assertTrue(e.getMessage().contains(\"already exists\"));\n",
                      "markdown": "`        HttpClientResponseException e = assertThrows(\n            HttpClientResponseException.class,\n            () -> {\n                this.retrieve(HttpRequest.POST(BASE_URL, SCHEMA_1_V1), Schema.class);\n            }\n        );\n        assertTrue(e.getMessage().contains(\"already exists\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 42,
                  "endLine": 57,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        } catch (Exception ignored) { }\n\n        // create\n        result = this.retrieve(HttpRequest.POST(BASE_URL, SCHEMA_1_V1), Schema.class);\n        assertEquals(Schema.Config.CompatibilityLevelConfig.FORWARD, result.getCompatibilityLevel());\n        version = result.getVersion();\n\n",
                    "rendered": {
                      "text": "        } catch (Exception ignored) { }\n\n        // create\n        result = this.retrieve(HttpRequest.POST(BASE_URL, SCHEMA_1_V1), Schema.class);\n        assertEquals(Schema.Config.CompatibilityLevelConfig.FORWARD, result.getCompatibilityLevel());\n        version = result.getVersion();\n\n",
                      "markdown": "`        } catch (Exception ignored) { }\n\n        // create\n        result = this.retrieve(HttpRequest.POST(BASE_URL, SCHEMA_1_V1), Schema.class);\n        assertEquals(Schema.Config.CompatibilityLevelConfig.FORWARD, result.getCompatibilityLevel());\n        version = result.getVersion();\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 49,
                  "endLine": 40,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    @Test\n    void homeApi() {\n        Schema result = this.retrieve(HttpRequest.GET(SCHEMA_URL), Schema.class);\n        assertEquals(\"stream-map-value\", result.getSubject());\n    }\n\n",
                    "rendered": {
                      "text": "\n    @Test\n    void homeApi() {\n        Schema result = this.retrieve(HttpRequest.GET(SCHEMA_URL), Schema.class);\n        assertEquals(\"stream-map-value\", result.getSubject());\n    }\n\n",
                      "markdown": "`\n    @Test\n    void homeApi() {\n        Schema result = this.retrieve(HttpRequest.GET(SCHEMA_URL), Schema.class);\n        assertEquals(\"stream-map-value\", result.getSubject());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 75,
                  "endLine": 34,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n    @Test\n    void listApi() {\n        ResultPagedList<Schema> result = this.retrievePagedList(HttpRequest.GET(BASE_URL), Schema.class);\n        assertEquals(3, result.getResults().size());\n    }\n\n",
                    "rendered": {
                      "text": "\n    @Test\n    void listApi() {\n        ResultPagedList<Schema> result = this.retrievePagedList(HttpRequest.GET(BASE_URL), Schema.class);\n        assertEquals(3, result.getResults().size());\n    }\n\n",
                      "markdown": "`\n    @Test\n    void listApi() {\n        ResultPagedList<Schema> result = this.retrievePagedList(HttpRequest.GET(BASE_URL), Schema.class);\n        assertEquals(3, result.getResults().size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SchemaControllerTest.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 10,
                  "endLine": 71,
                  "snippet": {
                    "text": "        );\n        assertTrue(e.getMessage().contains(\"already exists\"));\n\n        // update\n        result = this.retrieve(HttpRequest.POST(BASE_URL + \"/\" + SCHEMA_1_V1.getSubject(), SCHEMA_1_V2), Schema.class);\n        assertEquals(SCHEMA_1_V2.getSchema(), result.getSchema());\n\n        // delete version\n",
                    "rendered": {
                      "text": "        );\n        assertTrue(e.getMessage().contains(\"already exists\"));\n\n        // update\n        result = this.retrieve(HttpRequest.POST(BASE_URL + \"/\" + SCHEMA_1_V1.getSubject(), SCHEMA_1_V2), Schema.class);\n        assertEquals(SCHEMA_1_V2.getSchema(), result.getSchema());\n\n        // delete version\n",
                      "markdown": "`        );\n        assertTrue(e.getMessage().contains(\"already exists\"));\n\n        // update\n        result = this.retrieve(HttpRequest.POST(BASE_URL + \"/\" + SCHEMA_1_V1.getSubject(), SCHEMA_1_V2), Schema.class);\n        assertEquals(SCHEMA_1_V2.getSchema(), result.getSchema());\n\n        // delete version\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/SseControllerTest.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 44,
                  "endLine": 30,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    void searchApi() {\n        RxSseClient sseClient = embeddedServer.getApplicationContext().createBean(RxSseClient.class, embeddedServer.getURL());\n\n        HttpRequest<?> request = HttpRequest.GET(URI.create(BASE_URL + \"/\" + KafkaTestCluster.TOPIC_HUGE + \"/data/search?searchByKey=key_100_C\"))\n            .basicAuth(\"admin\", \"pass\");\n\n        List<Record> results = sseClient\n",
                    "rendered": {
                      "text": "    void searchApi() {\n        RxSseClient sseClient = embeddedServer.getApplicationContext().createBean(RxSseClient.class, embeddedServer.getURL());\n\n        HttpRequest<?> request = HttpRequest.GET(URI.create(BASE_URL + \"/\" + KafkaTestCluster.TOPIC_HUGE + \"/data/search?searchByKey=key_100_C\"))\n            .basicAuth(\"admin\", \"pass\");\n\n        List<Record> results = sseClient\n",
                      "markdown": "`    void searchApi() {\n        RxSseClient sseClient = embeddedServer.getApplicationContext().createBean(RxSseClient.class, embeddedServer.getURL());\n\n        HttpRequest<?> request = HttpRequest.GET(URI.create(BASE_URL + \"/\" + KafkaTestCluster.TOPIC_HUGE + \"/data/search?searchByKey=key_100_C\"))\n            .basicAuth(\"admin\", \"pass\");\n\n        List<Record> results = sseClient\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/package-lock.json"
                },
                "region": {
                  "startLine": 2998,
                  "startColumn": 9,
                  "endLine": 2998,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        }\n      ],\n      \"dependencies\": {\n        \"base64-js\": \"^1.3.1\",\n        \"ieee754\": \"^1.2.1\"\n      }\n    },\n",
                    "rendered": {
                      "text": "        }\n      ],\n      \"dependencies\": {\n        \"base64-js\": \"^1.3.1\",\n        \"ieee754\": \"^1.2.1\"\n      }\n    },\n",
                      "markdown": "`        }\n      ],\n      \"dependencies\": {\n        \"base64-js\": \"^1.3.1\",\n        \"ieee754\": \"^1.2.1\"\n      }\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/package-lock.json"
                },
                "region": {
                  "startLine": 2881,
                  "startColumn": 58,
                  "endLine": 2881,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"funding\": [\n        {\n",
                    "rendered": {
                      "text": "    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"funding\": [\n        {\n",
                      "markdown": "`    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"funding\": [\n        {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/package-lock.json"
                },
                "region": {
                  "startLine": 2881,
                  "startColumn": 46,
                  "endLine": 2881,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"funding\": [\n        {\n",
                    "rendered": {
                      "text": "    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"funding\": [\n        {\n",
                      "markdown": "`    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"funding\": [\n        {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/package-lock.json"
                },
                "region": {
                  "startLine": 2879,
                  "startColumn": 18,
                  "endLine": 2879,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true\n    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n",
                    "rendered": {
                      "text": "      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true\n    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n",
                      "markdown": "`      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true\n    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 35,
                  "endLine": 24,
                  "endColumn": 4,
                  "snippet": {
                    "text": "RUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"./akhq\"]\n",
                    "rendered": {
                      "text": "RUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"./akhq\"]\n",
                      "markdown": "`RUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"./akhq\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\n",
                    "rendered": {
                      "text": "    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\n",
                      "markdown": "`    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 11,
                  "endLine": 4,
                  "endColumn": 19,
                  "snippet": {
                    "text": "FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n",
                    "rendered": {
                      "text": "FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n",
                      "markdown": "`FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 3,
                  "endLine": 20,
                  "endColumn": 10,
                  "snippet": {
                    "text": "# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\nRUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\nENTRYPOINT [\"docker-entrypoint.sh\"]\n",
                    "rendered": {
                      "text": "# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\nRUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\nENTRYPOINT [\"docker-entrypoint.sh\"]\n",
                      "markdown": "`# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\nRUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\nENTRYPOINT [\"docker-entrypoint.sh\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 8,
                  "snippet": {
                    "text": "ENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\nRUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\n",
                    "rendered": {
                      "text": "ENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\nRUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\n",
                      "markdown": "`ENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\nRUN chown -R akhq /app\n# Use the 'akhq' user\nUSER akhq\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 13,
                  "endLine": 16,
                  "endColumn": 4,
                  "snippet": {
                    "text": "  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\nENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\n",
                    "rendered": {
                      "text": "  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\nENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\n",
                      "markdown": "`  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\nENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n# Chown to write configuration\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 4,
                  "endLine": 15,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\nENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n",
                    "rendered": {
                      "text": "  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\nENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n",
                      "markdown": "`  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\nENV MICRONAUT_CONFIG_FILES=/app/application.yml\n# Create user\nRUN useradd -ms /bin/bash akhq\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 5,
                  "endLine": 12,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\n",
                    "rendered": {
                      "text": "    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\n",
                      "markdown": "`    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n\nWORKDIR /app\nCOPY docker /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 3,
                  "endLine": 9,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n",
                    "rendered": {
                      "text": "      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n",
                      "markdown": "`      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n\nHEALTHCHECK --interval=1m --timeout=30s --retries=3 \\\n  CMD curl --fail http://localhost:28081/health || exit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "RUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n\n",
                    "rendered": {
                      "text": "RUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n\n",
                      "markdown": "`RUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 5,
                  "endLine": 6,
                  "endColumn": 11,
                  "snippet": {
                    "text": "# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n",
                    "rendered": {
                      "text": "# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n",
                      "markdown": "`# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get clean\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n",
                    "rendered": {
                      "text": "\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n",
                      "markdown": "`\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n    rm -rf /var/lib/apt/lists/* && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n",
                    "rendered": {
                      "text": "FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n",
                      "markdown": "`FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/Dockerfile"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 9,
                  "endLine": 4,
                  "snippet": {
                    "text": "FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n",
                    "rendered": {
                      "text": "FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n",
                      "markdown": "`FROM eclipse-temurin:17-jre\n\n# install curl\nRUN apt-get update && \\\n    apt-get install -y \\\n      curl && \\\n    apt-get upgrade -y &&\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew.bat"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 41,
                  "endLine": 7,
                  "snippet": {
                    "text": "@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew.bat"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 10,
                  "snippet": {
                    "text": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n",
                    "rendered": {
                      "text": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n",
                      "markdown": "`@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/gradlew.bat"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n",
                    "rendered": {
                      "text": "@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n",
                      "markdown": "`@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/.vuepress/public/assets/images/logo/akhqio_logo_black.svg"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 55,
                  "endLine": 597,
                  "endColumn": 61,
                  "snippet": {
                    "text": "AFr/rgB0/0gABgAi/9cANf/XADf/1wA4/9cAOf/XADr/wwABAFr/1wABAFr/1wADAFj/wwBZ/8MA\\\nWv/XAAEAMgAIAA0ADwAiACMAJQAnACgAKwAsAC0AMAAxADIAMwA0ADUANgA3ADgAOQA6AEEAQgBD\\\nAEQARQBGAEcASABJAEwATgBPAFAAUQBTAFQAVwBYAFkAWgBbAGkAqACqALgAxQDHANUAAA==\")}\n@font-face{font-family:'Roboto-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGII3OcBwAAArAAAGzk0dQT1OFW3RLAAG+VAADNLhjbWFwGoz2hQAAADwA\\\nAAqEAAAAAQAAAAMAAAAMAAQKeAAAApoCAAAIAJoAAAACAA0AJgAnAF8AYAB+AKAAowCkAKUApgCn\\\nAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQA\\\n",
                    "rendered": {
                      "text": "AFr/rgB0/0gABgAi/9cANf/XADf/1wA4/9cAOf/XADr/wwABAFr/1wABAFr/1wADAFj/wwBZ/8MA\\\nWv/XAAEAMgAIAA0ADwAiACMAJQAnACgAKwAsAC0AMAAxADIAMwA0ADUANgA3ADgAOQA6AEEAQgBD\\\nAEQARQBGAEcASABJAEwATgBPAFAAUQBTAFQAVwBYAFkAWgBbAGkAqACqALgAxQDHANUAAA==\")}\n@font-face{font-family:'Roboto-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGII3OcBwAAArAAAGzk0dQT1OFW3RLAAG+VAADNLhjbWFwGoz2hQAAADwA\\\nAAqEAAAAAQAAAAMAAAAMAAQKeAAAApoCAAAIAJoAAAACAA0AJgAnAF8AYAB+AKAAowCkAKUApgCn\\\nAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQA\\\n",
                      "markdown": "`AFr/rgB0/0gABgAi/9cANf/XADf/1wA4/9cAOf/XADr/wwABAFr/1wABAFr/1wADAFj/wwBZ/8MA\\\nWv/XAAEAMgAIAA0ADwAiACMAJQAnACgAKwAsAC0AMAAxADIAMwA0ADUANgA3ADgAOQA6AEEAQgBD\\\nAEQARQBGAEcASABJAEwATgBPAFAAUQBTAFQAVwBYAFkAWgBbAGkAqACqALgAxQDHANUAAA==\")}\n@font-face{font-family:'Roboto-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGII3OcBwAAArAAAGzk0dQT1OFW3RLAAG+VAADNLhjbWFwGoz2hQAAADwA\\\nAAqEAAAAAQAAAAMAAAAMAAQKeAAAApoCAAAIAJoAAAACAA0AJgAnAF8AYAB+AKAAowCkAKUApgCn\\\nAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQA\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/.vuepress/public/assets/images/logo/akhqio_logo_black.svg"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 56,
                  "endLine": 7,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\t viewBox=\"0 0 1100 500\" style=\"enable-background:new 0 0 1100 500;\" xml:space=\"preserve\">\n<style type=\"text/css\">\n<![CDATA[\n@font-face{font-family:'TwCenMT-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGIJ8yHr4AAATwAAB23kdQT1MjcigzAAB70AAAB05jbWFwLe9VHQAAADwA\\\nAAS0AAAAAQAAAAMAAAAMAAQEqAAAASYBAAAHACYAJgAnAF8AYAB+AKAAowCkAKUApgCnAKgAqQCq\\\nAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQAxQDGAMcA\\\n",
                    "rendered": {
                      "text": "\t viewBox=\"0 0 1100 500\" style=\"enable-background:new 0 0 1100 500;\" xml:space=\"preserve\">\n<style type=\"text/css\">\n<![CDATA[\n@font-face{font-family:'TwCenMT-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGIJ8yHr4AAATwAAB23kdQT1MjcigzAAB70AAAB05jbWFwLe9VHQAAADwA\\\nAAS0AAAAAQAAAAMAAAAMAAQEqAAAASYBAAAHACYAJgAnAF8AYAB+AKAAowCkAKUApgCnAKgAqQCq\\\nAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQAxQDGAMcA\\\n",
                      "markdown": "`\t viewBox=\"0 0 1100 500\" style=\"enable-background:new 0 0 1100 500;\" xml:space=\"preserve\">\n<style type=\"text/css\">\n<![CDATA[\n@font-face{font-family:'TwCenMT-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGIJ8yHr4AAATwAAB23kdQT1MjcigzAAB70AAAB05jbWFwLe9VHQAAADwA\\\nAAS0AAAAAQAAAAMAAAAMAAQEqAAAASYBAAAHACYAJgAnAF8AYAB+AKAAowCkAKUApgCnAKgAqQCq\\\nAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQAxQDGAMcA\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/.vuepress/public/assets/images/logo/akhqio_logo_white.svg"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 55,
                  "endLine": 597,
                  "endColumn": 61,
                  "snippet": {
                    "text": "AFr/rgB0/0gABgAi/9cANf/XADf/1wA4/9cAOf/XADr/wwABAFr/1wABAFr/1wADAFj/wwBZ/8MA\\\nWv/XAAEAMgAIAA0ADwAiACMAJQAnACgAKwAsAC0AMAAxADIAMwA0ADUANgA3ADgAOQA6AEEAQgBD\\\nAEQARQBGAEcASABJAEwATgBPAFAAUQBTAFQAVwBYAFkAWgBbAGkAqACqALgAxQDHANUAAA==\")}\n@font-face{font-family:'Roboto-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGII3OcBwAAArAAAGzk0dQT1OFW3RLAAG+VAADNLhjbWFwGoz2hQAAADwA\\\nAAqEAAAAAQAAAAMAAAAMAAQKeAAAApoCAAAIAJoAAAACAA0AJgAnAF8AYAB+AKAAowCkAKUApgCn\\\nAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQA\\\n",
                    "rendered": {
                      "text": "AFr/rgB0/0gABgAi/9cANf/XADf/1wA4/9cAOf/XADr/wwABAFr/1wABAFr/1wADAFj/wwBZ/8MA\\\nWv/XAAEAMgAIAA0ADwAiACMAJQAnACgAKwAsAC0AMAAxADIAMwA0ADUANgA3ADgAOQA6AEEAQgBD\\\nAEQARQBGAEcASABJAEwATgBPAFAAUQBTAFQAVwBYAFkAWgBbAGkAqACqALgAxQDHANUAAA==\")}\n@font-face{font-family:'Roboto-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGII3OcBwAAArAAAGzk0dQT1OFW3RLAAG+VAADNLhjbWFwGoz2hQAAADwA\\\nAAqEAAAAAQAAAAMAAAAMAAQKeAAAApoCAAAIAJoAAAACAA0AJgAnAF8AYAB+AKAAowCkAKUApgCn\\\nAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQA\\\n",
                      "markdown": "`AFr/rgB0/0gABgAi/9cANf/XADf/1wA4/9cAOf/XADr/wwABAFr/1wABAFr/1wADAFj/wwBZ/8MA\\\nWv/XAAEAMgAIAA0ADwAiACMAJQAnACgAKwAsAC0AMAAxADIAMwA0ADUANgA3ADgAOQA6AEEAQgBD\\\nAEQARQBGAEcASABJAEwATgBPAFAAUQBTAFQAVwBYAFkAWgBbAGkAqACqALgAxQDHANUAAA==\")}\n@font-face{font-family:'Roboto-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGII3OcBwAAArAAAGzk0dQT1OFW3RLAAG+VAADNLhjbWFwGoz2hQAAADwA\\\nAAqEAAAAAQAAAAMAAAAMAAQKeAAAApoCAAAIAJoAAAACAA0AJgAnAF8AYAB+AKAAowCkAKUApgCn\\\nAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQA\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/.vuepress/public/assets/images/logo/akhqio_logo_white.svg"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 56,
                  "endLine": 7,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\t viewBox=\"0 0 1100 500\" style=\"enable-background:new 0 0 1100 500;\" xml:space=\"preserve\" fill=\"#fff\">\n<style type=\"text/css\">\n<![CDATA[\n@font-face{font-family:'TwCenMT-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGIJ8yHr4AAATwAAB23kdQT1MjcigzAAB70AAAB05jbWFwLe9VHQAAADwA\\\nAAS0AAAAAQAAAAMAAAAMAAQEqAAAASYBAAAHACYAJgAnAF8AYAB+AKAAowCkAKUApgCnAKgAqQCq\\\nAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQAxQDGAMcA\\\n",
                    "rendered": {
                      "text": "\t viewBox=\"0 0 1100 500\" style=\"enable-background:new 0 0 1100 500;\" xml:space=\"preserve\" fill=\"#fff\">\n<style type=\"text/css\">\n<![CDATA[\n@font-face{font-family:'TwCenMT-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGIJ8yHr4AAATwAAB23kdQT1MjcigzAAB70AAAB05jbWFwLe9VHQAAADwA\\\nAAS0AAAAAQAAAAMAAAAMAAQEqAAAASYBAAAHACYAJgAnAF8AYAB+AKAAowCkAKUApgCnAKgAqQCq\\\nAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQAxQDGAMcA\\\n",
                      "markdown": "`\t viewBox=\"0 0 1100 500\" style=\"enable-background:new 0 0 1100 500;\" xml:space=\"preserve\" fill=\"#fff\">\n<style type=\"text/css\">\n<![CDATA[\n@font-face{font-family:'TwCenMT-Regular';src:url(\"data:;base64,\\\nT1RUTwADACAAAQAQQ0ZGIJ8yHr4AAATwAAB23kdQT1MjcigzAAB70AAAB05jbWFwLe9VHQAAADwA\\\nAAS0AAAAAQAAAAMAAAAMAAQEqAAAASYBAAAHACYAJgAnAF8AYAB+AKAAowCkAKUApgCnAKgAqQCq\\\nAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwgDDAMQAxQDGAMcA\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/Server.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 81,
                  "endLine": 35,
                  "endColumn": 86,
                  "snippet": {
                    "text": "     */\r\n    public void setCustomHttpResponseHeaders(List<Map<String, String>> customHttpResponseHeaders) {\r\n        customHttpResponseHeaders.forEach(header ->\r\n                this.customHttpResponseHeaders.put(header.get(HEADER_KEY), header.get(HEADER_VALUE))\r\n        );\r\n    }\r\n}\r\n",
                    "rendered": {
                      "text": "     */\r\n    public void setCustomHttpResponseHeaders(List<Map<String, String>> customHttpResponseHeaders) {\r\n        customHttpResponseHeaders.forEach(header ->\r\n                this.customHttpResponseHeaders.put(header.get(HEADER_KEY), header.get(HEADER_VALUE))\r\n        );\r\n    }\r\n}\r\n",
                      "markdown": "`     */\r\n    public void setCustomHttpResponseHeaders(List<Map<String, String>> customHttpResponseHeaders) {\r\n        customHttpResponseHeaders.forEach(header ->\r\n                this.customHttpResponseHeaders.put(header.get(HEADER_KEY), header.get(HEADER_VALUE))\r\n        );\r\n    }\r\n}\r\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/Server.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 57,
                  "endLine": 35,
                  "endColumn": 62,
                  "snippet": {
                    "text": "     */\r\n    public void setCustomHttpResponseHeaders(List<Map<String, String>> customHttpResponseHeaders) {\r\n        customHttpResponseHeaders.forEach(header ->\r\n                this.customHttpResponseHeaders.put(header.get(HEADER_KEY), header.get(HEADER_VALUE))\r\n        );\r\n    }\r\n}\r\n",
                    "rendered": {
                      "text": "     */\r\n    public void setCustomHttpResponseHeaders(List<Map<String, String>> customHttpResponseHeaders) {\r\n        customHttpResponseHeaders.forEach(header ->\r\n                this.customHttpResponseHeaders.put(header.get(HEADER_KEY), header.get(HEADER_VALUE))\r\n        );\r\n    }\r\n}\r\n",
                      "markdown": "`     */\r\n    public void setCustomHttpResponseHeaders(List<Map<String, String>> customHttpResponseHeaders) {\r\n        customHttpResponseHeaders.forEach(header ->\r\n                this.customHttpResponseHeaders.put(header.get(HEADER_KEY), header.get(HEADER_VALUE))\r\n        );\r\n    }\r\n}\r\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/configs/KsqlDb.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 20,
                  "endLine": 17,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    boolean useAlpn = false;\n    boolean verifyHost = true;\n    String basicAuthUsername;\n    String basicAuthPassword;\n}",
                    "rendered": {
                      "text": "    boolean useAlpn = false;\n    boolean verifyHost = true;\n    String basicAuthUsername;\n    String basicAuthPassword;\n}",
                      "markdown": "`    boolean useAlpn = false;\n    boolean verifyHost = true;\n    String basicAuthUsername;\n    String basicAuthPassword;\n}`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/ConnectDefinition.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 74,
                  "endLine": 77,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    }\n\n    public Optional<String> getConfig(String config) {\n        return this.configs.containsKey(config) ? Optional.of(this.configs.get(config)) : Optional.empty();\n    }\n\n    public boolean isPaused() {\n",
                    "rendered": {
                      "text": "    }\n\n    public Optional<String> getConfig(String config) {\n        return this.configs.containsKey(config) ? Optional.of(this.configs.get(config)) : Optional.empty();\n    }\n\n    public boolean isPaused() {\n",
                      "markdown": "`    }\n\n    public Optional<String> getConfig(String config) {\n        return this.configs.containsKey(config) ? Optional.of(this.configs.get(config)) : Optional.empty();\n    }\n\n    public boolean isPaused() {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/ConnectDefinition.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 67,
                  "endLine": 54,
                  "endColumn": 73,
                  "snippet": {
                    "text": "            .stream()\n            .filter(entry -> entry.getKey().equals(\"connector.class\"))\n            .findFirst()\n            .orElseThrow(() -> new NoSuchElementException(\"Couldn't find connector.class config\"))\n            .getValue()\n                .split(\"\\\\.\")\n        ;\n",
                    "rendered": {
                      "text": "            .stream()\n            .filter(entry -> entry.getKey().equals(\"connector.class\"))\n            .findFirst()\n            .orElseThrow(() -> new NoSuchElementException(\"Couldn't find connector.class config\"))\n            .getValue()\n                .split(\"\\\\.\")\n        ;\n",
                      "markdown": "`            .stream()\n            .filter(entry -> entry.getKey().equals(\"connector.class\"))\n            .findFirst()\n            .orElseThrow(() -> new NoSuchElementException(\"Couldn't find connector.class config\"))\n            .getValue()\n                .split(\"\\\\.\")\n        ;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Node.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 41,
                  "endLine": 29,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    @EqualsAndHashCode(callSuper=true)\n    @Getter\n    @NoArgsConstructor\n    public static class Partition extends Node {\n        private boolean leader;\n        private boolean inSyncReplicas;\n\n",
                    "rendered": {
                      "text": "    @EqualsAndHashCode(callSuper=true)\n    @Getter\n    @NoArgsConstructor\n    public static class Partition extends Node {\n        private boolean leader;\n        private boolean inSyncReplicas;\n\n",
                      "markdown": "`    @EqualsAndHashCode(callSuper=true)\n    @Getter\n    @NoArgsConstructor\n    public static class Partition extends Node {\n        private boolean leader;\n        private boolean inSyncReplicas;\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Node.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 12,
                  "endLine": 12,
                  "endColumn": 18,
                  "snippet": {
                    "text": "@EqualsAndHashCode\n@Getter\n@NoArgsConstructor\npublic class Node {\n    private int id;\n    private String host;\n    private int port;\n",
                    "rendered": {
                      "text": "@EqualsAndHashCode\n@Getter\n@NoArgsConstructor\npublic class Node {\n    private int id;\n    private String host;\n    private int port;\n",
                      "markdown": "`@EqualsAndHashCode\n@Getter\n@NoArgsConstructor\npublic class Node {\n    private int id;\n    private String host;\n    private int port;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/GroovyClaimProviderTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 45,
                  "endLine": 43,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/GroovyClaimProviderTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 30,
                  "endLine": 43,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/GroovyClaimProviderTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 28,
                  "endLine": 41,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = groups.get(\"limited\").get(0);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/GroovyClaimProviderTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 118,
                  "endLine": 38,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/GroovyClaimProviderTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 96,
                  "endLine": 38,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/GroovyClaimProviderTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 57,
                  "endLine": 36,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/GroovyClaimProviderTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 67,
                  "endLine": 28,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    @Test\n    void successUser() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "    @Test\n    void successUser() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`    @Test\n    void successUser() {\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(auth.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/GroovyClaimProviderTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 52,
                  "endLine": 4,
                  "endColumn": 60,
                  "snippet": {
                    "text": "package org.akhq.security.claim;\n\nimport io.micronaut.security.authentication.AuthenticationResponse;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport io.reactivex.Flowable;\nimport org.akhq.configs.security.Group;\n",
                    "rendered": {
                      "text": "package org.akhq.security.claim;\n\nimport io.micronaut.security.authentication.AuthenticationResponse;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport io.reactivex.Flowable;\nimport org.akhq.configs.security.Group;\n",
                      "markdown": "`package org.akhq.security.claim;\n\nimport io.micronaut.security.authentication.AuthenticationResponse;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport io.reactivex.Flowable;\nimport org.akhq.configs.security.Group;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 51,
                  "endLine": 97,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        @Post\n        String generateClaim(@Body ClaimRequest request,\n                @Header(\"X-Custom-Authentication\") Optional<String> authHeader) {\n            if (authHeader.isEmpty() || !authHeader.get().equals(\"Bearer custom-authentication\")) {\n                throw new RuntimeException(\"Invalid custom authentication header.\");\n            }\n\n",
                    "rendered": {
                      "text": "        @Post\n        String generateClaim(@Body ClaimRequest request,\n                @Header(\"X-Custom-Authentication\") Optional<String> authHeader) {\n            if (authHeader.isEmpty() || !authHeader.get().equals(\"Bearer custom-authentication\")) {\n                throw new RuntimeException(\"Invalid custom authentication header.\");\n            }\n\n",
                      "markdown": "`        @Post\n        String generateClaim(@Body ClaimRequest request,\n                @Header(\"X-Custom-Authentication\") Optional<String> authHeader) {\n            if (authHeader.isEmpty() || !authHeader.get().equals(\"Bearer custom-authentication\")) {\n                throw new RuntimeException(\"Invalid custom authentication header.\");\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 77,
                  "endLine": 73,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 62,
                  "endLine": 73,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n        assertThat(limited.getPatterns(), containsInAnyOrder(\"user.*\"));\n        assertThat(limited.getClusters(), containsInAnyOrder(\"pub.*\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 28,
                  "endLine": 71,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n        Map<String, List<Group>> groups = new ObjectMapper().readValue(compressedGroups, Map.class);\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n",
                    "rendered": {
                      "text": "\n        Map<String, List<Group>> groups = new ObjectMapper().readValue(compressedGroups, Map.class);\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n",
                      "markdown": "`\n        Map<String, List<Group>> groups = new ObjectMapper().readValue(compressedGroups, Map.class);\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n\n        Group limited = new ObjectMapper().convertValue(groups.get(\"limited\").get(0), Group.class);\n        assertThat(limited.getRole(), is(\"topic-read\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 58,
                  "endLine": 60,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n\n        String jwtCookie = resultResponse.getCookie(\"JWT\").get().getValue();\n        JWT token = JWTParser.parse(jwtCookie);\n\n        assertTrue(token.getJWTClaimsSet().getClaims().containsKey(\"groups\"));\n",
                    "rendered": {
                      "text": "\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n\n        String jwtCookie = resultResponse.getCookie(\"JWT\").get().getValue();\n        JWT token = JWTParser.parse(jwtCookie);\n\n        assertTrue(token.getJWTClaimsSet().getClaims().containsKey(\"groups\"));\n",
                      "markdown": "`\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n\n        String jwtCookie = resultResponse.getCookie(\"JWT\").get().getValue();\n        JWT token = JWTParser.parse(jwtCookie);\n\n        assertTrue(token.getJWTClaimsSet().getClaims().containsKey(\"groups\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 23,
                  "endLine": 55,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @Test\n    void loginExternalClaim() throws ParseException, JsonProcessingException {\n        HttpResponse<?> resultResponse = client.toBlocking().exchange(\n            HttpRequest.POST(\"/login\", new UsernamePasswordCredentials(\"admin\", \"pass\"))\n        );\n\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n",
                    "rendered": {
                      "text": "    @Test\n    void loginExternalClaim() throws ParseException, JsonProcessingException {\n        HttpResponse<?> resultResponse = client.toBlocking().exchange(\n            HttpRequest.POST(\"/login\", new UsernamePasswordCredentials(\"admin\", \"pass\"))\n        );\n\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n",
                      "markdown": "`    @Test\n    void loginExternalClaim() throws ParseException, JsonProcessingException {\n        HttpResponse<?> resultResponse = client.toBlocking().exchange(\n            HttpRequest.POST(\"/login\", new UsernamePasswordCredentials(\"admin\", \"pass\"))\n        );\n\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 51,
                  "endLine": 55,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    @Test\n    void loginExternalClaim() throws ParseException, JsonProcessingException {\n        HttpResponse<?> resultResponse = client.toBlocking().exchange(\n            HttpRequest.POST(\"/login\", new UsernamePasswordCredentials(\"admin\", \"pass\"))\n        );\n\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n",
                    "rendered": {
                      "text": "    @Test\n    void loginExternalClaim() throws ParseException, JsonProcessingException {\n        HttpResponse<?> resultResponse = client.toBlocking().exchange(\n            HttpRequest.POST(\"/login\", new UsernamePasswordCredentials(\"admin\", \"pass\"))\n        );\n\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n",
                      "markdown": "`    @Test\n    void loginExternalClaim() throws ParseException, JsonProcessingException {\n        HttpResponse<?> resultResponse = client.toBlocking().exchange(\n            HttpRequest.POST(\"/login\", new UsernamePasswordCredentials(\"admin\", \"pass\"))\n        );\n\n        assertTrue(resultResponse.getCookie(\"JWT\").isPresent());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 52,
                  "endLine": 23,
                  "endColumn": 60,
                  "snippet": {
                    "text": "import io.micronaut.http.filter.HttpServerFilter;\nimport io.micronaut.http.filter.ServerFilterChain;\nimport io.micronaut.rxjava2.http.client.RxHttpClient;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport jakarta.inject.Inject;\nimport lombok.extern.slf4j.Slf4j;\n",
                    "rendered": {
                      "text": "import io.micronaut.http.filter.HttpServerFilter;\nimport io.micronaut.http.filter.ServerFilterChain;\nimport io.micronaut.rxjava2.http.client.RxHttpClient;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport jakarta.inject.Inject;\nimport lombok.extern.slf4j.Slf4j;\n",
                      "markdown": "`import io.micronaut.http.filter.HttpServerFilter;\nimport io.micronaut.http.filter.ServerFilterChain;\nimport io.micronaut.rxjava2.http.client.RxHttpClient;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport jakarta.inject.Inject;\nimport lombok.extern.slf4j.Slf4j;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 12,
                  "endLine": 67,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n        var gzip = new GzipCompressionAlgorithm();\n        String compressedGroups = new String(gzip.decompress(\n            Base64.getDecoder().decode((String) token.getJWTClaimsSet().getClaim(\"groups\"))));\n\n        Map<String, List<Group>> groups = new ObjectMapper().readValue(compressedGroups, Map.class);\n        assertThat(groups.keySet(), hasSize(1));\n",
                    "rendered": {
                      "text": "\n        var gzip = new GzipCompressionAlgorithm();\n        String compressedGroups = new String(gzip.decompress(\n            Base64.getDecoder().decode((String) token.getJWTClaimsSet().getClaim(\"groups\"))));\n\n        Map<String, List<Group>> groups = new ObjectMapper().readValue(compressedGroups, Map.class);\n        assertThat(groups.keySet(), hasSize(1));\n",
                      "markdown": "`\n        var gzip = new GzipCompressionAlgorithm();\n        String compressedGroups = new String(gzip.decompress(\n            Base64.getDecoder().decode((String) token.getJWTClaimsSet().getClaim(\"groups\"))));\n\n        Map<String, List<Group>> groups = new ObjectMapper().readValue(compressedGroups, Map.class);\n        assertThat(groups.keySet(), hasSize(1));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/RestApiClaimProviderTest.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "endLine": 34,
                  "endColumn": 23,
                  "snippet": {
                    "text": "import org.reactivestreams.Publisher;\n\nimport java.text.ParseException;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n",
                    "rendered": {
                      "text": "import org.reactivestreams.Publisher;\n\nimport java.text.ParseException;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n",
                      "markdown": "`import org.reactivestreams.Publisher;\n\nimport java.text.ParseException;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 40,
                  "endLine": 102,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n    @Test\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 25,
                  "endLine": 102,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n    @Test\n",
                      "markdown": "`        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 25,
                  "endLine": 101,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n",
                    "rendered": {
                      "text": "\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n",
                      "markdown": "`\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 28,
                  "endLine": 100,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n",
                    "rendered": {
                      "text": "        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n",
                      "markdown": "`        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n        assertThat(groups.get(\"limited\").stream().map(Group::getRole).collect(Collectors.toList()), containsInAnyOrder(\"topic-read\", \"acl-read\"));\n        assertThat(groups.get(\"limited\").get(1).getPatterns(), containsInAnyOrder(\"user.*\"));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 118,
                  "endLine": 97,
                  "endColumn": 123,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 96,
                  "endLine": 97,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                    "rendered": {
                      "text": "        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n",
                      "markdown": "`        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n        assertThat(groups.keySet(), hasSize(1));\n        assertNotNull(groups.get(\"limited\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 57,
                  "endLine": 95,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                    "rendered": {
                      "text": "\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n",
                      "markdown": "`\n        assertTrue(response.isAuthenticated());\n        assertTrue(response.getAuthentication().isPresent());\n        assertEquals(\"user\", response.getAuthentication().get().getName());\n\n        Map<String, List<Group>> groups = (Map<String, List<Group>>)response.getAuthentication().get().getAttributes().get(\"groups\");\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 71,
                  "endLine": 140,
                  "endColumn": 79,
                  "snippet": {
                    "text": "            .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n",
                    "rendered": {
                      "text": "            .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n",
                      "markdown": "`            .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 71,
                  "endLine": 118,
                  "endColumn": 79,
                  "snippet": {
                    "text": "            .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n",
                    "rendered": {
                      "text": "            .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n",
                      "markdown": "`            .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n            .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                \"user\",\n                \"pass\"\n            ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 75,
                  "endLine": 88,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                    "rendered": {
                      "text": "                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n",
                      "markdown": "`                .thenReturn(Optional.of(jwt));\n\n        AuthenticationResponse response = (AuthenticationResponse) Flowable\n                .fromPublisher(oidcProvider.authenticate(null, new UsernamePasswordCredentials(\n                        \"user\",\n                        \"pass\"\n                ))).blockingFirst();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/security/claim/OidcDirectClaimAuthenticationProviderTest.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 52,
                  "endLine": 9,
                  "endColumn": 60,
                  "snippet": {
                    "text": "import io.micronaut.core.async.publisher.Publishers;\nimport io.micronaut.security.authentication.AuthenticationFailed;\nimport io.micronaut.security.authentication.AuthenticationResponse;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.security.authentication.provider.ReactiveAuthenticationProvider;\nimport io.micronaut.security.oauth2.client.DefaultOpenIdProviderMetadata;\nimport io.micronaut.security.oauth2.endpoint.token.request.TokenEndpointClient;\n",
                    "rendered": {
                      "text": "import io.micronaut.core.async.publisher.Publishers;\nimport io.micronaut.security.authentication.AuthenticationFailed;\nimport io.micronaut.security.authentication.AuthenticationResponse;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.security.authentication.provider.ReactiveAuthenticationProvider;\nimport io.micronaut.security.oauth2.client.DefaultOpenIdProviderMetadata;\nimport io.micronaut.security.oauth2.endpoint.token.request.TokenEndpointClient;\n",
                      "markdown": "`import io.micronaut.core.async.publisher.Publishers;\nimport io.micronaut.security.authentication.AuthenticationFailed;\nimport io.micronaut.security.authentication.AuthenticationResponse;\nimport io.micronaut.security.authentication.UsernamePasswordCredentials;\nimport io.micronaut.security.authentication.provider.ReactiveAuthenticationProvider;\nimport io.micronaut.security.oauth2.client.DefaultOpenIdProviderMetadata;\nimport io.micronaut.security.oauth2.endpoint.token.request.TokenEndpointClient;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/SecurityPropertiesTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 62,
                  "endLine": 51,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n    }\n",
                    "rendered": {
                      "text": "\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n    }\n",
                      "markdown": "`\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/SecurityPropertiesTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 49,
                  "endLine": 51,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n    }\n",
                    "rendered": {
                      "text": "\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n    }\n",
                      "markdown": "`\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/SecurityPropertiesTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 62,
                  "endLine": 50,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n",
                    "rendered": {
                      "text": "        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n",
                      "markdown": "`        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/SecurityPropertiesTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 49,
                  "endLine": 50,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n",
                    "rendered": {
                      "text": "        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n",
                      "markdown": "`        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n        ctx.close();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/configs/security/SecurityPropertiesTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 49,
                  "endLine": 49,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                securityProperties.getGroups().keySet()\n        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n",
                    "rendered": {
                      "text": "                securityProperties.getGroups().keySet()\n        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n",
                      "markdown": "`                securityProperties.getGroups().keySet()\n        );\n\n        assertThat(securityProperties.getGroups().get(\"admin\"), hasSize(1));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getRole(), is(\"topic-read\"));\n        assertThat(securityProperties.getGroups().get(\"admin\").get(0).getPatterns(), containsInAnyOrder(\".*\"));\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/SchemaRegistryRepositoryTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 61,
                  "endLine": 136,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        assertTrue(latestVersion.getAvroSchema().getFields().stream().anyMatch(field -> field.name().equals(\"schema3\")));\n        assertEquals(1, latestVersion.getReferences().size());\n        assertEquals(\"Schema3\", latestVersion.getReferences().get(0).getName());\n        assertEquals(SUBJECT_3, latestVersion.getReferences().get(0).getSubject());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        assertTrue(latestVersion.getAvroSchema().getFields().stream().anyMatch(field -> field.name().equals(\"schema3\")));\n        assertEquals(1, latestVersion.getReferences().size());\n        assertEquals(\"Schema3\", latestVersion.getReferences().get(0).getName());\n        assertEquals(SUBJECT_3, latestVersion.getReferences().get(0).getSubject());\n    }\n\n    @Test\n",
                      "markdown": "`        assertTrue(latestVersion.getAvroSchema().getFields().stream().anyMatch(field -> field.name().equals(\"schema3\")));\n        assertEquals(1, latestVersion.getReferences().size());\n        assertEquals(\"Schema3\", latestVersion.getReferences().get(0).getName());\n        assertEquals(SUBJECT_3, latestVersion.getReferences().get(0).getSubject());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/SchemaRegistryRepositoryTest.java"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 61,
                  "endLine": 135,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        assertEquals(\"org.akhq.Schema4\", latestVersion.getAvroSchema().getFullName());\n        assertTrue(latestVersion.getAvroSchema().getFields().stream().anyMatch(field -> field.name().equals(\"schema3\")));\n        assertEquals(1, latestVersion.getReferences().size());\n        assertEquals(\"Schema3\", latestVersion.getReferences().get(0).getName());\n        assertEquals(SUBJECT_3, latestVersion.getReferences().get(0).getSubject());\n    }\n\n",
                    "rendered": {
                      "text": "        assertEquals(\"org.akhq.Schema4\", latestVersion.getAvroSchema().getFullName());\n        assertTrue(latestVersion.getAvroSchema().getFields().stream().anyMatch(field -> field.name().equals(\"schema3\")));\n        assertEquals(1, latestVersion.getReferences().size());\n        assertEquals(\"Schema3\", latestVersion.getReferences().get(0).getName());\n        assertEquals(SUBJECT_3, latestVersion.getReferences().get(0).getSubject());\n    }\n\n",
                      "markdown": "`        assertEquals(\"org.akhq.Schema4\", latestVersion.getAvroSchema().getFullName());\n        assertTrue(latestVersion.getAvroSchema().getFields().stream().anyMatch(field -> field.name().equals(\"schema3\")));\n        assertEquals(1, latestVersion.getReferences().size());\n        assertEquals(\"Schema3\", latestVersion.getReferences().get(0).getName());\n        assertEquals(SUBJECT_3, latestVersion.getReferences().get(0).getSubject());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/KsqlDbRepositoryTest.java"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 75,
                  "endLine": 165,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        assertEquals(3, ksqlDbQueryResult.getColumnNames().size());\n        assertEquals(1, ksqlDbQueryResult.getColumnValues().size());\n        assertEquals(List.of(\"ORDER_ID\", \"PRODUCT_ID\", \"USER_ID\"), ksqlDbQueryResult.getColumnNames());\n        assertEquals(\"[1,\\\"1\\\",\\\"1\\\"]\", ksqlDbQueryResult.getColumnValues().get(0));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        assertEquals(3, ksqlDbQueryResult.getColumnNames().size());\n        assertEquals(1, ksqlDbQueryResult.getColumnValues().size());\n        assertEquals(List.of(\"ORDER_ID\", \"PRODUCT_ID\", \"USER_ID\"), ksqlDbQueryResult.getColumnNames());\n        assertEquals(\"[1,\\\"1\\\",\\\"1\\\"]\", ksqlDbQueryResult.getColumnValues().get(0));\n    }\n\n    @Test\n",
                      "markdown": "`        assertEquals(3, ksqlDbQueryResult.getColumnNames().size());\n        assertEquals(1, ksqlDbQueryResult.getColumnValues().size());\n        assertEquals(List.of(\"ORDER_ID\", \"PRODUCT_ID\", \"USER_ID\"), ksqlDbQueryResult.getColumnNames());\n        assertEquals(\"[1,\\\"1\\\",\\\"1\\\"]\", ksqlDbQueryResult.getColumnValues().get(0));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 23,
                  "endLine": 49,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void user() {\n        AkhqController.AuthUser result = this.retrieve(\n            HttpRequest.GET(\"/api/me\"),\n            AkhqController.AuthUser.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void user() {\n        AkhqController.AuthUser result = this.retrieve(\n            HttpRequest.GET(\"/api/me\"),\n            AkhqController.AuthUser.class\n        );\n\n",
                      "markdown": "`    @Test\n    void user() {\n        AkhqController.AuthUser result = this.retrieve(\n            HttpRequest.GET(\"/api/me\"),\n            AkhqController.AuthUser.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 23,
                  "endLine": 38,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void auth() {\n        AkhqController.AuthDefinition result = this.retrieve(\n            HttpRequest.GET(\"/api/auths\"),\n            AkhqController.AuthDefinition.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void auth() {\n        AkhqController.AuthDefinition result = this.retrieve(\n            HttpRequest.GET(\"/api/auths\"),\n            AkhqController.AuthDefinition.class\n        );\n\n",
                      "markdown": "`    @Test\n    void auth() {\n        AkhqController.AuthDefinition result = this.retrieve(\n            HttpRequest.GET(\"/api/auths\"),\n            AkhqController.AuthDefinition.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 40,
                  "endLine": 32,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n\n    @Test\n",
                      "markdown": "`        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 25,
                  "endLine": 31,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n\n",
                    "rendered": {
                      "text": "        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n\n",
                      "markdown": "`        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 57,
                  "endLine": 30,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n",
                    "rendered": {
                      "text": "        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n",
                      "markdown": "`        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 37,
                  "endLine": 30,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n",
                    "rendered": {
                      "text": "        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n",
                      "markdown": "`        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 30,
                  "endLine": 29,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n",
                    "rendered": {
                      "text": "        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n",
                      "markdown": "`        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n        assertEquals(\"CONFLUENT\", result.get(0).getRegistryType());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 61,
                  "endLine": 28,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n",
                    "rendered": {
                      "text": "        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n",
                      "markdown": "`        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 40,
                  "endLine": 28,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n",
                    "rendered": {
                      "text": "        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n",
                      "markdown": "`        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n        assertTrue(result.get(0).isRegistry());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 30,
                  "endLine": 27,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n",
                    "rendered": {
                      "text": "\n        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n",
                      "markdown": "`\n        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n        assertEquals(\"ksqldb\", result.get(0).getKsqldbs().get(0));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 56,
                  "endLine": 26,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        );\n\n        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n",
                    "rendered": {
                      "text": "        );\n\n        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n",
                      "markdown": "`        );\n\n        assertEquals(1, result.size());\n        assertEquals(KafkaTestCluster.CLUSTER_ID, result.get(0).getId());\n        assertEquals(2, result.get(0).getConnects().size());\n        assertEquals(\"connect-1\", result.get(0).getConnects().get(0));\n        assertEquals(1, result.get(0).getKsqldbs().size());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/AkhqControllerTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 23,
                  "endLine": 21,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @Test\n    void list() {\n        List<AkhqController.ClusterDefinition> result = this.retrieveList(\n            HttpRequest.GET(\"/api/cluster\"),\n            AkhqController.ClusterDefinition.class\n        );\n\n",
                    "rendered": {
                      "text": "    @Test\n    void list() {\n        List<AkhqController.ClusterDefinition> result = this.retrieveList(\n            HttpRequest.GET(\"/api/cluster\"),\n            AkhqController.ClusterDefinition.class\n        );\n\n",
                      "markdown": "`    @Test\n    void list() {\n        List<AkhqController.ClusterDefinition> result = this.retrieveList(\n            HttpRequest.GET(\"/api/cluster\"),\n            AkhqController.ClusterDefinition.class\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 33,
                  "endLine": 257,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    @Test\n    @Order(7)\n    void increasePartitionApi() {\n        this.exchange(HttpRequest.POST(CREATE_TOPIC_URL + \"/partitions\",\n            ImmutableMap.of(\"partition\", 4)));\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(7)\n    void increasePartitionApi() {\n        this.exchange(HttpRequest.POST(CREATE_TOPIC_URL + \"/partitions\",\n            ImmutableMap.of(\"partition\", 4)));\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(7)\n    void increasePartitionApi() {\n        this.exchange(HttpRequest.POST(CREATE_TOPIC_URL + \"/partitions\",\n            ImmutableMap.of(\"partition\", 4)));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 27,
                  "endLine": 251,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n\n    @Test\n",
                      "markdown": "`        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 27,
                  "endLine": 250,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n\n",
                    "rendered": {
                      "text": "\n        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n\n",
                      "markdown": "`\n        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 27,
                  "endLine": 249,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        ), Record.class);\n\n        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n",
                    "rendered": {
                      "text": "        ), Record.class);\n\n        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n",
                      "markdown": "`        ), Record.class);\n\n        assertEquals(3, response.size());\n        assertTrue(response.get(0).getValue().contains(\"key1_{\\\"test_1\\\":1}\"));\n        assertTrue(response.get(1).getValue().contains(\"key2_{\\\"test_1\\\":2}\"));\n        assertTrue(response.get(2).getValue().contains(\"key3_{\\\"test_1\\\":3}\"));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 61,
                  "endLine": 244,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        paramMap.put(\"headers\", List.of(\n            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n",
                    "rendered": {
                      "text": "        paramMap.put(\"headers\", List.of(\n            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n",
                      "markdown": "`        paramMap.put(\"headers\", List.of(\n            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 42,
                  "endLine": 229,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n    }\n\n    @Test\n",
                      "markdown": "`        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 56,
                  "endLine": 228,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        // @TODO: Failed to see the message\n        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n    }\n\n",
                    "rendered": {
                      "text": "        // @TODO: Failed to see the message\n        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n    }\n\n",
                      "markdown": "`        // @TODO: Failed to see the message\n        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 54,
                  "endLine": 226,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n        // get data\n        // @TODO: Failed to see the message\n        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n",
                    "rendered": {
                      "text": "\n        // get data\n        // @TODO: Failed to see the message\n        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n",
                      "markdown": "`\n        // get data\n        // @TODO: Failed to see the message\n        // records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        // assertEquals(2, records.getResults().size());\n        // assertEquals(\"my-value\", records.getResults().get(0).getValue());\n        // assertNull(records.getResults().get(1).getValue());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 53,
                  "endLine": 206,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    void dataGet() {\n        ResultNextList<Record> records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        assertEquals(1, records.getResults().size());\n        assertEquals(\"my-value\", records.getResults().get(0).getValue());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "    void dataGet() {\n        ResultNextList<Record> records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        assertEquals(1, records.getResults().size());\n        assertEquals(\"my-value\", records.getResults().get(0).getValue());\n    }\n\n    @Test\n",
                      "markdown": "`    void dataGet() {\n        ResultNextList<Record> records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        assertEquals(1, records.getResults().size());\n        assertEquals(\"my-value\", records.getResults().get(0).getValue());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 74,
                  "endLine": 204,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    @Test\n    @Order(4)\n    void dataGet() {\n        ResultNextList<Record> records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        assertEquals(1, records.getResults().size());\n        assertEquals(\"my-value\", records.getResults().get(0).getValue());\n    }\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(4)\n    void dataGet() {\n        ResultNextList<Record> records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        assertEquals(1, records.getResults().size());\n        assertEquals(\"my-value\", records.getResults().get(0).getValue());\n    }\n",
                      "markdown": "`    @Test\n    @Order(4)\n    void dataGet() {\n        ResultNextList<Record> records = this.retrieveNextList(HttpRequest.GET(CREATE_TOPIC_URL + \"/data\"), Record.class);\n        assertEquals(1, records.getResults().size());\n        assertEquals(\"my-value\", records.getResults().get(0).getValue());\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 27,
                  "endLine": 198,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        assertEquals(1, response.size());\n        assertEquals(\"my-key-tomb\", response.get(0).getKey());\n        assertNull(response.get(0).getValue());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "\n        assertEquals(1, response.size());\n        assertEquals(\"my-key-tomb\", response.get(0).getKey());\n        assertNull(response.get(0).getValue());\n    }\n\n    @Test\n",
                      "markdown": "`\n        assertEquals(1, response.size());\n        assertEquals(\"my-key-tomb\", response.get(0).getKey());\n        assertNull(response.get(0).getValue());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 44,
                  "endLine": 197,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ), Record.class);\n\n        assertEquals(1, response.size());\n        assertEquals(\"my-key-tomb\", response.get(0).getKey());\n        assertNull(response.get(0).getValue());\n    }\n\n",
                    "rendered": {
                      "text": "        ), Record.class);\n\n        assertEquals(1, response.size());\n        assertEquals(\"my-key-tomb\", response.get(0).getKey());\n        assertNull(response.get(0).getValue());\n    }\n\n",
                      "markdown": "`        ), Record.class);\n\n        assertEquals(1, response.size());\n        assertEquals(\"my-key-tomb\", response.get(0).getKey());\n        assertNull(response.get(0).getValue());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 61,
                  "endLine": 192,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        paramMap.put(\"headers\", List.of(\n            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n",
                    "rendered": {
                      "text": "        paramMap.put(\"headers\", List.of(\n            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n",
                      "markdown": "`        paramMap.put(\"headers\", List.of(\n            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 54,
                  "endLine": 179,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n    @Test\n",
                      "markdown": "`        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 34,
                  "endLine": 179,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n    @Test\n",
                      "markdown": "`        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 32,
                  "endLine": 178,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n",
                    "rendered": {
                      "text": "        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n",
                      "markdown": "`        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 32,
                  "endLine": 177,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n",
                    "rendered": {
                      "text": "        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n",
                      "markdown": "`        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 41,
                  "endLine": 176,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n",
                    "rendered": {
                      "text": "\n        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n",
                      "markdown": "`\n        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n        assertEquals(\"1\", response.get(0).getHeaders().get(0).getValue());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 39,
                  "endLine": 175,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        ), Record.class);\n\n        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n",
                    "rendered": {
                      "text": "        ), Record.class);\n\n        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n",
                      "markdown": "`        ), Record.class);\n\n        assertEquals(1, response.size());\n        assertEquals(\"my-key\", response.get(0).getKey());\n        assertEquals(\"my-value\", response.get(0).getValue());\n        assertEquals(1, response.get(0).getPartition());\n        assertEquals(2, response.get(0).getHeaders().size());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 61,
                  "endLine": 170,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        paramMap.put(\"multiMessage\", false);\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n",
                    "rendered": {
                      "text": "            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        paramMap.put(\"multiMessage\", false);\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n",
                      "markdown": "`            new KeyValue<>(\"my-header-1\", \"1\"),\n            new KeyValue<>(\"my-header-2\", \"2\")));\n        paramMap.put(\"multiMessage\", false);\n        List<Record> response = this.retrieveList(HttpRequest.POST(\n            CREATE_TOPIC_URL + \"/data\", paramMap\n        ), Record.class);\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 60,
                  "endLine": 148,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    @Test\n    @Order(3)\n    void checkConfigs() {\n        List<Config> configs = this.retrieveList(HttpRequest.GET(CREATE_TOPIC_URL + \"/configs\"), Config.class);\n        assertEquals(\n            TopicConfig.CLEANUP_POLICY_COMPACT,\n            configs.stream()\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(3)\n    void checkConfigs() {\n        List<Config> configs = this.retrieveList(HttpRequest.GET(CREATE_TOPIC_URL + \"/configs\"), Config.class);\n        assertEquals(\n            TopicConfig.CLEANUP_POLICY_COMPACT,\n            configs.stream()\n",
                      "markdown": "`    @Test\n    @Order(3)\n    void checkConfigs() {\n        List<Config> configs = this.retrieveList(HttpRequest.GET(CREATE_TOPIC_URL + \"/configs\"), Config.class);\n        assertEquals(\n            TopicConfig.CLEANUP_POLICY_COMPACT,\n            configs.stream()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 48,
                  "endLine": 130,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    @Order(2)\n    void create() {\n        // create\n        Topic result = this.retrieve(HttpRequest.POST(\n            BASE_URL,\n            ImmutableMap.of(\n                \"name\", CREATE_TOPIC_NAME,\n",
                    "rendered": {
                      "text": "    @Order(2)\n    void create() {\n        // create\n        Topic result = this.retrieve(HttpRequest.POST(\n            BASE_URL,\n            ImmutableMap.of(\n                \"name\", CREATE_TOPIC_NAME,\n",
                      "markdown": "`    @Order(2)\n    void create() {\n        // create\n        Topic result = this.retrieve(HttpRequest.POST(\n            BASE_URL,\n            ImmutableMap.of(\n                \"name\", CREATE_TOPIC_NAME,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 73,
                  "endLine": 120,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void dataApi() {\n        ResultNextList<Record> result = this.retrieveNextList(HttpRequest.GET(TOPIC_URL + \"/data\"), Record.class);\n        // 50 messages with the same key on each partition (1 remaining after compaction) : 3 messages\n        // 50 random messages on each partition : 150 messages\n        assertEquals(153, result.getSize());\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void dataApi() {\n        ResultNextList<Record> result = this.retrieveNextList(HttpRequest.GET(TOPIC_URL + \"/data\"), Record.class);\n        // 50 messages with the same key on each partition (1 remaining after compaction) : 3 messages\n        // 50 random messages on each partition : 150 messages\n        assertEquals(153, result.getSize());\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void dataApi() {\n        ResultNextList<Record> result = this.retrieveNextList(HttpRequest.GET(TOPIC_URL + \"/data\"), Record.class);\n        // 50 messages with the same key on each partition (1 remaining after compaction) : 3 messages\n        // 50 random messages on each partition : 150 messages\n        assertEquals(153, result.getSize());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 23,
                  "endLine": 107,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        String s = String.valueOf(new Random().nextInt((Integer.MAX_VALUE - Integer.MAX_VALUE/2) + 1) + Integer.MAX_VALUE/2);\n\n        List<Config> result = this.retrieveList(\n            HttpRequest.POST(\n                TOPIC_URL + \"/configs\",\n                ImmutableMap.of(\"configs\", ImmutableMap.of(\"message.timestamp.difference.max.ms\", s))\n            ),\n",
                    "rendered": {
                      "text": "        String s = String.valueOf(new Random().nextInt((Integer.MAX_VALUE - Integer.MAX_VALUE/2) + 1) + Integer.MAX_VALUE/2);\n\n        List<Config> result = this.retrieveList(\n            HttpRequest.POST(\n                TOPIC_URL + \"/configs\",\n                ImmutableMap.of(\"configs\", ImmutableMap.of(\"message.timestamp.difference.max.ms\", s))\n            ),\n",
                      "markdown": "`        String s = String.valueOf(new Random().nextInt((Integer.MAX_VALUE - Integer.MAX_VALUE/2) + 1) + Integer.MAX_VALUE/2);\n\n        List<Config> result = this.retrieveList(\n            HttpRequest.POST(\n                TOPIC_URL + \"/configs\",\n                ImmutableMap.of(\"configs\", ImmutableMap.of(\"message.timestamp.difference.max.ms\", s))\n            ),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 40,
                  "endLine": 98,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n    @Test\n",
                      "markdown": "`\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 40,
                  "endLine": 97,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/testAclTopic/acls\"), AccessControl.class);\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n",
                    "rendered": {
                      "text": "        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/testAclTopic/acls\"), AccessControl.class);\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n",
                      "markdown": "`        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/testAclTopic/acls\"), AccessControl.class);\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n        assertEquals(\"user:tata\", result.get(1).getPrincipal());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 66,
                  "endLine": 94,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void aclsApi() {\n        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/testAclTopic/acls\"), AccessControl.class);\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void aclsApi() {\n        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/testAclTopic/acls\"), AccessControl.class);\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void aclsApi() {\n        List<AccessControl> result = this.retrieveList(HttpRequest.GET(BASE_URL + \"/testAclTopic/acls\"), AccessControl.class);\n\n        assertEquals(2, result.size());\n        assertEquals(\"user:toto\", result.get(0).getPrincipal());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 59,
                  "endLine": 87,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void logsApi() {\n        List<LogDir> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/logs\"), LogDir.class);\n        assertEquals(3, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void logsApi() {\n        List<LogDir> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/logs\"), LogDir.class);\n        assertEquals(3, result.size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void logsApi() {\n        List<LogDir> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/logs\"), LogDir.class);\n        assertEquals(3, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 59,
                  "endLine": 80,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void configApi() {\n        List<Config> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/configs\"), Config.class);\n        assertEquals(\"0.0\", result.stream().filter(config -> config.getName().equals(TopicConfig.MIN_CLEANABLE_DIRTY_RATIO_CONFIG)).findFirst().orElseThrow().getValue());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void configApi() {\n        List<Config> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/configs\"), Config.class);\n        assertEquals(\"0.0\", result.stream().filter(config -> config.getName().equals(TopicConfig.MIN_CLEANABLE_DIRTY_RATIO_CONFIG)).findFirst().orElseThrow().getValue());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void configApi() {\n        List<Config> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/configs\"), Config.class);\n        assertEquals(\"0.0\", result.stream().filter(config -> config.getName().equals(TopicConfig.MIN_CLEANABLE_DIRTY_RATIO_CONFIG)).findFirst().orElseThrow().getValue());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 66,
                  "endLine": 73,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void groupsApi() {\n        List<ConsumerGroup> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/groups\"), ConsumerGroup.class);\n        assertEquals(KafkaTestCluster.CONSUMER_GROUP_COUNT, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void groupsApi() {\n        List<ConsumerGroup> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/groups\"), ConsumerGroup.class);\n        assertEquals(KafkaTestCluster.CONSUMER_GROUP_COUNT, result.size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void groupsApi() {\n        List<ConsumerGroup> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/groups\"), ConsumerGroup.class);\n        assertEquals(KafkaTestCluster.CONSUMER_GROUP_COUNT, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 62,
                  "endLine": 66,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void partitionsApi() {\n        List<Partition> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/partitions\"), Partition.class);\n        assertEquals(3, result.size());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void partitionsApi() {\n        List<Partition> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/partitions\"), Partition.class);\n        assertEquals(3, result.size());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void partitionsApi() {\n        List<Partition> result = this.retrieveList(HttpRequest.GET(TOPIC_URL + \"/partitions\"), Partition.class);\n        assertEquals(3, result.size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 48,
                  "endLine": 59,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void homeApi() {\n        Topic result = this.retrieve(HttpRequest.GET(TOPIC_URL), Topic.class);\n        assertEquals(KafkaTestCluster.TOPIC_COMPACTED, result.getName());\n    }\n\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void homeApi() {\n        Topic result = this.retrieve(HttpRequest.GET(TOPIC_URL), Topic.class);\n        assertEquals(KafkaTestCluster.TOPIC_COMPACTED, result.getName());\n    }\n\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void homeApi() {\n        Topic result = this.retrieve(HttpRequest.GET(TOPIC_URL), Topic.class);\n        assertEquals(KafkaTestCluster.TOPIC_COMPACTED, result.getName());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 51,
                  "endLine": 52,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        int expectedLastPageSize = KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT - 2 * DEFAULT_PAGE_SIZE;\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=3\"), Topic.class);\n        assertEquals(expectedLastPageSize, result.getResults().size());\n    }\n\n",
                    "rendered": {
                      "text": "        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        int expectedLastPageSize = KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT - 2 * DEFAULT_PAGE_SIZE;\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=3\"), Topic.class);\n        assertEquals(expectedLastPageSize, result.getResults().size());\n    }\n\n",
                      "markdown": "`        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        int expectedLastPageSize = KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT - 2 * DEFAULT_PAGE_SIZE;\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=3\"), Topic.class);\n        assertEquals(expectedLastPageSize, result.getResults().size());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 51,
                  "endLine": 48,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        assertEquals(expectedPageCount, result.getPage());\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), Topic.class);\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        int expectedLastPageSize = KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT - 2 * DEFAULT_PAGE_SIZE;\n",
                    "rendered": {
                      "text": "        assertEquals(expectedPageCount, result.getPage());\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), Topic.class);\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        int expectedLastPageSize = KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT - 2 * DEFAULT_PAGE_SIZE;\n",
                      "markdown": "`        assertEquals(expectedPageCount, result.getPage());\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL + \"?page=2\"), Topic.class);\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n        int expectedLastPageSize = KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT - 2 * DEFAULT_PAGE_SIZE;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 51,
                  "endLine": 44,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        ResultPagedList<Topic> result;\n\n        int expectedPageCount = (int) Math.ceil((double)KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT / DEFAULT_PAGE_SIZE);\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), Topic.class);\n        assertEquals(expectedPageCount, result.getPage());\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n",
                    "rendered": {
                      "text": "        ResultPagedList<Topic> result;\n\n        int expectedPageCount = (int) Math.ceil((double)KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT / DEFAULT_PAGE_SIZE);\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), Topic.class);\n        assertEquals(expectedPageCount, result.getPage());\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n",
                      "markdown": "`        ResultPagedList<Topic> result;\n\n        int expectedPageCount = (int) Math.ceil((double)KafkaTestCluster.TOPIC_HIDE_INTERNAL_COUNT / DEFAULT_PAGE_SIZE);\n        result = this.retrievePagedList(HttpRequest.GET(BASE_URL), Topic.class);\n        assertEquals(expectedPageCount, result.getPage());\n        assertEquals(DEFAULT_PAGE_SIZE, result.getResults().size());\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 30,
                  "endLine": 34,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n\n\n",
                    "rendered": {
                      "text": "\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n\n\n",
                      "markdown": "`\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 37,
                  "endLine": 33,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n\n",
                    "rendered": {
                      "text": "        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n\n",
                      "markdown": "`        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 30,
                  "endLine": 32,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    void defaultsConfigsApi(){\n        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n",
                    "rendered": {
                      "text": "    void defaultsConfigsApi(){\n        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n",
                      "markdown": "`    void defaultsConfigsApi(){\n        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n        assertEquals(1, result.get(\"partition\"));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 62,
                  "endLine": 30,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    @Test\n    @Order(1)\n    void defaultsConfigsApi(){\n        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n",
                    "rendered": {
                      "text": "    @Test\n    @Order(1)\n    void defaultsConfigsApi(){\n        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n",
                      "markdown": "`    @Test\n    @Order(1)\n    void defaultsConfigsApi(){\n        Map<String,Integer> result = this.retrieve(HttpRequest.GET(DEFAULTS_CONFIGS_URL), Map.class);\n\n        assertEquals(1, result.get(\"replication\"));\n        assertEquals(86400000, result.get(\"retention\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/controllers/TopicControllerTest.java"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 38,
                  "endLine": 216,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            HttpRequest.DELETE(\n                CREATE_TOPIC_URL + \"/data\",\n                ImmutableMap.of(\n                    \"key\", new String(Base64.getEncoder().encode(\"my-key\".getBytes())),\n                    \"partition\", 1\n                )\n            ),\n",
                    "rendered": {
                      "text": "            HttpRequest.DELETE(\n                CREATE_TOPIC_URL + \"/data\",\n                ImmutableMap.of(\n                    \"key\", new String(Base64.getEncoder().encode(\"my-key\".getBytes())),\n                    \"partition\", 1\n                )\n            ),\n",
                      "markdown": "`            HttpRequest.DELETE(\n                CREATE_TOPIC_URL + \"/data\",\n                ImmutableMap.of(\n                    \"key\", new String(Base64.getEncoder().encode(\"my-key\".getBytes())),\n                    \"partition\", 1\n                )\n            ),\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/protobuf_proto/generate-java-classes.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/protobuf_proto/generate-java-classes.sh"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 14,
                  "endLine": 4,
                  "endColumn": 20,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\nSRC_DIR=\".\"\nDST_DIR=\"../../java\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\nSRC_DIR=\".\"\nDST_DIR=\"../../java\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\nSRC_DIR=\".\"\nDST_DIR=\"../../java\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/protobuf_proto/generate-java-classes.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 3,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\nSRC_DIR=\".\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\nSRC_DIR=\".\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\nSRC_DIR=\".\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/protobuf_proto/generate-java-classes.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# This script generates AlbumProto and AlbumFilm Java classes from album.proto and film.proto files\n# Run it every time when change album.proto and film.proto files\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/protobuf_proto/generate-descriptor-file.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto",
                      "markdown": "`#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/protobuf_proto/generate-descriptor-file.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 3,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto",
                      "markdown": "`#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/protobuf_proto/generate-descriptor-file.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto",
                      "markdown": "`#!/usr/bin/env bash\n\n# This script generates album.desc and film.desc files (binary protobuf descriptors) from album.proto and film.proto files\n\nprotoc --descriptor_set_out=\"../protobuf_desc/film.desc\" --include_imports film.proto`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application.yml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 8,
                  "endLine": 134,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        groups:\n          - limited\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n\n",
                    "rendered": {
                      "text": "        groups:\n          - limited\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n\n",
                      "markdown": "`        groups:\n          - limited\n      - username: admin\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - admin\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application.yml"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 8,
                  "endLine": 130,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        groups:\n          - limited\n      - username: MyUser3!@yàhöù.com\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: admin\n",
                    "rendered": {
                      "text": "        groups:\n          - limited\n      - username: MyUser3!@yàhöù.com\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: admin\n",
                      "markdown": "`        groups:\n          - limited\n      - username: MyUser3!@yàhöù.com\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: admin\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application.yml"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 8,
                  "endLine": 126,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    basic-auth:\n      - username: user\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: MyUser3!@yàhöù.com\n",
                    "rendered": {
                      "text": "\n    basic-auth:\n      - username: user\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: MyUser3!@yàhöù.com\n",
                      "markdown": "`\n    basic-auth:\n      - username: user\n        password: d74ff0ee8da3b9806b18c877dbf29bbde50b5bd8e4dad7a3a725000feb82e8f1\n        groups:\n          - limited\n      - username: MyUser3!@yàhöù.com\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/resources/application.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "endLine": 28,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        context:\n          server: ''\n          managerDn: ''\n          managerPassword: ''\n        search:\n          base: ''\n        groups:\n",
                    "rendered": {
                      "text": "        context:\n          server: ''\n          managerDn: ''\n          managerPassword: ''\n        search:\n          base: ''\n        groups:\n",
                      "markdown": "`        context:\n          server: ''\n          managerDn: ''\n          managerPassword: ''\n        search:\n          base: ''\n        groups:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Schema/SchemaList/SchemaList.jsx"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 58,
                  "endLine": 70,
                  "endColumn": 63,
                  "snippet": {
                    "text": "          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getSchemaRegistry(false);\n",
                    "rendered": {
                      "text": "          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getSchemaRegistry(false);\n",
                      "markdown": "`          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getSchemaRegistry(false);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Schema/SchemaList/SchemaList.jsx"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 29,
                  "endLine": 70,
                  "endColumn": 34,
                  "snippet": {
                    "text": "          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getSchemaRegistry(false);\n",
                    "rendered": {
                      "text": "          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getSchemaRegistry(false);\n",
                      "markdown": "`          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getSchemaRegistry(false);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Schema/SchemaList/SchemaList.jsx"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 39,
                  "endLine": 69,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n",
                    "rendered": {
                      "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n",
                      "markdown": "`        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { search: query.get('search') },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Schema/SchemaList/SchemaList.jsx"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 54,
                  "endLine": 51,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getSchemaRegistry(true);\n",
                    "rendered": {
                      "text": "      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getSchemaRegistry(true);\n",
                      "markdown": "`      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getSchemaRegistry(true);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Schema/SchemaList/SchemaList.jsx"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 25,
                  "endLine": 51,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getSchemaRegistry(true);\n",
                    "rendered": {
                      "text": "      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getSchemaRegistry(true);\n",
                      "markdown": "`      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getSchemaRegistry(true);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Schema/SchemaList/SchemaList.jsx"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 57,
                  "endLine": 50,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Schema/SchemaList/SchemaList.jsx"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 35,
                  "endLine": 50,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectDetail/ConnectConfigs/ConnectConfigs.jsx"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 29,
                  "endLine": 93,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        case constants.TYPES.SHORT:\n          def = Joi.number().required();\n          break;\n        case constants.TYPES.PASSWORD:\n          def = Joi.string().required();\n          break;\n        case constants.TYPES.BOOLEAN:\n",
                    "rendered": {
                      "text": "        case constants.TYPES.SHORT:\n          def = Joi.number().required();\n          break;\n        case constants.TYPES.PASSWORD:\n          def = Joi.string().required();\n          break;\n        case constants.TYPES.BOOLEAN:\n",
                      "markdown": "`        case constants.TYPES.SHORT:\n          def = Joi.number().required();\n          break;\n        case constants.TYPES.PASSWORD:\n          def = Joi.string().required();\n          break;\n        case constants.TYPES.BOOLEAN:\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Connect/ConnectDetail/ConnectConfigs/ConnectConfigs.jsx"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 19,
                  "endLine": 342,
                  "snippet": {
                    "text": "                    style={{ marginRight: '2%' }}\n                    disabled={this.validate()}\n                  >\n                    Update\n                  </button>\n                </div>\n              )}\n            </React.Fragment>\n",
                    "rendered": {
                      "text": "                    style={{ marginRight: '2%' }}\n                    disabled={this.validate()}\n                  >\n                    Update\n                  </button>\n                </div>\n              )}\n            </React.Fragment>\n",
                      "markdown": "`                    style={{ marginRight: '2%' }}\n                    disabled={this.validate()}\n                  >\n                    Update\n                  </button>\n                </div>\n              )}\n            </React.Fragment>\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/AkhqRoutes.jsx"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 9,
                  "endColumn": 12,
                  "snippet": {
                    "text": "import NodesList from '../containers/Node/NodeList/NodesList';\nimport NodeDetails from '../containers/Node/NodeDetail';\nimport Base from '../components/Base/Base.jsx';\nimport Tail from '../containers/Tail';\nimport Acls from '../containers/Acl/AclList';\nimport ConnectList from '../containers/Connect/ConnectList/ConnectList';\nimport ConnectCreate from '../containers/Connect/ConnectCreate/ConnectCreate';\n",
                    "rendered": {
                      "text": "import NodesList from '../containers/Node/NodeList/NodesList';\nimport NodeDetails from '../containers/Node/NodeDetail';\nimport Base from '../components/Base/Base.jsx';\nimport Tail from '../containers/Tail';\nimport Acls from '../containers/Acl/AclList';\nimport ConnectList from '../containers/Connect/ConnectList/ConnectList';\nimport ConnectCreate from '../containers/Connect/ConnectCreate/ConnectCreate';\n",
                      "markdown": "`import NodesList from '../containers/Node/NodeList/NodesList';\nimport NodeDetails from '../containers/Node/NodeDetail';\nimport Base from '../components/Base/Base.jsx';\nimport Tail from '../containers/Tail';\nimport Acls from '../containers/Acl/AclList';\nimport ConnectList from '../containers/Connect/ConnectList/ConnectList';\nimport ConnectCreate from '../containers/Connect/ConnectCreate/ConnectCreate';\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/endpoints.jsx"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 50,
                  "endLine": 5,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nconst baseUrl =\n  import.meta.env.VITE_BASE_URL ||\n  `${window.location.protocol}//${window.location.hostname}:${window.location.port}`;\n\nexport const basePath = prefix();\n\n",
                    "rendered": {
                      "text": "\nconst baseUrl =\n  import.meta.env.VITE_BASE_URL ||\n  `${window.location.protocol}//${window.location.hostname}:${window.location.port}`;\n\nexport const basePath = prefix();\n\n",
                      "markdown": "`\nconst baseUrl =\n  import.meta.env.VITE_BASE_URL ||\n  `${window.location.protocol}//${window.location.hostname}:${window.location.port}`;\n\nexport const basePath = prefix();\n\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/vite.config.mjs"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 7,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "import react from '@vitejs/plugin-react';\n\nexport default defineConfig(({ command, mode }) => {\n  const env = loadEnv(mode, process.cwd(), '');\n\n  return {\n    base: '/ui',\n",
                    "rendered": {
                      "text": "import react from '@vitejs/plugin-react';\n\nexport default defineConfig(({ command, mode }) => {\n  const env = loadEnv(mode, process.cwd(), '');\n\n  return {\n    base: '/ui',\n",
                      "markdown": "`import react from '@vitejs/plugin-react';\n\nexport default defineConfig(({ command, mode }) => {\n  const env = loadEnv(mode, process.cwd(), '');\n\n  return {\n    base: '/ui',\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/.gitignore"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 2,
                  "endLine": 49,
                  "snippet": {
                    "text": "### Docs\ndocs/contributors.html\n\n## Docker\ndocker-compose.override.yml\n\n## Helm\nhelm/akhq/README.md\n",
                    "rendered": {
                      "text": "### Docs\ndocs/contributors.html\n\n## Docker\ndocker-compose.override.yml\n\n## Helm\nhelm/akhq/README.md\n",
                      "markdown": "`### Docs\ndocs/contributors.html\n\n## Docker\ndocker-compose.override.yml\n\n## Helm\nhelm/akhq/README.md\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/build.gradle"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 7,
                  "endLine": 157,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n\n\n    // Password hashing\n    implementation group: \"org.mindrot\", name: \"jbcrypt\", version: \"0.4\"\n\n    implementation group: 'org.apache.groovy', name: 'groovy-all', version: '4.0.23'\n",
                    "rendered": {
                      "text": "\n\n\n    // Password hashing\n    implementation group: \"org.mindrot\", name: \"jbcrypt\", version: \"0.4\"\n\n    implementation group: 'org.apache.groovy', name: 'groovy-all', version: '4.0.23'\n",
                      "markdown": "`\n\n\n    // Password hashing\n    implementation group: \"org.mindrot\", name: \"jbcrypt\", version: \"0.4\"\n\n    implementation group: 'org.apache.groovy', name: 'groovy-all', version: '4.0.23'\n`"
                    }
                  },
                  "sourceLanguage": "build.gradle"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/build.gradle"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 3,
                  "endLine": 284,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    classpath = sourceSets.test.runtimeClasspath\n    main = 'org.akhq.KafkaTestCluster'\n    waitForOutput = 'Test data injected sleep done'\n    timeout = 300\n}\n\n/**********************************************************************************************************************\\\n",
                    "rendered": {
                      "text": "    classpath = sourceSets.test.runtimeClasspath\n    main = 'org.akhq.KafkaTestCluster'\n    waitForOutput = 'Test data injected sleep done'\n    timeout = 300\n}\n\n/**********************************************************************************************************************\\\n",
                      "markdown": "`    classpath = sourceSets.test.runtimeClasspath\n    main = 'org.akhq.KafkaTestCluster'\n    waitForOutput = 'Test data injected sleep done'\n    timeout = 300\n}\n\n/**********************************************************************************************************************\\\n`"
                    }
                  },
                  "sourceLanguage": "build.gradle"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/package-lock.json"
                },
                "region": {
                  "startLine": 2470,
                  "startColumn": 9,
                  "endLine": 2470,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        }\n      ],\n      \"dependencies\": {\n        \"base64-js\": \"^1.3.1\",\n        \"ieee754\": \"^1.2.1\"\n      }\n    },\n",
                    "rendered": {
                      "text": "        }\n      ],\n      \"dependencies\": {\n        \"base64-js\": \"^1.3.1\",\n        \"ieee754\": \"^1.2.1\"\n      }\n    },\n",
                      "markdown": "`        }\n      ],\n      \"dependencies\": {\n        \"base64-js\": \"^1.3.1\",\n        \"ieee754\": \"^1.2.1\"\n      }\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/package-lock.json"
                },
                "region": {
                  "startLine": 2331,
                  "startColumn": 58,
                  "endLine": 2331,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"dev\": true,\n      \"funding\": [\n",
                    "rendered": {
                      "text": "    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"dev\": true,\n      \"funding\": [\n",
                      "markdown": "`    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"dev\": true,\n      \"funding\": [\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/package-lock.json"
                },
                "region": {
                  "startLine": 2331,
                  "startColumn": 46,
                  "endLine": 2331,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"dev\": true,\n      \"funding\": [\n",
                    "rendered": {
                      "text": "    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"dev\": true,\n      \"funding\": [\n",
                      "markdown": "`    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n      \"dev\": true,\n      \"funding\": [\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/docs/package-lock.json"
                },
                "region": {
                  "startLine": 2329,
                  "startColumn": 18,
                  "endLine": 2329,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true\n    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n",
                    "rendered": {
                      "text": "      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true\n    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n",
                      "markdown": "`      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true\n    },\n    \"node_modules/base64-js\": {\n      \"version\": \"1.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/mapper/OidcUserDetailsMapper.java"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 47,
                  "endLine": 134,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        for(int i = 1; i < subFields.length; i++) {\n            final String subField = subFields[i];\n            if (claimValue instanceof Map) {\n                claimValue = ((Map) claimValue).get(subField);\n            } else {\n                break;\n            }\n",
                    "rendered": {
                      "text": "        for(int i = 1; i < subFields.length; i++) {\n            final String subField = subFields[i];\n            if (claimValue instanceof Map) {\n                claimValue = ((Map) claimValue).get(subField);\n            } else {\n                break;\n            }\n",
                      "markdown": "`        for(int i = 1; i < subFields.length; i++) {\n            final String subField = subFields[i];\n            if (claimValue instanceof Map) {\n                claimValue = ((Map) claimValue).get(subField);\n            } else {\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/mapper/OidcUserDetailsMapper.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 40,
                  "endLine": 130,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    private Object getClaimValue(OpenIdClaims openIdClaims, String name) {\n        final String[] subFields = name.split(\"\\\\.\");\n        Object claimValue = openIdClaims.get(subFields[0]);\n        for(int i = 1; i < subFields.length; i++) {\n            final String subField = subFields[i];\n            if (claimValue instanceof Map) {\n",
                    "rendered": {
                      "text": "\n    private Object getClaimValue(OpenIdClaims openIdClaims, String name) {\n        final String[] subFields = name.split(\"\\\\.\");\n        Object claimValue = openIdClaims.get(subFields[0]);\n        for(int i = 1; i < subFields.length; i++) {\n            final String subField = subFields[i];\n            if (claimValue instanceof Map) {\n",
                      "markdown": "`\n    private Object getClaimValue(OpenIdClaims openIdClaims, String name) {\n        final String[] subFields = name.split(\"\\\\.\");\n        Object claimValue = openIdClaims.get(subFields[0]);\n        for(int i = 1; i < subFields.length; i++) {\n            final String subField = subFields[i];\n            if (claimValue instanceof Map) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/mapper/OidcUserDetailsMapper.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 133,
                  "endLine": 85,
                  "endColumn": 138,
                  "snippet": {
                    "text": "    private AuthenticationResponse createDirectClaimAuthenticationResponse(String oidcUsername, OpenIdClaims openIdClaims) {\n        String GROUPS_KEY = \"groups\";\n        if(openIdClaims.contains(GROUPS_KEY) && openIdClaims.get(GROUPS_KEY) instanceof Map){\n            return AuthenticationResponse.success(oidcUsername, List.of(SecurityRule.IS_AUTHENTICATED), Map.of(\"groups\", openIdClaims.get(GROUPS_KEY)));\n        }\n\n        return new AuthenticationFailed(\"Exception during Authentication: use-oidc-claim config requires attribute \" +\n",
                    "rendered": {
                      "text": "    private AuthenticationResponse createDirectClaimAuthenticationResponse(String oidcUsername, OpenIdClaims openIdClaims) {\n        String GROUPS_KEY = \"groups\";\n        if(openIdClaims.contains(GROUPS_KEY) && openIdClaims.get(GROUPS_KEY) instanceof Map){\n            return AuthenticationResponse.success(oidcUsername, List.of(SecurityRule.IS_AUTHENTICATED), Map.of(\"groups\", openIdClaims.get(GROUPS_KEY)));\n        }\n\n        return new AuthenticationFailed(\"Exception during Authentication: use-oidc-claim config requires attribute \" +\n",
                      "markdown": "`    private AuthenticationResponse createDirectClaimAuthenticationResponse(String oidcUsername, OpenIdClaims openIdClaims) {\n        String GROUPS_KEY = \"groups\";\n        if(openIdClaims.contains(GROUPS_KEY) && openIdClaims.get(GROUPS_KEY) instanceof Map){\n            return AuthenticationResponse.success(oidcUsername, List.of(SecurityRule.IS_AUTHENTICATED), Map.of(\"groups\", openIdClaims.get(GROUPS_KEY)));\n        }\n\n        return new AuthenticationFailed(\"Exception during Authentication: use-oidc-claim config requires attribute \" +\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/mapper/OidcUserDetailsMapper.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 60,
                  "endLine": 84,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n    private AuthenticationResponse createDirectClaimAuthenticationResponse(String oidcUsername, OpenIdClaims openIdClaims) {\n        String GROUPS_KEY = \"groups\";\n        if(openIdClaims.contains(GROUPS_KEY) && openIdClaims.get(GROUPS_KEY) instanceof Map){\n            return AuthenticationResponse.success(oidcUsername, List.of(SecurityRule.IS_AUTHENTICATED), Map.of(\"groups\", openIdClaims.get(GROUPS_KEY)));\n        }\n\n",
                    "rendered": {
                      "text": "\n    private AuthenticationResponse createDirectClaimAuthenticationResponse(String oidcUsername, OpenIdClaims openIdClaims) {\n        String GROUPS_KEY = \"groups\";\n        if(openIdClaims.contains(GROUPS_KEY) && openIdClaims.get(GROUPS_KEY) instanceof Map){\n            return AuthenticationResponse.success(oidcUsername, List.of(SecurityRule.IS_AUTHENTICATED), Map.of(\"groups\", openIdClaims.get(GROUPS_KEY)));\n        }\n\n",
                      "markdown": "`\n    private AuthenticationResponse createDirectClaimAuthenticationResponse(String oidcUsername, OpenIdClaims openIdClaims) {\n        String GROUPS_KEY = \"groups\";\n        if(openIdClaims.contains(GROUPS_KEY) && openIdClaims.get(GROUPS_KEY) instanceof Map){\n            return AuthenticationResponse.success(oidcUsername, List.of(SecurityRule.IS_AUTHENTICATED), Map.of(\"groups\", openIdClaims.get(GROUPS_KEY)));\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/mapper/GithubAuthenticationMapper.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 37,
                  "endLine": 78,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    protected List<String> getOauthGroups(Oauth.Provider provider, GithubClaims user) {\n        List<String> groups = new ArrayList<>();\n        if (user.contains(provider.getGroupsField())) {\n            Object groupsField = user.get(provider.getGroupsField());\n            if (groupsField instanceof Collection) {\n                groups = ((Collection<Object>) groupsField)\n                    .stream()\n",
                    "rendered": {
                      "text": "    protected List<String> getOauthGroups(Oauth.Provider provider, GithubClaims user) {\n        List<String> groups = new ArrayList<>();\n        if (user.contains(provider.getGroupsField())) {\n            Object groupsField = user.get(provider.getGroupsField());\n            if (groupsField instanceof Collection) {\n                groups = ((Collection<Object>) groupsField)\n                    .stream()\n",
                      "markdown": "`    protected List<String> getOauthGroups(Oauth.Provider provider, GithubClaims user) {\n        List<String> groups = new ArrayList<>();\n        if (user.contains(provider.getGroupsField())) {\n            Object groupsField = user.get(provider.getGroupsField());\n            if (groupsField instanceof Collection) {\n                groups = ((Collection<Object>) groupsField)\n                    .stream()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/mapper/GithubAuthenticationMapper.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 36,
                  "endLine": 64,
                  "endColumn": 41,
                  "snippet": {
                    "text": "     */\n    protected String getUsername(Oauth.Provider provider, GithubClaims user) {\n        String userNameField = provider.getUsernameField();\n        return Objects.toString(user.get(userNameField));\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "     */\n    protected String getUsername(Oauth.Provider provider, GithubClaims user) {\n        String userNameField = provider.getUsernameField();\n        return Objects.toString(user.get(userNameField));\n    }\n\n    /**\n",
                      "markdown": "`     */\n    protected String getUsername(Oauth.Provider provider, GithubClaims user) {\n        String userNameField = provider.getUsernameField();\n        return Objects.toString(user.get(userNameField));\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/HeaderAuthenticationFetcher.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 74,
                  "endLine": 121,
                  "endColumn": 79,
                  "snippet": {
                    "text": "                    ));\n                } else {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"Could not authenticate {}\", userHeaders.get());\n                    }\n                    return Flowable.empty();\n                }\n",
                    "rendered": {
                      "text": "                    ));\n                } else {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"Could not authenticate {}\", userHeaders.get());\n                    }\n                    return Flowable.empty();\n                }\n",
                      "markdown": "`                    ));\n                } else {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"Could not authenticate {}\", userHeaders.get());\n                    }\n                    return Flowable.empty();\n                }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/HeaderAuthenticationFetcher.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 42,
                  "endLine": 117,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                    return Flowable.just(new ServerAuthentication(\n                        userHeaders.get(),\n                        List.of(SecurityRule.IS_AUTHENTICATED),\n                        Map.of(\"groups\", t.get().getGroups())\n                    ));\n                } else {\n                    if (log.isDebugEnabled()) {\n",
                    "rendered": {
                      "text": "                    return Flowable.just(new ServerAuthentication(\n                        userHeaders.get(),\n                        List.of(SecurityRule.IS_AUTHENTICATED),\n                        Map.of(\"groups\", t.get().getGroups())\n                    ));\n                } else {\n                    if (log.isDebugEnabled()) {\n",
                      "markdown": "`                    return Flowable.just(new ServerAuthentication(\n                        userHeaders.get(),\n                        List.of(SecurityRule.IS_AUTHENTICATED),\n                        Map.of(\"groups\", t.get().getGroups())\n                    ));\n                } else {\n                    if (log.isDebugEnabled()) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/HeaderAuthenticationFetcher.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 35,
                  "endLine": 115,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            .switchMap(t -> {\n                if (t.isPresent()) {\n                    return Flowable.just(new ServerAuthentication(\n                        userHeaders.get(),\n                        List.of(SecurityRule.IS_AUTHENTICATED),\n                        Map.of(\"groups\", t.get().getGroups())\n                    ));\n",
                    "rendered": {
                      "text": "            .switchMap(t -> {\n                if (t.isPresent()) {\n                    return Flowable.just(new ServerAuthentication(\n                        userHeaders.get(),\n                        List.of(SecurityRule.IS_AUTHENTICATED),\n                        Map.of(\"groups\", t.get().getGroups())\n                    ));\n",
                      "markdown": "`            .switchMap(t -> {\n                if (t.isPresent()) {\n                    return Flowable.just(new ServerAuthentication(\n                        userHeaders.get(),\n                        List.of(SecurityRule.IS_AUTHENTICATED),\n                        Map.of(\"groups\", t.get().getGroups())\n                    ));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/HeaderAuthenticationFetcher.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 45,
                  "endLine": 105,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                    ClaimRequest.builder()\n                        .providerType(ClaimProviderType.HEADER)\n                        .providerName(null)\n                        .username(userHeaders.get())\n                        .groups(groups)\n                        .build();\n\n",
                    "rendered": {
                      "text": "                    ClaimRequest.builder()\n                        .providerType(ClaimProviderType.HEADER)\n                        .providerName(null)\n                        .username(userHeaders.get())\n                        .groups(groups)\n                        .build();\n\n",
                      "markdown": "`                    ClaimRequest.builder()\n                        .providerType(ClaimProviderType.HEADER)\n                        .providerName(null)\n                        .username(userHeaders.get())\n                        .groups(groups)\n                        .build();\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/HeaderAuthenticationFetcher.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 32,
                  "endLine": 58,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    @Override\n    public Publisher<Authentication> fetchAuthentication(HttpRequest<?> request) {\n        Optional<String> userHeaders = headerAuth.getUserHeader() != null ?\n            request.getHeaders().get(headerAuth.getUserHeader(), String.class) :\n            Optional.empty();\n\n        if (userHeaders.isEmpty()) {\n",
                    "rendered": {
                      "text": "    @Override\n    public Publisher<Authentication> fetchAuthentication(HttpRequest<?> request) {\n        Optional<String> userHeaders = headerAuth.getUserHeader() != null ?\n            request.getHeaders().get(headerAuth.getUserHeader(), String.class) :\n            Optional.empty();\n\n        if (userHeaders.isEmpty()) {\n",
                      "markdown": "`    @Override\n    public Publisher<Authentication> fetchAuthentication(HttpRequest<?> request) {\n        Optional<String> userHeaders = headerAuth.getUserHeader() != null ?\n            request.getHeaders().get(headerAuth.getUserHeader(), String.class) :\n            Optional.empty();\n\n        if (userHeaders.isEmpty()) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/HeaderAuthenticationFetcher.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 41,
                  "endLine": 85,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                log.warn(\"None of the IP patterns [{}] matched the host address [{}]. Skipping header authentication.\", headerAuth.getIpPatterns(), hostAddress);\n                return Publishers.empty();\n            }\n            log.debug(\"One or more of the IP patterns matched the host address [{}]. Continuing request processing.\", hostAddress);\n        }\n\n        List<String> groupsHeader = headerAuth.getGroupsHeader() != null ?\n",
                    "rendered": {
                      "text": "                log.warn(\"None of the IP patterns [{}] matched the host address [{}]. Skipping header authentication.\", headerAuth.getIpPatterns(), hostAddress);\n                return Publishers.empty();\n            }\n            log.debug(\"One or more of the IP patterns matched the host address [{}]. Continuing request processing.\", hostAddress);\n        }\n\n        List<String> groupsHeader = headerAuth.getGroupsHeader() != null ?\n",
                      "markdown": "`                log.warn(\"None of the IP patterns [{}] matched the host address [{}]. Skipping header authentication.\", headerAuth.getIpPatterns(), hostAddress);\n                return Publishers.empty();\n            }\n            log.debug(\"One or more of the IP patterns matched the host address [{}]. Continuing request processing.\", hostAddress);\n        }\n\n        List<String> groupsHeader = headerAuth.getGroupsHeader() != null ?\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/HeaderAuthenticationFetcher.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 37,
                  "endLine": 82,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            if (ipPatternList.stream().noneMatch(pattern ->\n                pattern.pattern().equals(SecurityConfigurationProperties.ANYWHERE) ||\n                    pattern.matcher(hostAddress).matches())) {\n                log.warn(\"None of the IP patterns [{}] matched the host address [{}]. Skipping header authentication.\", headerAuth.getIpPatterns(), hostAddress);\n                return Publishers.empty();\n            }\n            log.debug(\"One or more of the IP patterns matched the host address [{}]. Continuing request processing.\", hostAddress);\n",
                    "rendered": {
                      "text": "            if (ipPatternList.stream().noneMatch(pattern ->\n                pattern.pattern().equals(SecurityConfigurationProperties.ANYWHERE) ||\n                    pattern.matcher(hostAddress).matches())) {\n                log.warn(\"None of the IP patterns [{}] matched the host address [{}]. Skipping header authentication.\", headerAuth.getIpPatterns(), hostAddress);\n                return Publishers.empty();\n            }\n            log.debug(\"One or more of the IP patterns matched the host address [{}]. Continuing request processing.\", hostAddress);\n",
                      "markdown": "`            if (ipPatternList.stream().noneMatch(pattern ->\n                pattern.pattern().equals(SecurityConfigurationProperties.ANYWHERE) ||\n                    pattern.matcher(hostAddress).matches())) {\n                log.warn(\"None of the IP patterns [{}] matched the host address [{}]. Skipping header authentication.\", headerAuth.getIpPatterns(), hostAddress);\n                return Publishers.empty();\n            }\n            log.debug(\"One or more of the IP patterns matched the host address [{}]. Continuing request processing.\", hostAddress);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/BasicAuthAuthenticationProvider.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 42,
                  "endLine": 46,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        if(optionalBasicAuth.isEmpty()){\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.USER_NOT_FOUND));\n        }\n        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n",
                    "rendered": {
                      "text": "        if(optionalBasicAuth.isEmpty()){\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.USER_NOT_FOUND));\n        }\n        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n",
                      "markdown": "`        if(optionalBasicAuth.isEmpty()){\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.USER_NOT_FOUND));\n        }\n        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/BasicAuthAuthenticationProvider.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 25,
                  "endLine": 49,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.CREDENTIALS_DO_NOT_MATCH));\n        }\n\n",
                    "rendered": {
                      "text": "        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.CREDENTIALS_DO_NOT_MATCH));\n        }\n\n",
                      "markdown": "`        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.CREDENTIALS_DO_NOT_MATCH));\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/authentication/BasicAuthAuthenticationProvider.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 19,
                  "endLine": 48,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        }\n        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.CREDENTIALS_DO_NOT_MATCH));\n        }\n",
                    "rendered": {
                      "text": "        }\n        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.CREDENTIALS_DO_NOT_MATCH));\n        }\n",
                      "markdown": "`        }\n        BasicAuth auth = optionalBasicAuth.get();\n\n        // Invalid password\n        if (!auth.isValidPassword((String) authenticationRequest.getSecret())) {\n            return Flowable.just(new AuthenticationFailed(AuthenticationFailureReason.CREDENTIALS_DO_NOT_MATCH));\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 72,
                  "endLine": 121,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n            log.trace(\"JWT payload is not compressed, returning groups directly\");\n            return (Map<String, List<?>>) authentication.getAttributes().get(\"groups\");\n        }\n    }\n\n",
                    "rendered": {
                      "text": "            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n            log.trace(\"JWT payload is not compressed, returning groups directly\");\n            return (Map<String, List<?>>) authentication.getAttributes().get(\"groups\");\n        }\n    }\n\n",
                      "markdown": "`            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n            log.trace(\"JWT payload is not compressed, returning groups directly\");\n            return (Map<String, List<?>>) authentication.getAttributes().get(\"groups\");\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 84,
                  "endLine": 116,
                  "endColumn": 89,
                  "snippet": {
                    "text": "\n    public static Map<String, List<?>> decompressGroups(Authentication authentication) {\n        try {\n            String base64CompressedGroups = ((String) authentication.getAttributes().get(\"groups\"));\n            String compressedGroups = new String(gzip.decompress(Base64.getDecoder().decode(base64CompressedGroups)));\n            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n",
                    "rendered": {
                      "text": "\n    public static Map<String, List<?>> decompressGroups(Authentication authentication) {\n        try {\n            String base64CompressedGroups = ((String) authentication.getAttributes().get(\"groups\"));\n            String compressedGroups = new String(gzip.decompress(Base64.getDecoder().decode(base64CompressedGroups)));\n            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n",
                      "markdown": "`\n    public static Map<String, List<?>> decompressGroups(Authentication authentication) {\n        try {\n            String base64CompressedGroups = ((String) authentication.getAttributes().get(\"groups\"));\n            String compressedGroups = new String(gzip.decompress(Base64.getDecoder().decode(base64CompressedGroups)));\n            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 60,
                  "endLine": 106,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            .flatMap(Collection::stream)\n            // Match on Resource & Action\n            .anyMatch(role -> role.getResources().contains(optionalResource.get())\n                && role.getActions().contains(optionalAction.get()));\n\n        if (allowed)\n            return Flowable.just(SecurityRuleResult.ALLOWED);\n",
                    "rendered": {
                      "text": "            .flatMap(Collection::stream)\n            // Match on Resource & Action\n            .anyMatch(role -> role.getResources().contains(optionalResource.get())\n                && role.getActions().contains(optionalAction.get()));\n\n        if (allowed)\n            return Flowable.just(SecurityRuleResult.ALLOWED);\n",
                      "markdown": "`            .flatMap(Collection::stream)\n            // Match on Resource & Action\n            .anyMatch(role -> role.getResources().contains(optionalResource.get())\n                && role.getActions().contains(optionalAction.get()));\n\n        if (allowed)\n            return Flowable.just(SecurityRuleResult.ALLOWED);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 75,
                  "endLine": 105,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            // Flatten roles\n            .flatMap(Collection::stream)\n            // Match on Resource & Action\n            .anyMatch(role -> role.getResources().contains(optionalResource.get())\n                && role.getActions().contains(optionalAction.get()));\n\n        if (allowed)\n",
                    "rendered": {
                      "text": "            // Flatten roles\n            .flatMap(Collection::stream)\n            // Match on Resource & Action\n            .anyMatch(role -> role.getResources().contains(optionalResource.get())\n                && role.getActions().contains(optionalAction.get()));\n\n        if (allowed)\n",
                      "markdown": "`            // Flatten roles\n            .flatMap(Collection::stream)\n            // Match on Resource & Action\n            .anyMatch(role -> role.getResources().contains(optionalResource.get())\n                && role.getActions().contains(optionalAction.get()));\n\n        if (allowed)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 60,
                  "endLine": 89,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n        // Add default group anyway\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            userGroups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        boolean allowed = userGroups.stream()\n",
                    "rendered": {
                      "text": "\n        // Add default group anyway\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            userGroups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        boolean allowed = userGroups.stream()\n",
                      "markdown": "`\n        // Add default group anyway\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            userGroups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n        boolean allowed = userGroups.stream()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 42,
                  "endLine": 88,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        }\n\n        // Add default group anyway\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            userGroups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n",
                    "rendered": {
                      "text": "        }\n\n        // Add default group anyway\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            userGroups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n",
                      "markdown": "`        }\n\n        // Add default group anyway\n        if (securityProperties.getGroups().get(securityProperties.getDefaultGroup()) != null) {\n            userGroups.addAll(securityProperties.getGroups().get(securityProperties.getDefaultGroup()));\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 45,
                  "endLine": 70,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n        // No authentication information provided or no existing default group, we reject the request\n        if (authentication == null && (securityProperties.getDefaultGroup() == null\n            || securityProperties.getGroups().get(securityProperties.getDefaultGroup()) == null)) {\n            log.warn(\"No authentication information provided\");\n            return Flowable.just(SecurityRuleResult.REJECTED);\n        }\n",
                    "rendered": {
                      "text": "\n        // No authentication information provided or no existing default group, we reject the request\n        if (authentication == null && (securityProperties.getDefaultGroup() == null\n            || securityProperties.getGroups().get(securityProperties.getDefaultGroup()) == null)) {\n            log.warn(\"No authentication information provided\");\n            return Flowable.just(SecurityRuleResult.REJECTED);\n        }\n",
                      "markdown": "`\n        // No authentication information provided or no existing default group, we reject the request\n        if (authentication == null && (securityProperties.getDefaultGroup() == null\n            || securityProperties.getGroups().get(securityProperties.getDefaultGroup()) == null)) {\n            log.warn(\"No authentication information provided\");\n            return Flowable.just(SecurityRuleResult.REJECTED);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 55,
                  "endLine": 66,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            log.warn(\"Route matched AKHQSecured but no `cluster` provided\");\n            return Flowable.just(SecurityRuleResult.REJECTED);\n        }\n        String cluster = routeMatch.getVariableValues().get(\"cluster\").toString();\n\n        // No authentication information provided or no existing default group, we reject the request\n        if (authentication == null && (securityProperties.getDefaultGroup() == null\n",
                    "rendered": {
                      "text": "            log.warn(\"Route matched AKHQSecured but no `cluster` provided\");\n            return Flowable.just(SecurityRuleResult.REJECTED);\n        }\n        String cluster = routeMatch.getVariableValues().get(\"cluster\").toString();\n\n        // No authentication information provided or no existing default group, we reject the request\n        if (authentication == null && (securityProperties.getDefaultGroup() == null\n",
                      "markdown": "`            log.warn(\"Route matched AKHQSecured but no `cluster` provided\");\n            return Flowable.just(SecurityRuleResult.REJECTED);\n        }\n        String cluster = routeMatch.getVariableValues().get(\"cluster\").toString();\n\n        // No authentication information provided or no existing default group, we reject the request\n        if (authentication == null && (securityProperties.getDefaultGroup() == null\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/rule/AKHQSecurityRule.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 65,
                  "endLine": 117,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    public static Map<String, List<?>> decompressGroups(Authentication authentication) {\n        try {\n            String base64CompressedGroups = ((String) authentication.getAttributes().get(\"groups\"));\n            String compressedGroups = new String(gzip.decompress(Base64.getDecoder().decode(base64CompressedGroups)));\n            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n            log.trace(\"JWT payload is not compressed, returning groups directly\");\n",
                    "rendered": {
                      "text": "    public static Map<String, List<?>> decompressGroups(Authentication authentication) {\n        try {\n            String base64CompressedGroups = ((String) authentication.getAttributes().get(\"groups\"));\n            String compressedGroups = new String(gzip.decompress(Base64.getDecoder().decode(base64CompressedGroups)));\n            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n            log.trace(\"JWT payload is not compressed, returning groups directly\");\n",
                      "markdown": "`    public static Map<String, List<?>> decompressGroups(Authentication authentication) {\n        try {\n            String base64CompressedGroups = ((String) authentication.getAttributes().get(\"groups\"));\n            String compressedGroups = new String(gzip.decompress(Base64.getDecoder().decode(base64CompressedGroups)));\n            return mapper.readValue(compressedGroups, Map.class);\n        } catch (Exception e) {\n            log.trace(\"JWT payload is not compressed, returning groups directly\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/claim/CustomClaimsGenerator.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 78,
                  "endLine": 39,
                  "endColumn": 83,
                  "snippet": {
                    "text": "        super.populateWithAuthentication(builder, authentication);\n\n        try {\n            String plainGroups = mapper.writeValueAsString(builder.getClaims().get(\"groups\"));\n            builder.claim(\"groups\", Base64.getEncoder().encodeToString(gzip.compress(plainGroups.getBytes())));\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(\"Unable to build the JWT token, groups format is incorrect\");\n",
                    "rendered": {
                      "text": "        super.populateWithAuthentication(builder, authentication);\n\n        try {\n            String plainGroups = mapper.writeValueAsString(builder.getClaims().get(\"groups\"));\n            builder.claim(\"groups\", Base64.getEncoder().encodeToString(gzip.compress(plainGroups.getBytes())));\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(\"Unable to build the JWT token, groups format is incorrect\");\n",
                      "markdown": "`        super.populateWithAuthentication(builder, authentication);\n\n        try {\n            String plainGroups = mapper.writeValueAsString(builder.getClaims().get(\"groups\"));\n            builder.claim(\"groups\", Base64.getEncoder().encodeToString(gzip.compress(plainGroups.getBytes())));\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(\"Unable to build the JWT token, groups format is incorrect\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/claim/CustomClaimsGenerator.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 36,
                  "endLine": 40,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n        try {\n            String plainGroups = mapper.writeValueAsString(builder.getClaims().get(\"groups\"));\n            builder.claim(\"groups\", Base64.getEncoder().encodeToString(gzip.compress(plainGroups.getBytes())));\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(\"Unable to build the JWT token, groups format is incorrect\");\n        }\n",
                    "rendered": {
                      "text": "\n        try {\n            String plainGroups = mapper.writeValueAsString(builder.getClaims().get(\"groups\"));\n            builder.claim(\"groups\", Base64.getEncoder().encodeToString(gzip.compress(plainGroups.getBytes())));\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(\"Unable to build the JWT token, groups format is incorrect\");\n        }\n",
                      "markdown": "`\n        try {\n            String plainGroups = mapper.writeValueAsString(builder.getClaims().get(\"groups\"));\n            builder.claim(\"groups\", Base64.getEncoder().encodeToString(gzip.compress(plainGroups.getBytes())));\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(\"Unable to build the JWT token, groups format is incorrect\");\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/claim/CustomClaimsGenerator.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 17,
                  "endLine": 17,
                  "endColumn": 23,
                  "snippet": {
                    "text": "import io.micronaut.security.token.jwt.generator.claims.JWTClaimsSetGenerator;\nimport jakarta.inject.Singleton;\n\nimport java.util.Base64;\n\n@Singleton\n@Replaces(JWTClaimsSetGenerator.class)\n",
                    "rendered": {
                      "text": "import io.micronaut.security.token.jwt.generator.claims.JWTClaimsSetGenerator;\nimport jakarta.inject.Singleton;\n\nimport java.util.Base64;\n\n@Singleton\n@Replaces(JWTClaimsSetGenerator.class)\n",
                      "markdown": "`import io.micronaut.security.token.jwt.generator.claims.JWTClaimsSetGenerator;\nimport jakarta.inject.Singleton;\n\nimport java.util.Base64;\n\n@Singleton\n@Replaces(JWTClaimsSetGenerator.class)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/claim/RestApiClaimProviderFilter.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 79,
                  "endLine": 36,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    @Override\n    public Publisher<? extends HttpResponse<?>> doFilter(MutableHttpRequest<?> request, ClientFilterChain chain) {\n        LOG.trace(\"Modifying outgoing authentication request.\");\n        headers.forEach(header -> request.header(header.get(HEADER_KEY), header.get(HEADER_VALUE)));\n\n        return Mono.from(chain.proceed(request));\n    }\n",
                    "rendered": {
                      "text": "    @Override\n    public Publisher<? extends HttpResponse<?>> doFilter(MutableHttpRequest<?> request, ClientFilterChain chain) {\n        LOG.trace(\"Modifying outgoing authentication request.\");\n        headers.forEach(header -> request.header(header.get(HEADER_KEY), header.get(HEADER_VALUE)));\n\n        return Mono.from(chain.proceed(request));\n    }\n",
                      "markdown": "`    @Override\n    public Publisher<? extends HttpResponse<?>> doFilter(MutableHttpRequest<?> request, ClientFilterChain chain) {\n        LOG.trace(\"Modifying outgoing authentication request.\");\n        headers.forEach(header -> request.header(header.get(HEADER_KEY), header.get(HEADER_VALUE)));\n\n        return Mono.from(chain.proceed(request));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/security/claim/RestApiClaimProviderFilter.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 55,
                  "endLine": 36,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    @Override\n    public Publisher<? extends HttpResponse<?>> doFilter(MutableHttpRequest<?> request, ClientFilterChain chain) {\n        LOG.trace(\"Modifying outgoing authentication request.\");\n        headers.forEach(header -> request.header(header.get(HEADER_KEY), header.get(HEADER_VALUE)));\n\n        return Mono.from(chain.proceed(request));\n    }\n",
                    "rendered": {
                      "text": "    @Override\n    public Publisher<? extends HttpResponse<?>> doFilter(MutableHttpRequest<?> request, ClientFilterChain chain) {\n        LOG.trace(\"Modifying outgoing authentication request.\");\n        headers.forEach(header -> request.header(header.get(HEADER_KEY), header.get(HEADER_VALUE)));\n\n        return Mono.from(chain.proceed(request));\n    }\n",
                      "markdown": "`    @Override\n    public Publisher<? extends HttpResponse<?>> doFilter(MutableHttpRequest<?> request, ClientFilterChain chain) {\n        LOG.trace(\"Modifying outgoing authentication request.\");\n        headers.forEach(header -> request.header(header.get(HEADER_KEY), header.get(HEADER_VALUE)));\n\n        return Mono.from(chain.proceed(request));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/Logger.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 25,
                  "endLine": 44,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        T call;\n\n        try {\n            call = future.get();\n\n            log.debug(\"{} ms -> \" + format, (System.currentTimeMillis() - startTime), arguments);\n            return call;\n",
                    "rendered": {
                      "text": "        T call;\n\n        try {\n            call = future.get();\n\n            log.debug(\"{} ms -> \" + format, (System.currentTimeMillis() - startTime), arguments);\n            return call;\n",
                      "markdown": "`        T call;\n\n        try {\n            call = future.get();\n\n            log.debug(\"{} ms -> \" + format, (System.currentTimeMillis() - startTime), arguments);\n            return call;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/ProtobufToJsonDeserializer.java"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 71,
                  "endLine": 158,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    }\n\n    private String tryToDeserializeWithMessageType(byte[] buffer, String topicRegex, String messageType) throws IOException {\n        List<Descriptor> descriptorsWithDependencies = this.descriptors.get(topicRegex);\n        List<Descriptor> descriptorsForConfiguredMessageTypes =\n                descriptorsWithDependencies.stream()\n                        .filter(mp -> messageType.equals(mp.getFullName()))\n",
                    "rendered": {
                      "text": "    }\n\n    private String tryToDeserializeWithMessageType(byte[] buffer, String topicRegex, String messageType) throws IOException {\n        List<Descriptor> descriptorsWithDependencies = this.descriptors.get(topicRegex);\n        List<Descriptor> descriptorsForConfiguredMessageTypes =\n                descriptorsWithDependencies.stream()\n                        .filter(mp -> messageType.equals(mp.getFullName()))\n",
                      "markdown": "`    }\n\n    private String tryToDeserializeWithMessageType(byte[] buffer, String topicRegex, String messageType) throws IOException {\n        List<Descriptor> descriptorsWithDependencies = this.descriptors.get(topicRegex);\n        List<Descriptor> descriptorsForConfiguredMessageTypes =\n                descriptorsWithDependencies.stream()\n                        .filter(mp -> messageType.equals(mp.getFullName()))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/ProtobufToJsonDeserializer.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 59,
                  "endLine": 82,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n    }\n\n    /**\n",
                      "markdown": "`            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/ProtobufToJsonDeserializer.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 19,
                  "endLine": 79,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        }\n        String descriptorFileBase64 = mapping.getDescriptorFileBase64();\n        if (descriptorFileBase64 != null) {\n            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n",
                    "rendered": {
                      "text": "        }\n        String descriptorFileBase64 = mapping.getDescriptorFileBase64();\n        if (descriptorFileBase64 != null) {\n            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n",
                      "markdown": "`        }\n        String descriptorFileBase64 = mapping.getDescriptorFileBase64();\n        if (descriptorFileBase64 != null) {\n            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/ProtobufToJsonDeserializer.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 58,
                  "endLine": 82,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n    }\n\n    /**\n",
                      "markdown": "`            return Base64.getDecoder().decode(descriptorFileBase64);\n        }\n        throw new FileNotFoundException(\"Protobuf descriptor file is not found for topic regex [\" +\n                mapping.getTopicRegex() + \"]. File name or Base64 file content is not specified.\");\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/AvroSerializer.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 83,
                  "endLine": 87,
                  "endColumn": 88,
                  "snippet": {
                    "text": "            else if (Schema.Type.ARRAY.getName().equals(type.getName()) && !hasEmptyValue) {\n                Schema elementType = schema.getElementType();\n                if (elementType.getType().equals(Schema.Type.RECORD)) {\n                    for(Map<String, Object> val : (List<Map<String, Object>>) value.get()) {\n                        validateSchema(elementType.getFields(), val);\n                    }\n                }\n",
                    "rendered": {
                      "text": "            else if (Schema.Type.ARRAY.getName().equals(type.getName()) && !hasEmptyValue) {\n                Schema elementType = schema.getElementType();\n                if (elementType.getType().equals(Schema.Type.RECORD)) {\n                    for(Map<String, Object> val : (List<Map<String, Object>>) value.get()) {\n                        validateSchema(elementType.getFields(), val);\n                    }\n                }\n",
                      "markdown": "`            else if (Schema.Type.ARRAY.getName().equals(type.getName()) && !hasEmptyValue) {\n                Schema elementType = schema.getElementType();\n                if (elementType.getType().equals(Schema.Type.RECORD)) {\n                    for(Map<String, Object> val : (List<Map<String, Object>>) value.get()) {\n                        validateSchema(elementType.getFields(), val);\n                    }\n                }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/AvroSerializer.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 78,
                  "endLine": 82,
                  "endColumn": 83,
                  "snippet": {
                    "text": "            validateSchemaHasDefaultValue(field, schema, hasEmptyValue);\n\n            if (Schema.Type.RECORD.getName().equals(type.getName()) && !hasEmptyValue) {\n                validateSchema(schema.getFields(), (Map<String, Object>) value.get());\n            }\n            else if (Schema.Type.ARRAY.getName().equals(type.getName()) && !hasEmptyValue) {\n                Schema elementType = schema.getElementType();\n",
                    "rendered": {
                      "text": "            validateSchemaHasDefaultValue(field, schema, hasEmptyValue);\n\n            if (Schema.Type.RECORD.getName().equals(type.getName()) && !hasEmptyValue) {\n                validateSchema(schema.getFields(), (Map<String, Object>) value.get());\n            }\n            else if (Schema.Type.ARRAY.getName().equals(type.getName()) && !hasEmptyValue) {\n                Schema elementType = schema.getElementType();\n",
                      "markdown": "`            validateSchemaHasDefaultValue(field, schema, hasEmptyValue);\n\n            if (Schema.Type.RECORD.getName().equals(type.getName()) && !hasEmptyValue) {\n                validateSchema(schema.getFields(), (Map<String, Object>) value.get());\n            }\n            else if (Schema.Type.ARRAY.getName().equals(type.getName()) && !hasEmptyValue) {\n                Schema elementType = schema.getElementType();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/AvroSerializer.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 27,
                  "endLine": 76,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            var type = schema.getType();\n            var value = Optional.ofNullable(record)\n                .filter(Objects::nonNull)\n                .map(r -> r.get(field.name()));\n            var hasEmptyValue = value.isEmpty();\n\n            validateSchemaHasDefaultValue(field, schema, hasEmptyValue);\n",
                    "rendered": {
                      "text": "            var type = schema.getType();\n            var value = Optional.ofNullable(record)\n                .filter(Objects::nonNull)\n                .map(r -> r.get(field.name()));\n            var hasEmptyValue = value.isEmpty();\n\n            validateSchemaHasDefaultValue(field, schema, hasEmptyValue);\n",
                      "markdown": "`            var type = schema.getType();\n            var value = Optional.ofNullable(record)\n                .filter(Objects::nonNull)\n                .map(r -> r.get(field.name()));\n            var hasEmptyValue = value.isEmpty();\n\n            validateSchemaHasDefaultValue(field, schema, hasEmptyValue);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/AvroSerializer.java"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 70,
                  "endLine": 201,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                    return false;\n                }\n            }).findFirst()\n            .orElseThrow(() -> new IllegalArgumentException(\"Unable to find on '\" + value + \"' schema '\" + schema + \"'\")));\n    }\n\n    private static Map<String, ?> mapSerializer(Map<String, ?> value, Schema schema) {\n",
                    "rendered": {
                      "text": "                    return false;\n                }\n            }).findFirst()\n            .orElseThrow(() -> new IllegalArgumentException(\"Unable to find on '\" + value + \"' schema '\" + schema + \"'\")));\n    }\n\n    private static Map<String, ?> mapSerializer(Map<String, ?> value, Schema schema) {\n",
                      "markdown": "`                    return false;\n                }\n            }).findFirst()\n            .orElseThrow(() -> new IllegalArgumentException(\"Unable to find on '\" + value + \"' schema '\" + schema + \"'\")));\n    }\n\n    private static Map<String, ?> mapSerializer(Map<String, ?> value, Schema schema) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/utils/AvroDeserializer.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 62,
                  "endLine": 52,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                LinkedHashMap::new, // preserve schema field order\n                (m, v) -> m.put(\n                    v.name(),\n                    AvroDeserializer.objectDeserializer(record.get(v.name()), v.schema())\n                ),\n                HashMap::putAll\n            );\n",
                    "rendered": {
                      "text": "                LinkedHashMap::new, // preserve schema field order\n                (m, v) -> m.put(\n                    v.name(),\n                    AvroDeserializer.objectDeserializer(record.get(v.name()), v.schema())\n                ),\n                HashMap::putAll\n            );\n",
                      "markdown": "`                LinkedHashMap::new, // preserve schema field order\n                (m, v) -> m.put(\n                    v.name(),\n                    AvroDeserializer.objectDeserializer(record.get(v.name()), v.schema())\n                ),\n                HashMap::putAll\n            );\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/security/GithubClaims.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 20,
                  "endLine": 11,
                  "endColumn": 25,
                  "snippet": {
                    "text": "public class GithubClaims extends HashMap<String, Object> implements Claims {\n    @Override\n    public Object get(String name) {\n        return super.get(name);\n    }\n\n    @Override\n",
                    "rendered": {
                      "text": "public class GithubClaims extends HashMap<String, Object> implements Claims {\n    @Override\n    public Object get(String name) {\n        return super.get(name);\n    }\n\n    @Override\n",
                      "markdown": "`public class GithubClaims extends HashMap<String, Object> implements Claims {\n    @Override\n    public Object get(String name) {\n        return super.get(name);\n    }\n\n    @Override\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/ConnectPlugin.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 71,
                  "endLine": 100,
                  "endColumn": 79,
                  "snippet": {
                    "text": "            Definition.builder()\n                .name(\"value.converter.schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Value schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n",
                    "rendered": {
                      "text": "            Definition.builder()\n                .name(\"value.converter.schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Value schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n",
                      "markdown": "`            Definition.builder()\n                .name(\"value.converter.schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Value schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/ConnectPlugin.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 69,
                  "endLine": 76,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            Definition.builder()\n                .name(\"key.converter.schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Key schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n",
                    "rendered": {
                      "text": "            Definition.builder()\n                .name(\"key.converter.schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Key schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n",
                      "markdown": "`            Definition.builder()\n                .name(\"key.converter.schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Key schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/ConnectPlugin.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 65,
                  "endLine": 52,
                  "endColumn": 73,
                  "snippet": {
                    "text": "            Definition.builder()\n                .name(\"schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n",
                    "rendered": {
                      "text": "            Definition.builder()\n                .name(\"schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n",
                      "markdown": "`            Definition.builder()\n                .name(\"schema.registry.basic.auth.user.info\")\n                .group(\"Schema Registry\")\n                .displayName(\"Schema registry basic auth as user:password\")\n                .importance(\"MEDIUM\")\n                .build(),\n            Definition.builder()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/TopicPartition.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 70,
                  "endLine": 68,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n        public Optional<Long> getOffsetLag() {\n            if (this.lastOffset.isPresent() && this.offset.isPresent()) {\n                return Optional.of(this.lastOffset.get() - this.offset.get());\n            } else {\n                return Optional.empty();\n            }\n",
                    "rendered": {
                      "text": "\n        public Optional<Long> getOffsetLag() {\n            if (this.lastOffset.isPresent() && this.offset.isPresent()) {\n                return Optional.of(this.lastOffset.get() - this.offset.get());\n            } else {\n                return Optional.empty();\n            }\n",
                      "markdown": "`\n        public Optional<Long> getOffsetLag() {\n            if (this.lastOffset.isPresent() && this.offset.isPresent()) {\n                return Optional.of(this.lastOffset.get() - this.offset.get());\n            } else {\n                return Optional.empty();\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/TopicPartition.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 50,
                  "endLine": 68,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n        public Optional<Long> getOffsetLag() {\n            if (this.lastOffset.isPresent() && this.offset.isPresent()) {\n                return Optional.of(this.lastOffset.get() - this.offset.get());\n            } else {\n                return Optional.empty();\n            }\n",
                    "rendered": {
                      "text": "\n        public Optional<Long> getOffsetLag() {\n            if (this.lastOffset.isPresent() && this.offset.isPresent()) {\n                return Optional.of(this.lastOffset.get() - this.offset.get());\n            } else {\n                return Optional.empty();\n            }\n",
                      "markdown": "`\n        public Optional<Long> getOffsetLag() {\n            if (this.lastOffset.isPresent() && this.offset.isPresent()) {\n                return Optional.of(this.lastOffset.get() - this.offset.get());\n            } else {\n                return Optional.empty();\n            }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/Config.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 36,
                  "endLine": 66,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        for(Class<?> cls : classes) {\n            try {\n                Field declaredField = cls.getDeclaredField(docName);\n                return declaredField.get(cls.getDeclaredConstructor().newInstance()).toString();\n            } catch (NoSuchFieldException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) { }\n        }\n\n",
                    "rendered": {
                      "text": "        for(Class<?> cls : classes) {\n            try {\n                Field declaredField = cls.getDeclaredField(docName);\n                return declaredField.get(cls.getDeclaredConstructor().newInstance()).toString();\n            } catch (NoSuchFieldException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) { }\n        }\n\n",
                      "markdown": "`        for(Class<?> cls : classes) {\n            try {\n                Field declaredField = cls.getDeclaredField(docName);\n                return declaredField.get(cls.getDeclaredConstructor().newInstance()).toString();\n            } catch (NoSuchFieldException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) { }\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/ConsumerGroup.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 58,
                  "endLine": 44,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        }\n\n        for (Map.Entry<org.apache.kafka.common.TopicPartition, OffsetAndMetadata> offset : groupOffset.entrySet()) {\n            Partition.Offsets topicOffsets = topicsOffsets.get(offset.getKey().topic())\n                .stream()\n                .filter(item -> item.getPartition() == offset.getKey().partition())\n                .findFirst()\n",
                    "rendered": {
                      "text": "        }\n\n        for (Map.Entry<org.apache.kafka.common.TopicPartition, OffsetAndMetadata> offset : groupOffset.entrySet()) {\n            Partition.Offsets topicOffsets = topicsOffsets.get(offset.getKey().topic())\n                .stream()\n                .filter(item -> item.getPartition() == offset.getKey().partition())\n                .findFirst()\n",
                      "markdown": "`        }\n\n        for (Map.Entry<org.apache.kafka.common.TopicPartition, OffsetAndMetadata> offset : groupOffset.entrySet()) {\n            Partition.Offsets topicOffsets = topicsOffsets.get(offset.getKey().topic())\n                .stream()\n                .filter(item -> item.getPartition() == offset.getKey().partition())\n                .findFirst()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/main/java/org/akhq/models/ConsumerGroup.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 11,
                  "endLine": 24,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    private boolean simpleConsumerGroup;\n    private String partitionAssignor;\n    private ConsumerGroupState state;\n    private Node coordinator;\n    private final ArrayList<Consumer> members = new ArrayList<>();\n    private final ArrayList<TopicPartition.ConsumerGroupOffset> offsets = new ArrayList<>();\n\n",
                    "rendered": {
                      "text": "    private boolean simpleConsumerGroup;\n    private String partitionAssignor;\n    private ConsumerGroupState state;\n    private Node coordinator;\n    private final ArrayList<Consumer> members = new ArrayList<>();\n    private final ArrayList<TopicPartition.ConsumerGroupOffset> offsets = new ArrayList<>();\n\n",
                      "markdown": "`    private boolean simpleConsumerGroup;\n    private String partitionAssignor;\n    private ConsumerGroupState state;\n    private Node coordinator;\n    private final ArrayList<Consumer> members = new ArrayList<>();\n    private final ArrayList<TopicPartition.ConsumerGroupOffset> offsets = new ArrayList<>();\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/ConfigRepositoryTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 16,
                  "endLine": 81,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                .stream()\n                .filter(config -> config.getName().equals(name))\n                .findAny()\n                .get();\n    }\n}",
                    "rendered": {
                      "text": "                .stream()\n                .filter(config -> config.getName().equals(name))\n                .findAny()\n                .get();\n    }\n}",
                      "markdown": "`                .stream()\n                .filter(config -> config.getName().equals(name))\n                .findAny()\n                .get();\n    }\n}`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/ConfigRepositoryTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        assertEquals(\"3\", getConfig(\"file.delete.delay.ms\").getValue());\n        assertEquals(\"2\", getConfig(\"index.interval.bytes\").getValue());\n\n        // update config 2\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n",
                    "rendered": {
                      "text": "        assertEquals(\"3\", getConfig(\"file.delete.delay.ms\").getValue());\n        assertEquals(\"2\", getConfig(\"index.interval.bytes\").getValue());\n\n        // update config 2\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n",
                      "markdown": "`        assertEquals(\"3\", getConfig(\"file.delete.delay.ms\").getValue());\n        assertEquals(\"2\", getConfig(\"index.interval.bytes\").getValue());\n\n        // update config 2\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/ConfigRepositoryTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 10,
                  "endLine": 35,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        assertEquals(\"1\", getConfig(\"file.delete.delay.ms\").getValue());\n        assertEquals(\"2\", getConfig(\"index.interval.bytes\").getValue());\n\n        // update config 1\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n",
                    "rendered": {
                      "text": "        assertEquals(\"1\", getConfig(\"file.delete.delay.ms\").getValue());\n        assertEquals(\"2\", getConfig(\"index.interval.bytes\").getValue());\n\n        // update config 1\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n",
                      "markdown": "`        assertEquals(\"1\", getConfig(\"file.delete.delay.ms\").getValue());\n        assertEquals(\"2\", getConfig(\"index.interval.bytes\").getValue());\n\n        // update config 1\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/ConfigRepositoryTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 33,
                  "endLine": 23,
                  "snippet": {
                    "text": "\n    @Test\n    void updateTopic() throws ExecutionException, InterruptedException {\n        // write config the first time\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n            Arrays.asList(\n",
                    "rendered": {
                      "text": "\n    @Test\n    void updateTopic() throws ExecutionException, InterruptedException {\n        // write config the first time\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n            Arrays.asList(\n",
                      "markdown": "`\n    @Test\n    void updateTopic() throws ExecutionException, InterruptedException {\n        // write config the first time\n        repository.updateTopic(\n            KafkaTestCluster.CLUSTER_ID,\n            KafkaTestCluster.TOPIC_HUGE,\n            Arrays.asList(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/AvroWireFormatConverterTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 40,
                  "endLine": 107,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        Schema schema = AvroSchemaUtils.getSchema(record, true, true, false);\n        DatumWriter<MyRecord> writer = new ReflectDatumWriter<>(schema);\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        Encoder encoder = EncoderFactory.get().binaryEncoder(stream, null);\n        writer.write(record, encoder);\n        encoder.flush();\n        return stream.toByteArray();\n",
                    "rendered": {
                      "text": "        Schema schema = AvroSchemaUtils.getSchema(record, true, true, false);\n        DatumWriter<MyRecord> writer = new ReflectDatumWriter<>(schema);\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        Encoder encoder = EncoderFactory.get().binaryEncoder(stream, null);\n        writer.write(record, encoder);\n        encoder.flush();\n        return stream.toByteArray();\n",
                      "markdown": "`        Schema schema = AvroSchemaUtils.getSchema(record, true, true, false);\n        DatumWriter<MyRecord> writer = new ReflectDatumWriter<>(schema);\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        Encoder encoder = EncoderFactory.get().binaryEncoder(stream, null);\n        writer.write(record, encoder);\n        encoder.flush();\n        return stream.toByteArray();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/AvroWireFormatConverterTest.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 60,
                  "endLine": 99,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        KafkaAvroDeserializer kafkaAvroDeserializer = new KafkaAvroDeserializer(schemaRegistryClient);\n        GenericData.Record deserializedRecord = (GenericData.Record) kafkaAvroDeserializer.deserialize(null, convertedValue);\n        assertEquals(record.getAnInt(), deserializedRecord.get(1));\n        assertEquals(record.getAString(), deserializedRecord.get(0).toString());\n    }\n\n    @SneakyThrows\n",
                    "rendered": {
                      "text": "        KafkaAvroDeserializer kafkaAvroDeserializer = new KafkaAvroDeserializer(schemaRegistryClient);\n        GenericData.Record deserializedRecord = (GenericData.Record) kafkaAvroDeserializer.deserialize(null, convertedValue);\n        assertEquals(record.getAnInt(), deserializedRecord.get(1));\n        assertEquals(record.getAString(), deserializedRecord.get(0).toString());\n    }\n\n    @SneakyThrows\n",
                      "markdown": "`        KafkaAvroDeserializer kafkaAvroDeserializer = new KafkaAvroDeserializer(schemaRegistryClient);\n        GenericData.Record deserializedRecord = (GenericData.Record) kafkaAvroDeserializer.deserialize(null, convertedValue);\n        assertEquals(record.getAnInt(), deserializedRecord.get(1));\n        assertEquals(record.getAString(), deserializedRecord.get(0).toString());\n    }\n\n    @SneakyThrows\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/AvroWireFormatConverterTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 58,
                  "endLine": 98,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n        KafkaAvroDeserializer kafkaAvroDeserializer = new KafkaAvroDeserializer(schemaRegistryClient);\n        GenericData.Record deserializedRecord = (GenericData.Record) kafkaAvroDeserializer.deserialize(null, convertedValue);\n        assertEquals(record.getAnInt(), deserializedRecord.get(1));\n        assertEquals(record.getAString(), deserializedRecord.get(0).toString());\n    }\n\n",
                    "rendered": {
                      "text": "\n        KafkaAvroDeserializer kafkaAvroDeserializer = new KafkaAvroDeserializer(schemaRegistryClient);\n        GenericData.Record deserializedRecord = (GenericData.Record) kafkaAvroDeserializer.deserialize(null, convertedValue);\n        assertEquals(record.getAnInt(), deserializedRecord.get(1));\n        assertEquals(record.getAString(), deserializedRecord.get(0).toString());\n    }\n\n",
                      "markdown": "`\n        KafkaAvroDeserializer kafkaAvroDeserializer = new KafkaAvroDeserializer(schemaRegistryClient);\n        GenericData.Record deserializedRecord = (GenericData.Record) kafkaAvroDeserializer.deserialize(null, convertedValue);\n        assertEquals(record.getAnInt(), deserializedRecord.get(1));\n        assertEquals(record.getAString(), deserializedRecord.get(0).toString());\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/AvroWireFormatConverterTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 45,
                  "endLine": 51,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        schemaRegistryClient = mock(SchemaRegistryClient.class);\n\n\n        ReflectData reflectData = ReflectData.get();\n        Schema schema = reflectData.getSchema(MyRecord.class);\n        int id = 100;\n        when(schemaRegistryClient.getById(id)).thenReturn(schema);\n",
                    "rendered": {
                      "text": "        schemaRegistryClient = mock(SchemaRegistryClient.class);\n\n\n        ReflectData reflectData = ReflectData.get();\n        Schema schema = reflectData.getSchema(MyRecord.class);\n        int id = 100;\n        when(schemaRegistryClient.getById(id)).thenReturn(schema);\n",
                      "markdown": "`        schemaRegistryClient = mock(SchemaRegistryClient.class);\n\n\n        ReflectData reflectData = ReflectData.get();\n        Schema schema = reflectData.getSchema(MyRecord.class);\n        int id = 100;\n        when(schemaRegistryClient.getById(id)).thenReturn(schema);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/TopicRepositoryTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 35,
                  "endLine": 180,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        // 50 messages with the same key (1 remaining after compaction) : 1st offset is 49\n        assertEquals(49, compacted.get().getFirstOffset());\n        // 50 messages with the same key + 50 random messages : last offset is 100\n        assertEquals(100, compacted.get().getLastOffset());\n    }\n\n    @Test\n",
                    "rendered": {
                      "text": "        // 50 messages with the same key (1 remaining after compaction) : 1st offset is 49\n        assertEquals(49, compacted.get().getFirstOffset());\n        // 50 messages with the same key + 50 random messages : last offset is 100\n        assertEquals(100, compacted.get().getLastOffset());\n    }\n\n    @Test\n",
                      "markdown": "`        // 50 messages with the same key (1 remaining after compaction) : 1st offset is 49\n        assertEquals(49, compacted.get().getFirstOffset());\n        // 50 messages with the same key + 50 random messages : last offset is 100\n        assertEquals(100, compacted.get().getLastOffset());\n    }\n\n    @Test\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/TopicRepositoryTest.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 34,
                  "endLine": 178,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n        assertTrue(compacted.isPresent());\n        // 50 messages with the same key (1 remaining after compaction) : 1st offset is 49\n        assertEquals(49, compacted.get().getFirstOffset());\n        // 50 messages with the same key + 50 random messages : last offset is 100\n        assertEquals(100, compacted.get().getLastOffset());\n    }\n",
                    "rendered": {
                      "text": "\n        assertTrue(compacted.isPresent());\n        // 50 messages with the same key (1 remaining after compaction) : 1st offset is 49\n        assertEquals(49, compacted.get().getFirstOffset());\n        // 50 messages with the same key + 50 random messages : last offset is 100\n        assertEquals(100, compacted.get().getLastOffset());\n    }\n",
                      "markdown": "`\n        assertTrue(compacted.isPresent());\n        // 50 messages with the same key (1 remaining after compaction) : 1st offset is 49\n        assertEquals(49, compacted.get().getFirstOffset());\n        // 50 messages with the same key + 50 random messages : last offset is 100\n        assertEquals(100, compacted.get().getLastOffset());\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/repositories/TopicRepositoryTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 35,
                  "endLine": 162,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            .map(Config::getValue);\n\n        assertEquals(8, topicRepository.findByName(KafkaTestCluster.CLUSTER_ID, \"createWithConfig\").getPartitions().size());\n        assertEquals(\"1000\", option.get());\n\n        topicRepository.delete(KafkaTestCluster.CLUSTER_ID, \"createWithConfig\");\n    }\n",
                    "rendered": {
                      "text": "            .map(Config::getValue);\n\n        assertEquals(8, topicRepository.findByName(KafkaTestCluster.CLUSTER_ID, \"createWithConfig\").getPartitions().size());\n        assertEquals(\"1000\", option.get());\n\n        topicRepository.delete(KafkaTestCluster.CLUSTER_ID, \"createWithConfig\");\n    }\n",
                      "markdown": "`            .map(Config::getValue);\n\n        assertEquals(8, topicRepository.findByName(KafkaTestCluster.CLUSTER_ID, \"createWithConfig\").getPartitions().size());\n        assertEquals(\"1000\", option.get());\n\n        topicRepository.delete(KafkaTestCluster.CLUSTER_ID, \"createWithConfig\");\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 25,
                  "endLine": 144,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n            consumerGroup.get(0).getId(),\n            Map.of(new org.akhq.models.TopicPartition(generatedString, 0), 0L)\n        );\n\n",
                    "rendered": {
                      "text": "\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n            consumerGroup.get(0).getId(),\n            Map.of(new org.akhq.models.TopicPartition(generatedString, 0), 0L)\n        );\n\n",
                      "markdown": "`\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n            consumerGroup.get(0).getId(),\n            Map.of(new org.akhq.models.TopicPartition(generatedString, 0), 0L)\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 77,
                  "endLine": 140,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n",
                    "rendered": {
                      "text": "        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n",
                      "markdown": "`        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 58,
                  "endLine": 140,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n",
                    "rendered": {
                      "text": "        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n",
                      "markdown": "`        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 38,
                  "endLine": 140,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n",
                    "rendered": {
                      "text": "        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n",
                      "markdown": "`        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 52,
                  "endLine": 139,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n",
                    "rendered": {
                      "text": "\n        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n",
                      "markdown": "`\n        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 32,
                  "endLine": 139,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n",
                    "rendered": {
                      "text": "\n        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n",
                      "markdown": "`\n        var consumerGroup = consumerGroupRepository.findByTopic(KafkaTestCluster.CLUSTER_ID, generatedString, Collections.emptyList());\n\n        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 78,
                  "endLine": 129,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n        var producer = kafkaModule.getProducer(KafkaTestCluster.CLUSTER_ID);\n        for (int i = 0; i < 100; i++) {\n            producer.send(new ProducerRecord<>(generatedString, new byte[]{})).get();\n        }\n\n        var consumer = kafkaModule.getConsumer(KafkaTestCluster.CLUSTER_ID);\n",
                    "rendered": {
                      "text": "\n        var producer = kafkaModule.getProducer(KafkaTestCluster.CLUSTER_ID);\n        for (int i = 0; i < 100; i++) {\n            producer.send(new ProducerRecord<>(generatedString, new byte[]{})).get();\n        }\n\n        var consumer = kafkaModule.getConsumer(KafkaTestCluster.CLUSTER_ID);\n",
                      "markdown": "`\n        var producer = kafkaModule.getProducer(KafkaTestCluster.CLUSTER_ID);\n        for (int i = 0; i < 100; i++) {\n            producer.send(new ProducerRecord<>(generatedString, new byte[]{})).get();\n        }\n\n        var consumer = kafkaModule.getConsumer(KafkaTestCluster.CLUSTER_ID);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 49,
                  "endLine": 107,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n        assertNotNull(event);\n        assertEquals(generatedString, event.getTopicName());\n        assertEquals(\"2097164\", event.getConfig().get(\"max.message.bytes\"));\n        assertEquals(\"test\", event.getClusterId());\n\n        topicRepository.delete(KafkaTestCluster.CLUSTER_ID, generatedString);\n",
                    "rendered": {
                      "text": "\n        assertNotNull(event);\n        assertEquals(generatedString, event.getTopicName());\n        assertEquals(\"2097164\", event.getConfig().get(\"max.message.bytes\"));\n        assertEquals(\"test\", event.getClusterId());\n\n        topicRepository.delete(KafkaTestCluster.CLUSTER_ID, generatedString);\n",
                      "markdown": "`\n        assertNotNull(event);\n        assertEquals(generatedString, event.getTopicName());\n        assertEquals(\"2097164\", event.getConfig().get(\"max.message.bytes\"));\n        assertEquals(\"test\", event.getClusterId());\n\n        topicRepository.delete(KafkaTestCluster.CLUSTER_ID, generatedString);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/audit/KafkaAuditModuleTest.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 10,
                  "endLine": 142,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n            consumerGroup.get(0).getId(),\n            Map.of(new org.akhq.models.TopicPartition(generatedString, 0), 0L)\n",
                    "rendered": {
                      "text": "        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n            consumerGroup.get(0).getId(),\n            Map.of(new org.akhq.models.TopicPartition(generatedString, 0), 0L)\n",
                      "markdown": "`        assertTrue(consumerGroup.get(0).getOffsets().get(0).getOffset().isPresent());\n        assertEquals(99, consumerGroup.get(0).getOffsets().get(0).getOffset().get());\n\n        // Update consumer group\n        consumerGroupRepository.updateOffsets(KafkaTestCluster.CLUSTER_ID,\n            consumerGroup.get(0).getId(),\n            Map.of(new org.akhq.models.TopicPartition(generatedString, 0), 0L)\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/modules/AvroSchemaSerializerTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 32,
                  "endLine": 131,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        byte[] bytes = avroSerializer.serialize(VALID_JSON);\n\n        ByteBuffer buffer = ByteBuffer.wrap(bytes);\n        byte magicBytes = buffer.get();\n        int serializedSchemaId = buffer.getInt();\n\n        assertEquals(0, magicBytes);\n",
                    "rendered": {
                      "text": "        byte[] bytes = avroSerializer.serialize(VALID_JSON);\n\n        ByteBuffer buffer = ByteBuffer.wrap(bytes);\n        byte magicBytes = buffer.get();\n        int serializedSchemaId = buffer.getInt();\n\n        assertEquals(0, magicBytes);\n",
                      "markdown": "`        byte[] bytes = avroSerializer.serialize(VALID_JSON);\n\n        ByteBuffer buffer = ByteBuffer.wrap(bytes);\n        byte magicBytes = buffer.get();\n        int serializedSchemaId = buffer.getInt();\n\n        assertEquals(0, magicBytes);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 32,
                  "endLine": 63,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        final EndPoint endPoint = kafka.advertisedListeners().head();\n        final String hostname = endPoint.host() == null ? \"\" : endPoint.host();\n\n        return String.join(\":\", hostname, Integer.toString(\n            kafka.boundPort(ListenerName.forSecurityProtocol(SecurityProtocol.PLAINTEXT))\n        ));\n    }\n",
                    "rendered": {
                      "text": "        final EndPoint endPoint = kafka.advertisedListeners().head();\n        final String hostname = endPoint.host() == null ? \"\" : endPoint.host();\n\n        return String.join(\":\", hostname, Integer.toString(\n            kafka.boundPort(ListenerName.forSecurityProtocol(SecurityProtocol.PLAINTEXT))\n        ));\n    }\n",
                      "markdown": "`        final EndPoint endPoint = kafka.advertisedListeners().head();\n        final String hostname = endPoint.host() == null ? \"\" : endPoint.host();\n\n        return String.join(\":\", hostname, Integer.toString(\n            kafka.boundPort(ListenerName.forSecurityProtocol(SecurityProtocol.PLAINTEXT))\n        ));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 21,
                  "endLine": 61,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    public String brokerList() {\n        final EndPoint endPoint = kafka.advertisedListeners().head();\n        final String hostname = endPoint.host() == null ? \"\" : endPoint.host();\n\n        return String.join(\":\", hostname, Integer.toString(\n            kafka.boundPort(ListenerName.forSecurityProtocol(SecurityProtocol.PLAINTEXT))\n",
                    "rendered": {
                      "text": "\n    public String brokerList() {\n        final EndPoint endPoint = kafka.advertisedListeners().head();\n        final String hostname = endPoint.host() == null ? \"\" : endPoint.host();\n\n        return String.join(\":\", hostname, Integer.toString(\n            kafka.boundPort(ListenerName.forSecurityProtocol(SecurityProtocol.PLAINTEXT))\n",
                      "markdown": "`\n    public String brokerList() {\n        final EndPoint endPoint = kafka.advertisedListeners().head();\n        final String hostname = endPoint.host() == null ? \"\" : endPoint.host();\n\n        return String.join(\":\", hostname, Integer.toString(\n            kafka.boundPort(ListenerName.forSecurityProtocol(SecurityProtocol.PLAINTEXT))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 86,
                  "endLine": 86,
                  "endColumn": 90,
                  "snippet": {
                    "text": "        tmpFolder.delete();\n        logDir.delete();\n\n        log.debug(\"Shutdown of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n    }\n",
                    "rendered": {
                      "text": "        tmpFolder.delete();\n        logDir.delete();\n\n        log.debug(\"Shutdown of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n    }\n",
                      "markdown": "`        tmpFolder.delete();\n        logDir.delete();\n\n        log.debug(\"Shutdown of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 52,
                  "endLine": 86,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        tmpFolder.delete();\n        logDir.delete();\n\n        log.debug(\"Shutdown of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n    }\n",
                    "rendered": {
                      "text": "        tmpFolder.delete();\n        logDir.delete();\n\n        log.debug(\"Shutdown of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n    }\n",
                      "markdown": "`        tmpFolder.delete();\n        logDir.delete();\n\n        log.debug(\"Shutdown of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 56,
                  "endLine": 81,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        kafka.shutdown();\n        kafka.awaitShutdown();\n\n        log.debug(\"Removing temp folder {} with logs.dir at {} ...\", tmpFolder, logDir);\n\n        tmpFolder.delete();\n        logDir.delete();\n",
                    "rendered": {
                      "text": "        kafka.shutdown();\n        kafka.awaitShutdown();\n\n        log.debug(\"Removing temp folder {} with logs.dir at {} ...\", tmpFolder, logDir);\n\n        tmpFolder.delete();\n        logDir.delete();\n",
                      "markdown": "`        kafka.shutdown();\n        kafka.awaitShutdown();\n\n        log.debug(\"Removing temp folder {} with logs.dir at {} ...\", tmpFolder, logDir);\n\n        tmpFolder.delete();\n        logDir.delete();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 78,
                  "endLine": 74,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    public void stop() {\n        log.debug(\"Shutting down embedded Kafka broker at {} (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n\n",
                    "rendered": {
                      "text": "\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    public void stop() {\n        log.debug(\"Shutting down embedded Kafka broker at {} (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n\n",
                      "markdown": "`\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    public void stop() {\n        log.debug(\"Shutting down embedded Kafka broker at {} (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 54,
                  "endLine": 74,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    public void stop() {\n        log.debug(\"Shutting down embedded Kafka broker at {} (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n\n",
                    "rendered": {
                      "text": "\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    public void stop() {\n        log.debug(\"Shutting down embedded Kafka broker at {} (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n\n",
                      "markdown": "`\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    public void stop() {\n        log.debug(\"Shutting down embedded Kafka broker at {} (with ZK ensemble at {}) ...\",\n            brokerList(), zookeeperConnect()\n        );\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 85,
                  "endLine": 42,
                  "endColumn": 89,
                  "snippet": {
                    "text": "        kafka = TestUtils.createServer(kafkaConfig, Time.SYSTEM);\n        kafka.startup();\n\n        log.debug(\"Startup of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\", brokerList(), zookeeperConnect());\n    }\n\n    private Properties effectiveConfigFrom(final Properties initialConfig) {\n",
                    "rendered": {
                      "text": "        kafka = TestUtils.createServer(kafkaConfig, Time.SYSTEM);\n        kafka.startup();\n\n        log.debug(\"Startup of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\", brokerList(), zookeeperConnect());\n    }\n\n    private Properties effectiveConfigFrom(final Properties initialConfig) {\n",
                      "markdown": "`        kafka = TestUtils.createServer(kafkaConfig, Time.SYSTEM);\n        kafka.startup();\n\n        log.debug(\"Startup of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\", brokerList(), zookeeperConnect());\n    }\n\n    private Properties effectiveConfigFrom(final Properties initialConfig) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 51,
                  "endLine": 42,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        kafka = TestUtils.createServer(kafkaConfig, Time.SYSTEM);\n        kafka.startup();\n\n        log.debug(\"Startup of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\", brokerList(), zookeeperConnect());\n    }\n\n    private Properties effectiveConfigFrom(final Properties initialConfig) {\n",
                    "rendered": {
                      "text": "        kafka = TestUtils.createServer(kafkaConfig, Time.SYSTEM);\n        kafka.startup();\n\n        log.debug(\"Startup of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\", brokerList(), zookeeperConnect());\n    }\n\n    private Properties effectiveConfigFrom(final Properties initialConfig) {\n",
                      "markdown": "`        kafka = TestUtils.createServer(kafkaConfig, Time.SYSTEM);\n        kafka.startup();\n\n        log.debug(\"Startup of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...\", brokerList(), zookeeperConnect());\n    }\n\n    private Properties effectiveConfigFrom(final Properties initialConfig) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/KafkaEmbedded.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 77,
                  "endLine": 34,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n        final KafkaConfig kafkaConfig = new KafkaConfig(effectiveConfig, true);\n        log.debug(\n            \"Starting embedded Kafka broker (with log.dirs={} and ZK ensemble at {}) ...\",\n            logDir,\n            zookeeperConnect()\n        );\n",
                    "rendered": {
                      "text": "\n        final KafkaConfig kafkaConfig = new KafkaConfig(effectiveConfig, true);\n        log.debug(\n            \"Starting embedded Kafka broker (with log.dirs={} and ZK ensemble at {}) ...\",\n            logDir,\n            zookeeperConnect()\n        );\n",
                      "markdown": "`\n        final KafkaConfig kafkaConfig = new KafkaConfig(effectiveConfig, true);\n        log.debug(\n            \"Starting embedded Kafka broker (with log.dirs={} and ZK ensemble at {}) ...\",\n            logDir,\n            zookeeperConnect()\n        );\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/EmbeddedSingleNodeKafkaCluster.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 42,
                  "endLine": 110,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        ksqlDbProperties.put(\"listeners\", \"http://0.0.0.0:\" + randomPort());\n\n        ksqlDBEmbedded = new KsqlDBEmbedded(ksqlDbProperties);\n        log.debug(\"Kafka KsqlDB is running at {}\", ksqlDbUrl());\n    }\n\n    static Integer randomPort() {\n",
                    "rendered": {
                      "text": "        ksqlDbProperties.put(\"listeners\", \"http://0.0.0.0:\" + randomPort());\n\n        ksqlDBEmbedded = new KsqlDBEmbedded(ksqlDbProperties);\n        log.debug(\"Kafka KsqlDB is running at {}\", ksqlDbUrl());\n    }\n\n    static Integer randomPort() {\n",
                      "markdown": "`        ksqlDbProperties.put(\"listeners\", \"http://0.0.0.0:\" + randomPort());\n\n        ksqlDBEmbedded = new KsqlDBEmbedded(ksqlDbProperties);\n        log.debug(\"Kafka KsqlDB is running at {}\", ksqlDbUrl());\n    }\n\n    static Integer randomPort() {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/EmbeddedSingleNodeKafkaCluster.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 45,
                  "endLine": 101,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        log.debug(\"Kafka Connect-1 is running at {}\", connect1Url());\n\n        connect2 = new ConnectEmbedded(connect2Properties);\n        log.debug(\"Kafka Connect-2 is running at {}\", connect2Url());\n\n        // KsqlDB\n        Properties ksqlDbProperties = new Properties();\n",
                    "rendered": {
                      "text": "        log.debug(\"Kafka Connect-1 is running at {}\", connect1Url());\n\n        connect2 = new ConnectEmbedded(connect2Properties);\n        log.debug(\"Kafka Connect-2 is running at {}\", connect2Url());\n\n        // KsqlDB\n        Properties ksqlDbProperties = new Properties();\n",
                      "markdown": "`        log.debug(\"Kafka Connect-1 is running at {}\", connect1Url());\n\n        connect2 = new ConnectEmbedded(connect2Properties);\n        log.debug(\"Kafka Connect-2 is running at {}\", connect2Url());\n\n        // KsqlDB\n        Properties ksqlDbProperties = new Properties();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/EmbeddedSingleNodeKafkaCluster.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 45,
                  "endLine": 98,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        connect2Properties.put(\"plugin.path\", \"null\");\n\n        connect1 = new ConnectEmbedded(connect1Properties);\n        log.debug(\"Kafka Connect-1 is running at {}\", connect1Url());\n\n        connect2 = new ConnectEmbedded(connect2Properties);\n        log.debug(\"Kafka Connect-2 is running at {}\", connect2Url());\n",
                    "rendered": {
                      "text": "        connect2Properties.put(\"plugin.path\", \"null\");\n\n        connect1 = new ConnectEmbedded(connect1Properties);\n        log.debug(\"Kafka Connect-1 is running at {}\", connect1Url());\n\n        connect2 = new ConnectEmbedded(connect2Properties);\n        log.debug(\"Kafka Connect-2 is running at {}\", connect2Url());\n",
                      "markdown": "`        connect2Properties.put(\"plugin.path\", \"null\");\n\n        connect1 = new ConnectEmbedded(connect1Properties);\n        log.debug(\"Kafka Connect-1 is running at {}\", connect1Url());\n\n        connect2 = new ConnectEmbedded(connect2Properties);\n        log.debug(\"Kafka Connect-2 is running at {}\", connect2Url());\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/EmbeddedSingleNodeKafkaCluster.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 45,
                  "endLine": 61,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n        schemaRegistry = new RestApp(0, zookeeperConnect(), KAFKA_SCHEMAS_TOPIC, AVRO_COMPATIBILITY_TYPE, schemaRegistryProps);\n        schemaRegistry.start();\n        log.debug(\"Schema registry is running at {}\", schemaRegistryUrl());\n\n        // connect-1\n        Properties connect1Properties = new Properties();\n",
                    "rendered": {
                      "text": "\n        schemaRegistry = new RestApp(0, zookeeperConnect(), KAFKA_SCHEMAS_TOPIC, AVRO_COMPATIBILITY_TYPE, schemaRegistryProps);\n        schemaRegistry.start();\n        log.debug(\"Schema registry is running at {}\", schemaRegistryUrl());\n\n        // connect-1\n        Properties connect1Properties = new Properties();\n",
                      "markdown": "`\n        schemaRegistry = new RestApp(0, zookeeperConnect(), KAFKA_SCHEMAS_TOPIC, AVRO_COMPATIBILITY_TYPE, schemaRegistryProps);\n        schemaRegistry.start();\n        log.debug(\"Schema registry is running at {}\", schemaRegistryUrl());\n\n        // connect-1\n        Properties connect1Properties = new Properties();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/EmbeddedSingleNodeKafkaCluster.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 74,
                  "endLine": 50,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n        log.debug(\"Starting a Kafka instance on port {} ...\", effectiveBrokerConfig.getProperty(KafkaConfig$.MODULE$.ListenersProp()));\n        broker = new KafkaEmbedded(effectiveBrokerConfig);\n        log.debug(\"Kafka instance is running at {}, connected to ZooKeeper at {}\", broker.brokerList(), broker.zookeeperConnect());\n\n        // schema registry\n        final Properties schemaRegistryProps = new Properties();\n",
                    "rendered": {
                      "text": "        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n        log.debug(\"Starting a Kafka instance on port {} ...\", effectiveBrokerConfig.getProperty(KafkaConfig$.MODULE$.ListenersProp()));\n        broker = new KafkaEmbedded(effectiveBrokerConfig);\n        log.debug(\"Kafka instance is running at {}, connected to ZooKeeper at {}\", broker.brokerList(), broker.zookeeperConnect());\n\n        // schema registry\n        final Properties schemaRegistryProps = new Properties();\n",
                      "markdown": "`        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n        log.debug(\"Starting a Kafka instance on port {} ...\", effectiveBrokerConfig.getProperty(KafkaConfig$.MODULE$.ListenersProp()));\n        broker = new KafkaEmbedded(effectiveBrokerConfig);\n        log.debug(\"Kafka instance is running at {}, connected to ZooKeeper at {}\", broker.brokerList(), broker.zookeeperConnect());\n\n        // schema registry\n        final Properties schemaRegistryProps = new Properties();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/EmbeddedSingleNodeKafkaCluster.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 44,
                  "endLine": 50,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n        log.debug(\"Starting a Kafka instance on port {} ...\", effectiveBrokerConfig.getProperty(KafkaConfig$.MODULE$.ListenersProp()));\n        broker = new KafkaEmbedded(effectiveBrokerConfig);\n        log.debug(\"Kafka instance is running at {}, connected to ZooKeeper at {}\", broker.brokerList(), broker.zookeeperConnect());\n\n        // schema registry\n        final Properties schemaRegistryProps = new Properties();\n",
                    "rendered": {
                      "text": "        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n        log.debug(\"Starting a Kafka instance on port {} ...\", effectiveBrokerConfig.getProperty(KafkaConfig$.MODULE$.ListenersProp()));\n        broker = new KafkaEmbedded(effectiveBrokerConfig);\n        log.debug(\"Kafka instance is running at {}, connected to ZooKeeper at {}\", broker.brokerList(), broker.zookeeperConnect());\n\n        // schema registry\n        final Properties schemaRegistryProps = new Properties();\n",
                      "markdown": "`        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n        log.debug(\"Starting a Kafka instance on port {} ...\", effectiveBrokerConfig.getProperty(KafkaConfig$.MODULE$.ListenersProp()));\n        broker = new KafkaEmbedded(effectiveBrokerConfig);\n        log.debug(\"Kafka instance is running at {}, connected to ZooKeeper at {}\", broker.brokerList(), broker.zookeeperConnect());\n\n        // schema registry\n        final Properties schemaRegistryProps = new Properties();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/EmbeddedSingleNodeKafkaCluster.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        log.debug(\"Initiating embedded Kafka cluster startup\");\n        log.debug(\"Starting a ZooKeeper instance...\");\n        zookeeper = new ZooKeeperEmbedded();\n        log.debug(\"ZooKeeper instance is running at {}\", zookeeper.connectString());\n\n        // kafka\n        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n",
                    "rendered": {
                      "text": "        log.debug(\"Initiating embedded Kafka cluster startup\");\n        log.debug(\"Starting a ZooKeeper instance...\");\n        zookeeper = new ZooKeeperEmbedded();\n        log.debug(\"ZooKeeper instance is running at {}\", zookeeper.connectString());\n\n        // kafka\n        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n",
                      "markdown": "`        log.debug(\"Initiating embedded Kafka cluster startup\");\n        log.debug(\"Starting a ZooKeeper instance...\");\n        zookeeper = new ZooKeeperEmbedded();\n        log.debug(\"ZooKeeper instance is running at {}\", zookeeper.connectString());\n\n        // kafka\n        final Properties effectiveBrokerConfig = effectiveBrokerConfigFrom(brokerConfig, zookeeper);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ZooKeeperEmbedded.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 18,
                  "endLine": 49,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    /**\n     * The hostname of the ZooKeeper instance.  Example: `127.0.0.1`\n     */\n    public String hostname() {\n        // \"server:1:2:3\" -> \"server:1:2\"\n        return connectString().substring(0, connectString().lastIndexOf(':'));\n    }\n",
                    "rendered": {
                      "text": "    /**\n     * The hostname of the ZooKeeper instance.  Example: `127.0.0.1`\n     */\n    public String hostname() {\n        // \"server:1:2:3\" -> \"server:1:2\"\n        return connectString().substring(0, connectString().lastIndexOf(':'));\n    }\n",
                      "markdown": "`    /**\n     * The hostname of the ZooKeeper instance.  Example: `127.0.0.1`\n     */\n    public String hostname() {\n        // \"server:1:2:3\" -> \"server:1:2\"\n        return connectString().substring(0, connectString().lastIndexOf(':'));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ZooKeeperEmbedded.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 56,
                  "endLine": 33,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    public void stop() throws IOException {\n        log.debug(\"Shutting down embedded ZooKeeper server at {} ...\", server.getConnectString());\n        server.close();\n        log.debug(\"Shutdown of embedded ZooKeeper server at {} completed\", server.getConnectString());\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "    public void stop() throws IOException {\n        log.debug(\"Shutting down embedded ZooKeeper server at {} ...\", server.getConnectString());\n        server.close();\n        log.debug(\"Shutdown of embedded ZooKeeper server at {} completed\", server.getConnectString());\n    }\n\n    /**\n",
                      "markdown": "`    public void stop() throws IOException {\n        log.debug(\"Shutting down embedded ZooKeeper server at {} ...\", server.getConnectString());\n        server.close();\n        log.debug(\"Shutdown of embedded ZooKeeper server at {} completed\", server.getConnectString());\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ZooKeeperEmbedded.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 58,
                  "endLine": 31,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    }\n\n    public void stop() throws IOException {\n        log.debug(\"Shutting down embedded ZooKeeper server at {} ...\", server.getConnectString());\n        server.close();\n        log.debug(\"Shutdown of embedded ZooKeeper server at {} completed\", server.getConnectString());\n    }\n",
                    "rendered": {
                      "text": "    }\n\n    public void stop() throws IOException {\n        log.debug(\"Shutting down embedded ZooKeeper server at {} ...\", server.getConnectString());\n        server.close();\n        log.debug(\"Shutdown of embedded ZooKeeper server at {} completed\", server.getConnectString());\n    }\n",
                      "markdown": "`    }\n\n    public void stop() throws IOException {\n        log.debug(\"Shutting down embedded ZooKeeper server at {} ...\", server.getConnectString());\n        server.close();\n        log.debug(\"Shutdown of embedded ZooKeeper server at {} completed\", server.getConnectString());\n    }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ZooKeeperEmbedded.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 74,
                  "endLine": 27,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    public ZooKeeperEmbedded() throws Exception {\n        log.debug(\"Starting embedded ZooKeeper server...\");\n        this.server = new TestingServer();\n        log.debug(\"Embedded ZooKeeper server at {} uses the temp directory at {}\", server.getConnectString(), server.getTempDirectory());\n    }\n\n    public void stop() throws IOException {\n",
                    "rendered": {
                      "text": "    public ZooKeeperEmbedded() throws Exception {\n        log.debug(\"Starting embedded ZooKeeper server...\");\n        this.server = new TestingServer();\n        log.debug(\"Embedded ZooKeeper server at {} uses the temp directory at {}\", server.getConnectString(), server.getTempDirectory());\n    }\n\n    public void stop() throws IOException {\n",
                      "markdown": "`    public ZooKeeperEmbedded() throws Exception {\n        log.debug(\"Starting embedded ZooKeeper server...\");\n        this.server = new TestingServer();\n        log.debug(\"Embedded ZooKeeper server at {} uses the temp directory at {}\", server.getConnectString(), server.getTempDirectory());\n    }\n\n    public void stop() throws IOException {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ZooKeeperEmbedded.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 44,
                  "endLine": 27,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    public ZooKeeperEmbedded() throws Exception {\n        log.debug(\"Starting embedded ZooKeeper server...\");\n        this.server = new TestingServer();\n        log.debug(\"Embedded ZooKeeper server at {} uses the temp directory at {}\", server.getConnectString(), server.getTempDirectory());\n    }\n\n    public void stop() throws IOException {\n",
                    "rendered": {
                      "text": "    public ZooKeeperEmbedded() throws Exception {\n        log.debug(\"Starting embedded ZooKeeper server...\");\n        this.server = new TestingServer();\n        log.debug(\"Embedded ZooKeeper server at {} uses the temp directory at {}\", server.getConnectString(), server.getTempDirectory());\n    }\n\n    public void stop() throws IOException {\n",
                      "markdown": "`    public ZooKeeperEmbedded() throws Exception {\n        log.debug(\"Starting embedded ZooKeeper server...\");\n        this.server = new TestingServer();\n        log.debug(\"Embedded ZooKeeper server at {} uses the temp directory at {}\", server.getConnectString(), server.getTempDirectory());\n    }\n\n    public void stop() throws IOException {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ConnectEmbedded.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 47,
                  "endLine": 99,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        connect.stop();\n        connect.awaitStop();\n\n        log.debug(\"Shutdown of embedded connect at {} completed\", connect.rest().serverUrl());\n    }\n}\n",
                    "rendered": {
                      "text": "        connect.stop();\n        connect.awaitStop();\n\n        log.debug(\"Shutdown of embedded connect at {} completed\", connect.rest().serverUrl());\n    }\n}\n",
                      "markdown": "`        connect.stop();\n        connect.awaitStop();\n\n        log.debug(\"Shutdown of embedded connect at {} completed\", connect.rest().serverUrl());\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ConnectEmbedded.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 49,
                  "endLine": 94,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    }\n\n    public void stop() {\n        log.debug(\"Shutting down embedded connect at {} ...\", connect.rest().serverUrl() );\n\n        connect.stop();\n        connect.awaitStop();\n",
                    "rendered": {
                      "text": "    }\n\n    public void stop() {\n        log.debug(\"Shutting down embedded connect at {} ...\", connect.rest().serverUrl() );\n\n        connect.stop();\n        connect.awaitStop();\n",
                      "markdown": "`    }\n\n    public void stop() {\n        log.debug(\"Shutting down embedded connect at {} ...\", connect.rest().serverUrl() );\n\n        connect.stop();\n        connect.awaitStop();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ConnectEmbedded.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 52,
                  "endLine": 71,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        connect = new Connect(herder, rest);\n        connect.start();\n\n        log.debug(\"Startup of embedded Kafka connect at {} completed ...\", connect.rest().serverUrl());\n    }\n\n    private Map<String, String> effectiveConfigFrom(final Properties initialConfig) {\n",
                    "rendered": {
                      "text": "        connect = new Connect(herder, rest);\n        connect.start();\n\n        log.debug(\"Startup of embedded Kafka connect at {} completed ...\", connect.rest().serverUrl());\n    }\n\n    private Map<String, String> effectiveConfigFrom(final Properties initialConfig) {\n",
                      "markdown": "`        connect = new Connect(herder, rest);\n        connect.start();\n\n        log.debug(\"Startup of embedded Kafka connect at {} completed ...\", connect.rest().serverUrl());\n    }\n\n    private Map<String, String> effectiveConfigFrom(final Properties initialConfig) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ConnectEmbedded.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 13,
                  "endLine": 26,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    private final Connect connect;\n\n    public ConnectEmbedded(final Properties properties) {\n        final Time time = Time.SYSTEM;\n        Map<String, String> workerProps = effectiveConfigFrom(properties);\n\n        log.debug(\"Scanning for plugin classes. This might take a moment ...\");\n",
                    "rendered": {
                      "text": "    private final Connect connect;\n\n    public ConnectEmbedded(final Properties properties) {\n        final Time time = Time.SYSTEM;\n        Map<String, String> workerProps = effectiveConfigFrom(properties);\n\n        log.debug(\"Scanning for plugin classes. This might take a moment ...\");\n",
                      "markdown": "`    private final Connect connect;\n\n    public ConnectEmbedded(final Properties properties) {\n        final Time time = Time.SYSTEM;\n        Map<String, String> workerProps = effectiveConfigFrom(properties);\n\n        log.debug(\"Scanning for plugin classes. This might take a moment ...\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/src/test/java/org/akhq/clusters/ConnectUtils.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 51,
                  "endLine": 29,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                return null;\n            }\n            log.debug(\"Fetching Kafka cluster ID\");\n            String kafkaClusterId = clusterIdFuture.get();\n            log.info(\"Kafka cluster ID: {}\", kafkaClusterId);\n            return kafkaClusterId;\n        } catch (InterruptedException e) {\n",
                    "rendered": {
                      "text": "                return null;\n            }\n            log.debug(\"Fetching Kafka cluster ID\");\n            String kafkaClusterId = clusterIdFuture.get();\n            log.info(\"Kafka cluster ID: {}\", kafkaClusterId);\n            return kafkaClusterId;\n        } catch (InterruptedException e) {\n",
                      "markdown": "`                return null;\n            }\n            log.debug(\"Fetching Kafka cluster ID\");\n            String kafkaClusterId = clusterIdFuture.get();\n            log.info(\"Kafka cluster ID: {}\", kafkaClusterId);\n            return kafkaClusterId;\n        } catch (InterruptedException e) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/ConsumerGroup/ConsumerGroupList/ConsumerGroupList.jsx"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 58,
                  "endLine": 60,
                  "endColumn": 63,
                  "snippet": {
                    "text": "          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConsumerGroup(false);\n",
                    "rendered": {
                      "text": "          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConsumerGroup(false);\n",
                      "markdown": "`          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConsumerGroup(false);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/ConsumerGroup/ConsumerGroupList/ConsumerGroupList.jsx"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 29,
                  "endLine": 60,
                  "endColumn": 34,
                  "snippet": {
                    "text": "          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConsumerGroup(false);\n",
                    "rendered": {
                      "text": "          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConsumerGroup(false);\n",
                      "markdown": "`          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n            this.getConsumerGroup(false);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/ConsumerGroup/ConsumerGroupList/ConsumerGroupList.jsx"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 25,
                  "endLine": 59,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n",
                    "rendered": {
                      "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n",
                      "markdown": "`        this.setState(\n          {\n            selectedCluster: clusterId,\n            search: query.get('search'),\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n          },\n          () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/ConsumerGroup/ConsumerGroupList/ConsumerGroupList.jsx"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 54,
                  "endLine": 41,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConsumerGroup();\n",
                    "rendered": {
                      "text": "      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConsumerGroup();\n",
                      "markdown": "`      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConsumerGroup();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/ConsumerGroup/ConsumerGroupList/ConsumerGroupList.jsx"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 25,
                  "endLine": 41,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConsumerGroup();\n",
                    "rendered": {
                      "text": "      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConsumerGroup();\n",
                      "markdown": "`      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getConsumerGroup();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/ConsumerGroup/ConsumerGroupList/ConsumerGroupList.jsx"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 43,
                  "endLine": 40,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    this.setState(\n      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/ConsumerGroup/ConsumerGroupList/ConsumerGroupList.jsx"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 21,
                  "endLine": 40,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    this.setState(\n      {\n        selectedCluster: clusterId,\n        search: query.get('search') ? query.get('search') : search,\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Schema/SchemaDetail/Schema.jsx"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 107,
                  "snippet": {
                    "text": "                  to={`/ui/${clusterId}/schema/details/${schemaId}/update`}\n                  className={this.tabClassName('update')}\n                >\n                  Update\n                </Link>\n              </li>\n            )}\n            <li className=\"nav-item\">\n",
                    "rendered": {
                      "text": "                  to={`/ui/${clusterId}/schema/details/${schemaId}/update`}\n                  className={this.tabClassName('update')}\n                >\n                  Update\n                </Link>\n              </li>\n            )}\n            <li className=\"nav-item\">\n",
                      "markdown": "`                  to={`/ui/${clusterId}/schema/details/${schemaId}/update`}\n                  className={this.tabClassName('update')}\n                >\n                  Update\n                </Link>\n              </li>\n            )}\n            <li className=\"nav-item\">\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Acl/AclList/Acls.jsx"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 57,
                  "endLine": 28,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search }\n      },\n      () => {\n        this.getAcls();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search }\n      },\n      () => {\n        this.getAcls();\n",
                      "markdown": "`    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search }\n      },\n      () => {\n        this.getAcls();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Acl/AclList/Acls.jsx"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 35,
                  "endLine": 28,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search }\n      },\n      () => {\n        this.getAcls();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search }\n      },\n      () => {\n        this.getAcls();\n",
                      "markdown": "`    this.setState(\n      {\n        selectedCluster: clusterId,\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search }\n      },\n      () => {\n        this.getAcls();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 22,
                  "endLine": 151,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          />\n          {errors.password && (\n            <div id=\"input-error\" className=\"alert alert-danger mt-1 p-1\">\n              {errors.password}\n            </div>\n          )}\n        </div>\n",
                    "rendered": {
                      "text": "          />\n          {errors.password && (\n            <div id=\"input-error\" className=\"alert alert-danger mt-1 p-1\">\n              {errors.password}\n            </div>\n          )}\n        </div>\n",
                      "markdown": "`          />\n          {errors.password && (\n            <div id=\"input-error\" className=\"alert alert-danger mt-1 p-1\">\n              {errors.password}\n            </div>\n          )}\n        </div>\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 18,
                  "endLine": 149,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            required=\"\"\n            onChange={this.handleChange}\n          />\n          {errors.password && (\n            <div id=\"input-error\" className=\"alert alert-danger mt-1 p-1\">\n              {errors.password}\n            </div>\n",
                    "rendered": {
                      "text": "            required=\"\"\n            onChange={this.handleChange}\n          />\n          {errors.password && (\n            <div id=\"input-error\" className=\"alert alert-danger mt-1 p-1\">\n              {errors.password}\n            </div>\n",
                      "markdown": "`            required=\"\"\n            onChange={this.handleChange}\n          />\n          {errors.password && (\n            <div id=\"input-error\" className=\"alert alert-danger mt-1 p-1\">\n              {errors.password}\n            </div>\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 24,
                  "endLine": 145,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            required=\"\"\n            onChange={this.handleChange}\n          />\n",
                    "rendered": {
                      "text": "            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            required=\"\"\n            onChange={this.handleChange}\n          />\n",
                      "markdown": "`            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            required=\"\"\n            onChange={this.handleChange}\n          />\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 25,
                  "endLine": 144,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            required=\"\"\n            onChange={this.handleChange}\n",
                    "rendered": {
                      "text": "            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            required=\"\"\n            onChange={this.handleChange}\n",
                      "markdown": "`            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            required=\"\"\n            onChange={this.handleChange}\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 18,
                  "endLine": 142,
                  "endColumn": 26,
                  "snippet": {
                    "text": "          </div>\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n",
                    "rendered": {
                      "text": "          </div>\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n",
                      "markdown": "`          </div>\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 18,
                  "endLine": 141,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            <FontAwesomeIcon icon={faLock} />\n          </div>\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n",
                    "rendered": {
                      "text": "            <FontAwesomeIcon icon={faLock} />\n          </div>\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n",
                      "markdown": "`            <FontAwesomeIcon icon={faLock} />\n          </div>\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 37,
                  "endLine": 87,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        toast.error('User logged in but no roles assigned');\n      }\n    } else {\n      toast.error('Wrong Username or Password!');\n    }\n  }\n\n",
                    "rendered": {
                      "text": "        toast.error('User logged in but no roles assigned');\n      }\n    } else {\n      toast.error('Wrong Username or Password!');\n    }\n  }\n\n",
                      "markdown": "`        toast.error('User logged in but no roles assigned');\n      }\n    } else {\n      toast.error('Wrong Username or Password!');\n    }\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 37,
                  "endLine": 65,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      });\n    } catch (err) {\n      // Handle login failed for cookie auth\n      toast.error('Wrong Username or Password!');\n    }\n  }\n\n",
                    "rendered": {
                      "text": "      });\n    } catch (err) {\n      // Handle login failed for cookie auth\n      toast.error('Wrong Username or Password!');\n    }\n  }\n\n",
                      "markdown": "`      });\n    } catch (err) {\n      // Handle login failed for cookie auth\n      toast.error('Wrong Username or Password!');\n    }\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 41,
                  "endLine": 47,
                  "endColumn": 49,
                  "snippet": {
                    "text": "      login(uriLogin(), body).then(res => {\n        // Handle login failed for bearer auth\n        if (res.status === 500) {\n          toast.error('Wrong Username or Password!');\n          return;\n        }\n\n",
                    "rendered": {
                      "text": "      login(uriLogin(), body).then(res => {\n        // Handle login failed for bearer auth\n        if (res.status === 500) {\n          toast.error('Wrong Username or Password!');\n          return;\n        }\n\n",
                      "markdown": "`      login(uriLogin(), body).then(res => {\n        // Handle login failed for bearer auth\n        if (res.status === 500) {\n          toast.error('Wrong Username or Password!');\n          return;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 27,
                  "endLine": 41,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    try {\n      const body = {\n        username: formData.username,\n        password: formData.password\n      };\n\n      login(uriLogin(), body).then(res => {\n",
                    "rendered": {
                      "text": "    try {\n      const body = {\n        username: formData.username,\n        password: formData.password\n      };\n\n      login(uriLogin(), body).then(res => {\n",
                      "markdown": "`    try {\n      const body = {\n        username: formData.username,\n        password: formData.password\n      };\n\n      login(uriLogin(), body).then(res => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 8,
                  "endLine": 41,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    try {\n      const body = {\n        username: formData.username,\n        password: formData.password\n      };\n\n      login(uriLogin(), body).then(res => {\n",
                    "rendered": {
                      "text": "    try {\n      const body = {\n        username: formData.username,\n        password: formData.password\n      };\n\n      login(uriLogin(), body).then(res => {\n",
                      "markdown": "`    try {\n      const body = {\n        username: formData.username,\n        password: formData.password\n      };\n\n      login(uriLogin(), body).then(res => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 45,
                  "endLine": 32,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n  schema = {\n    username: Joi.string().required().label('Username'),\n    password: Joi.string().required().label('Password')\n  };\n\n  login() {\n",
                    "rendered": {
                      "text": "\n  schema = {\n    username: Joi.string().required().label('Username'),\n    password: Joi.string().required().label('Password')\n  };\n\n  login() {\n",
                      "markdown": "`\n  schema = {\n    username: Joi.string().required().label('Username'),\n    password: Joi.string().required().label('Password')\n  };\n\n  login() {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n  schema = {\n    username: Joi.string().required().label('Username'),\n    password: Joi.string().required().label('Password')\n  };\n\n  login() {\n",
                    "rendered": {
                      "text": "\n  schema = {\n    username: Joi.string().required().label('Username'),\n    password: Joi.string().required().label('Password')\n  };\n\n  login() {\n",
                      "markdown": "`\n  schema = {\n    username: Joi.string().required().label('Username'),\n    password: Joi.string().required().label('Password')\n  };\n\n  login() {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Login/Login.jsx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 6,
                  "endLine": 20,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  state = {\n    formData: {\n      username: '',\n      password: ''\n    },\n    errors: {},\n    config: {\n",
                    "rendered": {
                      "text": "  state = {\n    formData: {\n      username: '',\n      password: ''\n    },\n    errors: {},\n    config: {\n",
                      "markdown": "`  state = {\n    formData: {\n      username: '',\n      password: ''\n    },\n    errors: {},\n    config: {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBQueries/KsqlDBQueries.jsx"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 54,
                  "endLine": 44,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBQueries();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBQueries();\n",
                      "markdown": "`    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBQueries();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBQueries/KsqlDBQueries.jsx"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 25,
                  "endLine": 44,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBQueries();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBQueries();\n",
                      "markdown": "`    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBQueries();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBQueries/KsqlDBQueries.jsx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 57,
                  "endLine": 43,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBQueries/KsqlDBQueries.jsx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 35,
                  "endLine": 43,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBStreams/KsqlDBStreams.jsx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 54,
                  "endLine": 43,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBStreams();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBStreams();\n",
                      "markdown": "`    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBStreams();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBStreams/KsqlDBStreams.jsx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 25,
                  "endLine": 43,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBStreams();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBStreams();\n",
                      "markdown": "`    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBStreams();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBStreams/KsqlDBStreams.jsx"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 57,
                  "endLine": 42,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBStreams/KsqlDBStreams.jsx"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 35,
                  "endLine": 42,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBTables/KsqlDBTables.jsx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 54,
                  "endLine": 43,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBTables();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBTables();\n",
                      "markdown": "`    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBTables();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBTables/KsqlDBTables.jsx"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 25,
                  "endLine": 43,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBTables();\n",
                    "rendered": {
                      "text": "    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBTables();\n",
                      "markdown": "`    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n        this.getKsqlDBTables();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBTables/KsqlDBTables.jsx"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 57,
                  "endLine": 42,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/KsqlDB/KsqlDBList/KsqlDBTables/KsqlDBTables.jsx"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 35,
                  "endLine": 42,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                    "rendered": {
                      "text": "    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n",
                      "markdown": "`    const query = new URLSearchParams(this.props.location.search);\n    this.setState(\n      {\n        searchData: { search: query.get('search') ? query.get('search') : searchData.search },\n        pageNumber: query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber)\n      },\n      () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 24,
                  "endLine": 137,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n    }\n\n",
                    "rendered": {
                      "text": "      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n    }\n\n",
                      "markdown": "`      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 29,
                  "endLine": 136,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n    }\n",
                    "rendered": {
                      "text": "            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n    }\n",
                      "markdown": "`            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 53,
                  "endLine": 135,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n",
                    "rendered": {
                      "text": "            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n",
                      "markdown": "`            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 24,
                  "endLine": 135,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n",
                    "rendered": {
                      "text": "            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n",
                      "markdown": "`            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n      };\n      pageNumber = query.get('page') ? parseInt(query.get('page')) : parseInt(pageNumber);\n      currentPageSize = query.get('uiPageSize')\n        ? parseInt(query.get('uiPageSize'))\n        : parseInt(currentPageSize);\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "endLine": 130,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n",
                    "rendered": {
                      "text": "      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n",
                      "markdown": "`      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n            ? uiOptions.topic.defaultView\n            : searchData.topicListView\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 28,
                  "endLine": 129,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n            ? uiOptions.topic.defaultView\n",
                    "rendered": {
                      "text": "    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n            ? uiOptions.topic.defaultView\n",
                      "markdown": "`    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n            ? uiOptions.topic.defaultView\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 43,
                  "endLine": 128,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      keepSearchTmp = true;\n    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n",
                    "rendered": {
                      "text": "      keepSearchTmp = true;\n    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n",
                      "markdown": "`      keepSearchTmp = true;\n    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 21,
                  "endLine": 128,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      keepSearchTmp = true;\n    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n",
                    "rendered": {
                      "text": "      keepSearchTmp = true;\n    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n",
                      "markdown": "`      keepSearchTmp = true;\n    } else {\n      searchDataTmp = {\n        search: query.get('search') ? query.get('search') : searchData.search,\n        topicListView: query.get('topicListView')\n          ? query.get('topicListView')\n          : uiOptions && uiOptions.topic && uiOptions.topic.defaultView\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 58,
                  "endLine": 91,
                  "endColumn": 63,
                  "snippet": {
                    "text": "          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n            this.getTopics();\n",
                    "rendered": {
                      "text": "          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n            this.getTopics();\n",
                      "markdown": "`          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n            this.getTopics();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 29,
                  "endLine": 91,
                  "endColumn": 34,
                  "snippet": {
                    "text": "          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n            this.getTopics();\n",
                    "rendered": {
                      "text": "          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n            this.getTopics();\n",
                      "markdown": "`          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n            this.getTopics();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 76,
                  "endLine": 90,
                  "endColumn": 81,
                  "snippet": {
                    "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n",
                    "rendered": {
                      "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n",
                      "markdown": "`        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/TopicList/TopicList.jsx"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 54,
                  "endLine": 90,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n",
                    "rendered": {
                      "text": "        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n",
                      "markdown": "`        this.setState(\n          {\n            selectedCluster: clusterId,\n            searchData: { ...searchData, search: query.get('search') ? query.get('search') : '' },\n            pageNumber: query.get('page') ? parseInt(query.get('page')) : 1\n          },\n          () => {\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/containers/Topic/Topic/Topic.jsx"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 80,
                  "endLine": 361,
                  "snippet": {
                    "text": "                  }}\n                  className=\"btn btn-secondary me-2\"\n                >\n                  <FontAwesomeIcon icon={faLevelDown} aria-hidden={true} /> Live Tail\n                </Link>\n              )}\n\n              {selectedTab === 'partitions' &&\n",
                    "rendered": {
                      "text": "                  }}\n                  className=\"btn btn-secondary me-2\"\n                >\n                  <FontAwesomeIcon icon={faLevelDown} aria-hidden={true} /> Live Tail\n                </Link>\n              )}\n\n              {selectedTab === 'partitions' &&\n",
                      "markdown": "`                  }}\n                  className=\"btn btn-secondary me-2\"\n                >\n                  <FontAwesomeIcon icon={faLevelDown} aria-hidden={true} /> Live Tail\n                </Link>\n              )}\n\n              {selectedTab === 'partitions' &&\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/api.jsx"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 6,
                  "endLine": 81,
                  "endColumn": 12,
                  "snippet": {
                    "text": "export const post = (url, body, config) =>\n  new Promise((resolve, reject) => {\n    axios\n      .post(url, body, { ...configs, ...config })\n      .then(res => {\n        resolve(res);\n      })\n",
                    "rendered": {
                      "text": "export const post = (url, body, config) =>\n  new Promise((resolve, reject) => {\n    axios\n      .post(url, body, { ...configs, ...config })\n      .then(res => {\n        resolve(res);\n      })\n",
                      "markdown": "`export const post = (url, body, config) =>\n  new Promise((resolve, reject) => {\n    axios\n      .post(url, body, { ...configs, ...config })\n      .then(res => {\n        resolve(res);\n      })\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/utils/api.jsx"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 6,
                  "endLine": 53,
                  "endColumn": 11,
                  "snippet": {
                    "text": "export const get = (url, config) =>\n  new Promise((resolve, reject) => {\n    axios\n      .get(url, { ...configs, ...config })\n      .then(res => {\n        resolve(res);\n      })\n",
                    "rendered": {
                      "text": "export const get = (url, config) =>\n  new Promise((resolve, reject) => {\n    axios\n      .get(url, { ...configs, ...config })\n      .then(res => {\n        resolve(res);\n      })\n",
                      "markdown": "`export const get = (url, config) =>\n  new Promise((resolve, reject) => {\n    axios\n      .get(url, { ...configs, ...config })\n      .then(res => {\n        resolve(res);\n      })\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/client/src/index.jsx"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 19,
                  "endLine": 16,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",
                    "rendered": {
                      "text": "\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",
                      "markdown": "`\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n`"
                    }
                  },
                  "sourceLanguage": "javascriptreact"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 25,
                  "endLine": 258,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    # Basic auth configuration\n    basic-auth:\n      - username: user # Username\n        password: pass # Password in sha256\n        groups: # Groups for the user\n          - admin\n\n",
                    "rendered": {
                      "text": "    # Basic auth configuration\n    basic-auth:\n      - username: user # Username\n        password: pass # Password in sha256\n        groups: # Groups for the user\n          - admin\n\n",
                      "markdown": "`    # Basic auth configuration\n    basic-auth:\n      - username: user # Username\n        password: pass # Password in sha256\n        groups: # Groups for the user\n          - admin\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 8,
                  "endLine": 258,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    # Basic auth configuration\n    basic-auth:\n      - username: user # Username\n        password: pass # Password in sha256\n        groups: # Groups for the user\n          - admin\n\n",
                    "rendered": {
                      "text": "    # Basic auth configuration\n    basic-auth:\n      - username: user # Username\n        password: pass # Password in sha256\n        groups: # Groups for the user\n          - admin\n\n",
                      "markdown": "`    # Basic auth configuration\n    basic-auth:\n      - username: user # Username\n        password: pass # Password in sha256\n        groups: # Groups for the user\n          - admin\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 26,
                  "endLine": 136,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n    page-size: 25 # number of elements per page (default : 25)\n",
                    "rendered": {
                      "text": "        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n    page-size: 25 # number of elements per page (default : 25)\n",
                      "markdown": "`        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n    page-size: 25 # number of elements per page (default : 25)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 16,
                  "endLine": 136,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n    page-size: 25 # number of elements per page (default : 25)\n",
                    "rendered": {
                      "text": "        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n    page-size: 25 # number of elements per page (default : 25)\n",
                      "markdown": "`        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n    page-size: 25 # number of elements per page (default : 25)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 31,
                  "endLine": 135,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n",
                    "rendered": {
                      "text": "        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n",
                      "markdown": "`        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 21,
                  "endLine": 135,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n",
                    "rendered": {
                      "text": "        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n",
                      "markdown": "`        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n  pagination:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 33,
                  "endLine": 133,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n",
                    "rendered": {
                      "text": "        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n",
                      "markdown": "`        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 23,
                  "endLine": 133,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n",
                    "rendered": {
                      "text": "        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n",
                      "markdown": "`        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 118,
                  "endLine": 131,
                  "endColumn": 126,
                  "snippet": {
                    "text": "        bootstrap.servers: \"kafka:9094\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n",
                    "rendered": {
                      "text": "        bootstrap.servers: \"kafka:9094\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n",
                      "markdown": "`        bootstrap.servers: \"kafka:9094\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 108,
                  "endLine": 131,
                  "endColumn": 116,
                  "snippet": {
                    "text": "        bootstrap.servers: \"kafka:9094\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n",
                    "rendered": {
                      "text": "        bootstrap.servers: \"kafka:9094\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n",
                      "markdown": "`        bootstrap.servers: \"kafka:9094\"\n        security.protocol: SASL_SSL\n        sasl.mechanism: SCRAM-SHA-256\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\";\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 26,
                  "endLine": 124,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n      properties:\n",
                    "rendered": {
                      "text": "        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n      properties:\n",
                      "markdown": "`        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n      properties:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 16,
                  "endLine": 124,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n      properties:\n",
                    "rendered": {
                      "text": "        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n      properties:\n",
                      "markdown": "`        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n      properties:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 31,
                  "endLine": 123,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n",
                    "rendered": {
                      "text": "        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n",
                      "markdown": "`        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 21,
                  "endLine": 123,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n",
                    "rendered": {
                      "text": "        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n",
                      "markdown": "`        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n\n    my-cluster-sasl:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 33,
                  "endLine": 121,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        bootstrap.servers: \"kafka:9093\"\n        security.protocol: SSL\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n",
                    "rendered": {
                      "text": "        bootstrap.servers: \"kafka:9093\"\n        security.protocol: SSL\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n",
                      "markdown": "`        bootstrap.servers: \"kafka:9093\"\n        security.protocol: SSL\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 23,
                  "endLine": 121,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        bootstrap.servers: \"kafka:9093\"\n        security.protocol: SSL\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n",
                    "rendered": {
                      "text": "        bootstrap.servers: \"kafka:9093\"\n        security.protocol: SSL\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n",
                      "markdown": "`        bootstrap.servers: \"kafka:9093\"\n        security.protocol: SSL\n        ssl.truststore.location: /app/truststore.jks\n        ssl.truststore.password: password\n        ssl.keystore.location: /app/keystore.jks\n        ssl.keystore.password: password\n        ssl.key.password: password\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 44,
                  "endLine": 89,
                  "endColumn": 52,
                  "snippet": {
                    "text": "          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n",
                    "rendered": {
                      "text": "          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n",
                      "markdown": "`          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 24,
                  "endLine": 89,
                  "endColumn": 32,
                  "snippet": {
                    "text": "          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n",
                    "rendered": {
                      "text": "          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n",
                      "markdown": "`          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 48,
                  "endLine": 87,
                  "endColumn": 56,
                  "snippet": {
                    "text": "          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n",
                    "rendered": {
                      "text": "          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n",
                      "markdown": "`          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 26,
                  "endLine": 87,
                  "endColumn": 34,
                  "snippet": {
                    "text": "          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n",
                    "rendered": {
                      "text": "          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n",
                      "markdown": "`          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n      deserialization:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 21,
                  "endLine": 84,
                  "endColumn": 29,
                  "snippet": {
                    "text": "          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n          basic-auth-username: basic-auth-user\n          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n",
                    "rendered": {
                      "text": "          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n          basic-auth-username: basic-auth-user\n          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n",
                      "markdown": "`          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n          basic-auth-username: basic-auth-user\n          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 52,
                  "snippet": {
                    "text": "          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n",
                    "rendered": {
                      "text": "          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n",
                      "markdown": "`          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 24,
                  "endLine": 79,
                  "endColumn": 32,
                  "snippet": {
                    "text": "          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n",
                    "rendered": {
                      "text": "          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n",
                      "markdown": "`          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n          url: \"http://connect:8084\"\n          # Basic Auth user / pass (optional)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 48,
                  "endLine": 77,
                  "endColumn": 56,
                  "snippet": {
                    "text": "          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n",
                    "rendered": {
                      "text": "          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n",
                      "markdown": "`          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 26,
                  "endLine": 77,
                  "endColumn": 34,
                  "snippet": {
                    "text": "          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n",
                    "rendered": {
                      "text": "          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n",
                      "markdown": "`          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n          ssl-key-store: /app/truststore.jks\n          ssl-key-store-password: key-store-password\n        - name: connect-2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 21,
                  "endLine": 74,
                  "endColumn": 29,
                  "snippet": {
                    "text": "          url: \"http://connect:8083\"\n          # Basic Auth user / pass (optional)\n          basic-auth-username: basic-auth-user\n          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n",
                    "rendered": {
                      "text": "          url: \"http://connect:8083\"\n          # Basic Auth user / pass (optional)\n          basic-auth-username: basic-auth-user\n          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n",
                      "markdown": "`          url: \"http://connect:8083\"\n          # Basic Auth user / pass (optional)\n          basic-auth-username: basic-auth-user\n          basic-auth-password: basic-auth-pass\n          # ssl store configuration (optional)\n          ssl-trust-store: /app/truststore.jks\n          ssl-trust-store-password: trust-store-password\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 19,
                  "endLine": 66,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        type: \"confluent\" # schema registry type (optional). Supported types are \"confluent\" (default) or \"tibco\"\n        # Basic Auth user / pass\n        basic-auth-username: basic-auth-user\n        basic-auth-password: basic-auth-pass\n        properties: # standard kafka properties (optional)\n          ssl.protocol: TLS\n      connect:\n",
                    "rendered": {
                      "text": "        type: \"confluent\" # schema registry type (optional). Supported types are \"confluent\" (default) or \"tibco\"\n        # Basic Auth user / pass\n        basic-auth-username: basic-auth-user\n        basic-auth-password: basic-auth-pass\n        properties: # standard kafka properties (optional)\n          ssl.protocol: TLS\n      connect:\n",
                      "markdown": "`        type: \"confluent\" # schema registry type (optional). Supported types are \"confluent\" (default) or \"tibco\"\n        # Basic Auth user / pass\n        basic-auth-username: basic-auth-user\n        basic-auth-password: basic-auth-pass\n        properties: # standard kafka properties (optional)\n          ssl.protocol: TLS\n      connect:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 28,
                  "endLine": 11,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n",
                    "rendered": {
                      "text": "        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n",
                      "markdown": "`        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 17,
                  "endLine": 11,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n",
                    "rendered": {
                      "text": "        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n",
                      "markdown": "`        context:\n          server: 'ldap://ldap.forumsys.com:389'\n          managerDn: 'cn=read-only-admin,dc=example,dc=com'\n          managerPassword: 'password'\n        search:\n          base: \"dc=example,dc=com\"\n        groups:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 30,
                  "endLine": 99,
                  "endColumn": 36,
                  "snippet": {
                    "text": "GlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGc",
                    "rendered": {
                      "text": "GlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGc",
                      "markdown": "`GlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGc`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 30,
                  "endLine": 96,
                  "endColumn": 36,
                  "snippet": {
                    "text": "          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n          descriptors-folder: \"/app/protobuf_desc\"\n          topics-mapping:\n            - topic-regex: \"album.*\"\n              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              v",
                    "rendered": {
                      "text": "          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n          descriptors-folder: \"/app/protobuf_desc\"\n          topics-mapping:\n            - topic-regex: \"album.*\"\n              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              v",
                      "markdown": "`          ssl-key-store-password: key-store-password\n      deserialization:\n        protobuf:\n          # (optional) if descriptor-file properties are used\n          descriptors-folder: \"/app/protobuf_desc\"\n          topics-mapping:\n            - topic-regex: \"album.*\"\n              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              v`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 38,
                  "endLine": 99,
                  "endColumn": 344,
                  "snippet": {
                    "text": "              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGcHJvdG8z\"\n              value-message-type: \"org.akhq.utils.Film\"\n            - topic-regex: \"test.*\"\n              descriptor-file: \"other.desc\"\n",
                    "rendered": {
                      "text": "              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGcHJvdG8z\"\n              value-message-type: \"org.akhq.utils.Film\"\n            - topic-regex: \"test.*\"\n              descriptor-file: \"other.desc\"\n",
                      "markdown": "`              descriptor-file-base64: \"Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=\"\n              value-message-type: \"org.akhq.utils.Album\"\n            - topic-regex: \"film.*\"\n              descriptor-file-base64: \"CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGcHJvdG8z\"\n              value-message-type: \"org.akhq.utils.Film\"\n            - topic-regex: \"test.*\"\n              descriptor-file: \"other.desc\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 38,
                  "endLine": 183,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      default-view: ALL  # default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM). Overrides default\n      skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n",
                    "rendered": {
                      "text": "      default-view: ALL  # default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM). Overrides default\n      skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n",
                      "markdown": "`      default-view: ALL  # default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM). Overrides default\n      skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 37,
                  "endLine": 165,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      - \"^.*-rekey$\"\n    skip-consumer-groups: false # Skip loading consumer group information when showing topics\n    skip-last-record: false # Skip loading last record date information when showing topics\n    show-all-consumer-groups: false # Expand list of consumer groups instead of showing one.\n    # Retry options for topic operations\n    retry:\n      topic-exists: # Delay between retries when checking for existence of newly created topics. This is needed as it might take the kafka broker a few seconds to create new topics.\n",
                    "rendered": {
                      "text": "      - \"^.*-rekey$\"\n    skip-consumer-groups: false # Skip loading consumer group information when showing topics\n    skip-last-record: false # Skip loading last record date information when showing topics\n    show-all-consumer-groups: false # Expand list of consumer groups instead of showing one.\n    # Retry options for topic operations\n    retry:\n      topic-exists: # Delay between retries when checking for existence of newly created topics. This is needed as it might take the kafka broker a few seconds to create new topics.\n",
                      "markdown": "`      - \"^.*-rekey$\"\n    skip-consumer-groups: false # Skip loading consumer group information when showing topics\n    skip-last-record: false # Skip loading last record date information when showing topics\n    show-all-consumer-groups: false # Expand list of consumer groups instead of showing one.\n    # Retry options for topic operations\n    retry:\n      topic-exists: # Delay between retries when checking for existence of newly created topics. This is needed as it might take the kafka broker a few seconds to create new topics.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 42,
                  "endLine": 111,
                  "endColumn": 50,
                  "snippet": {
                    "text": "). Overrides default\n          skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster",
                    "rendered": {
                      "text": "). Overrides default\n          skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster",
                      "markdown": "`). Overrides default\n          skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 88,
                  "endLine": 303,
                  "endColumn": 92,
                  "snippet": {
                    "text": "      user-header: x-akhq-user # mandatory (the header name that will contain username)\n      groups-header: x-akhq-group # optional (the header name that will contain groups separated by groups-header-separator)\n      groups-header-separator: ',' # optional (separator, defaults to ',')\n      ip-patterns: [127.0.0.*] # optional (Java regular expressions for matching trusted IP addresses, '0.0.0.0' matches all addresses)\n      default-group: topic-reader\n      groups:\n        - name: header-admin-group\n",
                    "rendered": {
                      "text": "      user-header: x-akhq-user # mandatory (the header name that will contain username)\n      groups-header: x-akhq-group # optional (the header name that will contain groups separated by groups-header-separator)\n      groups-header-separator: ',' # optional (separator, defaults to ',')\n      ip-patterns: [127.0.0.*] # optional (Java regular expressions for matching trusted IP addresses, '0.0.0.0' matches all addresses)\n      default-group: topic-reader\n      groups:\n        - name: header-admin-group\n",
                      "markdown": "`      user-header: x-akhq-user # mandatory (the header name that will contain username)\n      groups-header: x-akhq-group # optional (the header name that will contain groups separated by groups-header-separator)\n      groups-header-separator: ',' # optional (separator, defaults to ',')\n      ip-patterns: [127.0.0.*] # optional (Java regular expressions for matching trusted IP addresses, '0.0.0.0' matches all addresses)\n      default-group: topic-reader\n      groups:\n        - name: header-admin-group\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 28,
                  "endLine": 185,
                  "endColumn": 34,
                  "snippet": {
                    "text": "      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n  # Auth & Roles (optional)\n  security:\n",
                    "rendered": {
                      "text": "      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n  # Auth & Roles (optional)\n  security:\n",
                      "markdown": "`      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n  # Auth & Roles (optional)\n  security:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 38,
                  "endLine": 183,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      default-view: ALL  # default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM). Overrides default\n      skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n",
                    "rendered": {
                      "text": "      default-view: ALL  # default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM). Overrides default\n      skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n",
                      "markdown": "`      default-view: ALL  # default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM). Overrides default\n      skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n      skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n      show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n    topic-data:\n      sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 37,
                  "endLine": 165,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      - \"^.*-rekey$\"\n    skip-consumer-groups: false # Skip loading consumer group information when showing topics\n    skip-last-record: false # Skip loading last record date information when showing topics\n    show-all-consumer-groups: false # Expand list of consumer groups instead of showing one.\n    # Retry options for topic operations\n    retry:\n      topic-exists: # Delay between retries when checking for existence of newly created topics. This is needed as it might take the kafka broker a few seconds to create new topics.\n",
                    "rendered": {
                      "text": "      - \"^.*-rekey$\"\n    skip-consumer-groups: false # Skip loading consumer group information when showing topics\n    skip-last-record: false # Skip loading last record date information when showing topics\n    show-all-consumer-groups: false # Expand list of consumer groups instead of showing one.\n    # Retry options for topic operations\n    retry:\n      topic-exists: # Delay between retries when checking for existence of newly created topics. This is needed as it might take the kafka broker a few seconds to create new topics.\n",
                      "markdown": "`      - \"^.*-rekey$\"\n    skip-consumer-groups: false # Skip loading consumer group information when showing topics\n    skip-last-record: false # Skip loading last record date information when showing topics\n    show-all-consumer-groups: false # Expand list of consumer groups instead of showing one.\n    # Retry options for topic operations\n    retry:\n      topic-exists: # Delay between retries when checking for existence of newly created topics. This is needed as it might take the kafka broker a few seconds to create new topics.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 32,
                  "endLine": 113,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster-ssl:\n",
                    "rendered": {
                      "text": "          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster-ssl:\n",
                      "markdown": "`          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster-ssl:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/application.example.yml"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 42,
                  "endLine": 111,
                  "endColumn": 50,
                  "snippet": {
                    "text": "). Overrides default\n          skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster",
                    "rendered": {
                      "text": "). Overrides default\n          skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster",
                      "markdown": "`). Overrides default\n          skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default\n          skip-last-record: true  # Skip loading last record date information when showing topics.  Overrides default\n          show-all-consumer-groups: true # Expand list of consumer groups instead of showing one. Overrides default.\n        topic-data:\n          sort: NEWEST # default sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default\n          date-time-format: ISO # format of message timestamps (RELATIVE, ISO) (default: RELATIVE)\n\n    my-cluster`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/akhq.zip/micronaut-cli.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 8,
                  "endLine": 2,
                  "snippet": {
                    "text": "profile: service\ndefaultPackage: org.akhq\n---\ntestFramework: junit\nsourceLanguage: java\n",
                    "rendered": {
                      "text": "profile: service\ndefaultPackage: org.akhq\n---\ntestFramework: junit\nsourceLanguage: java\n",
                      "markdown": "`profile: service\ndefaultPackage: org.akhq\n---\ntestFramework: junit\nsourceLanguage: java\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}