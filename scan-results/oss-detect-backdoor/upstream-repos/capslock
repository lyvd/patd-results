{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/proto/capability.proto"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 51,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\nsyntax = \"proto2\";\n\n",
                    "rendered": {
                      "text": "// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\nsyntax = \"proto2\";\n\n",
                      "markdown": "`// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\nsyntax = \"proto2\";\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/caveats.md"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 47,
                  "endLine": 110,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nEven when a library has the expected set of capabilities, there is of course no\nguarantee that it performs its intended task correctly.  A library function\ncould return incorrect results, or never return at all.\n\nEven with careful human review of all code that is being imported, it can be\ndifficult to catch logic bugs, especially any that are deliberately hidden.\n",
                    "rendered": {
                      "text": "\nEven when a library has the expected set of capabilities, there is of course no\nguarantee that it performs its intended task correctly.  A library function\ncould return incorrect results, or never return at all.\n\nEven with careful human review of all code that is being imported, it can be\ndifficult to catch logic bugs, especially any that are deliberately hidden.\n",
                      "markdown": "`\nEven when a library has the expected set of capabilities, there is of course no\nguarantee that it performs its intended task correctly.  A library function\ncould return incorrect results, or never return at all.\n\nEven with careful human review of all code that is being imported, it can be\ndifficult to catch logic bugs, especially any that are deliberately hidden.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/caveats.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 12,
                  "endLine": 42,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nAlthough most uses in practice of the [unsafe](https://pkg.go.dev/unsafe)\nlibrary perform simple tasks, it is possible to use unsafe pointers to produce\nany behavior at all, by overwriting function pointers or code.  The tool\ntreats use of unsafe pointers as a capability, and reports them to the user.\n\n### Data Races\n",
                    "rendered": {
                      "text": "\nAlthough most uses in practice of the [unsafe](https://pkg.go.dev/unsafe)\nlibrary perform simple tasks, it is possible to use unsafe pointers to produce\nany behavior at all, by overwriting function pointers or code.  The tool\ntreats use of unsafe pointers as a capability, and reports them to the user.\n\n### Data Races\n",
                      "markdown": "`\nAlthough most uses in practice of the [unsafe](https://pkg.go.dev/unsafe)\nlibrary perform simple tasks, it is possible to use unsafe pointers to produce\nany behavior at all, by overwriting function pointers or code.  The tool\ntreats use of unsafe pointers as a capability, and reports them to the user.\n\n### Data Races\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 50,
                  "endLine": 48,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]\n        # Use only 'java' to analyze code written in Java, Kotlin or both\n        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n",
                    "rendered": {
                      "text": "        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]\n        # Use only 'java' to analyze code written in Java, Kotlin or both\n        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n",
                      "markdown": "`        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]\n        # Use only 'java' to analyze code written in Java, Kotlin or both\n        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 16,
                  "endLine": 59,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      uses: github/codeql-action/init@c36620d31ac7c881962c3d9dd939c40ec9434f2b # v3.26.12\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n\n",
                    "rendered": {
                      "text": "      uses: github/codeql-action/init@c36620d31ac7c881962c3d9dd939c40ec9434f2b # v3.26.12\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n\n",
                      "markdown": "`      uses: github/codeql-action/init@c36620d31ac7c881962c3d9dd939c40ec9434f2b # v3.26.12\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 57,
                  "endLine": 33,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    #   - https://gh.io/recommended-hardware-resources-for-running-codeql\n    #   - https://gh.io/supported-runners-and-hardware-resources\n    #   - https://gh.io/using-larger-runners\n    # Consider using larger runners for possible analysis time improvements.\n    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}\n    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}\n    permissions:\n",
                    "rendered": {
                      "text": "    #   - https://gh.io/recommended-hardware-resources-for-running-codeql\n    #   - https://gh.io/supported-runners-and-hardware-resources\n    #   - https://gh.io/using-larger-runners\n    # Consider using larger runners for possible analysis time improvements.\n    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}\n    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}\n    permissions:\n",
                      "markdown": "`    #   - https://gh.io/recommended-hardware-resources-for-running-codeql\n    #   - https://gh.io/supported-runners-and-hardware-resources\n    #   - https://gh.io/using-larger-runners\n    # Consider using larger runners for possible analysis time improvements.\n    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}\n    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}\n    permissions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 9,
                  "endLine": 4,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n",
                    "rendered": {
                      "text": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n",
                      "markdown": "`# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/static/default.tmpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 28,
                  "endLine": 2,
                  "endColumn": 32,
                  "snippet": {
                    "text": "{{format \"intro\"}}Capslock is an experimental tool for static analysis of Go packages.\nShare feedback and file bugs at {{format \"highlight\"}}https://github.com/google/capslock.{{format}}\n{{format \"intro\"}}For additional debugging signals, use verbose mode with {{format \"highlight\"}}-output=verbose{{format}}\n{{format \"intro\"}}To get machine-readable full analysis output, use {{format \"highlight\"}}-output=json{{format}}\n\n",
                    "rendered": {
                      "text": "{{format \"intro\"}}Capslock is an experimental tool for static analysis of Go packages.\nShare feedback and file bugs at {{format \"highlight\"}}https://github.com/google/capslock.{{format}}\n{{format \"intro\"}}For additional debugging signals, use verbose mode with {{format \"highlight\"}}-output=verbose{{format}}\n{{format \"intro\"}}To get machine-readable full analysis output, use {{format \"highlight\"}}-output=json{{format}}\n\n",
                      "markdown": "`{{format \"intro\"}}Capslock is an experimental tool for static analysis of Go packages.\nShare feedback and file bugs at {{format \"highlight\"}}https://github.com/google/capslock.{{format}}\n{{format \"intro\"}}For additional debugging signals, use verbose mode with {{format \"highlight\"}}-output=verbose{{format}}\n{{format \"intro\"}}To get machine-readable full analysis output, use {{format \"highlight\"}}-output=json{{format}}\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 64,
                  "endLine": 37,
                  "snippet": {
                    "text": "\n### Issues\n\nFor any feedback or to report an issue, you can contact the team at\n`google-capslock-team@googlegroups.com`.\n\nIssues can also be filed [here](https://github.com/google/capslock/issues).\n",
                    "rendered": {
                      "text": "\n### Issues\n\nFor any feedback or to report an issue, you can contact the team at\n`google-capslock-team@googlegroups.com`.\n\nIssues can also be filed [here](https://github.com/google/capslock/issues).\n",
                      "markdown": "`\n### Issues\n\nFor any feedback or to report an issue, you can contact the team at\n`google-capslock-team@googlegroups.com`.\n\nIssues can also be filed [here](https://github.com/google/capslock/issues).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testpkgs/useasm/useasm.s"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 51,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n#include \"textflag.h\"\n\n",
                    "rendered": {
                      "text": "// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n#include \"textflag.h\"\n\n",
                      "markdown": "`// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n#include \"textflag.h\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testpkgs/transitive/transitive.go"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 10,
                  "endLine": 247,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\tx := callutf8.Foo() // not interesting\n\t\treturn &x\n\t}}\n\treturn *p.Get().(*int)\n}\n\n// Asm calls an assembly function indirectly.\n",
                    "rendered": {
                      "text": "\t\tx := callutf8.Foo() // not interesting\n\t\treturn &x\n\t}}\n\treturn *p.Get().(*int)\n}\n\n// Asm calls an assembly function indirectly.\n",
                      "markdown": "`\t\tx := callutf8.Foo() // not interesting\n\t\treturn &x\n\t}}\n\treturn *p.Get().(*int)\n}\n\n// Asm calls an assembly function indirectly.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testpkgs/transitive/transitive.go"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 10,
                  "endLine": 237,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\tx := callos.Foo() // interesting\n\t\treturn &x\n\t}}\n\treturn *p.Get().(*int)\n}\n\n// UninterestingSyncPool calls Get on a Pool whose New function has no\n",
                    "rendered": {
                      "text": "\t\tx := callos.Foo() // interesting\n\t\treturn &x\n\t}}\n\treturn *p.Get().(*int)\n}\n\n// UninterestingSyncPool calls Get on a Pool whose New function has no\n",
                      "markdown": "`\t\tx := callos.Foo() // interesting\n\t\treturn &x\n\t}}\n\treturn *p.Get().(*int)\n}\n\n// UninterestingSyncPool calls Get on a Pool whose New function has no\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testpkgs/transitive/transitive.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 51,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n// Package transitive is used for testing.\npackage transitive\n",
                    "rendered": {
                      "text": "// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n// Package transitive is used for testing.\npackage transitive\n",
                      "markdown": "`// Copyright 2023 Google LLC\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n// Package transitive is used for testing.\npackage transitive\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testpkgs/useunsafe/useunsafe.go"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n// Baz converts an unsafe pointer in a global variable.\nfunc Baz() int {\n\tIP = (*int)(U)\n\treturn *IP\n}\n\n",
                    "rendered": {
                      "text": "\n// Baz converts an unsafe pointer in a global variable.\nfunc Baz() int {\n\tIP = (*int)(U)\n\treturn *IP\n}\n\n",
                      "markdown": "`\n// Baz converts an unsafe pointer in a global variable.\nfunc Baz() int {\n\tIP = (*int)(U)\n\treturn *IP\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testpkgs/useunsafe/useunsafe.go"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "endColumn": 4,
                  "snippet": {
                    "text": "var (\n\tI  int\n\tU  up = up(&I)\n\tIP *int\n\tY  = *(*int)(U)\n\tZ  = func() int {\n\t\treturn *(*int)(U)\n",
                    "rendered": {
                      "text": "var (\n\tI  int\n\tU  up = up(&I)\n\tIP *int\n\tY  = *(*int)(U)\n\tZ  = func() int {\n\t\treturn *(*int)(U)\n",
                      "markdown": "`var (\n\tI  int\n\tU  up = up(&I)\n\tIP *int\n\tY  = *(*int)(U)\n\tZ  = func() int {\n\t\treturn *(*int)(U)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testpkgs/importname/sort/notsort.go"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 7,
                  "endLine": 9,
                  "snippet": {
                    "text": "// https://developers.google.com/open-source/licenses/bsd\n\n// Package sort is not really the sort package.\npackage sort\n\nimport \"os\"\n\n// Sort calls os.ReadFile.\n",
                    "rendered": {
                      "text": "// https://developers.google.com/open-source/licenses/bsd\n\n// Package sort is not really the sort package.\npackage sort\n\nimport \"os\"\n\n// Sort calls os.ReadFile.\n",
                      "markdown": "`// https://developers.google.com/open-source/licenses/bsd\n\n// Package sort is not really the sort package.\npackage sort\n\nimport \"os\"\n\n// Sort calls os.ReadFile.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/examples.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 20,
                  "endLine": 23,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    if err != nil {\n        return\n    }\n    res, err := http.Post(\"\", \"application/json\", bytes.NewBuffer(env))\n    if err != nil {\n        return\n    }\n",
                    "rendered": {
                      "text": "    if err != nil {\n        return\n    }\n    res, err := http.Post(\"\", \"application/json\", bytes.NewBuffer(env))\n    if err != nil {\n        return\n    }\n",
                      "markdown": "`    if err != nil {\n        return\n    }\n    res, err := http.Post(\"\", \"application/json\", bytes.NewBuffer(env))\n    if err != nil {\n        return\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/examples.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 48,
                  "endLine": 39,
                  "endColumn": 54,
                  "snippet": {
                    "text": "```\n\nThis would be easily identified by a human reviewer - but with thousands of\nlines to review in any potential dependency this sort of thing is easily missed.\nCapability signals can help direct reviewer attention to functions of higher\ncriticality by calling out where privileged operations are likely to be\nperformed.\n",
                    "rendered": {
                      "text": "```\n\nThis would be easily identified by a human reviewer - but with thousands of\nlines to review in any potential dependency this sort of thing is easily missed.\nCapability signals can help direct reviewer attention to functions of higher\ncriticality by calling out where privileged operations are likely to be\nperformed.\n",
                      "markdown": "````\n\nThis would be easily identified by a human reviewer - but with thousands of\nlines to review in any potential dependency this sort of thing is easily missed.\nCapability signals can help direct reviewer attention to functions of higher\ncriticality by calling out where privileged operations are likely to be\nperformed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/mkbitmaps.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 50,
                  "endLine": 7,
                  "snippet": {
                    "text": "# Copyright 2023 Google LLC\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file or at\n# https://developers.google.com/open-source/licenses/bsd\n\n# This is a convenience script to convert our vector logo images to bitmaps\n# in the sizes that we are about.\n",
                    "rendered": {
                      "text": "# Copyright 2023 Google LLC\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file or at\n# https://developers.google.com/open-source/licenses/bsd\n\n# This is a convenience script to convert our vector logo images to bitmaps\n# in the sizes that we are about.\n",
                      "markdown": "`# Copyright 2023 Google LLC\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file or at\n# https://developers.google.com/open-source/licenses/bsd\n\n# This is a convenience script to convert our vector logo images to bitmaps\n# in the sizes that we are about.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/mkbitmaps.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 40,
                  "endLine": 14,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\nif ! type rsvg-convert >/dev/null 2>&1 ; then\n\techo \"Missing rsvg-convert\" 1>&2\n\ttest -x /usr/bin/apt && echo \"Try: sudo apt install librsvg2-bin\" 1>&2\n\texit 1\nfi\n\n",
                    "rendered": {
                      "text": "\nif ! type rsvg-convert >/dev/null 2>&1 ; then\n\techo \"Missing rsvg-convert\" 1>&2\n\ttest -x /usr/bin/apt && echo \"Try: sudo apt install librsvg2-bin\" 1>&2\n\texit 1\nfi\n\n",
                      "markdown": "`\nif ! type rsvg-convert >/dev/null 2>&1 ; then\n\techo \"Missing rsvg-convert\" 1>&2\n\ttest -x /usr/bin/apt && echo \"Try: sudo apt install librsvg2-bin\" 1>&2\n\texit 1\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/mkbitmaps.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 23,
                  "endLine": 9,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# license that can be found in the LICENSE file or at\n# https://developers.google.com/open-source/licenses/bsd\n\n# This is a convenience script to convert our vector logo images to bitmaps\n# in the sizes that we are about.\n\nif ! type rsvg-convert >/dev/null 2>&1 ; then\n",
                    "rendered": {
                      "text": "# license that can be found in the LICENSE file or at\n# https://developers.google.com/open-source/licenses/bsd\n\n# This is a convenience script to convert our vector logo images to bitmaps\n# in the sizes that we are about.\n\nif ! type rsvg-convert >/dev/null 2>&1 ; then\n",
                      "markdown": "`# license that can be found in the LICENSE file or at\n# https://developers.google.com/open-source/licenses/bsd\n\n# This is a convenience script to convert our vector logo images to bitmaps\n# in the sizes that we are about.\n\nif ! type rsvg-convert >/dev/null 2>&1 ; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testing/analyzepackages_test.go"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 1,
                  "endLine": 413,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t}},\n\t\t{\"../testpkgs/notthere\", \"package\", 2, nil},\n\t} {\n\t\tcmd := exec.Command(bin, \"-packages=../testpkgs/...\", \"-granularity=\"+test.granularity, \"-output=compare\", test.diffFile)\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\terr := cmd.Run()\n",
                    "rendered": {
                      "text": "\t\t}},\n\t\t{\"../testpkgs/notthere\", \"package\", 2, nil},\n\t} {\n\t\tcmd := exec.Command(bin, \"-packages=../testpkgs/...\", \"-granularity=\"+test.granularity, \"-output=compare\", test.diffFile)\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\terr := cmd.Run()\n",
                      "markdown": "`\t\t}},\n\t\t{\"../testpkgs/notthere\", \"package\", 2, nil},\n\t} {\n\t\tcmd := exec.Command(bin, \"-packages=../testpkgs/...\", \"-granularity=\"+test.granularity, \"-output=compare\", test.diffFile)\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\terr := cmd.Run()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testing/analyzepackages_test.go"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 1,
                  "endLine": 322,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t} {\n\t\tcmd := exec.Command(bin, test.args...)\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\tcmd.Stderr = os.Stderr\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t} {\n\t\tcmd := exec.Command(bin, test.args...)\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\tcmd.Stderr = os.Stderr\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t} {\n\t\tcmd := exec.Command(bin, test.args...)\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\tcmd.Stderr = os.Stderr\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testing/analyzepackages_test.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 1,
                  "endLine": 90,
                  "endColumn": 6,
                  "snippet": {
                    "text": "// capslock -output=json.  It caches its results in analyzeResult.\nfunc analyze() ([]byte, error) {\n\tanalyzeResult.Do(func() {\n\t\tcmd := exec.Command(bin, \"-packages=../testpkgs/...\", \"-output=json\")\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\tcmd.Stderr = os.Stderr\n",
                    "rendered": {
                      "text": "// capslock -output=json.  It caches its results in analyzeResult.\nfunc analyze() ([]byte, error) {\n\tanalyzeResult.Do(func() {\n\t\tcmd := exec.Command(bin, \"-packages=../testpkgs/...\", \"-output=json\")\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\tcmd.Stderr = os.Stderr\n",
                      "markdown": "`// capslock -output=json.  It caches its results in analyzeResult.\nfunc analyze() ([]byte, error) {\n\tanalyzeResult.Do(func() {\n\t\tcmd := exec.Command(bin, \"-packages=../testpkgs/...\", \"-output=json\")\n\t\tvar output bytes.Buffer\n\t\tcmd.Stdout = &output\n\t\tcmd.Stderr = os.Stderr\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testing/analyzepackages_test.go"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tif err = f.Close(); err != nil {\n\t\tlog.Fatal(\"Closing temporary file: \", err)\n\t}\n\tcmd := exec.Command(\"go\", \"build\", \"-o\", bin, \"../cmd/capslock\")\n\tif err = cmd.Run(); err != nil {\n\t\tlog.Fatal(\"Building executable: \", err)\n\t}\n",
                    "rendered": {
                      "text": "\tif err = f.Close(); err != nil {\n\t\tlog.Fatal(\"Closing temporary file: \", err)\n\t}\n\tcmd := exec.Command(\"go\", \"build\", \"-o\", bin, \"../cmd/capslock\")\n\tif err = cmd.Run(); err != nil {\n\t\tlog.Fatal(\"Building executable: \", err)\n\t}\n",
                      "markdown": "`\tif err = f.Close(); err != nil {\n\t\tlog.Fatal(\"Closing temporary file: \", err)\n\t}\n\tcmd := exec.Command(\"go\", \"build\", \"-o\", bin, \"../cmd/capslock\")\n\tif err = cmd.Run(); err != nil {\n\t\tlog.Fatal(\"Building executable: \", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testing/analyzepackages_test.go"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 14,
                  "endLine": 227,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t{Fn: []string{`\\(\\*sync.Once\\).Do`, \".*\"}},\n\t\t{Fn: []string{`\\(\\*sync.Pool\\).Get`, \".*\"}},\n\n\t\t// We do not expect the following call paths, as they are avoided by the\n\t\t// syntax-tree-rewriting code.\n\t\t{Fn: []string{`transitive.InterestingOnceDo`, `\\(\\*sync.Once\\).Do`}},\n\t\t{Fn: []string{`transitive.OnceInStruct`, `\\(\\*sync.Once\\).Do`}},\n",
                    "rendered": {
                      "text": "\t\t{Fn: []string{`\\(\\*sync.Once\\).Do`, \".*\"}},\n\t\t{Fn: []string{`\\(\\*sync.Pool\\).Get`, \".*\"}},\n\n\t\t// We do not expect the following call paths, as they are avoided by the\n\t\t// syntax-tree-rewriting code.\n\t\t{Fn: []string{`transitive.InterestingOnceDo`, `\\(\\*sync.Once\\).Do`}},\n\t\t{Fn: []string{`transitive.OnceInStruct`, `\\(\\*sync.Once\\).Do`}},\n",
                      "markdown": "`\t\t{Fn: []string{`\\(\\*sync.Once\\).Do`, \".*\"}},\n\t\t{Fn: []string{`\\(\\*sync.Pool\\).Get`, \".*\"}},\n\n\t\t// We do not expect the following call paths, as they are avoided by the\n\t\t// syntax-tree-rewriting code.\n\t\t{Fn: []string{`transitive.InterestingOnceDo`, `\\(\\*sync.Once\\).Do`}},\n\t\t{Fn: []string{`transitive.OnceInStruct`, `\\(\\*sync.Once\\).Do`}},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/testing/analyzepackages_test.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 40,
                  "endLine": 207,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\tif matches, err := path.matches(cil); err != nil {\n\t\t\tt.Fatalf(\"TestExpectedOutput: internal error: %v\", err)\n\t\t} else if !matches {\n\t\t\tt.Errorf(\"TestExpectedOutput: did not find expected path %v\", path)\n\t\t}\n\t}\n\tunexpectedPaths := []expectedPath{\n",
                    "rendered": {
                      "text": "\t\tif matches, err := path.matches(cil); err != nil {\n\t\t\tt.Fatalf(\"TestExpectedOutput: internal error: %v\", err)\n\t\t} else if !matches {\n\t\t\tt.Errorf(\"TestExpectedOutput: did not find expected path %v\", path)\n\t\t}\n\t}\n\tunexpectedPaths := []expectedPath{\n",
                      "markdown": "`\t\tif matches, err := path.matches(cil); err != nil {\n\t\t\tt.Fatalf(\"TestExpectedOutput: internal error: %v\", err)\n\t\t} else if !matches {\n\t\t\tt.Errorf(\"TestExpectedOutput: did not find expected path %v\", path)\n\t\t}\n\t}\n\tunexpectedPaths := []expectedPath{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/static/verbose.tmpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 28,
                  "endLine": 2,
                  "endColumn": 32,
                  "snippet": {
                    "text": "{{format \"intro\"}}Capslock is an experimental tool for static analysis of Go packages.\nShare feedback and file bugs at {{format \"highlight\"}}https://github.com/google/capslock.{{format}}\n{{format \"intro\"}}To get machine-readable full analysis output, use {{format \"highlight\"}}-output=json{{format}}\n\n{{if .ModuleInfo}}{{format \"heading\"}}Analyzed packages:{{format}}\n",
                    "rendered": {
                      "text": "{{format \"intro\"}}Capslock is an experimental tool for static analysis of Go packages.\nShare feedback and file bugs at {{format \"highlight\"}}https://github.com/google/capslock.{{format}}\n{{format \"intro\"}}To get machine-readable full analysis output, use {{format \"highlight\"}}-output=json{{format}}\n\n{{if .ModuleInfo}}{{format \"heading\"}}Analyzed packages:{{format}}\n",
                      "markdown": "`{{format \"intro\"}}Capslock is an experimental tool for static analysis of Go packages.\nShare feedback and file bugs at {{format \"highlight\"}}https://github.com/google/capslock.{{format}}\n{{format \"intro\"}}To get machine-readable full analysis output, use {{format \"highlight\"}}-output=json{{format}}\n\n{{if .ModuleInfo}}{{format \"heading\"}}Analyzed packages:{{format}}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/graph.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 20,
                  "endLine": 87,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\tcase cpb.Capability:\n\t\t\treturn v.String()\n\t\tdefault:\n\t\t\tpanic(\"unexpected node type\")\n\t\t}\n\t})\n\tcallEdge := func(edge *callgraph.Edge) {\n",
                    "rendered": {
                      "text": "\t\tcase cpb.Capability:\n\t\t\treturn v.String()\n\t\tdefault:\n\t\t\tpanic(\"unexpected node type\")\n\t\t}\n\t})\n\tcallEdge := func(edge *callgraph.Edge) {\n",
                      "markdown": "`\t\tcase cpb.Capability:\n\t\t\treturn v.String()\n\t\tdefault:\n\t\t\tpanic(\"unexpected node type\")\n\t\t}\n\t})\n\tcallEdge := func(edge *callgraph.Edge) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer.go"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 43,
                  "endLine": 804,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\t\treturn config.CapabilitySet.Has(c)\n\t}\n\n\tnodeCallback := func(queryBFS bfsStateMap, node *callgraph.Node, capabilityBFS bfsStateMap) {\n\t\t// We have found node in a BFS of the callgraph starting from functions in\n\t\t// pkgs, and in a BFS of the callgraph searching backwards from functions\n\t\t// with capabilities.  So we can construct a path from one to the other\n",
                    "rendered": {
                      "text": "\t\treturn config.CapabilitySet.Has(c)\n\t}\n\n\tnodeCallback := func(queryBFS bfsStateMap, node *callgraph.Node, capabilityBFS bfsStateMap) {\n\t\t// We have found node in a BFS of the callgraph starting from functions in\n\t\t// pkgs, and in a BFS of the callgraph searching backwards from functions\n\t\t// with capabilities.  So we can construct a path from one to the other\n",
                      "markdown": "`\t\treturn config.CapabilitySet.Has(c)\n\t}\n\n\tnodeCallback := func(queryBFS bfsStateMap, node *callgraph.Node, capabilityBFS bfsStateMap) {\n\t\t// We have found node in a BFS of the callgraph starting from functions in\n\t\t// pkgs, and in a BFS of the callgraph searching backwards from functions\n\t\t// with capabilities.  So we can construct a path from one to the other\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer.go"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 5,
                  "endLine": 681,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t// ignored when they apply to a function that already has an explicit\n\t// category.\n\tfor cap, ns := range extraNodesByCapability {\n\t\tfor node := range ns {\n\t\t\tif _, ok := allNodesWithExplicitCapability[node]; ok {\n\t\t\t\t// This function already has an explicit category; don't add this\n\t\t\t\t// extra capability.\n",
                    "rendered": {
                      "text": "\t// ignored when they apply to a function that already has an explicit\n\t// category.\n\tfor cap, ns := range extraNodesByCapability {\n\t\tfor node := range ns {\n\t\t\tif _, ok := allNodesWithExplicitCapability[node]; ok {\n\t\t\t\t// This function already has an explicit category; don't add this\n\t\t\t\t// extra capability.\n",
                      "markdown": "`\t// ignored when they apply to a function that already has an explicit\n\t// category.\n\tfor cap, ns := range extraNodesByCapability {\n\t\tfor node := range ns {\n\t\t\tif _, ok := allNodesWithExplicitCapability[node]; ok {\n\t\t\t\t// This function already has an explicit category; don't add this\n\t\t\t\t// extra capability.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer.go"
                },
                "region": {
                  "startLine": 559,
                  "startColumn": 7,
                  "endLine": 559,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\t// Add the arbitrary-execution capability to asm function nodes.\n\tfor f, node := range graph.Nodes {\n\t\tif f.Blocks == nil {\n\t\t\t// No source code for this function.\n\t\t\tif f.Synthetic != \"\" {\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\t// Add the arbitrary-execution capability to asm function nodes.\n\tfor f, node := range graph.Nodes {\n\t\tif f.Blocks == nil {\n\t\t\t// No source code for this function.\n\t\t\tif f.Synthetic != \"\" {\n",
                      "markdown": "`\t\t}\n\t}\n\t// Add the arbitrary-execution capability to asm function nodes.\n\tfor f, node := range graph.Nodes {\n\t\tif f.Blocks == nil {\n\t\t\t// No source code for this function.\n\t\t\tif f.Synthetic != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer.go"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 50,
                  "endLine": 395,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n// GraphOutputNodeFn represents a function which is called by CapabilityGraph\n// for each node.\ntype GraphOutputNodeFn func(fromQuery bfsStateMap, node *callgraph.Node, toCapability bfsStateMap)\n\n// GraphOutputCallFn represents a function which is called by CapabilityGraph\n// for each edge.\n",
                    "rendered": {
                      "text": "\n// GraphOutputNodeFn represents a function which is called by CapabilityGraph\n// for each node.\ntype GraphOutputNodeFn func(fromQuery bfsStateMap, node *callgraph.Node, toCapability bfsStateMap)\n\n// GraphOutputCallFn represents a function which is called by CapabilityGraph\n// for each edge.\n",
                      "markdown": "`\n// GraphOutputNodeFn represents a function which is called by CapabilityGraph\n// for each node.\ntype GraphOutputNodeFn func(fromQuery bfsStateMap, node *callgraph.Node, toCapability bfsStateMap)\n\n// GraphOutputCallFn represents a function which is called by CapabilityGraph\n// for each edge.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer.go"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 2,
                  "endLine": 148,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\tif o.Function != nil {\n\t\t\t\tpkg = o.Function.Package()\n\t\t\t}\n\t\t\tcp := cp{o.CapabilityInfo.GetCapability(), pkg}\n\t\t\tif _, ok := seen[cp]; ok {\n\t\t\t\treturn true\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif o.Function != nil {\n\t\t\t\tpkg = o.Function.Package()\n\t\t\t}\n\t\t\tcp := cp{o.CapabilityInfo.GetCapability(), pkg}\n\t\t\tif _, ok := seen[cp]; ok {\n\t\t\t\treturn true\n\t\t\t}\n",
                      "markdown": "`\t\t\tif o.Function != nil {\n\t\t\t\tpkg = o.Function.Package()\n\t\t\t}\n\t\t\tcp := cp{o.CapabilityInfo.GetCapability(), pkg}\n\t\t\tif _, ok := seen[cp]; ok {\n\t\t\t\treturn true\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer.go"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 6,
                  "endLine": 137,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t})\n\tif config.Granularity == GranularityPackage {\n\t\t// Keep only the first entry in the sorted list for each (capability, package) pair.\n\t\ttype cp struct {\n\t\t\tcpb.Capability\n\t\t\t*ssa.Package\n\t\t}\n",
                    "rendered": {
                      "text": "\t})\n\tif config.Granularity == GranularityPackage {\n\t\t// Keep only the first entry in the sorted list for each (capability, package) pair.\n\t\ttype cp struct {\n\t\t\tcpb.Capability\n\t\t\t*ssa.Package\n\t\t}\n",
                      "markdown": "`\t})\n\tif config.Granularity == GranularityPackage {\n\t\t// Keep only the first entry in the sorted list for each (capability, package) pair.\n\t\ttype cp struct {\n\t\t\tcpb.Capability\n\t\t\t*ssa.Package\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/cmd/capslock-git-diff/main.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 16,
                  "endLine": 86,
                  "endColumn": 20,
                  "snippet": {
                    "text": "}\n\nfunc AnalyzeAtRevision(rev, pkgname string) (cil *cpb.CapabilityInfoList, err error) {\n\tvlog(\"analyzing at revision %q\", rev)\n\tif rev == \".\" {\n\t\treturn callCapslock(rev, pkgname)\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc AnalyzeAtRevision(rev, pkgname string) (cil *cpb.CapabilityInfoList, err error) {\n\tvlog(\"analyzing at revision %q\", rev)\n\tif rev == \".\" {\n\t\treturn callCapslock(rev, pkgname)\n\t}\n",
                      "markdown": "`}\n\nfunc AnalyzeAtRevision(rev, pkgname string) (cil *cpb.CapabilityInfoList, err error) {\n\tvlog(\"analyzing at revision %q\", rev)\n\tif rev == \".\" {\n\t\treturn callCapslock(rev, pkgname)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/cmd/capslock-git-diff/main.go"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "endColumn": 5,
                  "snippet": {
                    "text": "// run executes the specified command and writes its stdout to w.\nfunc run(w io.Writer, command string, args ...string) error {\n\tvlog(\"running %s with args %q\", command, args)\n\tcmd := exec.Command(command, args...)\n\tcmd.Stdout = w\n\tvar stderr bytes.Buffer\n\tif *verbose {\n",
                    "rendered": {
                      "text": "// run executes the specified command and writes its stdout to w.\nfunc run(w io.Writer, command string, args ...string) error {\n\tvlog(\"running %s with args %q\", command, args)\n\tcmd := exec.Command(command, args...)\n\tcmd.Stdout = w\n\tvar stderr bytes.Buffer\n\tif *verbose {\n",
                      "markdown": "`// run executes the specified command and writes its stdout to w.\nfunc run(w io.Writer, command string, args ...string) error {\n\tvlog(\"running %s with args %q\", command, args)\n\tcmd := exec.Command(command, args...)\n\tcmd.Stdout = w\n\tvar stderr bytes.Buffer\n\tif *verbose {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/cmd/capslock-git-diff/main.go"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 18,
                  "endLine": 177,
                  "endColumn": 23,
                  "snippet": {
                    "text": "func usage() {\n\tfmt.Fprintf(os.Stderr,\n\t\t`capslock-git-diff lists package capabilities that were added between\ntwo revisions of a git repository.\n\nUsage: capslock-git-diff <revision1> <revision2> [<package>]\n`)\n",
                    "rendered": {
                      "text": "func usage() {\n\tfmt.Fprintf(os.Stderr,\n\t\t`capslock-git-diff lists package capabilities that were added between\ntwo revisions of a git repository.\n\nUsage: capslock-git-diff <revision1> <revision2> [<package>]\n`)\n",
                      "markdown": "`func usage() {\n\tfmt.Fprintf(os.Stderr,\n\t\t`capslock-git-diff lists package capabilities that were added between\ntwo revisions of a git repository.\n\nUsage: capslock-git-diff <revision1> <revision2> [<package>]\n`)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/cmd/capslock-git-diff/main.go"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 21,
                  "endLine": 8,
                  "endColumn": 26,
                  "snippet": {
                    "text": "// https://developers.google.com/open-source/licenses/bsd\n\n// capslock-git-diff lists package capabilities that were added between\n// two revisions of a git repository.\n//\n// Usage example:\n//\n",
                    "rendered": {
                      "text": "// https://developers.google.com/open-source/licenses/bsd\n\n// capslock-git-diff lists package capabilities that were added between\n// two revisions of a git repository.\n//\n// Usage example:\n//\n",
                      "markdown": "`// https://developers.google.com/open-source/licenses/bsd\n\n// capslock-git-diff lists package capabilities that were added between\n// two revisions of a git repository.\n//\n// Usage example:\n//\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/interesting/interesting.cm"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 53,
                  "endLine": 731,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n\n# In our current analysis, any call to any of the functions below are\n# considered to be able to call any function provided at other callsites.\n# For example, any call to sort.Sort could call the comparison function\n# from any other call to sort.Sort.  So we limit this behavior by giving\n# these functions the Unanalyzed capability.\n",
                    "rendered": {
                      "text": "\n\n# In our current analysis, any call to any of the functions below are\n# considered to be able to call any function provided at other callsites.\n# For example, any call to sort.Sort could call the comparison function\n# from any other call to sort.Sort.  So we limit this behavior by giving\n# these functions the Unanalyzed capability.\n",
                      "markdown": "`\n\n# In our current analysis, any call to any of the functions below are\n# considered to be able to call any function provided at other callsites.\n# For example, any call to sort.Sort could call the comparison function\n# from any other call to sort.Sort.  So we limit this behavior by giving\n# these functions the Unanalyzed capability.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/interesting/interesting.cm"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 7,
                  "endLine": 806,
                  "endColumn": 13,
                  "snippet": {
                    "text": "package math/big CAPABILITY_SAFE\npackage sync/atomic CAPABILITY_SAFE\npackage testing CAPABILITY_SAFE\npackage time CAPABILITY_SAFE\npackage time/tzdata CAPABILITY_SAFE\npackage unique CAPABILITY_SAFE\npackage vendor/golang.org/x/crypto/chacha20poly1305 CAPABILITY_SAFE\n",
                    "rendered": {
                      "text": "package math/big CAPABILITY_SAFE\npackage sync/atomic CAPABILITY_SAFE\npackage testing CAPABILITY_SAFE\npackage time CAPABILITY_SAFE\npackage time/tzdata CAPABILITY_SAFE\npackage unique CAPABILITY_SAFE\npackage vendor/golang.org/x/crypto/chacha20poly1305 CAPABILITY_SAFE\n",
                      "markdown": "`package math/big CAPABILITY_SAFE\npackage sync/atomic CAPABILITY_SAFE\npackage testing CAPABILITY_SAFE\npackage time CAPABILITY_SAFE\npackage time/tzdata CAPABILITY_SAFE\npackage unique CAPABILITY_SAFE\npackage vendor/golang.org/x/crypto/chacha20poly1305 CAPABILITY_SAFE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/interesting/interesting.cm"
                },
                "region": {
                  "startLine": 780,
                  "startColumn": 7,
                  "endLine": 780,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n# fmt, testing and time have interesting descendants, but we have declared\n# these packages safe to call directly.\npackage fmt CAPABILITY_SAFE\npackage crypto/aes CAPABILITY_SAFE\npackage crypto/internal/boring/bcache CAPABILITY_SAFE\npackage crypto/internal/bigmod CAPABILITY_SAFE\n",
                    "rendered": {
                      "text": "\n# fmt, testing and time have interesting descendants, but we have declared\n# these packages safe to call directly.\npackage fmt CAPABILITY_SAFE\npackage crypto/aes CAPABILITY_SAFE\npackage crypto/internal/boring/bcache CAPABILITY_SAFE\npackage crypto/internal/bigmod CAPABILITY_SAFE\n",
                      "markdown": "`\n# fmt, testing and time have interesting descendants, but we have declared\n# these packages safe to call directly.\npackage fmt CAPABILITY_SAFE\npackage crypto/aes CAPABILITY_SAFE\npackage crypto/internal/boring/bcache CAPABILITY_SAFE\npackage crypto/internal/bigmod CAPABILITY_SAFE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/interesting/interesting.cm"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 18,
                  "endLine": 778,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# The following entries provide default categorizations for functions that are\n# not yet in functionCategory.\n\n# fmt, testing and time have interesting descendants, but we have declared\n# these packages safe to call directly.\npackage fmt CAPABILITY_SAFE\npackage crypto/aes CAPABILITY_SAFE\n",
                    "rendered": {
                      "text": "# The following entries provide default categorizations for functions that are\n# not yet in functionCategory.\n\n# fmt, testing and time have interesting descendants, but we have declared\n# these packages safe to call directly.\npackage fmt CAPABILITY_SAFE\npackage crypto/aes CAPABILITY_SAFE\n",
                      "markdown": "`# The following entries provide default categorizations for functions that are\n# not yet in functionCategory.\n\n# fmt, testing and time have interesting descendants, but we have declared\n# these packages safe to call directly.\npackage fmt CAPABILITY_SAFE\npackage crypto/aes CAPABILITY_SAFE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/interesting/interesting.go"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 8,
                  "endLine": 217,
                  "snippet": {
                    "text": "\t\treturn cat\n\t}\n\tif cat, ok := c.unanalyzedCategory[name]; ok {\n\t\treturn cat\n\t}\n\treturn c.packageCategory[pkg]\n}\n",
                    "rendered": {
                      "text": "\t\treturn cat\n\t}\n\tif cat, ok := c.unanalyzedCategory[name]; ok {\n\t\treturn cat\n\t}\n\treturn c.packageCategory[pkg]\n}\n",
                      "markdown": "`\t\treturn cat\n\t}\n\tif cat, ok := c.unanalyzedCategory[name]; ok {\n\t\treturn cat\n\t}\n\treturn c.packageCategory[pkg]\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/interesting/interesting.go"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 8,
                  "endLine": 214,
                  "snippet": {
                    "text": "\t\t// package's category.  This includes the possibility that the function\n\t\t// is categorized as \"unspecified\", which indicates that the analyzer\n\t\t// should analyze the function's code as normal.\n\t\treturn cat\n\t}\n\tif cat, ok := c.unanalyzedCategory[name]; ok {\n\t\treturn cat\n\t}\n",
                    "rendered": {
                      "text": "\t\t// package's category.  This includes the possibility that the function\n\t\t// is categorized as \"unspecified\", which indicates that the analyzer\n\t\t// should analyze the function's code as normal.\n\t\treturn cat\n\t}\n\tif cat, ok := c.unanalyzedCategory[name]; ok {\n\t\treturn cat\n\t}\n",
                      "markdown": "`\t\t// package's category.  This includes the possibility that the function\n\t\t// is categorized as \"unspecified\", which indicates that the analyzer\n\t\t// should analyze the function's code as normal.\n\t\treturn cat\n\t}\n\tif cat, ok := c.unanalyzedCategory[name]; ok {\n\t\treturn cat\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/capabilities.md"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 10,
                  "endLine": 81,
                  "endColumn": 26,
                  "snippet": {
                    "text": "### CAPABILITY_READ_SYSTEM_STATE\n\nRepresents the ability to read information about the system state and\nexecution environment, including reading environment variables and their\ncontents, obtaining a list of available network interfaces and their\naddresses, or reading process information such as the current working\ndirectory, process ID or user.\n",
                    "rendered": {
                      "text": "### CAPABILITY_READ_SYSTEM_STATE\n\nRepresents the ability to read information about the system state and\nexecution environment, including reading environment variables and their\ncontents, obtaining a list of available network interfaces and their\naddresses, or reading process information such as the current working\ndirectory, process ID or user.\n",
                      "markdown": "`### CAPABILITY_READ_SYSTEM_STATE\n\nRepresents the ability to read information about the system state and\nexecution environment, including reading environment variables and their\ncontents, obtaining a list of available network interfaces and their\naddresses, or reading process information such as the current working\ndirectory, process ID or user.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/capabilities.md"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 10,
                  "endLine": 101,
                  "endColumn": 14,
                  "snippet": {
                    "text": "### CAPABILITY_SYSTEM_CALLS\n\nThis capability represents the ability to make direct system calls and\nis applied at module level to a number of packages. It generally implies\nthe ability to execute arbitrary code.\n\n### CAPABILITY_ARBITRARY_EXECUTION\n",
                    "rendered": {
                      "text": "### CAPABILITY_SYSTEM_CALLS\n\nThis capability represents the ability to make direct system calls and\nis applied at module level to a number of packages. It generally implies\nthe ability to execute arbitrary code.\n\n### CAPABILITY_ARBITRARY_EXECUTION\n",
                      "markdown": "`### CAPABILITY_SYSTEM_CALLS\n\nThis capability represents the ability to make direct system calls and\nis applied at module level to a number of packages. It generally implies\nthe ability to execute arbitrary code.\n\n### CAPABILITY_ARBITRARY_EXECUTION\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/capabilities.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 8,
                  "endLine": 16,
                  "endColumn": 12,
                  "snippet": {
                    "text": "from library modules and calls to these capabilities.\n\nCapability mappings are performed first at the *package* level\nand then at the *function* level. For example, everything in the\n[os](https://pkg.go.dev/os) package is by default assumed to\nhave the `CAPABILITY_OPERATING_SYSTEM` capability but specific\nfunctions override this with other capabilities, such as the\n",
                    "rendered": {
                      "text": "from library modules and calls to these capabilities.\n\nCapability mappings are performed first at the *package* level\nand then at the *function* level. For example, everything in the\n[os](https://pkg.go.dev/os) package is by default assumed to\nhave the `CAPABILITY_OPERATING_SYSTEM` capability but specific\nfunctions override this with other capabilities, such as the\n",
                      "markdown": "`from library modules and calls to these capabilities.\n\nCapability mappings are performed first at the *package* level\nand then at the *function* level. For example, everything in the\n[os](https://pkg.go.dev/os) package is by default assumed to\nhave the `CAPABILITY_OPERATING_SYSTEM` capability but specific\nfunctions override this with other capabilities, such as the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/capabilities.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 39,
                  "endLine": 15,
                  "endColumn": 43,
                  "snippet": {
                    "text": "enum. The `src/interesting/interesting.go` file contains the mappings\nfrom library modules and calls to these capabilities.\n\nCapability mappings are performed first at the *package* level\nand then at the *function* level. For example, everything in the\n[os](https://pkg.go.dev/os) package is by default assumed to\nhave the `CAPABILITY_OPERATING_SYSTEM` capability but specific\n",
                    "rendered": {
                      "text": "enum. The `src/interesting/interesting.go` file contains the mappings\nfrom library modules and calls to these capabilities.\n\nCapability mappings are performed first at the *package* level\nand then at the *function* level. For example, everything in the\n[os](https://pkg.go.dev/os) package is by default assumed to\nhave the `CAPABILITY_OPERATING_SYSTEM` capability but specific\n",
                      "markdown": "`enum. The `src/interesting/interesting.go` file contains the mappings\nfrom library modules and calls to these capabilities.\n\nCapability mappings are performed first at the *package* level\nand then at the *function* level. For example, everything in the\n[os](https://pkg.go.dev/os) package is by default assumed to\nhave the `CAPABILITY_OPERATING_SYSTEM` capability but specific\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/capabilities.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 72,
                  "endLine": 50,
                  "endColumn": 5,
                  "snippet": {
                    "text": "the wrapped error may be an arbitrary type that fulfils the `error`\ninterface , calling into it via `(exec.wrappedError).Error` may invoke\nadditional capabilities. Clearing the module-level capability with\n`CAPABILITY_UNSPECIFIED` allows the analysis to continue and potentially\nfind these cases.\n\n### CAPABILITY_SAFE\n\n",
                    "rendered": {
                      "text": "the wrapped error may be an arbitrary type that fulfils the `error`\ninterface , calling into it via `(exec.wrappedError).Error` may invoke\nadditional capabilities. Clearing the module-level capability with\n`CAPABILITY_UNSPECIFIED` allows the analysis to continue and potentially\nfind these cases.\n\n### CAPABILITY_SAFE\n\n",
                      "markdown": "`the wrapped error may be an arbitrary type that fulfils the `error`\ninterface , calling into it via `(exec.wrappedError).Error` may invoke\nadditional capabilities. Clearing the module-level capability with\n`CAPABILITY_UNSPECIFIED` allows the analysis to continue and potentially\nfind these cases.\n\n### CAPABILITY_SAFE\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/README.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 16,
                  "endLine": 83,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n### Other flags\n\n1. `-noisy` will expand the analysis of functions with `CAPABILITY_UNANALYZED`\n   to report the possible capabilities of these functions. Can result in\n   spurious capabilities.\n1. `-template` allows you to specify an alternative template for printing the\n",
                    "rendered": {
                      "text": "\n### Other flags\n\n1. `-noisy` will expand the analysis of functions with `CAPABILITY_UNANALYZED`\n   to report the possible capabilities of these functions. Can result in\n   spurious capabilities.\n1. `-template` allows you to specify an alternative template for printing the\n",
                      "markdown": "`\n### Other flags\n\n1. `-noisy` will expand the analysis of functions with `CAPABILITY_UNANALYZED`\n   to report the possible capabilities of these functions. Can result in\n   spurious capabilities.\n1. `-template` allows you to specify an alternative template for printing the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/README.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 16,
                  "endLine": 83,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n### Other flags\n\n1. `-noisy` will expand the analysis of functions with `CAPABILITY_UNANALYZED`\n   to report the possible capabilities of these functions. Can result in\n   spurious capabilities.\n1. `-template` allows you to specify an alternative template for printing the\n",
                    "rendered": {
                      "text": "\n### Other flags\n\n1. `-noisy` will expand the analysis of functions with `CAPABILITY_UNANALYZED`\n   to report the possible capabilities of these functions. Can result in\n   spurious capabilities.\n1. `-template` allows you to specify an alternative template for printing the\n",
                      "markdown": "`\n### Other flags\n\n1. `-noisy` will expand the analysis of functions with `CAPABILITY_UNANALYZED`\n   to report the possible capabilities of these functions. Can result in\n   spurious capabilities.\n1. `-template` allows you to specify an alternative template for printing the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/README.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 4,
                  "endLine": 46,
                  "endColumn": 13,
                  "snippet": {
                    "text": "## Interpreting capability reports\n\nFor many reports, the capabilities are unsurprising.  A library which connects\nto a service over the internet would be expected to have the `NETWORK`\ncapability.\n\nFor other reports, the practical consequences can be less clear.  For example,\n",
                    "rendered": {
                      "text": "## Interpreting capability reports\n\nFor many reports, the capabilities are unsurprising.  A library which connects\nto a service over the internet would be expected to have the `NETWORK`\ncapability.\n\nFor other reports, the practical consequences can be less clear.  For example,\n",
                      "markdown": "`## Interpreting capability reports\n\nFor many reports, the capabilities are unsurprising.  A library which connects\nto a service over the internet would be expected to have the `NETWORK`\ncapability.\n\nFor other reports, the practical consequences can be less clear.  For example,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/README.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 18,
                  "endLine": 20,
                  "endColumn": 24,
                  "snippet": {
                    "text": "capslock -packages package/to/analyze\n```\n\nIf the package you wish to analyze isn't available you will get an error\ntelling you to `go get` the package. You can also run `capslock` directly\nfrom the path of the package you want to analyze without needing to specify\nthe `-packages` flag.\n",
                    "rendered": {
                      "text": "capslock -packages package/to/analyze\n```\n\nIf the package you wish to analyze isn't available you will get an error\ntelling you to `go get` the package. You can also run `capslock` directly\nfrom the path of the package you want to analyze without needing to specify\nthe `-packages` flag.\n",
                      "markdown": "`capslock -packages package/to/analyze\n```\n\nIf the package you wish to analyze isn't available you will get an error\ntelling you to `go get` the package. You can also run `capslock` directly\nfrom the path of the package you want to analyze without needing to specify\nthe `-packages` flag.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/docs/README.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 50,
                  "endLine": 12,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\nCapslock can analyze packages that are part of your current module, or are\ndependencies of your current module.\nIf necessary, use `go get` to make the package you wish to analyze a dependency\nof your current module.\n\n``` shell\n",
                    "rendered": {
                      "text": "\nCapslock can analyze packages that are part of your current module, or are\ndependencies of your current module.\nIf necessary, use `go get` to make the package you wish to analyze a dependency\nof your current module.\n\n``` shell\n",
                      "markdown": "`\nCapslock can analyze packages that are part of your current module, or are\ndependencies of your current module.\nIf necessary, use `go get` to make the package you wish to analyze a dependency\nof your current module.\n\n``` shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 48,
                  "endLine": 612,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 51,
                  "endLine": 611,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n",
                      "markdown": "`\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 4,
                  "endLine": 611,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n",
                      "markdown": "`\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t\t}\n\t\tif diff := cmp.Diff(test.expected, cil, opts...); diff != \"\" {\n\t\t\tt.Errorf(\"GetCapabilityInfo: got %v, want %v; diff %s\",\n\t\t\t\tcil, test.expected, diff)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 51,
                  "endLine": 344,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 45,
                  "endLine": 343,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 3,
                  "endLine": 343,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 21,
                  "endLine": 270,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t\tClassifier:     &testClassifier1,\n\t\t\tDisableBuiltin: true,\n\t\t},\n\t\tfunc(_ bfsStateMap, node *callgraph.Node, _ bfsStateMap) {\n\t\t\tnodes[node.Func.String()] = struct{}{}\n\t\t},\n\t\tfunc(edge *callgraph.Edge) {\n",
                    "rendered": {
                      "text": "\t\t\tClassifier:     &testClassifier1,\n\t\t\tDisableBuiltin: true,\n\t\t},\n\t\tfunc(_ bfsStateMap, node *callgraph.Node, _ bfsStateMap) {\n\t\t\tnodes[node.Func.String()] = struct{}{}\n\t\t},\n\t\tfunc(edge *callgraph.Edge) {\n",
                      "markdown": "`\t\t\tClassifier:     &testClassifier1,\n\t\t\tDisableBuiltin: true,\n\t\t},\n\t\tfunc(_ bfsStateMap, node *callgraph.Node, _ bfsStateMap) {\n\t\t\tnodes[node.Func.String()] = struct{}{}\n\t\t},\n\t\tfunc(edge *callgraph.Edge) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 51,
                  "endLine": 249,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 45,
                  "endLine": 248,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 3,
                  "endLine": 248,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 21,
                  "endLine": 121,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t\tClassifier:     interesting.DefaultClassifier(),\n\t\t\tDisableBuiltin: false,\n\t\t},\n\t\tfunc(_ bfsStateMap, node *callgraph.Node, _ bfsStateMap) {\n\t\t\tnodes[node.Func.String()] = struct{}{}\n\t\t},\n\t\tfunc(edge *callgraph.Edge) {\n",
                    "rendered": {
                      "text": "\t\t\tClassifier:     interesting.DefaultClassifier(),\n\t\t\tDisableBuiltin: false,\n\t\t},\n\t\tfunc(_ bfsStateMap, node *callgraph.Node, _ bfsStateMap) {\n\t\t\tnodes[node.Func.String()] = struct{}{}\n\t\t},\n\t\tfunc(edge *callgraph.Edge) {\n",
                      "markdown": "`\t\t\tClassifier:     interesting.DefaultClassifier(),\n\t\t\tDisableBuiltin: false,\n\t\t},\n\t\tfunc(_ bfsStateMap, node *callgraph.Node, _ bfsStateMap) {\n\t\t\tnodes[node.Func.String()] = struct{}{}\n\t\t},\n\t\tfunc(edge *callgraph.Edge) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 51,
                  "endLine": 100,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 45,
                  "endLine": 99,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 3,
                  "endLine": 99,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                    "rendered": {
                      "text": "\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n",
                      "markdown": "`\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"line\"),\n\t\tprotocmp.IgnoreFields(&cpb.Function_Site{}, \"column\"),\n\t}\n\tif diff := cmp.Diff(expected, cil, opts...); diff != \"\" {\n\t\tt.Errorf(\"GetCapabilityInfo(%v): got %v, want %v; diff %s\",\n\t\t\tfilemap, cil, expected, diff)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/analyzer_test.go"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tif err != nil {\n\t\treturn nil, nil, cleanup, fmt.Errorf(\"analysistest.WriteFiles: %w\", err)\n\t}\n\tenv := []string{\"GOPATH=\" + dir, \"GO111MODULE=off\", \"GOPROXY=off\"}\n\tcfg := &packages.Config{\n\t\tMode: PackagesLoadModeNeeded,\n\t\tDir:  dir,\n",
                    "rendered": {
                      "text": "\tif err != nil {\n\t\treturn nil, nil, cleanup, fmt.Errorf(\"analysistest.WriteFiles: %w\", err)\n\t}\n\tenv := []string{\"GOPATH=\" + dir, \"GO111MODULE=off\", \"GOPROXY=off\"}\n\tcfg := &packages.Config{\n\t\tMode: PackagesLoadModeNeeded,\n\t\tDir:  dir,\n",
                      "markdown": "`\tif err != nil {\n\t\treturn nil, nil, cleanup, fmt.Errorf(\"analysistest.WriteFiles: %w\", err)\n\t}\n\tenv := []string{\"GOPATH=\" + dir, \"GO111MODULE=off\", \"GOPROXY=off\"}\n\tcfg := &packages.Config{\n\t\tMode: PackagesLoadModeNeeded,\n\t\tDir:  dir,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/rewrite.go"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 44,
                  "endLine": 259,
                  "endColumn": 50,
                  "snippet": {
                    "text": "// isCallToOnceDoEtc checks if node is a statement calling a function or method\n// like (*sync.Once).Do.  If so, it returns the function-typed argument to that\n// function.  Otherwise, it returns nil.\nfunc isCallToOnceDoEtc(typeInfo *types.Info, node ast.Node) ast.Expr {\n\texpr, ok := node.(*ast.ExprStmt)\n\tif !ok {\n\t\t// Not a statement node.\n",
                    "rendered": {
                      "text": "// isCallToOnceDoEtc checks if node is a statement calling a function or method\n// like (*sync.Once).Do.  If so, it returns the function-typed argument to that\n// function.  Otherwise, it returns nil.\nfunc isCallToOnceDoEtc(typeInfo *types.Info, node ast.Node) ast.Expr {\n\texpr, ok := node.(*ast.ExprStmt)\n\tif !ok {\n\t\t// Not a statement node.\n",
                      "markdown": "`// isCallToOnceDoEtc checks if node is a statement calling a function or method\n// like (*sync.Once).Do.  If so, it returns the function-typed argument to that\n// function.  Otherwise, it returns nil.\nfunc isCallToOnceDoEtc(typeInfo *types.Info, node ast.Node) ast.Expr {\n\texpr, ok := node.(*ast.ExprStmt)\n\tif !ok {\n\t\t// Not a statement node.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/rewrite.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 39,
                  "endLine": 209,
                  "endColumn": 45,
                  "snippet": {
                    "text": "// isCallToSort checks if node is a statement calling sort.Sort, sort.Stable,\n// or sort.IsSorted.  If so, it returns the argument to that function.\n// Otherwise, it returns nil.\nfunc isCallToSort(typeInfo *types.Info, node ast.Node) ast.Expr {\n\texpr, ok := node.(*ast.ExprStmt)\n\tif !ok {\n\t\t// Not a statement node.\n",
                    "rendered": {
                      "text": "// isCallToSort checks if node is a statement calling sort.Sort, sort.Stable,\n// or sort.IsSorted.  If so, it returns the argument to that function.\n// Otherwise, it returns nil.\nfunc isCallToSort(typeInfo *types.Info, node ast.Node) ast.Expr {\n\texpr, ok := node.(*ast.ExprStmt)\n\tif !ok {\n\t\t// Not a statement node.\n",
                      "markdown": "`// isCallToSort checks if node is a statement calling sort.Sort, sort.Stable,\n// or sort.IsSorted.  If so, it returns the argument to that function.\n// Otherwise, it returns nil.\nfunc isCallToSort(typeInfo *types.Info, node ast.Node) ast.Expr {\n\texpr, ok := node.(*ast.ExprStmt)\n\tif !ok {\n\t\t// Not a statement node.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/rewrite.go"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 9,
                  "endLine": 176,
                  "endColumn": 15,
                  "snippet": {
                    "text": "func rewriteCallsToOnceDoEtc(pkgs []*packages.Package) {\n\tforEachPackageIncludingDependencies(pkgs, func(p *packages.Package) {\n\t\tfor _, file := range p.Syntax {\n\t\t\tfor _, node := range file.Decls {\n\t\t\t\tvar pre astutil.ApplyFunc\n\t\t\t\tpre = func(c *astutil.Cursor) bool {\n\t\t\t\t\tobj := isCallToOnceDoEtc(p.TypesInfo, c.Node())\n",
                    "rendered": {
                      "text": "func rewriteCallsToOnceDoEtc(pkgs []*packages.Package) {\n\tforEachPackageIncludingDependencies(pkgs, func(p *packages.Package) {\n\t\tfor _, file := range p.Syntax {\n\t\t\tfor _, node := range file.Decls {\n\t\t\t\tvar pre astutil.ApplyFunc\n\t\t\t\tpre = func(c *astutil.Cursor) bool {\n\t\t\t\t\tobj := isCallToOnceDoEtc(p.TypesInfo, c.Node())\n",
                      "markdown": "`func rewriteCallsToOnceDoEtc(pkgs []*packages.Package) {\n\tforEachPackageIncludingDependencies(pkgs, func(p *packages.Package) {\n\t\tfor _, file := range p.Syntax {\n\t\t\tfor _, node := range file.Decls {\n\t\t\t\tvar pre astutil.ApplyFunc\n\t\t\t\tpre = func(c *astutil.Cursor) bool {\n\t\t\t\t\tobj := isCallToOnceDoEtc(p.TypesInfo, c.Node())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/rewrite.go"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "endLine": 102,
                  "endColumn": 15,
                  "snippet": {
                    "text": "func rewriteCallsToSort(pkgs []*packages.Package) {\n\tforEachPackageIncludingDependencies(pkgs, func(p *packages.Package) {\n\t\tfor _, file := range p.Syntax {\n\t\t\tfor _, node := range file.Decls {\n\t\t\t\tvar pre astutil.ApplyFunc\n\t\t\t\tpre = func(c *astutil.Cursor) bool {\n\t\t\t\t\t// If the current node, c.Node(), is a call to sort.Sort (or\n",
                    "rendered": {
                      "text": "func rewriteCallsToSort(pkgs []*packages.Package) {\n\tforEachPackageIncludingDependencies(pkgs, func(p *packages.Package) {\n\t\tfor _, file := range p.Syntax {\n\t\t\tfor _, node := range file.Decls {\n\t\t\t\tvar pre astutil.ApplyFunc\n\t\t\t\tpre = func(c *astutil.Cursor) bool {\n\t\t\t\t\t// If the current node, c.Node(), is a call to sort.Sort (or\n",
                      "markdown": "`func rewriteCallsToSort(pkgs []*packages.Package) {\n\tforEachPackageIncludingDependencies(pkgs, func(p *packages.Package) {\n\t\tfor _, file := range p.Syntax {\n\t\t\tfor _, node := range file.Decls {\n\t\t\t\tvar pre astutil.ApplyFunc\n\t\t\t\tpre = func(c *astutil.Cursor) bool {\n\t\t\t\t\t// If the current node, c.Node(), is a call to sort.Sort (or\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/util.go"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 22,
                  "endLine": 456,
                  "snippet": {
                    "text": "\t\t// The visitor returned here is used to visit this node's children, so we\n\t\t// return a visitor with the current function set to this node.\n\t\tv2 := *v\n\t\tv2.currentFunction = node\n\t\treturn &v2\n\tcase *ast.CallExpr:\n\t\t// A type conversion is represented as a CallExpr node with a Fun that is a\n\t\t// type, and Args containing the expression to be converted.\n",
                    "rendered": {
                      "text": "\t\t// The visitor returned here is used to visit this node's children, so we\n\t\t// return a visitor with the current function set to this node.\n\t\tv2 := *v\n\t\tv2.currentFunction = node\n\t\treturn &v2\n\tcase *ast.CallExpr:\n\t\t// A type conversion is represented as a CallExpr node with a Fun that is a\n\t\t// type, and Args containing the expression to be converted.\n",
                      "markdown": "`\t\t// The visitor returned here is used to visit this node's children, so we\n\t\t// return a visitor with the current function set to this node.\n\t\tv2 := *v\n\t\tv2.currentFunction = node\n\t\treturn &v2\n\tcase *ast.CallExpr:\n\t\t// A type conversion is represented as a CallExpr node with a Fun that is a\n\t\t// type, and Args containing the expression to be converted.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/util.go"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 7,
                  "endLine": 449,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif node == nil {\n\t\treturn v // the return value is ignored if node == nil.\n\t}\n\tswitch node := node.(type) {\n\tcase *ast.FuncDecl, *ast.FuncLit:\n\t\t// The subtree at this node is a function definition or function literal.\n\t\t// The visitor returned here is used to visit this node's children, so we\n",
                    "rendered": {
                      "text": "\tif node == nil {\n\t\treturn v // the return value is ignored if node == nil.\n\t}\n\tswitch node := node.(type) {\n\tcase *ast.FuncDecl, *ast.FuncLit:\n\t\t// The subtree at this node is a function definition or function literal.\n\t\t// The visitor returned here is used to visit this node's children, so we\n",
                      "markdown": "`\tif node == nil {\n\t\treturn v // the return value is ignored if node == nil.\n\t}\n\tswitch node := node.(type) {\n\tcase *ast.FuncDecl, *ast.FuncLit:\n\t\t// The subtree at this node is a function definition or function literal.\n\t\t// The visitor returned here is used to visit this node's children, so we\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/util.go"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 3,
                  "endLine": 446,
                  "endColumn": 9,
                  "snippet": {
                    "text": "}\n\nfunc (v *visitor) Visit(node ast.Node) ast.Visitor {\n\tif node == nil {\n\t\treturn v // the return value is ignored if node == nil.\n\t}\n\tswitch node := node.(type) {\n",
                    "rendered": {
                      "text": "}\n\nfunc (v *visitor) Visit(node ast.Node) ast.Visitor {\n\tif node == nil {\n\t\treturn v // the return value is ignored if node == nil.\n\t}\n\tswitch node := node.(type) {\n",
                      "markdown": "`}\n\nfunc (v *visitor) Visit(node ast.Node) ast.Visitor {\n\tif node == nil {\n\t\treturn v // the return value is ignored if node == nil.\n\t}\n\tswitch node := node.(type) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/util.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 54,
                  "endLine": 48,
                  "endColumn": 60,
                  "snippet": {
                    "text": "type nodeset map[*callgraph.Node]struct{}\ntype nodesetPerCapability map[cpb.Capability]nodeset\n\nfunc (nc nodesetPerCapability) add(cap cpb.Capability, node *callgraph.Node) {\n\tm := nc[cap]\n\tif m == nil {\n\t\tm = make(nodeset)\n",
                    "rendered": {
                      "text": "type nodeset map[*callgraph.Node]struct{}\ntype nodesetPerCapability map[cpb.Capability]nodeset\n\nfunc (nc nodesetPerCapability) add(cap cpb.Capability, node *callgraph.Node) {\n\tm := nc[cap]\n\tif m == nil {\n\t\tm = make(nodeset)\n",
                      "markdown": "`type nodeset map[*callgraph.Node]struct{}\ntype nodesetPerCapability map[cpb.Capability]nodeset\n\nfunc (nc nodesetPerCapability) add(cap cpb.Capability, node *callgraph.Node) {\n\tm := nc[cap]\n\tif m == nil {\n\t\tm = make(nodeset)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/load.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 11,
                  "endLine": 75,
                  "snippet": {
                    "text": "\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n\t\t}\n\t\tcfg.Env = env\n\t}\n\treturn packages.Load(cfg, packageNames...)\n}\n\n",
                    "rendered": {
                      "text": "\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n\t\t}\n\t\tcfg.Env = env\n\t}\n\treturn packages.Load(cfg, packageNames...)\n}\n\n",
                      "markdown": "`\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n\t\t}\n\t\tcfg.Env = env\n\t}\n\treturn packages.Load(cfg, packageNames...)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/load.go"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 2,
                  "endLine": 72,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n\t\t}\n\t\tcfg.Env = env\n\t}\n",
                    "rendered": {
                      "text": "\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n\t\t}\n\t\tcfg.Env = env\n\t}\n",
                      "markdown": "`\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n\t\t}\n\t\tcfg.Env = env\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/load.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 2,
                  "endLine": 69,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tif lcfg.GOOS != \"\" || lcfg.GOARCH != \"\" {\n\t\tenv := append([]string(nil), os.Environ()...) // go1.21 has slices.Clone for this\n\t\tif lcfg.GOOS != \"\" {\n\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n",
                    "rendered": {
                      "text": "\tif lcfg.GOOS != \"\" || lcfg.GOARCH != \"\" {\n\t\tenv := append([]string(nil), os.Environ()...) // go1.21 has slices.Clone for this\n\t\tif lcfg.GOOS != \"\" {\n\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n",
                      "markdown": "`\tif lcfg.GOOS != \"\" || lcfg.GOARCH != \"\" {\n\t\tenv := append([]string(nil), os.Environ()...) // go1.21 has slices.Clone for this\n\t\tif lcfg.GOOS != \"\" {\n\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n\t\tif lcfg.GOARCH != \"\" {\n\t\t\tenv = append(env, \"GOARCH=\"+lcfg.GOARCH)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/analyzer/load.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\tcfg.BuildFlags = []string{\"-tags=\" + lcfg.BuildTags}\n\t}\n\tif lcfg.GOOS != \"\" || lcfg.GOARCH != \"\" {\n\t\tenv := append([]string(nil), os.Environ()...) // go1.21 has slices.Clone for this\n\t\tif lcfg.GOOS != \"\" {\n\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tcfg.BuildFlags = []string{\"-tags=\" + lcfg.BuildTags}\n\t}\n\tif lcfg.GOOS != \"\" || lcfg.GOARCH != \"\" {\n\t\tenv := append([]string(nil), os.Environ()...) // go1.21 has slices.Clone for this\n\t\tif lcfg.GOOS != \"\" {\n\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n",
                      "markdown": "`\t\tcfg.BuildFlags = []string{\"-tags=\" + lcfg.BuildTags}\n\t}\n\tif lcfg.GOOS != \"\" || lcfg.GOARCH != \"\" {\n\t\tenv := append([]string(nil), os.Environ()...) // go1.21 has slices.Clone for this\n\t\tif lcfg.GOOS != \"\" {\n\t\t\tenv = append(env, \"GOOS=\"+lcfg.GOOS)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/capslock.zip/README.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 10,
                  "endLine": 24,
                  "endColumn": 14,
                  "snippet": {
                    "text": "accesses.\n\nThis has many potential applications, from identifying the purpose of packages\nby looking at what capabilities they use, to directing security reviews to more\nprivileged code paths, and even alerting on unexpected capability changes to\nstop potential supply chain threats before they can become an issue.\n\n",
                    "rendered": {
                      "text": "accesses.\n\nThis has many potential applications, from identifying the purpose of packages\nby looking at what capabilities they use, to directing security reviews to more\nprivileged code paths, and even alerting on unexpected capability changes to\nstop potential supply chain threats before they can become an issue.\n\n",
                      "markdown": "`accesses.\n\nThis has many potential applications, from identifying the purpose of packages\nby looking at what capabilities they use, to directing security reviews to more\nprivileged code paths, and even alerting on unexpected capability changes to\nstop potential supply chain threats before they can become an issue.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}