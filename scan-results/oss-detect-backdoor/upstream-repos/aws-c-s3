{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3express_credentials_provider.c"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 21,
                  "endLine": 164,
                  "endColumn": 30,
                  "snippet": {
                    "text": "<CreateSessionResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Credentials>\n    <SessionToken>sessionToken</SessionToken>\n    <SecretAccessKey>secretKey</SecretAccessKey>\n    <AccessKeyId>accessKeyId</AccessKeyId>\n    <Expiration>2023-06-26T17:33:30Z</Expiration>\n  </Credentials>\n",
                    "rendered": {
                      "text": "<CreateSessionResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Credentials>\n    <SessionToken>sessionToken</SessionToken>\n    <SecretAccessKey>secretKey</SecretAccessKey>\n    <AccessKeyId>accessKeyId</AccessKeyId>\n    <Expiration>2023-06-26T17:33:30Z</Expiration>\n  </Credentials>\n",
                      "markdown": "`<CreateSessionResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Credentials>\n    <SessionToken>sessionToken</SessionToken>\n    <SecretAccessKey>secretKey</SecretAccessKey>\n    <AccessKeyId>accessKeyId</AccessKeyId>\n    <Expiration>2023-06-26T17:33:30Z</Expiration>\n  </Credentials>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3express_credentials_provider.c"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 11,
                  "endLine": 744,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            /* Iterate through all nodes and clean the resource up */\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n            struct aws_s3express_session *session = table_node->value;\n            if (s_s3express_session_about_to_expire(session, now_seconds)) {\n                if (session->inactive) {\n",
                    "rendered": {
                      "text": "            /* Iterate through all nodes and clean the resource up */\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n            struct aws_s3express_session *session = table_node->value;\n            if (s_s3express_session_about_to_expire(session, now_seconds)) {\n                if (session->inactive) {\n",
                      "markdown": "`            /* Iterate through all nodes and clean the resource up */\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n            struct aws_s3express_session *session = table_node->value;\n            if (s_s3express_session_about_to_expire(session, now_seconds)) {\n                if (session->inactive) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3express_credentials_provider.c"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 56,
                  "endLine": 740,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        /* Iterate through the cache without changing the priority */\n\n        struct aws_linked_list_node *node = NULL;\n        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            /* Iterate through all nodes and clean the resource up */\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n",
                    "rendered": {
                      "text": "        /* Iterate through the cache without changing the priority */\n\n        struct aws_linked_list_node *node = NULL;\n        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            /* Iterate through all nodes and clean the resource up */\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n",
                      "markdown": "`        /* Iterate through the cache without changing the priority */\n\n        struct aws_linked_list_node *node = NULL;\n        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            /* Iterate through all nodes and clean the resource up */\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_auto_ranged_put.c"
                },
                "region": {
                  "startLine": 1508,
                  "startColumn": 44,
                  "endLine": 1508,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                        AWS_OP_SUCCESS) {\n                        AWS_LOGF_ERROR(\n                            AWS_LS_S3_META_REQUEST,\n                            \"id=%p Could not find ETag header for request %p\",\n                            (void *)meta_request,\n                            (void *)request);\n\n",
                    "rendered": {
                      "text": "                        AWS_OP_SUCCESS) {\n                        AWS_LOGF_ERROR(\n                            AWS_LS_S3_META_REQUEST,\n                            \"id=%p Could not find ETag header for request %p\",\n                            (void *)meta_request,\n                            (void *)request);\n\n",
                      "markdown": "`                        AWS_OP_SUCCESS) {\n                        AWS_LOGF_ERROR(\n                            AWS_LS_S3_META_REQUEST,\n                            \"id=%p Could not find ETag header for request %p\",\n                            (void *)meta_request,\n                            (void *)request);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_auto_ranged_put.c"
                },
                "region": {
                  "startLine": 1467,
                  "startColumn": 40,
                  "endLine": 1467,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                if (upload_id.len == 0) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find upload-id in create-multipart-upload response\",\n                        (void *)meta_request);\n\n                    aws_raise_error(AWS_ERROR_S3_MISSING_UPLOAD_ID);\n",
                    "rendered": {
                      "text": "                if (upload_id.len == 0) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find upload-id in create-multipart-upload response\",\n                        (void *)meta_request);\n\n                    aws_raise_error(AWS_ERROR_S3_MISSING_UPLOAD_ID);\n",
                      "markdown": "`                if (upload_id.len == 0) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find upload-id in create-multipart-upload response\",\n                        (void *)meta_request);\n\n                    aws_raise_error(AWS_ERROR_S3_MISSING_UPLOAD_ID);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_meta_request.c"
                },
                "region": {
                  "startLine": 1849,
                  "startColumn": 48,
                  "endLine": 1849,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                            error_code = aws_last_error();\n                            AWS_LOGF_ERROR(\n                                AWS_LS_S3_META_REQUEST,\n                                \"id=%p Failed to update checksum. last error:%s\",\n                                (void *)meta_request,\n                                aws_error_name(error_code));\n                        }\n",
                    "rendered": {
                      "text": "                            error_code = aws_last_error();\n                            AWS_LOGF_ERROR(\n                                AWS_LS_S3_META_REQUEST,\n                                \"id=%p Failed to update checksum. last error:%s\",\n                                (void *)meta_request,\n                                aws_error_name(error_code));\n                        }\n",
                      "markdown": "`                            error_code = aws_last_error();\n                            AWS_LOGF_ERROR(\n                                AWS_LS_S3_META_REQUEST,\n                                \"id=%p Failed to update checksum. last error:%s\",\n                                (void *)meta_request,\n                                aws_error_name(error_code));\n                        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_chunk_stream.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 66,
                  "endLine": 67,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    struct aws_byte_cursor colon_cursor = aws_byte_cursor_from_string(s_colon);\n\n    if (parent_stream->checksum_result.len == 0) {\n        AWS_LOGF_ERROR(AWS_LS_S3_META_REQUEST, \"Failed to extract base64 encoded checksum of stream\");\n        return aws_raise_error(AWS_ERROR_S3_CHECKSUM_CALCULATION_FAILED);\n    }\n    struct aws_byte_cursor checksum_result_cursor = aws_byte_cursor_from_buf(&parent_stream->checksum_result);\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor colon_cursor = aws_byte_cursor_from_string(s_colon);\n\n    if (parent_stream->checksum_result.len == 0) {\n        AWS_LOGF_ERROR(AWS_LS_S3_META_REQUEST, \"Failed to extract base64 encoded checksum of stream\");\n        return aws_raise_error(AWS_ERROR_S3_CHECKSUM_CALCULATION_FAILED);\n    }\n    struct aws_byte_cursor checksum_result_cursor = aws_byte_cursor_from_buf(&parent_stream->checksum_result);\n",
                      "markdown": "`    struct aws_byte_cursor colon_cursor = aws_byte_cursor_from_string(s_colon);\n\n    if (parent_stream->checksum_result.len == 0) {\n        AWS_LOGF_ERROR(AWS_LS_S3_META_REQUEST, \"Failed to extract base64 encoded checksum of stream\");\n        return aws_raise_error(AWS_ERROR_S3_CHECKSUM_CALCULATION_FAILED);\n    }\n    struct aws_byte_cursor checksum_result_cursor = aws_byte_cursor_from_buf(&parent_stream->checksum_result);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_chunk_stream.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 65,
                  "endLine": 67,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    struct aws_byte_cursor colon_cursor = aws_byte_cursor_from_string(s_colon);\n\n    if (parent_stream->checksum_result.len == 0) {\n        AWS_LOGF_ERROR(AWS_LS_S3_META_REQUEST, \"Failed to extract base64 encoded checksum of stream\");\n        return aws_raise_error(AWS_ERROR_S3_CHECKSUM_CALCULATION_FAILED);\n    }\n    struct aws_byte_cursor checksum_result_cursor = aws_byte_cursor_from_buf(&parent_stream->checksum_result);\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor colon_cursor = aws_byte_cursor_from_string(s_colon);\n\n    if (parent_stream->checksum_result.len == 0) {\n        AWS_LOGF_ERROR(AWS_LS_S3_META_REQUEST, \"Failed to extract base64 encoded checksum of stream\");\n        return aws_raise_error(AWS_ERROR_S3_CHECKSUM_CALCULATION_FAILED);\n    }\n    struct aws_byte_cursor checksum_result_cursor = aws_byte_cursor_from_buf(&parent_stream->checksum_result);\n",
                      "markdown": "`    struct aws_byte_cursor colon_cursor = aws_byte_cursor_from_string(s_colon);\n\n    if (parent_stream->checksum_result.len == 0) {\n        AWS_LOGF_ERROR(AWS_LS_S3_META_REQUEST, \"Failed to extract base64 encoded checksum of stream\");\n        return aws_raise_error(AWS_ERROR_S3_CHECKSUM_CALCULATION_FAILED);\n    }\n    struct aws_byte_cursor checksum_result_cursor = aws_byte_cursor_from_buf(&parent_stream->checksum_result);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 31,
                  "endLine": 48,
                  "endColumn": 35,
                  "snippet": {
                    "text": ",\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_EXCEEDS_MEMORY_LIMIT, \"Request was not created due to used memory exceeding memory limit.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_INVALID_MEMORY_LIMIT_CONFIG, \"Specified memory configuration is invalid for the system. \"\n        \"Memory limit should be at least 1GiB. Part size and max part size should be smaller than memory limit.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3EXPRESS_CREATE_SESSION_FAILED, \"CreateSession call failed when signing with S3 Express.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_INTERNAL_PART_SIZE_MISMATCH_RETRYING_WITH_RANG",
                    "rendered": {
                      "text": ",\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_EXCEEDS_MEMORY_LIMIT, \"Request was not created due to used memory exceeding memory limit.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_INVALID_MEMORY_LIMIT_CONFIG, \"Specified memory configuration is invalid for the system. \"\n        \"Memory limit should be at least 1GiB. Part size and max part size should be smaller than memory limit.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3EXPRESS_CREATE_SESSION_FAILED, \"CreateSession call failed when signing with S3 Express.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_INTERNAL_PART_SIZE_MISMATCH_RETRYING_WITH_RANG",
                      "markdown": "`,\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_EXCEEDS_MEMORY_LIMIT, \"Request was not created due to used memory exceeding memory limit.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_INVALID_MEMORY_LIMIT_CONFIG, \"Specified memory configuration is invalid for the system. \"\n        \"Memory limit should be at least 1GiB. Part size and max part size should be smaller than memory limit.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3EXPRESS_CREATE_SESSION_FAILED, \"CreateSession call failed when signing with S3 Express.\"),\n    AWS_DEFINE_ERROR_INFO_S3(AWS_ERROR_S3_INTERNAL_PART_SIZE_MISMATCH_RETRYING_WITH_RANG`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha256_tests.c"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 62,
                  "endLine": 250,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha256_tests.c"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 62,
                  "endLine": 223,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha256_tests.c"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 62,
                  "endLine": 202,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA256_LEN] = {0};\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA256_LEN] = {0};\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA256_LEN] = {0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha256_tests.c"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 35,
                  "endLine": 169,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_SHA256);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n",
                    "rendered": {
                      "text": "    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_SHA256);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n",
                      "markdown": "`    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_SHA256);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha256_tests.c"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 62,
                  "endLine": 65,
                  "endColumn": 109,
                  "snippet": {
                    "text": "static int s_sha256_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                    "rendered": {
                      "text": "static int s_sha256_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                      "markdown": "`static int s_sha256_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha256_tests.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 35,
                  "endLine": 50,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,\n        0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1,\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,\n        0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1,\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,\n        0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_copy_object.c"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 40,
                  "endLine": 670,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                if (upload_id.len == 0) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find upload-id in create-multipart-upload response\",\n                        (void *)meta_request);\n\n                    aws_raise_error(AWS_ERROR_S3_MISSING_UPLOAD_ID);\n",
                    "rendered": {
                      "text": "                if (upload_id.len == 0) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find upload-id in create-multipart-upload response\",\n                        (void *)meta_request);\n\n                    aws_raise_error(AWS_ERROR_S3_MISSING_UPLOAD_ID);\n",
                      "markdown": "`                if (upload_id.len == 0) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find upload-id in create-multipart-upload response\",\n                        (void *)meta_request);\n\n                    aws_raise_error(AWS_ERROR_S3_MISSING_UPLOAD_ID);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/test_helper/test_helper.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 17,
                  "endLine": 239,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    create_bucket_with_lifecycle(\"usw2-az1\")\n    create_bucket_with_lifecycle()\n    create_bucket_with_public_object()\n    if os.environ.get('CRT_S3_TEST_BUCKET_NAME') != BUCKET_NAME_BASE:\n        print(\n            f\"*** Set the environment variable $CRT_S3_TEST_BUCKET_NAME to {BUCKET_NAME_BASE} before running the tests ***\")\n\n",
                    "rendered": {
                      "text": "    create_bucket_with_lifecycle(\"usw2-az1\")\n    create_bucket_with_lifecycle()\n    create_bucket_with_public_object()\n    if os.environ.get('CRT_S3_TEST_BUCKET_NAME') != BUCKET_NAME_BASE:\n        print(\n            f\"*** Set the environment variable $CRT_S3_TEST_BUCKET_NAME to {BUCKET_NAME_BASE} before running the tests ***\")\n\n",
                      "markdown": "`    create_bucket_with_lifecycle(\"usw2-az1\")\n    create_bucket_with_lifecycle()\n    create_bucket_with_public_object()\n    if os.environ.get('CRT_S3_TEST_BUCKET_NAME') != BUCKET_NAME_BASE:\n        print(\n            f\"*** Set the environment variable $CRT_S3_TEST_BUCKET_NAME to {BUCKET_NAME_BASE} before running the tests ***\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/test_helper/test_helper.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 10,
                  "endLine": 239,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    create_bucket_with_lifecycle(\"usw2-az1\")\n    create_bucket_with_lifecycle()\n    create_bucket_with_public_object()\n    if os.environ.get('CRT_S3_TEST_BUCKET_NAME') != BUCKET_NAME_BASE:\n        print(\n            f\"*** Set the environment variable $CRT_S3_TEST_BUCKET_NAME to {BUCKET_NAME_BASE} before running the tests ***\")\n\n",
                    "rendered": {
                      "text": "    create_bucket_with_lifecycle(\"usw2-az1\")\n    create_bucket_with_lifecycle()\n    create_bucket_with_public_object()\n    if os.environ.get('CRT_S3_TEST_BUCKET_NAME') != BUCKET_NAME_BASE:\n        print(\n            f\"*** Set the environment variable $CRT_S3_TEST_BUCKET_NAME to {BUCKET_NAME_BASE} before running the tests ***\")\n\n",
                      "markdown": "`    create_bucket_with_lifecycle(\"usw2-az1\")\n    create_bucket_with_lifecycle()\n    create_bucket_with_public_object()\n    if os.environ.get('CRT_S3_TEST_BUCKET_NAME') != BUCKET_NAME_BASE:\n        print(\n            f\"*** Set the environment variable $CRT_S3_TEST_BUCKET_NAME to {BUCKET_NAME_BASE} before running the tests ***\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/test_helper/README.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 22,
                  "endLine": 66,
                  "endColumn": 26,
                  "snippet": {
                    "text": "_mrap_endpoint` to the uri of the MRAP endpoint and build with `-DENABLE_MRAP_TESTS=true`.\n* To run tests in tests/s3_mock_server_tests.c, initialize the mock S3 server first from [here](./../mock_s3_server/). And build your cmake project with `-DENABLE_MOCK_SERVER_TESTS=true`\n* Note: If you are not at the aws-common-runtime AWS team account, you must set environment variable `CRT_S3_TEST_BUCKET_NAME` to the bucket created before running the test.\n* When you see error with \"Check your account level S3 settings, public access may be blocked.\", Check https://docs.aws.amazon.com/AmazonS3/latest/userg",
                    "rendered": {
                      "text": "_mrap_endpoint` to the uri of the MRAP endpoint and build with `-DENABLE_MRAP_TESTS=true`.\n* To run tests in tests/s3_mock_server_tests.c, initialize the mock S3 server first from [here](./../mock_s3_server/). And build your cmake project with `-DENABLE_MOCK_SERVER_TESTS=true`\n* Note: If you are not at the aws-common-runtime AWS team account, you must set environment variable `CRT_S3_TEST_BUCKET_NAME` to the bucket created before running the test.\n* When you see error with \"Check your account level S3 settings, public access may be blocked.\", Check https://docs.aws.amazon.com/AmazonS3/latest/userg",
                      "markdown": "`_mrap_endpoint` to the uri of the MRAP endpoint and build with `-DENABLE_MRAP_TESTS=true`.\n* To run tests in tests/s3_mock_server_tests.c, initialize the mock S3 server first from [here](./../mock_s3_server/). And build your cmake project with `-DENABLE_MOCK_SERVER_TESTS=true`\n* Note: If you are not at the aws-common-runtime AWS team account, you must set environment variable `CRT_S3_TEST_BUCKET_NAME` to the bucket created before running the test.\n* When you see error with \"Check your account level S3 settings, public access may be blocked.\", Check https://docs.aws.amazon.com/AmazonS3/latest/userg`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/test_helper/README.md"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 196,
                  "endLine": 64,
                  "endColumn": 204,
                  "snippet": {
                    "text": "ST_BUCKET_NAME` environment variable to the printed-out bucket name before running the test.\n\n## Notes\n\n* The MRAP tests are not included in this script, and it's disabled by default. To run those tests, you will need to create a MRAP access point with the buckets have `pre-existing-1MB` in it. Then update `g_test_mrap_endpoint` to the uri of the MRAP endpoint and build with `-DENABLE_MRAP_TESTS=true`.\n* To run tests in tests/s3_mock_server_tests.c, initialize the mock S3 server first from [here](./../mock_s3_server/). And build your cmake project with `-DENABLE_MOCK_SERVER_TESTS=true`\n* Note: If you ",
                    "rendered": {
                      "text": "ST_BUCKET_NAME` environment variable to the printed-out bucket name before running the test.\n\n## Notes\n\n* The MRAP tests are not included in this script, and it's disabled by default. To run those tests, you will need to create a MRAP access point with the buckets have `pre-existing-1MB` in it. Then update `g_test_mrap_endpoint` to the uri of the MRAP endpoint and build with `-DENABLE_MRAP_TESTS=true`.\n* To run tests in tests/s3_mock_server_tests.c, initialize the mock S3 server first from [here](./../mock_s3_server/). And build your cmake project with `-DENABLE_MOCK_SERVER_TESTS=true`\n* Note: If you ",
                      "markdown": "`ST_BUCKET_NAME` environment variable to the printed-out bucket name before running the test.\n\n## Notes\n\n* The MRAP tests are not included in this script, and it's disabled by default. To run those tests, you will need to create a MRAP access point with the buckets have `pre-existing-1MB` in it. Then update `g_test_mrap_endpoint` to the uri of the MRAP endpoint and build with `-DENABLE_MRAP_TESTS=true`.\n* To run tests in tests/s3_mock_server_tests.c, initialize the mock S3 server first from [here](./../mock_s3_server/). And build your cmake project with `-DENABLE_MOCK_SERVER_TESTS=true`\n* Note: If you `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/test_helper/README.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 79,
                  "endLine": 60,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\n## BUCKET_NAME\n\nYou can specify the bucket name to be created either by passing argument to the script or by setting an environment variable, the `bucket_name` passed in takes precedence. If neither of these options is chosen, the `init` action will create a random bucket name. In this case, you will need to set the `CRT_S3_TEST_BUCKET_NAME` environment variable to the printed-out bucket name before running the test.\n\n## Notes\n\n",
                    "rendered": {
                      "text": "\n## BUCKET_NAME\n\nYou can specify the bucket name to be created either by passing argument to the script or by setting an environment variable, the `bucket_name` passed in takes precedence. If neither of these options is chosen, the `init` action will create a random bucket name. In this case, you will need to set the `CRT_S3_TEST_BUCKET_NAME` environment variable to the printed-out bucket name before running the test.\n\n## Notes\n\n",
                      "markdown": "`\n## BUCKET_NAME\n\nYou can specify the bucket name to be created either by passing argument to the script or by setting an environment variable, the `bucket_name` passed in takes precedence. If neither of these options is chosen, the `init` action will create a random bucket name. In this case, you will need to set the `CRT_S3_TEST_BUCKET_NAME` environment variable to the printed-out bucket name before running the test.\n\n## Notes\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/test_helper/README.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 8,
                  "endLine": 1,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# Helper script to setup your S3 structure to run the tests for aws-c-s3\n\nTo use this script, you must have AWS credentials with permission to create and delete buckets.\n\n",
                    "rendered": {
                      "text": "# Helper script to setup your S3 structure to run the tests for aws-c-s3\n\nTo use this script, you must have AWS credentials with permission to create and delete buckets.\n\n",
                      "markdown": "`# Helper script to setup your S3 structure to run the tests for aws-c-s3\n\nTo use this script, you must have AWS credentials with permission to create and delete buckets.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/CreateMultipartUpload/request_time_too_skewed.json"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 74,
                  "endLine": 9,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        \"\",\n        \"<Error>\",\n         \"<Code>RequestTimeTooSkewed</Code>\",\n         \"<Message>The difference between the request time and the current time is too large.</Message>\",\n         \"<RequestTime>20230725T161257Z</RequestTime>\",\n         \"<ServerTime>2023-07-25T16:27:59Z</ServerTime>\",\n         \"<MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds>\",\n",
                    "rendered": {
                      "text": "        \"\",\n        \"<Error>\",\n         \"<Code>RequestTimeTooSkewed</Code>\",\n         \"<Message>The difference between the request time and the current time is too large.</Message>\",\n         \"<RequestTime>20230725T161257Z</RequestTime>\",\n         \"<ServerTime>2023-07-25T16:27:59Z</ServerTime>\",\n         \"<MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds>\",\n",
                      "markdown": "`        \"\",\n        \"<Error>\",\n         \"<Code>RequestTimeTooSkewed</Code>\",\n         \"<Message>The difference between the request time and the current time is too large.</Message>\",\n         \"<RequestTime>20230725T161257Z</RequestTime>\",\n         \"<ServerTime>2023-07-25T16:27:59Z</ServerTime>\",\n         \"<MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds>\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/CreateMultipartUpload/request_time_too_skewed.json"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 53,
                  "endLine": 9,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        \"\",\n        \"<Error>\",\n         \"<Code>RequestTimeTooSkewed</Code>\",\n         \"<Message>The difference between the request time and the current time is too large.</Message>\",\n         \"<RequestTime>20230725T161257Z</RequestTime>\",\n         \"<ServerTime>2023-07-25T16:27:59Z</ServerTime>\",\n         \"<MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds>\",\n",
                    "rendered": {
                      "text": "        \"\",\n        \"<Error>\",\n         \"<Code>RequestTimeTooSkewed</Code>\",\n         \"<Message>The difference between the request time and the current time is too large.</Message>\",\n         \"<RequestTime>20230725T161257Z</RequestTime>\",\n         \"<ServerTime>2023-07-25T16:27:59Z</ServerTime>\",\n         \"<MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds>\",\n",
                      "markdown": "`        \"\",\n        \"<Error>\",\n         \"<Code>RequestTimeTooSkewed</Code>\",\n         \"<Message>The difference between the request time and the current time is too large.</Message>\",\n         \"<RequestTime>20230725T161257Z</RequestTime>\",\n         \"<ServerTime>2023-07-25T16:27:59Z</ServerTime>\",\n         \"<MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds>\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/CreateSession/default.json"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 24,
                  "endLine": 9,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    \"<CreateSessionResult xmlns=\\\"http://s3.amazonaws.com/doc/2006-03-01/\\\">\",\n    \"<Credentials>\",\n      \"<SessionToken>sessionToken</SessionToken>\",\n      \"<SecretAccessKey>secretKey</SecretAccessKey>\",\n      \"<AccessKeyId>accessKeyId</AccessKeyId>\",\n      \"<Expiration>2023-06-26T17:33:30Z</Expiration>\",\n    \"</Credentials>\",\n",
                    "rendered": {
                      "text": "    \"<CreateSessionResult xmlns=\\\"http://s3.amazonaws.com/doc/2006-03-01/\\\">\",\n    \"<Credentials>\",\n      \"<SessionToken>sessionToken</SessionToken>\",\n      \"<SecretAccessKey>secretKey</SecretAccessKey>\",\n      \"<AccessKeyId>accessKeyId</AccessKeyId>\",\n      \"<Expiration>2023-06-26T17:33:30Z</Expiration>\",\n    \"</Credentials>\",\n",
                      "markdown": "`    \"<CreateSessionResult xmlns=\\\"http://s3.amazonaws.com/doc/2006-03-01/\\\">\",\n    \"<Credentials>\",\n      \"<SessionToken>sessionToken</SessionToken>\",\n      \"<SecretAccessKey>secretKey</SecretAccessKey>\",\n      \"<AccessKeyId>accessKeyId</AccessKeyId>\",\n      \"<Expiration>2023-06-26T17:33:30Z</Expiration>\",\n    \"</Credentials>\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/mock_s3_server.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 16,
                  "endLine": 315,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    with open(response_json_path, 'r') as f:\n        data = json.load(f)\n    # if response has delay, then sleep before sending it\n    delay = data.get('delay', 0)\n    if delay > 0:\n        assert delay < TIMEOUT\n        await trio.sleep(delay)\n",
                    "rendered": {
                      "text": "    with open(response_json_path, 'r') as f:\n        data = json.load(f)\n    # if response has delay, then sleep before sending it\n    delay = data.get('delay', 0)\n    if delay > 0:\n        assert delay < TIMEOUT\n        await trio.sleep(delay)\n",
                      "markdown": "`    with open(response_json_path, 'r') as f:\n        data = json.load(f)\n    # if response has delay, then sleep before sending it\n    delay = data.get('delay', 0)\n    if delay > 0:\n        assert delay < TIMEOUT\n        await trio.sleep(delay)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/mock_s3_server.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 20,
                  "endLine": 90,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            data = json.load(f)\n\n        # if response has delay, then sleep before sending it\n        delay = data.get('delay', 0)\n        status_code = data['status']\n        if self.generate_body_size is not None:\n            # generate body with a specific size instead\n",
                    "rendered": {
                      "text": "            data = json.load(f)\n\n        # if response has delay, then sleep before sending it\n        delay = data.get('delay', 0)\n        status_code = data['status']\n        if self.generate_body_size is not None:\n            # generate body with a specific size instead\n",
                      "markdown": "`            data = json.load(f)\n\n        # if response has delay, then sleep before sending it\n        delay = data.get('delay', 0)\n        status_code = data['status']\n        if self.generate_body_size is not None:\n            # generate body with a specific size instead\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/mock_s3_server.py"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 42,
                  "endLine": 358,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        response_file = os.path.join(\n            base_dir, request_type.name, f\"default.json\")\n    if \"throttle\" in response_file:\n        # We throttle the request half the time to make sure it succeeds after a retry\n        if wrapper.should_throttle is False:\n            wrapper.info(\"Skipping throttling\")\n            response_file = os.path.join(\n",
                    "rendered": {
                      "text": "        response_file = os.path.join(\n            base_dir, request_type.name, f\"default.json\")\n    if \"throttle\" in response_file:\n        # We throttle the request half the time to make sure it succeeds after a retry\n        if wrapper.should_throttle is False:\n            wrapper.info(\"Skipping throttling\")\n            response_file = os.path.join(\n",
                      "markdown": "`        response_file = os.path.join(\n            base_dir, request_type.name, f\"default.json\")\n    if \"throttle\" in response_file:\n        # We throttle the request half the time to make sure it succeeds after a retry\n        if wrapper.should_throttle is False:\n            wrapper.info(\"Skipping throttling\")\n            response_file = os.path.join(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/mock_s3_server.py"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 22,
                  "endLine": 318,
                  "snippet": {
                    "text": "    # if response has delay, then sleep before sending it\n    delay = data.get('delay', 0)\n    if delay > 0:\n        assert delay < TIMEOUT\n        await trio.sleep(delay)\n\n    status_code = data['status']\n    if generate_body:\n",
                    "rendered": {
                      "text": "    # if response has delay, then sleep before sending it\n    delay = data.get('delay', 0)\n    if delay > 0:\n        assert delay < TIMEOUT\n        await trio.sleep(delay)\n\n    status_code = data['status']\n    if generate_body:\n",
                      "markdown": "`    # if response has delay, then sleep before sending it\n    delay = data.get('delay', 0)\n    if delay > 0:\n        assert delay < TIMEOUT\n        await trio.sleep(delay)\n\n    status_code = data['status']\n    if generate_body:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/mock_s3_server.py"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 31,
                  "endLine": 276,
                  "snippet": {
                    "text": "# Helper function\nasync def send_response(wrapper, response):\n    if response.delay > 0:\n        assert response.delay < TIMEOUT\n        await trio.sleep(response.delay)\n\n    wrapper.info(\"Sending\", response.status_code,\n                 \"response with\", len(response.data), \"bytes\")\n",
                    "rendered": {
                      "text": "# Helper function\nasync def send_response(wrapper, response):\n    if response.delay > 0:\n        assert response.delay < TIMEOUT\n        await trio.sleep(response.delay)\n\n    wrapper.info(\"Sending\", response.status_code,\n                 \"response with\", len(response.data), \"bytes\")\n",
                      "markdown": "`# Helper function\nasync def send_response(wrapper, response):\n    if response.delay > 0:\n        assert response.delay < TIMEOUT\n        await trio.sleep(response.delay)\n\n    wrapper.info(\"Sending\", response.status_code,\n                 \"response with\", len(response.data), \"bytes\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/mock_s3_server.py"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 40,
                  "endLine": 222,
                  "snippet": {
                    "text": "        if isinstance(exc, h11.RemoteProtocolError):\n            status_code = exc.error_status_hint\n        elif isinstance(exc, trio.TooSlowError):\n            status_code = 408  # Request Timeout\n        else:\n            status_code = 500\n        body = str(exc).encode(\"utf-8\")\n        await send_simple_response(\n",
                    "rendered": {
                      "text": "        if isinstance(exc, h11.RemoteProtocolError):\n            status_code = exc.error_status_hint\n        elif isinstance(exc, trio.TooSlowError):\n            status_code = 408  # Request Timeout\n        else:\n            status_code = 500\n        body = str(exc).encode(\"utf-8\")\n        await send_simple_response(\n",
                      "markdown": "`        if isinstance(exc, h11.RemoteProtocolError):\n            status_code = exc.error_status_hint\n        elif isinstance(exc, trio.TooSlowError):\n            status_code = 408  # Request Timeout\n        else:\n            status_code = 500\n        body = str(exc).encode(\"utf-8\")\n        await send_simple_response(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/mock_s3_server.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 50,
                  "endLine": 71,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                response_file = os.path.join(\n                    base_dir, request_type.name, f\"default.json\")\n            if \"throttle\" in response_file:\n                # We throttle the request half the time to make sure it succeeds after a retry\n                if SHOULD_THROTTLE is False:\n                    wrapper.info(\"Skipping throttling\")\n                    response_file = os.path.join(\n",
                    "rendered": {
                      "text": "                response_file = os.path.join(\n                    base_dir, request_type.name, f\"default.json\")\n            if \"throttle\" in response_file:\n                # We throttle the request half the time to make sure it succeeds after a retry\n                if SHOULD_THROTTLE is False:\n                    wrapper.info(\"Skipping throttling\")\n                    response_file = os.path.join(\n",
                      "markdown": "`                response_file = os.path.join(\n                    base_dir, request_type.name, f\"default.json\")\n            if \"throttle\" in response_file:\n                # We throttle the request half the time to make sure it succeeds after a retry\n                if SHOULD_THROTTLE is False:\n                    wrapper.info(\"Skipping throttling\")\n                    response_file = os.path.join(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/mock_s3_server.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 16,
                  "endLine": 19,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nimport h11\n\nMAX_RECV = 2**16\nTIMEOUT = 120  # this must be higher than any response's \"delay\" setting\n\nVERBOSE = False\n\n",
                    "rendered": {
                      "text": "\nimport h11\n\nMAX_RECV = 2**16\nTIMEOUT = 120  # this must be higher than any response's \"delay\" setting\n\nVERBOSE = False\n\n",
                      "markdown": "`\nimport h11\n\nMAX_RECV = 2**16\nTIMEOUT = 120  # this must be higher than any response's \"delay\" setting\n\nVERBOSE = False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/mock_s3_server/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 55,
                  "endLine": 9,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\nPython 3.7+ required.\n\n- Install hyper/h11 and trio python module. `python3 -m pip install h11 trio`\n- Run python. `python3 ./mock_s3_server.py`.\n\n### Supported Operations\n",
                    "rendered": {
                      "text": "\nPython 3.7+ required.\n\n- Install hyper/h11 and trio python module. `python3 -m pip install h11 trio`\n- Run python. `python3 ./mock_s3_server.py`.\n\n### Supported Operations\n",
                      "markdown": "`\nPython 3.7+ required.\n\n- Install hyper/h11 and trio python module. `python3 -m pip install h11 trio`\n- Run python. `python3 ./mock_s3_server.py`.\n\n### Supported Operations\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksum_stream_test.c"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 63,
                  "endLine": 209,
                  "endColumn": 110,
                  "snippet": {
                    "text": "    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    struct aws_byte_cursor input4 = aws_byte_cursor_from_c_str(\"Hello world\");\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    struct aws_byte_cursor input4 = aws_byte_cursor_from_c_str(\"Hello world\");\n",
                      "markdown": "`    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    struct aws_byte_cursor input4 = aws_byte_cursor_from_c_str(\"Hello world\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksum_stream_test.c"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 35,
                  "endLine": 208,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    struct aws_byte_cursor input0 = aws_byte_cursor_from_c_str(\"\");\n    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor input0 = aws_byte_cursor_from_c_str(\"\");\n    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n",
                      "markdown": "`    struct aws_byte_cursor input0 = aws_byte_cursor_from_c_str(\"\");\n    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksum_stream_test.c"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 63,
                  "endLine": 177,
                  "endColumn": 110,
                  "snippet": {
                    "text": "    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    struct aws_byte_cursor input4 = aws_byte_cursor_from_c_str(\"Hello world\");\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    struct aws_byte_cursor input4 = aws_byte_cursor_from_c_str(\"Hello world\");\n",
                      "markdown": "`    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    struct aws_byte_cursor input4 = aws_byte_cursor_from_c_str(\"Hello world\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksum_stream_test.c"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 35,
                  "endLine": 176,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    struct aws_byte_cursor input0 = aws_byte_cursor_from_c_str(\"\");\n    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor input0 = aws_byte_cursor_from_c_str(\"\");\n    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n",
                      "markdown": "`    struct aws_byte_cursor input0 = aws_byte_cursor_from_c_str(\"\");\n    struct aws_byte_cursor input1 = aws_byte_cursor_from_c_str(\"abc\");\n    struct aws_byte_cursor input2 =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    struct aws_byte_cursor input3 = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                               \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                               \"nopqrlmnopqrsmnopqrstnopqrstu\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_client.c"
                },
                "region": {
                  "startLine": 2638,
                  "startColumn": 41,
                  "endLine": 2638,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n                    finished_upload_part_request->upload_timeout_ms);\n",
                    "rendered": {
                      "text": "                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n                    finished_upload_part_request->upload_timeout_ms);\n",
                      "markdown": "`                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n                    finished_upload_part_request->upload_timeout_ms);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_client.c"
                },
                "region": {
                  "startLine": 2637,
                  "startColumn": 91,
                  "endLine": 2637,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\n                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n",
                    "rendered": {
                      "text": "\n                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n",
                      "markdown": "`\n                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_client.c"
                },
                "region": {
                  "startLine": 2637,
                  "startColumn": 45,
                  "endLine": 2637,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n",
                    "rendered": {
                      "text": "\n                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n",
                      "markdown": "`\n                AWS_LOGF_WARN(\n                    AWS_LS_S3_CLIENT,\n                    \"id=%p Client upload part timeout rate is larger than expected, current timeout is %zu, bump it \"\n                    \"up. Request original timeout is: %zu\",\n                    (void *)client,\n                    current_timeout_ms,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_client.c"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 8,
                  "endLine": 791,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(request_list);\n         node != aws_linked_list_end(request_list);\n         node = aws_linked_list_next(node)) {\n        ++request_list_size;\n    }\n\n",
                    "rendered": {
                      "text": "\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(request_list);\n         node != aws_linked_list_end(request_list);\n         node = aws_linked_list_next(node)) {\n        ++request_list_size;\n    }\n\n",
                      "markdown": "`\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(request_list);\n         node != aws_linked_list_end(request_list);\n         node = aws_linked_list_next(node)) {\n        ++request_list_size;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_client.c"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 8,
                  "endLine": 790,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    uint32_t request_list_size = 0;\n\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(request_list);\n         node != aws_linked_list_end(request_list);\n         node = aws_linked_list_next(node)) {\n        ++request_list_size;\n    }\n",
                    "rendered": {
                      "text": "    uint32_t request_list_size = 0;\n\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(request_list);\n         node != aws_linked_list_end(request_list);\n         node = aws_linked_list_next(node)) {\n        ++request_list_size;\n    }\n",
                      "markdown": "`    uint32_t request_list_size = 0;\n\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(request_list);\n         node != aws_linked_list_end(request_list);\n         node = aws_linked_list_next(node)) {\n        ++request_list_size;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha1_tests.c"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 62,
                  "endLine": 234,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha1_tests.c"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 62,
                  "endLine": 207,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha1_tests.c"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 62,
                  "endLine": 186,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA1_LEN] = {0};\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA1_LEN] = {0};\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA1_LEN] = {0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha1_tests.c"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 35,
                  "endLine": 153,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_SHA1);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n",
                    "rendered": {
                      "text": "    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_SHA1);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n",
                      "markdown": "`    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_SHA1);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha1_tests.c"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 62,
                  "endLine": 65,
                  "endColumn": 109,
                  "snippet": {
                    "text": "static int s_sha1_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                    "rendered": {
                      "text": "static int s_sha1_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                      "markdown": "`static int s_sha1_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_sha1_tests.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 35,
                  "endLine": 50,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae,\n        0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1,\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae,\n        0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1,\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae,\n        0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_data_plane_tests.c"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 8,
                  "endLine": 765,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&client->threaded_data.meta_requests);\n         node != aws_linked_list_end(&client->threaded_data.meta_requests);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_s3_meta_request *meta_request =\n            AWS_CONTAINER_OF(node, struct aws_s3_meta_request, client_process_work_threaded_data);\n",
                    "rendered": {
                      "text": "\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&client->threaded_data.meta_requests);\n         node != aws_linked_list_end(&client->threaded_data.meta_requests);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_s3_meta_request *meta_request =\n            AWS_CONTAINER_OF(node, struct aws_s3_meta_request, client_process_work_threaded_data);\n",
                      "markdown": "`\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&client->threaded_data.meta_requests);\n         node != aws_linked_list_end(&client->threaded_data.meta_requests);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_s3_meta_request *meta_request =\n            AWS_CONTAINER_OF(node, struct aws_s3_meta_request, client_process_work_threaded_data);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_data_plane_tests.c"
                },
                "region": {
                  "startLine": 764,
                  "startColumn": 8,
                  "endLine": 764,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    bool meta_request_with_work_found = false;\n\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&client->threaded_data.meta_requests);\n         node != aws_linked_list_end(&client->threaded_data.meta_requests);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_s3_meta_request *meta_request =\n",
                    "rendered": {
                      "text": "    bool meta_request_with_work_found = false;\n\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&client->threaded_data.meta_requests);\n         node != aws_linked_list_end(&client->threaded_data.meta_requests);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_s3_meta_request *meta_request =\n",
                      "markdown": "`    bool meta_request_with_work_found = false;\n\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&client->threaded_data.meta_requests);\n         node != aws_linked_list_end(&client->threaded_data.meta_requests);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_s3_meta_request *meta_request =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32_tests.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 62,
                  "endLine": 213,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32_tests.c"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 62,
                  "endLine": 189,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x19, 0x1f, 0x33, 0x49};\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x19, 0x1f, 0x33, 0x49};\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x19, 0x1f, 0x33, 0x49};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32_tests.c"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 62,
                  "endLine": 168,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_CRC32_LEN] = {0};\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_CRC32_LEN] = {0};\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_CRC32_LEN] = {0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32_tests.c"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 35,
                  "endLine": 138,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_CRC32);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n",
                    "rendered": {
                      "text": "    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_CRC32);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n",
                      "markdown": "`    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_CRC32);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32_tests.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 62,
                  "endLine": 57,
                  "endColumn": 109,
                  "snippet": {
                    "text": "static int s_crc32_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x19, 0x1f, 0x33, 0x49};\n",
                    "rendered": {
                      "text": "static int s_crc32_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x19, 0x1f, 0x33, 0x49};\n",
                      "markdown": "`static int s_crc32_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x19, 0x1f, 0x33, 0x49};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32_tests.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 35,
                  "endLine": 45,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {0x17, 0x1a, 0x3f, 0x5f};\n    struct aws_byte_cursor expected_buf = aws_byte_cursor_from_array(expected, sizeof(expected));\n\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {0x17, 0x1a, 0x3f, 0x5f};\n    struct aws_byte_cursor expected_buf = aws_byte_cursor_from_array(expected, sizeof(expected));\n\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {0x17, 0x1a, 0x3f, 0x5f};\n    struct aws_byte_cursor expected_buf = aws_byte_cursor_from_array(expected, sizeof(expected));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_mock_server_s3express_provider_test.c"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 11,
                  "endLine": 446,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n            struct aws_s3express_session *session = table_node->value;\n            struct aws_string *hash_key =\n                aws_encode_s3express_hash_key_new(s_s3express_tester.allocator, original_credentials, host_value);\n",
                    "rendered": {
                      "text": "        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n            struct aws_s3express_session *session = table_node->value;\n            struct aws_string *hash_key =\n                aws_encode_s3express_hash_key_new(s_s3express_tester.allocator, original_credentials, host_value);\n",
                      "markdown": "`        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n            struct aws_s3express_session *session = table_node->value;\n            struct aws_string *hash_key =\n                aws_encode_s3express_hash_key_new(s_s3express_tester.allocator, original_credentials, host_value);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_mock_server_s3express_provider_test.c"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 56,
                  "endLine": 443,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        size_t index = 0;\n        struct aws_linked_list_node *node = NULL;\n        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n",
                    "rendered": {
                      "text": "\n        size_t index = 0;\n        struct aws_linked_list_node *node = NULL;\n        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n",
                      "markdown": "`\n        size_t index = 0;\n        struct aws_linked_list_node *node = NULL;\n        for (node = aws_linked_list_begin(session_list); node != aws_linked_list_end(session_list);) {\n            struct aws_linked_hash_table_node *table_node =\n                AWS_CONTAINER_OF(node, struct aws_linked_hash_table_node, node);\n            node = aws_linked_list_next(node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_tester.c"
                },
                "region": {
                  "startLine": 2161,
                  "startColumn": 48,
                  "endLine": 2161,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    result = aws_credentials_get_access_key_id(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"accessKeyId\");\n    result = aws_credentials_get_secret_access_key(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"secretKey\");\n    result = aws_credentials_get_session_token(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"sessionToken\");\n\n",
                    "rendered": {
                      "text": "    result = aws_credentials_get_access_key_id(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"accessKeyId\");\n    result = aws_credentials_get_secret_access_key(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"secretKey\");\n    result = aws_credentials_get_session_token(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"sessionToken\");\n\n",
                      "markdown": "`    result = aws_credentials_get_access_key_id(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"accessKeyId\");\n    result = aws_credentials_get_secret_access_key(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"secretKey\");\n    result = aws_credentials_get_session_token(credentials);\n    match &= aws_byte_cursor_eq_c_str(&result, \"sessionToken\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_tester.c"
                },
                "region": {
                  "startLine": 2148,
                  "startColumn": 21,
                  "endLine": 2148,
                  "endColumn": 30,
                  "snippet": {
                    "text": "<CreateSessionResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Credentials>\n    <SessionToken>sessionToken</SessionToken>\n    <SecretAccessKey>secretKey</SecretAccessKey>\n    <AccessKeyId>accessKeyId</AccessKeyId>\n    <Expiration>2023-06-26T17:33:30Z</Expiration>\n  </Credentials>\n",
                    "rendered": {
                      "text": "<CreateSessionResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Credentials>\n    <SessionToken>sessionToken</SessionToken>\n    <SecretAccessKey>secretKey</SecretAccessKey>\n    <AccessKeyId>accessKeyId</AccessKeyId>\n    <Expiration>2023-06-26T17:33:30Z</Expiration>\n  </Credentials>\n",
                      "markdown": "`<CreateSessionResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Credentials>\n    <SessionToken>sessionToken</SessionToken>\n    <SecretAccessKey>secretKey</SecretAccessKey>\n    <AccessKeyId>accessKeyId</AccessKeyId>\n    <Expiration>2023-06-26T17:33:30Z</Expiration>\n  </Credentials>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 29,
                  "endLine": 77,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Overall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\nupfront because buffers cannot be used right away, ex reading from file will\nfill buffers slower than they are sent, leading to decent amount of buffer reuse)\nReservation mechanism is approximate and in some cases can lead to actual memory\n",
                    "rendered": {
                      "text": "Overall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\nupfront because buffers cannot be used right away, ex reading from file will\nfill buffers slower than they are sent, leading to decent amount of buffer reuse)\nReservation mechanism is approximate and in some cases can lead to actual memory\n",
                      "markdown": "`Overall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\nupfront because buffers cannot be used right away, ex reading from file will\nfill buffers slower than they are sent, leading to decent amount of buffer reuse)\nReservation mechanism is approximate and in some cases can lead to actual memory\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 55,
                  "endLine": 74,
                  "endColumn": 59,
                  "snippet": {
                    "text": "ex. http connections data, various supporting structures, are not actively\ncontrolled and instead some memory is taken out from overall limit.\n\nOverall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\n",
                    "rendered": {
                      "text": "ex. http connections data, various supporting structures, are not actively\ncontrolled and instead some memory is taken out from overall limit.\n\nOverall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\n",
                      "markdown": "`ex. http connections data, various supporting structures, are not actively\ncontrolled and instead some memory is taken out from overall limit.\n\nOverall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 34,
                  "endLine": 67,
                  "endColumn": 43,
                  "snippet": {
                    "text": "only part of a memory was allocated for a task.\n\nComparatively, majority of memory usage within S3 Client comes from buffers\nallocated for Put/Get parts. So to control memory usage, the client will\nconcentrate on controlling the number of buffers allocated. Effectively, this\nboils down to a back pressure mechanism of limiting the number of parts\nscheduled as memory gets closer to the limit. Memory used for other resources,\n",
                    "rendered": {
                      "text": "only part of a memory was allocated for a task.\n\nComparatively, majority of memory usage within S3 Client comes from buffers\nallocated for Put/Get parts. So to control memory usage, the client will\nconcentrate on controlling the number of buffers allocated. Effectively, this\nboils down to a back pressure mechanism of limiting the number of parts\nscheduled as memory gets closer to the limit. Memory used for other resources,\n",
                      "markdown": "`only part of a memory was allocated for a task.\n\nComparatively, majority of memory usage within S3 Client comes from buffers\nallocated for Put/Get parts. So to control memory usage, the client will\nconcentrate on controlling the number of buffers allocated. Effectively, this\nboils down to a back pressure mechanism of limiting the number of parts\nscheduled as memory gets closer to the limit. Memory used for other resources,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 53,
                  "endLine": 49,
                  "endColumn": 57,
                  "snippet": {
                    "text": "Primary memory area is split into blocks of fixed size (part size if defined or\n8mb if not times 16). Blocks are allocated on demand. Each block is logically\nsubdivided into part sized chunks. Pool allocates and releases in chunk sizes\nonly, and supports acquiring several chunks (up to 4) at once.\n\nBlocks are kept around while there are ongoing requests and are released async,\nwhen there is low pressure on memory.\n",
                    "rendered": {
                      "text": "Primary memory area is split into blocks of fixed size (part size if defined or\n8mb if not times 16). Blocks are allocated on demand. Each block is logically\nsubdivided into part sized chunks. Pool allocates and releases in chunk sizes\nonly, and supports acquiring several chunks (up to 4) at once.\n\nBlocks are kept around while there are ongoing requests and are released async,\nwhen there is low pressure on memory.\n",
                      "markdown": "`Primary memory area is split into blocks of fixed size (part size if defined or\n8mb if not times 16). Blocks are allocated on demand. Each block is logically\nsubdivided into part sized chunks. Pool allocates and releases in chunk sizes\nonly, and supports acquiring several chunks (up to 4) at once.\n\nBlocks are kept around while there are ongoing requests and are released async,\nwhen there is low pressure on memory.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 9,
                  "endLine": 37,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  are 'drained'\n- individual uploadParts or ranged gets operations typically have a similar\n  lifespan (with some caveats). in practice part buffers are acquired/released\n  in bulk at the same time\n\nThe buffer pooling takes advantage of some of those allocation patterns and\nworks as follows.\n",
                    "rendered": {
                      "text": "  are 'drained'\n- individual uploadParts or ranged gets operations typically have a similar\n  lifespan (with some caveats). in practice part buffers are acquired/released\n  in bulk at the same time\n\nThe buffer pooling takes advantage of some of those allocation patterns and\nworks as follows.\n",
                      "markdown": "`  are 'drained'\n- individual uploadParts or ranged gets operations typically have a similar\n  lifespan (with some caveats). in practice part buffers are acquired/released\n  in bulk at the same time\n\nThe buffer pooling takes advantage of some of those allocation patterns and\nworks as follows.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 16,
                  "endLine": 14,
                  "endColumn": 3,
                  "snippet": {
                    "text": "will go into more detail on aspects of those changes and how the affect the\nclient.\n\n### Memory Reuse\nAt the basic level, CRT S3 client starts with a meta request for operation like\nput or get, breaks it into smaller part-sized requests and executes those in\nparallel. CRT S3 client used to allocate part sized buffer for each of those\nrequests and release it right after the request was done. That approach,\n",
                    "rendered": {
                      "text": "will go into more detail on aspects of those changes and how the affect the\nclient.\n\n### Memory Reuse\nAt the basic level, CRT S3 client starts with a meta request for operation like\nput or get, breaks it into smaller part-sized requests and executes those in\nparallel. CRT S3 client used to allocate part sized buffer for each of those\nrequests and release it right after the request was done. That approach,\n",
                      "markdown": "`will go into more detail on aspects of those changes and how the affect the\nclient.\n\n### Memory Reuse\nAt the basic level, CRT S3 client starts with a meta request for operation like\nput or get, breaks it into smaller part-sized requests and executes those in\nparallel. CRT S3 client used to allocate part sized buffer for each of those\nrequests and release it right after the request was done. That approach,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 62,
                  "endLine": 74,
                  "endColumn": 68,
                  "snippet": {
                    "text": "ex. http connections data, various supporting structures, are not actively\ncontrolled and instead some memory is taken out from overall limit.\n\nOverall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\n",
                    "rendered": {
                      "text": "ex. http connections data, various supporting structures, are not actively\ncontrolled and instead some memory is taken out from overall limit.\n\nOverall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\n",
                      "markdown": "`ex. http connections data, various supporting structures, are not actively\ncontrolled and instead some memory is taken out from overall limit.\n\nOverall, scheduling does a best-effort memory limiting. At the time of\nscheduling, the client reserves memory by using buffer pool ticketing mechanism.\nBuffer is acquired from the pool using the ticket as close to the usage as\npossible (this approach peaks at lower mem usage than preallocating all mem\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 37,
                  "endLine": 57,
                  "endColumn": 43,
                  "snippet": {
                    "text": "One complication is \"forced\" buffers. A forced buffer is one that\ncomes from primary or secondary storage as usual, but it is allowed to exceed\nthe memory limit. Forced buffers are only used when waiting for a normal ticket\nreservation could cause deadlock. (At time of writing, they're only used for\nasync-writes)\n\n### Scheduling\n",
                    "rendered": {
                      "text": "One complication is \"forced\" buffers. A forced buffer is one that\ncomes from primary or secondary storage as usual, but it is allowed to exceed\nthe memory limit. Forced buffers are only used when waiting for a normal ticket\nreservation could cause deadlock. (At time of writing, they're only used for\nasync-writes)\n\n### Scheduling\n",
                      "markdown": "`One complication is \"forced\" buffers. A forced buffer is one that\ncomes from primary or secondary storage as usual, but it is allowed to exceed\nthe memory limit. Forced buffers are only used when waiting for a normal ticket\nreservation could cause deadlock. (At time of writing, they're only used for\nasync-writes)\n\n### Scheduling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/docs/memory_aware_request_execution.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 21,
                  "endLine": 38,
                  "snippet": {
                    "text": "  are 'drained'\n- individual uploadParts or ranged gets operations typically have a similar\n  lifespan (with some caveats). in practice part buffers are acquired/released\n  in bulk at the same time\n\nThe buffer pooling takes advantage of some of those allocation patterns and\nworks as follows.\nThe memory is split into primary and secondary areas. Secondary area is used for\n",
                    "rendered": {
                      "text": "  are 'drained'\n- individual uploadParts or ranged gets operations typically have a similar\n  lifespan (with some caveats). in practice part buffers are acquired/released\n  in bulk at the same time\n\nThe buffer pooling takes advantage of some of those allocation patterns and\nworks as follows.\nThe memory is split into primary and secondary areas. Secondary area is used for\n",
                      "markdown": "`  are 'drained'\n- individual uploadParts or ranged gets operations typically have a similar\n  lifespan (with some caveats). in practice part buffers are acquired/released\n  in bulk at the same time\n\nThe buffer pooling takes advantage of some of those allocation patterns and\nworks as follows.\nThe memory is split into primary and secondary areas. Secondary area is used for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/include/aws/s3/private/s3_platform_info.h"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 43,
                  "endLine": 38,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    struct aws_byte_cursor instance_type_name);\n\n/**\n * Retrieves the  metadata for the current environment. If EC2 instance type is unknown, or it is not an EC2 instance at\n * all, this value will still include the information about the system that could be determined. This value will never\n * be NULL.\n * This API is not thread safe.\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor instance_type_name);\n\n/**\n * Retrieves the  metadata for the current environment. If EC2 instance type is unknown, or it is not an EC2 instance at\n * all, this value will still include the information about the system that could be determined. This value will never\n * be NULL.\n * This API is not thread safe.\n",
                      "markdown": "`    struct aws_byte_cursor instance_type_name);\n\n/**\n * Retrieves the  metadata for the current environment. If EC2 instance type is unknown, or it is not an EC2 instance at\n * all, this value will still include the information about the system that could be determined. This value will never\n * be NULL.\n * This API is not thread safe.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/closed-issue-message.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 27,
                  "endLine": 17,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                    "rendered": {
                      "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                      "markdown": "`                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 235,
                  "endLine": 21,
                  "endColumn": 243,
                  "snippet": {
                    "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                    "rendered": {
                      "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                      "markdown": "`hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 334,
                  "endLine": 21,
                  "endColumn": 340,
                  "snippet": {
                    "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                    "rendered": {
                      "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                      "markdown": "`ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 232,
                  "endLine": 20,
                  "endColumn": 238,
                  "snippet": {
                    "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                    "rendered": {
                      "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                      "markdown": "`ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 40,
                  "endLine": 115,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --cmake-extra=-DASSERT_LOCK_HELD=ON --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --cmake-extra=-DASSERT_LOCK_HELD=ON --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --cmake-extra=-DASSERT_LOCK_HELD=ON --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 120,
                  "endLine": 176,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON --config Debug\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON --config Debug\n",
                      "markdown": "`    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON --config Debug\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 14,
                  "endLine": 176,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON --config Debug\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON --config Debug\n",
                      "markdown": "`    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON --config Debug\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 122,
                  "endLine": 168,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  linux-debug:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  linux-debug:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  linux-debug:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 16,
                  "endLine": 168,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  linux-debug:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  linux-debug:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  linux-debug:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 7,
                  "endLine": 157,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  # Test downstream repos.\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 7,
                  "endLine": 146,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        python3 -m venv .venv\n        source .venv/bin/activate\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  macos-x64:\n",
                    "rendered": {
                      "text": "        python3 -m venv .venv\n        source .venv/bin/activate\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  macos-x64:\n",
                      "markdown": "`        python3 -m venv .venv\n        source .venv/bin/activate\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  macos-x64:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 48,
                  "endLine": 106,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      fail-fast: false\n      matrix:\n",
                    "rendered": {
                      "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      fail-fast: false\n      matrix:\n",
                      "markdown": "`        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      fail-fast: false\n      matrix:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 122,
                  "endLine": 94,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 16,
                  "endLine": 94,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 122,
                  "endLine": 85,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  byo-crypto:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  byo-crypto:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 16,
                  "endLine": 85,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  byo-crypto:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  byo-crypto:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 122,
                  "endLine": 76,
                  "endColumn": 129,
                  "snippet": {
                    "text": "teps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\" --cmake-extra=-DASSERT_LOCK_HEL",
                    "rendered": {
                      "text": "teps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\" --cmake-extra=-DASSERT_LOCK_HEL",
                      "markdown": "`teps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\" --cmake-extra=-DASSERT_LOCK_HEL`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 16,
                  "endLine": 76,
                  "endColumn": 20,
                  "snippet": {
                    "text": "strategy:\n      fail-fast: false\n      matrix:\n        sanitizers: [\",thread\", \",address,undefined\"]\n    steps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra",
                    "rendered": {
                      "text": "strategy:\n      fail-fast: false\n      matrix:\n        sanitizers: [\",thread\", \",address,undefined\"]\n    steps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra",
                      "markdown": "`strategy:\n      fail-fast: false\n      matrix:\n        sanitizers: [\",thread\", \",address,undefined\"]\n    steps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 122,
                  "endLine": 63,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DAWS_ENABLE_S3_ENDPOINT_RESOLVER=ON\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DAWS_ENABLE_S3_ENDPOINT_RESOLVER=ON\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DAWS_ENABLE_S3_ENDPOINT_RESOLVER=ON\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 16,
                  "endLine": 63,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DAWS_ENABLE_S3_ENDPOINT_RESOLVER=ON\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DAWS_ENABLE_S3_ENDPOINT_RESOLVER=ON\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DAWS_ENABLE_S3_ENDPOINT_RESOLVER=ON\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 120,
                  "endLine": 39,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 14,
                  "endLine": 39,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/workflows/codecov.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "endLine": 27,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --cmake-extra=-DASSERT_LOCK_HELD=ON --coverage --coverage-exclude=source/s3_copy_object.c\n",
                    "rendered": {
                      "text": "      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --cmake-extra=-DASSERT_LOCK_HELD=ON --coverage --coverage-exclude=source/s3_copy_object.c\n",
                      "markdown": "`      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --cmake-extra=-DASSERT_LOCK_HELD=ON --coverage --coverage-exclude=source/s3_copy_object.c\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 28,
                  "endLine": 94,
                  "endColumn": 32,
                  "snippet": {
                    "text": "```\nTo upload:\n```\naws-c-s3/build/samples/s3/s3 cp <upload-path> s3://<bucket-name>/<object-name> --region <region>\n```\nTo list objects:\n```\n",
                    "rendered": {
                      "text": "```\nTo upload:\n```\naws-c-s3/build/samples/s3/s3 cp <upload-path> s3://<bucket-name>/<object-name> --region <region>\n```\nTo list objects:\n```\n",
                      "markdown": "````\nTo upload:\n```\naws-c-s3/build/samples/s3/s3 cp <upload-path> s3://<bucket-name>/<object-name> --region <region>\n```\nTo list objects:\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 28,
                  "endLine": 90,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nTo download:\n```\naws-c-s3/build/samples/s3/s3 cp s3://<bucket-name>/<object-name> <download-path> --region <region>\n```\nTo upload:\n```\n",
                    "rendered": {
                      "text": "\nTo download:\n```\naws-c-s3/build/samples/s3/s3 cp s3://<bucket-name>/<object-name> <download-path> --region <region>\n```\nTo upload:\n```\n",
                      "markdown": "`\nTo download:\n```\naws-c-s3/build/samples/s3/s3 cp s3://<bucket-name>/<object-name> <download-path> --region <region>\n```\nTo upload:\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 79,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-auth.git\ncmake -S aws-c-auth -B aws-c-auth/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-auth/build --target install\n\ngit clone git@github.com:awslabs/aws-c-s3.git\ncmake -S aws-c-s3 -B aws-c-s3/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-s3/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-auth.git\ncmake -S aws-c-auth -B aws-c-auth/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-auth/build --target install\n\ngit clone git@github.com:awslabs/aws-c-s3.git\ncmake -S aws-c-s3 -B aws-c-s3/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-s3/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-auth.git\ncmake -S aws-c-auth -B aws-c-auth/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-auth/build --target install\n\ngit clone git@github.com:awslabs/aws-c-s3.git\ncmake -S aws-c-s3 -B aws-c-s3/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-s3/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 75,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-sdkutils.git\ncmake -S aws-c-sdkutils -B aws-c-sdkutils/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-sdkutils/build --target install\n\ngit clone git@github.com:awslabs/aws-c-auth.git\ncmake -S aws-c-auth -B aws-c-auth/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-auth/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-sdkutils.git\ncmake -S aws-c-sdkutils -B aws-c-sdkutils/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-sdkutils/build --target install\n\ngit clone git@github.com:awslabs/aws-c-auth.git\ncmake -S aws-c-auth -B aws-c-auth/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-auth/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-sdkutils.git\ncmake -S aws-c-sdkutils -B aws-c-sdkutils/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-sdkutils/build --target install\n\ngit clone git@github.com:awslabs/aws-c-auth.git\ncmake -S aws-c-auth -B aws-c-auth/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-auth/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 71,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\ngit clone git@github.com:awslabs/aws-c-sdkutils.git\ncmake -S aws-c-sdkutils -B aws-c-sdkutils/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-sdkutils/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\ngit clone git@github.com:awslabs/aws-c-sdkutils.git\ncmake -S aws-c-sdkutils -B aws-c-sdkutils/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-sdkutils/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\ngit clone git@github.com:awslabs/aws-c-sdkutils.git\ncmake -S aws-c-sdkutils -B aws-c-sdkutils/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-sdkutils/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 67,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 63,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 59,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 55,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-checksums.git\ncmake -S aws-checksums -B aws-checksums/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-checksums/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-checksums.git\ncmake -S aws-checksums -B aws-checksums/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-checksums/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-checksums.git\ncmake -S aws-checksums -B aws-checksums/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-checksums/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 51,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-checksums.git\ncmake -S aws-checksums -B aws-checksums/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-checksums/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-checksums.git\ncmake -S aws-checksums -B aws-checksums/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-checksums/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-checksums.git\ncmake -S aws-checksums -B aws-checksums/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-checksums/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 3,
                  "endLine": 47,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n#### Building aws-c-s3 and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                    "rendered": {
                      "text": "\n#### Building aws-c-s3 and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                      "markdown": "`\n#### Building aws-c-s3 and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 39,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 3,
                  "endLine": 35,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n",
                    "rendered": {
                      "text": "\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n",
                      "markdown": "`\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/README.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 70,
                  "endLine": 8,
                  "endColumn": 74,
                  "snippet": {
                    "text": "o faster is multiple parallel connections.\n- **Automatic Retries**: Increases resilience by retrying individual failed chunks of a file transfer, eliminating the need to restart transfers from scratch after an intermittent error.\n- **DNS Load Balancing**: DNS resolver continuously harvests Amazon S3 IP addresses. When load is spread across the S3 fleet, overall throughput more reliable than if all connections are going to a single IP.\n- **Advanced Network Management**: The client incorporates automatic request parallelization, effective timeouts and retries, and efficient connection reuse. This ap",
                    "rendered": {
                      "text": "o faster is multiple parallel connections.\n- **Automatic Retries**: Increases resilience by retrying individual failed chunks of a file transfer, eliminating the need to restart transfers from scratch after an intermittent error.\n- **DNS Load Balancing**: DNS resolver continuously harvests Amazon S3 IP addresses. When load is spread across the S3 fleet, overall throughput more reliable than if all connections are going to a single IP.\n- **Advanced Network Management**: The client incorporates automatic request parallelization, effective timeouts and retries, and efficient connection reuse. This ap",
                      "markdown": "`o faster is multiple parallel connections.\n- **Automatic Retries**: Increases resilience by retrying individual failed chunks of a file transfer, eliminating the need to restart transfers from scratch after an intermittent error.\n- **DNS Load Balancing**: DNS resolver continuously harvests Amazon S3 IP addresses. When load is spread across the S3 fleet, overall throughput more reliable than if all connections are going to a single IP.\n- **Advanced Network Management**: The client incorporates automatic request parallelization, effective timeouts and retries, and efficient connection reuse. This ap`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_platform_info.c"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 57,
                  "endLine": 607,
                  "endColumn": 72,
                  "snippet": {
                    "text": "}\n\nbool aws_s3_is_running_on_ec2_nitro(struct aws_s3_platform_info_loader *loader) {\n    struct aws_byte_cursor system_virt_name = aws_system_environment_get_virtualization_vendor(loader->current_env);\n\n    if (aws_byte_cursor_eq_c_str_ignore_case(&system_virt_name, \"amazon ec2\")) {\n        return true;\n",
                    "rendered": {
                      "text": "}\n\nbool aws_s3_is_running_on_ec2_nitro(struct aws_s3_platform_info_loader *loader) {\n    struct aws_byte_cursor system_virt_name = aws_system_environment_get_virtualization_vendor(loader->current_env);\n\n    if (aws_byte_cursor_eq_c_str_ignore_case(&system_virt_name, \"amazon ec2\")) {\n        return true;\n",
                      "markdown": "`}\n\nbool aws_s3_is_running_on_ec2_nitro(struct aws_s3_platform_info_loader *loader) {\n    struct aws_byte_cursor system_virt_name = aws_system_environment_get_virtualization_vendor(loader->current_env);\n\n    if (aws_byte_cursor_eq_c_str_ignore_case(&system_virt_name, \"amazon ec2\")) {\n        return true;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_platform_info.c"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 43,
                  "endLine": 558,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    }\n\nreturn_instance_and_unlock:\n    return_cur = loader->lock_data.current_env_platform_info.instance_type;\n    aws_mutex_unlock(&loader->lock_data.lock);\n\n    return return_cur;\n",
                    "rendered": {
                      "text": "    }\n\nreturn_instance_and_unlock:\n    return_cur = loader->lock_data.current_env_platform_info.instance_type;\n    aws_mutex_unlock(&loader->lock_data.lock);\n\n    return return_cur;\n",
                      "markdown": "`    }\n\nreturn_instance_and_unlock:\n    return_cur = loader->lock_data.current_env_platform_info.instance_type;\n    aws_mutex_unlock(&loader->lock_data.lock);\n\n    return return_cur;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_platform_info.c"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 38,
                  "endLine": 547,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        struct aws_string *instance_type = s_query_imds_for_instance_type(loader->allocator);\n        if (instance_type) {\n            loader->lock_data.detected_instance_type = instance_type;\n            loader->lock_data.current_env_platform_info.instance_type = aws_byte_cursor_from_string(instance_type);\n            s_add_platform_info_to_table(loader, &loader->lock_data.current_env_platform_info);\n            AWS_LOGF_INFO(\n                AWS_LS_S3_CLIENT,\n",
                    "rendered": {
                      "text": "        struct aws_string *instance_type = s_query_imds_for_instance_type(loader->allocator);\n        if (instance_type) {\n            loader->lock_data.detected_instance_type = instance_type;\n            loader->lock_data.current_env_platform_info.instance_type = aws_byte_cursor_from_string(instance_type);\n            s_add_platform_info_to_table(loader, &loader->lock_data.current_env_platform_info);\n            AWS_LOGF_INFO(\n                AWS_LS_S3_CLIENT,\n",
                      "markdown": "`        struct aws_string *instance_type = s_query_imds_for_instance_type(loader->allocator);\n        if (instance_type) {\n            loader->lock_data.detected_instance_type = instance_type;\n            loader->lock_data.current_env_platform_info.instance_type = aws_byte_cursor_from_string(instance_type);\n            s_add_platform_info_to_table(loader, &loader->lock_data.current_env_platform_info);\n            AWS_LOGF_INFO(\n                AWS_LS_S3_CLIENT,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_platform_info.c"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 38,
                  "endLine": 529,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n        if (product_name.len) {\n            loader->lock_data.detected_instance_type = aws_string_new_from_cursor(loader->allocator, &product_name);\n            loader->lock_data.current_env_platform_info.instance_type =\n                aws_byte_cursor_from_string(loader->lock_data.detected_instance_type);\n            s_add_platform_info_to_table(loader, &loader->lock_data.current_env_platform_info);\n\n",
                    "rendered": {
                      "text": "\n        if (product_name.len) {\n            loader->lock_data.detected_instance_type = aws_string_new_from_cursor(loader->allocator, &product_name);\n            loader->lock_data.current_env_platform_info.instance_type =\n                aws_byte_cursor_from_string(loader->lock_data.detected_instance_type);\n            s_add_platform_info_to_table(loader, &loader->lock_data.current_env_platform_info);\n\n",
                      "markdown": "`\n        if (product_name.len) {\n            loader->lock_data.detected_instance_type = aws_string_new_from_cursor(loader->allocator, &product_name);\n            loader->lock_data.current_env_platform_info.instance_type =\n                aws_byte_cursor_from_string(loader->lock_data.detected_instance_type);\n            s_add_platform_info_to_table(loader, &loader->lock_data.current_env_platform_info);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_platform_info.c"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 23,
                  "endLine": 525,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        /* easy case not requiring any calls out to IMDS. If we detected we're running on ec2, then the dmi info is\n         * correct, and we can use it if we have it. Otherwise call out to IMDS. */\n        struct aws_byte_cursor product_name =\n            aws_system_environment_get_virtualization_product_name(loader->current_env);\n\n        if (product_name.len) {\n            loader->lock_data.detected_instance_type = aws_string_new_from_cursor(loader->allocator, &product_name);\n",
                    "rendered": {
                      "text": "        /* easy case not requiring any calls out to IMDS. If we detected we're running on ec2, then the dmi info is\n         * correct, and we can use it if we have it. Otherwise call out to IMDS. */\n        struct aws_byte_cursor product_name =\n            aws_system_environment_get_virtualization_product_name(loader->current_env);\n\n        if (product_name.len) {\n            loader->lock_data.detected_instance_type = aws_string_new_from_cursor(loader->allocator, &product_name);\n",
                      "markdown": "`        /* easy case not requiring any calls out to IMDS. If we detected we're running on ec2, then the dmi info is\n         * correct, and we can use it if we have it. Otherwise call out to IMDS. */\n        struct aws_byte_cursor product_name =\n            aws_system_environment_get_virtualization_product_name(loader->current_env);\n\n        if (product_name.len) {\n            loader->lock_data.detected_instance_type = aws_string_new_from_cursor(loader->allocator, &product_name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_auto_ranged_get.c"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 61,
                  "endLine": 899,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        switch (request->request_tag) {\n            case AWS_S3_AUTO_RANGE_GET_REQUEST_TYPE_HEAD_OBJECT:\n                auto_ranged_get->synced_data.head_object_completed = true;\n                AWS_LOGF_DEBUG(AWS_LS_S3_META_REQUEST, \"id=%p Head object completed.\", (void *)meta_request);\n                break;\n            case AWS_S3_AUTO_RANGE_GET_REQUEST_TYPE_GET_OBJECT_WITH_PART_NUMBER_1:\n                AWS_LOGF_DEBUG(AWS_LS_S3_META_REQUEST, \"id=%p Get Part Number completed.\", (void *)meta_request);\n",
                    "rendered": {
                      "text": "        switch (request->request_tag) {\n            case AWS_S3_AUTO_RANGE_GET_REQUEST_TYPE_HEAD_OBJECT:\n                auto_ranged_get->synced_data.head_object_completed = true;\n                AWS_LOGF_DEBUG(AWS_LS_S3_META_REQUEST, \"id=%p Head object completed.\", (void *)meta_request);\n                break;\n            case AWS_S3_AUTO_RANGE_GET_REQUEST_TYPE_GET_OBJECT_WITH_PART_NUMBER_1:\n                AWS_LOGF_DEBUG(AWS_LS_S3_META_REQUEST, \"id=%p Get Part Number completed.\", (void *)meta_request);\n",
                      "markdown": "`        switch (request->request_tag) {\n            case AWS_S3_AUTO_RANGE_GET_REQUEST_TYPE_HEAD_OBJECT:\n                auto_ranged_get->synced_data.head_object_completed = true;\n                AWS_LOGF_DEBUG(AWS_LS_S3_META_REQUEST, \"id=%p Head object completed.\", (void *)meta_request);\n                break;\n            case AWS_S3_AUTO_RANGE_GET_REQUEST_TYPE_GET_OBJECT_WITH_PART_NUMBER_1:\n                AWS_LOGF_DEBUG(AWS_LS_S3_META_REQUEST, \"id=%p Get Part Number completed.\", (void *)meta_request);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_auto_ranged_get.c"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 36,
                  "endLine": 718,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-range header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n\n",
                    "rendered": {
                      "text": "\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-range header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n\n",
                      "markdown": "`\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-range header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_auto_ranged_get.c"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 40,
                  "endLine": 669,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find content-range header for request %p\",\n                        (void *)meta_request,\n                        (void *)request);\n                    break;\n",
                    "rendered": {
                      "text": "\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find content-range header for request %p\",\n                        (void *)meta_request,\n                        (void *)request);\n                    break;\n",
                      "markdown": "`\n                    AWS_LOGF_ERROR(\n                        AWS_LS_S3_META_REQUEST,\n                        \"id=%p Could not find content-range header for request %p\",\n                        (void *)meta_request,\n                        (void *)request);\n                    break;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_auto_ranged_get.c"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 36,
                  "endLine": 655,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-length header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n",
                    "rendered": {
                      "text": "\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-length header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n",
                      "markdown": "`\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-length header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_auto_ranged_get.c"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 36,
                  "endLine": 638,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-range header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n",
                    "rendered": {
                      "text": "\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-range header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n",
                      "markdown": "`\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-range header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/source/s3_auto_ranged_get.c"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 36,
                  "endLine": 615,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-length header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n",
                    "rendered": {
                      "text": "\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-length header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n",
                      "markdown": "`\n                AWS_LOGF_ERROR(\n                    AWS_LS_S3_META_REQUEST,\n                    \"id=%p Could not find content-length header for request %p\",\n                    (void *)meta_request,\n                    (void *)request);\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.builder/actions/mock_server_setup.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 18,
                  "endLine": 26,
                  "snippet": {
                    "text": "            print(\"Skipping mock server setup because tests disabled for project\")\n            return\n\n        self.env = env\n        python_path = sys.executable\n        # install dependency for mock server\n        self.env.shell.exec(python_path,\n                            '-m', 'pip', 'install', 'h11', 'trio', 'proxy.py', check=True)\n",
                    "rendered": {
                      "text": "            print(\"Skipping mock server setup because tests disabled for project\")\n            return\n\n        self.env = env\n        python_path = sys.executable\n        # install dependency for mock server\n        self.env.shell.exec(python_path,\n                            '-m', 'pip', 'install', 'h11', 'trio', 'proxy.py', check=True)\n",
                      "markdown": "`            print(\"Skipping mock server setup because tests disabled for project\")\n            return\n\n        self.env = env\n        python_path = sys.executable\n        # install dependency for mock server\n        self.env.shell.exec(python_path,\n                            '-m', 'pip', 'install', 'h11', 'trio', 'proxy.py', check=True)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32c_tests.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 62,
                  "endLine": 213,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32c_tests.c"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 62,
                  "endLine": 189,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x3f, 0x60, 0xa4, 0xb9};\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x3f, 0x60, 0xa4, 0xb9};\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x3f, 0x60, 0xa4, 0xb9};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32c_tests.c"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 62,
                  "endLine": 168,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_CRC32C_LEN] = {0};\n",
                    "rendered": {
                      "text": "\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_CRC32C_LEN] = {0};\n",
                      "markdown": "`\n    aws_s3_library_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_CRC32C_LEN] = {0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32c_tests.c"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 35,
                  "endLine": 138,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_CRC32C);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n",
                    "rendered": {
                      "text": "    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_CRC32C);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n",
                      "markdown": "`    struct aws_s3_checksum *checksum = aws_checksum_new(allocator, AWS_SCA_CRC32C);\n    ASSERT_NOT_NULL(checksum);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_checksum_update(checksum, &input));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32c_tests.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 62,
                  "endLine": 57,
                  "endColumn": 109,
                  "snippet": {
                    "text": "static int s_crc32c_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x3f, 0x60, 0xa4, 0xb9};\n",
                    "rendered": {
                      "text": "static int s_crc32c_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x3f, 0x60, 0xa4, 0xb9};\n",
                      "markdown": "`static int s_crc32c_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {0x3f, 0x60, 0xa4, 0xb9};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/tests/s3_checksums_crc32c_tests.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 35,
                  "endLine": 45,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {0x07, 0x13, 0x25, 0xf5};\n    struct aws_byte_cursor expected_buf = aws_byte_cursor_from_array(expected, sizeof(expected));\n\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {0x07, 0x13, 0x25, 0xf5};\n    struct aws_byte_cursor expected_buf = aws_byte_cursor_from_array(expected, sizeof(expected));\n\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {0x07, 0x13, 0x25, 0xf5};\n    struct aws_byte_cursor expected_buf = aws_byte_cursor_from_array(expected, sizeof(expected));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/.github/.codecov.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 47,
                  "endLine": 8,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  behavior: default\n  require_changes: false  # if true: only post the comment if coverage changes\n  require_base: no        # [yes :: must have a base report to post]\n  require_head: yes       # [yes :: must have a head report to post]\n",
                    "rendered": {
                      "text": "  behavior: default\n  require_changes: false  # if true: only post the comment if coverage changes\n  require_base: no        # [yes :: must have a base report to post]\n  require_head: yes       # [yes :: must have a head report to post]\n",
                      "markdown": "`  behavior: default\n  require_changes: false  # if true: only post the comment if coverage changes\n  require_base: no        # [yes :: must have a base report to post]\n  require_head: yes       # [yes :: must have a head report to post]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/scripts/update_s3_endpoint_resolver_artifacts.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 28,
                  "endLine": 95,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    headers = {'Accept': 'application/vnd.github+json'}\n    if token is not None:\n        headers['Authorization'] = f\"Bearer {token}\"\n    http_response = requests.get(url, headers=headers)\n    if http_response.status_code != 200:\n        raise Exception(f\"HTTP Status code is {http_response.status_code}\")\n\n",
                    "rendered": {
                      "text": "    headers = {'Accept': 'application/vnd.github+json'}\n    if token is not None:\n        headers['Authorization'] = f\"Bearer {token}\"\n    http_response = requests.get(url, headers=headers)\n    if http_response.status_code != 200:\n        raise Exception(f\"HTTP Status code is {http_response.status_code}\")\n\n",
                      "markdown": "`    headers = {'Accept': 'application/vnd.github+json'}\n    if token is not None:\n        headers['Authorization'] = f\"Bearer {token}\"\n    http_response = requests.get(url, headers=headers)\n    if http_response.status_code != 200:\n        raise Exception(f\"HTTP Status code is {http_response.status_code}\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/scripts/update_s3_endpoint_resolver_artifacts.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 22,
                  "endLine": 26,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        '\\v': '\\\\v'\n    }\n\n    return escape_dict.get(c, c)\n\n\ndef get_header():\n",
                    "rendered": {
                      "text": "        '\\v': '\\\\v'\n    }\n\n    return escape_dict.get(c, c)\n\n\ndef get_header():\n",
                      "markdown": "`        '\\v': '\\\\v'\n    }\n\n    return escape_dict.get(c, c)\n\n\ndef get_header():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/scripts/update_s3_endpoint_resolver_artifacts.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 6,
                  "endLine": 1,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This script pulls latest 'partitions.json' and 's3-endpoint-rule-set.json' from Git.\n# You will need a secret in secrets manager which has the 'ruleset-url' and 'ruleset-token'.\n# It uses the latest files to generate 'source/s3_endpoint_resolver/aws_s3_endpoint_rule_set.c' and\n# 'source/s3_endpoint_resolver/aws_s3_endpoint_resolver_partition.c'\n",
                    "rendered": {
                      "text": "# This script pulls latest 'partitions.json' and 's3-endpoint-rule-set.json' from Git.\n# You will need a secret in secrets manager which has the 'ruleset-url' and 'ruleset-token'.\n# It uses the latest files to generate 'source/s3_endpoint_resolver/aws_s3_endpoint_rule_set.c' and\n# 'source/s3_endpoint_resolver/aws_s3_endpoint_resolver_partition.c'\n",
                      "markdown": "`# This script pulls latest 'partitions.json' and 's3-endpoint-rule-set.json' from Git.\n# You will need a secret in secrets manager which has the 'ruleset-url' and 'ruleset-token'.\n# It uses the latest files to generate 'source/s3_endpoint_resolver/aws_s3_endpoint_rule_set.c' and\n# 'source/s3_endpoint_resolver/aws_s3_endpoint_resolver_partition.c'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/format-check.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 8,
                  "snippet": {
                    "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                    "rendered": {
                      "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                      "markdown": "`if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/format-check.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 41,
                  "endColumn": 8,
                  "snippet": {
                    "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                    "rendered": {
                      "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                      "markdown": "`cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/format-check.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 76,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                    "rendered": {
                      "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                      "markdown": "`filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/format-check.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 21,
                  "endLine": 26,
                  "endColumn": 29,
                  "snippet": {
                    "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                    "rendered": {
                      "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                      "markdown": "`filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 220,
                  "endLine": 44,
                  "endColumn": 224,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 7,
                  "endLine": 44,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-s3/issues), or [recently closed](https://github.com/awslabs/aws-c-s3/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-s3/issues), or [recently closed](https://github.com/awslabs/aws-c-s3/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-s3/issues), or [recently closed](https://github.com/awslabs/aws-c-s3/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-s3/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-s3.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}