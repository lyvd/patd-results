{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1051,
                  "startColumn": 30,
                  "endLine": 1051,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\ncleanup:\n    aws_string_destroy_secure(username_string);\n    aws_string_destroy_secure(password_string);\n\n    return result;\n}\n",
                    "rendered": {
                      "text": "\ncleanup:\n    aws_string_destroy_secure(username_string);\n    aws_string_destroy_secure(password_string);\n\n    return result;\n}\n",
                      "markdown": "`\ncleanup:\n    aws_string_destroy_secure(username_string);\n    aws_string_destroy_secure(password_string);\n\n    return result;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1047,
                  "startColumn": 16,
                  "endLine": 1047,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n    aws_string_destroy_secure(username_string);\n",
                    "rendered": {
                      "text": "    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n    aws_string_destroy_secure(username_string);\n",
                      "markdown": "`    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n    aws_string_destroy_secure(username_string);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 34,
                  "endLine": 1046,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n",
                    "rendered": {
                      "text": "    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n",
                      "markdown": "`    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 4,
                  "endLine": 1046,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n",
                    "rendered": {
                      "text": "    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n",
                      "markdown": "`    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\ncleanup:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1045,
                  "startColumn": 11,
                  "endLine": 1045,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    struct aws_string *temp = username_string;\n    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\n",
                    "rendered": {
                      "text": "    struct aws_string *temp = username_string;\n    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\n",
                      "markdown": "`    struct aws_string *temp = username_string;\n    username_string = connection->username;\n    connection->username = temp;\n    temp = password_string;\n    password_string = connection->password;\n    connection->password = temp;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1029,
                  "startColumn": 70,
                  "endLine": 1029,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n        }\n    }\n",
                    "rendered": {
                      "text": "    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n        }\n    }\n",
                      "markdown": "`    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 13,
                  "endLine": 1028,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n        }\n",
                    "rendered": {
                      "text": "\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n        }\n",
                      "markdown": "`\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1027,
                  "startColumn": 90,
                  "endLine": 1027,
                  "endColumn": 98,
                  "snippet": {
                    "text": "    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n",
                    "rendered": {
                      "text": "    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n",
                      "markdown": "`    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1027,
                  "startColumn": 75,
                  "endLine": 1027,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n",
                    "rendered": {
                      "text": "    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n",
                      "markdown": "`    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1027,
                  "startColumn": 8,
                  "endLine": 1027,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n",
                    "rendered": {
                      "text": "    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n",
                      "markdown": "`    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n            goto cleanup;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1026,
                  "startColumn": 8,
                  "endLine": 1026,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        goto cleanup;\n    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n",
                    "rendered": {
                      "text": "        goto cleanup;\n    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n",
                      "markdown": "`        goto cleanup;\n    }\n\n    if (password) {\n        password_string = aws_string_new_from_array(connection->allocator, password->ptr, password->len);\n        if (!password_string) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to copy password\", (void *)connection);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1018,
                  "startColumn": 23,
                  "endLine": 1018,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    AWS_LOGF_TRACE(AWS_LS_MQTT_CLIENT, \"id=%p: Setting username and password\", (void *)connection);\n\n    struct aws_string *username_string = NULL;\n    struct aws_string *password_string = NULL;\n\n    username_string = aws_string_new_from_array(connection->allocator, username->ptr, username->len);\n    if (!username_string) {\n",
                    "rendered": {
                      "text": "    AWS_LOGF_TRACE(AWS_LS_MQTT_CLIENT, \"id=%p: Setting username and password\", (void *)connection);\n\n    struct aws_string *username_string = NULL;\n    struct aws_string *password_string = NULL;\n\n    username_string = aws_string_new_from_array(connection->allocator, username->ptr, username->len);\n    if (!username_string) {\n",
                      "markdown": "`    AWS_LOGF_TRACE(AWS_LS_MQTT_CLIENT, \"id=%p: Setting username and password\", (void *)connection);\n\n    struct aws_string *username_string = NULL;\n    struct aws_string *password_string = NULL;\n\n    username_string = aws_string_new_from_array(connection->allocator, username->ptr, username->len);\n    if (!username_string) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1015,
                  "startColumn": 68,
                  "endLine": 1015,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    }\n\n    int result = AWS_OP_ERR;\n    AWS_LOGF_TRACE(AWS_LS_MQTT_CLIENT, \"id=%p: Setting username and password\", (void *)connection);\n\n    struct aws_string *username_string = NULL;\n    struct aws_string *password_string = NULL;\n",
                    "rendered": {
                      "text": "    }\n\n    int result = AWS_OP_ERR;\n    AWS_LOGF_TRACE(AWS_LS_MQTT_CLIENT, \"id=%p: Setting username and password\", (void *)connection);\n\n    struct aws_string *username_string = NULL;\n    struct aws_string *password_string = NULL;\n",
                      "markdown": "`    }\n\n    int result = AWS_OP_ERR;\n    AWS_LOGF_TRACE(AWS_LS_MQTT_CLIENT, \"id=%p: Setting username and password\", (void *)connection);\n\n    struct aws_string *username_string = NULL;\n    struct aws_string *password_string = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 998,
                  "startColumn": 34,
                  "endLine": 998,
                  "endColumn": 42,
                  "snippet": {
                    "text": "static int s_aws_mqtt_client_connection_311_set_login(\n    void *impl,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_client_connection_311_impl *connection = impl;\n\n",
                    "rendered": {
                      "text": "static int s_aws_mqtt_client_connection_311_set_login(\n    void *impl,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_client_connection_311_impl *connection = impl;\n\n",
                      "markdown": "`static int s_aws_mqtt_client_connection_311_set_login(\n    void *impl,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_client_connection_311_impl *connection = impl;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 46,
                  "endLine": 808,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        aws_string_destroy_secure(connection->username);\n    }\n    if (connection->password) {\n        aws_string_destroy_secure(connection->password);\n    }\n\n    /* Clean up the will */\n",
                    "rendered": {
                      "text": "        aws_string_destroy_secure(connection->username);\n    }\n    if (connection->password) {\n        aws_string_destroy_secure(connection->password);\n    }\n\n    /* Clean up the will */\n",
                      "markdown": "`        aws_string_destroy_secure(connection->username);\n    }\n    if (connection->password) {\n        aws_string_destroy_secure(connection->password);\n    }\n\n    /* Clean up the will */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 20,
                  "endLine": 807,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    if (connection->username) {\n        aws_string_destroy_secure(connection->username);\n    }\n    if (connection->password) {\n        aws_string_destroy_secure(connection->password);\n    }\n\n",
                    "rendered": {
                      "text": "    if (connection->username) {\n        aws_string_destroy_secure(connection->username);\n    }\n    if (connection->password) {\n        aws_string_destroy_secure(connection->password);\n    }\n\n",
                      "markdown": "`    if (connection->username) {\n        aws_string_destroy_secure(connection->username);\n    }\n    if (connection->password) {\n        aws_string_destroy_secure(connection->password);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 72,
                  "endLine": 644,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n    }\n\n    message = mqtt_get_message_for_packet(connection, &connect.fixed_header);\n",
                    "rendered": {
                      "text": "            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n    }\n\n    message = mqtt_get_message_for_packet(connection, &connect.fixed_header);\n",
                      "markdown": "`            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n    }\n\n    message = mqtt_get_message_for_packet(connection, &connect.fixed_header);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 67,
                  "endLine": 641,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n",
                    "rendered": {
                      "text": "        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n",
                      "markdown": "`        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 12,
                  "endLine": 641,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n",
                    "rendered": {
                      "text": "        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n",
                      "markdown": "`        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n        aws_mqtt_packet_connect_add_credentials(&connect, username_cur, password_cur);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 24,
                  "endLine": 640,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            .len = 0,\n        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n",
                    "rendered": {
                      "text": "            .len = 0,\n        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n",
                      "markdown": "`            .len = 0,\n        };\n\n        if (connection->password) {\n            password_cur = aws_byte_cursor_from_string(connection->password);\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 31,
                  "endLine": 635,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            (void *)connection,\n            AWS_BYTE_CURSOR_PRI(username_cur));\n\n        struct aws_byte_cursor password_cur = {\n            .ptr = NULL,\n            .len = 0,\n        };\n",
                    "rendered": {
                      "text": "            (void *)connection,\n            AWS_BYTE_CURSOR_PRI(username_cur));\n\n        struct aws_byte_cursor password_cur = {\n            .ptr = NULL,\n            .len = 0,\n        };\n",
                      "markdown": "`            (void *)connection,\n            AWS_BYTE_CURSOR_PRI(username_cur));\n\n        struct aws_byte_cursor password_cur = {\n            .ptr = NULL,\n            .len = 0,\n        };\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 3136,
                  "startColumn": 59,
                  "endLine": 3136,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        if (connection->thread_data.waiting_on_ping_response) {\n            connection->thread_data.waiting_on_ping_response = false;\n            /* It's been too long since the last ping, close the connection */\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: ping timeout detected\", (void *)connection);\n            aws_channel_shutdown(connection->slot->channel, AWS_ERROR_MQTT_TIMEOUT);\n        }\n    }\n",
                    "rendered": {
                      "text": "        if (connection->thread_data.waiting_on_ping_response) {\n            connection->thread_data.waiting_on_ping_response = false;\n            /* It's been too long since the last ping, close the connection */\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: ping timeout detected\", (void *)connection);\n            aws_channel_shutdown(connection->slot->channel, AWS_ERROR_MQTT_TIMEOUT);\n        }\n    }\n",
                      "markdown": "`        if (connection->thread_data.waiting_on_ping_response) {\n            connection->thread_data.waiting_on_ping_response = false;\n            /* It's been too long since the last ping, close the connection */\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: ping timeout detected\", (void *)connection);\n            aws_channel_shutdown(connection->slot->channel, AWS_ERROR_MQTT_TIMEOUT);\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 1518,
                  "startColumn": 26,
                  "endLine": 1518,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    AWS_LOGF_INFO(\n        AWS_LS_MQTT_CLIENT,\n        \"id=%p: using ping timeout of %\" PRIu64 \" ns\",\n        (void *)connection,\n        connection->ping_timeout_ns);\n\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_INFO(\n        AWS_LS_MQTT_CLIENT,\n        \"id=%p: using ping timeout of %\" PRIu64 \" ns\",\n        (void *)connection,\n        connection->ping_timeout_ns);\n\n",
                      "markdown": "`\n    AWS_LOGF_INFO(\n        AWS_LS_MQTT_CLIENT,\n        \"id=%p: using ping timeout of %\" PRIu64 \" ns\",\n        (void *)connection,\n        connection->ping_timeout_ns);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 69,
                  "endLine": 578,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n    struct aws_channel_task *connack_task = aws_mem_calloc(connection->allocator, 1, sizeof(struct aws_channel_task));\n    if (!connack_task) {\n        AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to allocate timeout task.\", (void *)connection);\n        goto handle_error;\n    }\n\n",
                    "rendered": {
                      "text": "\n    struct aws_channel_task *connack_task = aws_mem_calloc(connection->allocator, 1, sizeof(struct aws_channel_task));\n    if (!connack_task) {\n        AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to allocate timeout task.\", (void *)connection);\n        goto handle_error;\n    }\n\n",
                      "markdown": "`\n    struct aws_channel_task *connack_task = aws_mem_calloc(connection->allocator, 1, sizeof(struct aws_channel_task));\n    if (!connack_task) {\n        AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: Failed to allocate timeout task.\", (void *)connection);\n        goto handle_error;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client.c"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 76,
                  "endLine": 481,
                  "endColumn": 85,
                  "snippet": {
                    "text": "            mqtt_connection_unlock_synced_data(connection);\n        } /* END CRITICAL SECTION */\n        if (time_out) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: mqtt CONNACK response timeout detected\", (void *)connection);\n            aws_channel_shutdown(connection->slot->channel, AWS_ERROR_MQTT_TIMEOUT);\n        }\n    }\n",
                    "rendered": {
                      "text": "            mqtt_connection_unlock_synced_data(connection);\n        } /* END CRITICAL SECTION */\n        if (time_out) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: mqtt CONNACK response timeout detected\", (void *)connection);\n            aws_channel_shutdown(connection->slot->channel, AWS_ERROR_MQTT_TIMEOUT);\n        }\n    }\n",
                      "markdown": "`            mqtt_connection_unlock_synced_data(connection);\n        } /* END CRITICAL SECTION */\n        if (time_out) {\n            AWS_LOGF_ERROR(AWS_LS_MQTT_CLIENT, \"id=%p: mqtt CONNACK response timeout detected\", (void *)connection);\n            aws_channel_shutdown(connection->slot->channel, AWS_ERROR_MQTT_TIMEOUT);\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_validation_failure_tests.c"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 85,
                  "endLine": 301,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n\nstatic const uint16_t s_zero_receive_maximum = 0;\nstatic void s_make_receive_maximum_zero_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n",
                    "rendered": {
                      "text": "    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n\nstatic const uint16_t s_zero_receive_maximum = 0;\nstatic void s_make_receive_maximum_zero_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n",
                      "markdown": "`    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n\nstatic const uint16_t s_zero_receive_maximum = 0;\nstatic void s_make_receive_maximum_zero_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_validation_failure_tests.c"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 38,
                  "endLine": 301,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n\nstatic const uint16_t s_zero_receive_maximum = 0;\nstatic void s_make_receive_maximum_zero_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n",
                    "rendered": {
                      "text": "    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n\nstatic const uint16_t s_zero_receive_maximum = 0;\nstatic void s_make_receive_maximum_zero_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n",
                      "markdown": "`    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n\nstatic const uint16_t s_zero_receive_maximum = 0;\nstatic void s_make_receive_maximum_zero_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_validation_failure_tests.c"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 10,
                  "endLine": 298,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    s_make_username_invalid_utf8_connect_view)\n\nstatic void s_make_password_too_long_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n",
                    "rendered": {
                      "text": "    s_make_username_invalid_utf8_connect_view)\n\nstatic void s_make_password_too_long_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n",
                      "markdown": "`    s_make_username_invalid_utf8_connect_view)\n\nstatic void s_make_password_too_long_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n    view->password = &s_too_long_for_uint16_cursor;\n}\n\nAWS_VALIDATION_FAILURE_TEST2(connect, password_too_long, s_good_connect_view, s_make_password_too_long_connect_view)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_validation_failure_tests.c"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 19,
                  "endLine": 297,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    s_good_connect_view,\n    s_make_username_invalid_utf8_connect_view)\n\nstatic void s_make_password_too_long_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n    view->password = &s_too_long_for_uint16_cursor;\n}\n\n",
                    "rendered": {
                      "text": "    s_good_connect_view,\n    s_make_username_invalid_utf8_connect_view)\n\nstatic void s_make_password_too_long_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n    view->password = &s_too_long_for_uint16_cursor;\n}\n\n",
                      "markdown": "`    s_good_connect_view,\n    s_make_username_invalid_utf8_connect_view)\n\nstatic void s_make_password_too_long_connect_view(struct aws_mqtt5_packet_connect_view *view) {\n    view->password = &s_too_long_for_uint16_cursor;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt311_listener.c"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 7,
                  "endLine": 322,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->disconnect_handler != NULL) {\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->disconnect_handler != NULL) {\n",
                      "markdown": "`    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->disconnect_handler != NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt311_listener.c"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 7,
                  "endLine": 304,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->connection_interrupted_handler != NULL) {\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->connection_interrupted_handler != NULL) {\n",
                      "markdown": "`    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->connection_interrupted_handler != NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt311_listener.c"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 7,
                  "endLine": 283,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->connection_success_handler != NULL) {\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->connection_success_handler != NULL) {\n",
                      "markdown": "`    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->connection_success_handler != NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt311_listener.c"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 7,
                  "endLine": 261,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->publish_received_handler != NULL) {\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->publish_received_handler != NULL) {\n",
                      "markdown": "`    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt311_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->publish_received_handler != NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt311_listener.c"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 7,
                  "endLine": 225,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        if (entry->id == callback_set_id) {\n            aws_linked_list_remove(&entry->node);\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        if (entry->id == callback_set_id) {\n            aws_linked_list_remove(&entry->node);\n",
                      "markdown": "`    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        if (entry->id == callback_set_id) {\n            aws_linked_list_remove(&entry->node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt311_listener.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 7,
                  "endLine": 174,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        aws_linked_list_remove(&entry->node);\n        aws_mem_release(entry->allocator, entry);\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        aws_linked_list_remove(&entry->node);\n        aws_mem_release(entry->allocator, entry);\n",
                      "markdown": "`    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt311_callback_set_entry *entry =\n            AWS_CONTAINER_OF(node, struct aws_mqtt311_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        aws_linked_list_remove(&entry->node);\n        aws_mem_release(entry->allocator, entry);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/mqtt_mock_server_handler.c"
                },
                "region": {
                  "startLine": 732,
                  "startColumn": 54,
                  "endLine": 732,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n            }\n",
                      "markdown": "`                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/mqtt_mock_server_handler.c"
                },
                "region": {
                  "startLine": 732,
                  "startColumn": 28,
                  "endLine": 732,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n            }\n",
                      "markdown": "`                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/mqtt_mock_server_handler.c"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 32,
                  "endLine": 731,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                if (packet->has_username) {\n                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n",
                    "rendered": {
                      "text": "                if (packet->has_username) {\n                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n",
                      "markdown": "`                if (packet->has_username) {\n                    packet->username = connect_packet.username;\n                }\n                if (packet->has_password) {\n                    packet->password = connect_packet.password;\n                }\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/mqtt_mock_server_handler.c"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 58,
                  "endLine": 719,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                packet->clean_session = connect_packet.clean_session;\n                packet->has_will = connect_packet.has_will;\n                packet->will_retain = connect_packet.will_retain;\n                packet->has_password = connect_packet.has_password;\n                packet->has_username = connect_packet.has_username;\n                packet->keep_alive_timeout = connect_packet.keep_alive_timeout;\n                packet->will_qos = connect_packet.will_qos;\n",
                    "rendered": {
                      "text": "                packet->clean_session = connect_packet.clean_session;\n                packet->has_will = connect_packet.has_will;\n                packet->will_retain = connect_packet.will_retain;\n                packet->has_password = connect_packet.has_password;\n                packet->has_username = connect_packet.has_username;\n                packet->keep_alive_timeout = connect_packet.keep_alive_timeout;\n                packet->will_qos = connect_packet.will_qos;\n",
                      "markdown": "`                packet->clean_session = connect_packet.clean_session;\n                packet->has_will = connect_packet.has_will;\n                packet->will_retain = connect_packet.will_retain;\n                packet->has_password = connect_packet.has_password;\n                packet->has_username = connect_packet.has_username;\n                packet->keep_alive_timeout = connect_packet.keep_alive_timeout;\n                packet->will_qos = connect_packet.will_qos;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/mqtt_mock_server_handler.c"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 28,
                  "endLine": 719,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                packet->clean_session = connect_packet.clean_session;\n                packet->has_will = connect_packet.has_will;\n                packet->will_retain = connect_packet.will_retain;\n                packet->has_password = connect_packet.has_password;\n                packet->has_username = connect_packet.has_username;\n                packet->keep_alive_timeout = connect_packet.keep_alive_timeout;\n                packet->will_qos = connect_packet.will_qos;\n",
                    "rendered": {
                      "text": "                packet->clean_session = connect_packet.clean_session;\n                packet->has_will = connect_packet.has_will;\n                packet->will_retain = connect_packet.will_retain;\n                packet->has_password = connect_packet.has_password;\n                packet->has_username = connect_packet.has_username;\n                packet->keep_alive_timeout = connect_packet.keep_alive_timeout;\n                packet->will_qos = connect_packet.will_qos;\n",
                      "markdown": "`                packet->clean_session = connect_packet.clean_session;\n                packet->has_will = connect_packet.has_will;\n                packet->will_retain = connect_packet.will_retain;\n                packet->has_password = connect_packet.has_password;\n                packet->has_username = connect_packet.has_username;\n                packet->keep_alive_timeout = connect_packet.keep_alive_timeout;\n                packet->will_qos = connect_packet.will_qos;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 53,
                  "endLine": 439,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 43,
                  "endLine": 439,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 46,
                  "endLine": 438,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 7,
                  "endLine": 437,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    /* username */\n    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n",
                    "rendered": {
                      "text": "    /* username */\n    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n",
                      "markdown": "`    /* username */\n    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 61,
                  "endLine": 419,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        (1 << 2)                        /*   Will flag, bit 2 */\n        | (AWS_MQTT_QOS_EXACTLY_ONCE << 3)/* Will QoS, bits 4-3 */\n        | (1 << 5)                      /*   Will Retain, bit 5 */\n        | (1 << 7) | (1 << 6),            /* username bit 7, password bit 6 */\n        0, 0,                           /* Keep alive */\n    };\n    /* clang-format on */\n",
                    "rendered": {
                      "text": "        (1 << 2)                        /*   Will flag, bit 2 */\n        | (AWS_MQTT_QOS_EXACTLY_ONCE << 3)/* Will QoS, bits 4-3 */\n        | (1 << 5)                      /*   Will Retain, bit 5 */\n        | (1 << 7) | (1 << 6),            /* username bit 7, password bit 6 */\n        0, 0,                           /* Keep alive */\n    };\n    /* clang-format on */\n",
                      "markdown": "`        (1 << 2)                        /*   Will flag, bit 2 */\n        | (AWS_MQTT_QOS_EXACTLY_ONCE << 3)/* Will QoS, bits 4-3 */\n        | (1 << 5)                      /*   Will Retain, bit 5 */\n        | (1 << 7) | (1 << 6),            /* username bit 7, password bit 6 */\n        0, 0,                           /* Keep alive */\n    };\n    /* clang-format on */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 104,
                  "endLine": 412,
                  "endColumn": 112,
                  "snippet": {
                    "text": "    /* clang-format off */\n    uint8_t header[] = {\n        AWS_MQTT_PACKET_CONNECT << 4,   /* Packet type */\n        10 + (2 + CLIENT_ID_LEN) + (2 + TOPIC_NAME_LEN) + (2 + PAYLOAD_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n                                        /* Connect Flags: */\n",
                    "rendered": {
                      "text": "    /* clang-format off */\n    uint8_t header[] = {\n        AWS_MQTT_PACKET_CONNECT << 4,   /* Packet type */\n        10 + (2 + CLIENT_ID_LEN) + (2 + TOPIC_NAME_LEN) + (2 + PAYLOAD_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n                                        /* Connect Flags: */\n",
                      "markdown": "`    /* clang-format off */\n    uint8_t header[] = {\n        AWS_MQTT_PACKET_CONNECT << 4,   /* Packet type */\n        10 + (2 + CLIENT_ID_LEN) + (2 + TOPIC_NAME_LEN) + (2 + PAYLOAD_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n                                        /* Connect Flags: */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 47,
                  "endLine": 406,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 37,
                  "endLine": 406,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 69,
                  "endLine": 391,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\n    return AWS_OP_SUCCESS;\n}\nPACKET_TEST_NAME(CONNECT, connect_password, connect, &s_test_connect_password_init, NULL, &s_test_connect_eq)\n\nstatic int s_test_connect_all_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n",
                    "rendered": {
                      "text": "\n    return AWS_OP_SUCCESS;\n}\nPACKET_TEST_NAME(CONNECT, connect_password, connect, &s_test_connect_password_init, NULL, &s_test_connect_eq)\n\nstatic int s_test_connect_all_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n",
                      "markdown": "`\n    return AWS_OP_SUCCESS;\n}\nPACKET_TEST_NAME(CONNECT, connect_password, connect, &s_test_connect_password_init, NULL, &s_test_connect_eq)\n\nstatic int s_test_connect_all_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 34,
                  "endLine": 391,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    return AWS_OP_SUCCESS;\n}\nPACKET_TEST_NAME(CONNECT, connect_password, connect, &s_test_connect_password_init, NULL, &s_test_connect_eq)\n\nstatic int s_test_connect_all_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n",
                    "rendered": {
                      "text": "\n    return AWS_OP_SUCCESS;\n}\nPACKET_TEST_NAME(CONNECT, connect_password, connect, &s_test_connect_password_init, NULL, &s_test_connect_eq)\n\nstatic int s_test_connect_all_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n",
                      "markdown": "`\n    return AWS_OP_SUCCESS;\n}\nPACKET_TEST_NAME(CONNECT, connect_password, connect, &s_test_connect_password_init, NULL, &s_test_connect_eq)\n\nstatic int s_test_connect_all_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 53,
                  "endLine": 387,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 43,
                  "endLine": 387,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 46,
                  "endLine": 386,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 7,
                  "endLine": 385,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    /* username */\n    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n",
                    "rendered": {
                      "text": "    /* username */\n    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n",
                      "markdown": "`    /* username */\n    aws_byte_buf_write_be16(&fixture->buffer, USERNAME_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_username, USERNAME_LEN);\n    /* password */\n    aws_byte_buf_write_be16(&fixture->buffer, PASSWORD_LEN);\n    aws_byte_buf_write(&fixture->buffer, s_password, PASSWORD_LEN);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 74,
                  "endLine": 372,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        10 + (2 + CLIENT_ID_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n        (1 << 7) | (1 << 6),            /* Connect Flags: username bit 7, password bit 6 */\n        0xBE, 0xEF,                     /* Keep alive */\n    };\n    /* clang-format on */\n",
                    "rendered": {
                      "text": "        10 + (2 + CLIENT_ID_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n        (1 << 7) | (1 << 6),            /* Connect Flags: username bit 7, password bit 6 */\n        0xBE, 0xEF,                     /* Keep alive */\n    };\n    /* clang-format on */\n",
                      "markdown": "`        10 + (2 + CLIENT_ID_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n        (1 << 7) | (1 << 6),            /* Connect Flags: username bit 7, password bit 6 */\n        0xBE, 0xEF,                     /* Keep alive */\n    };\n    /* clang-format on */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 61,
                  "endLine": 369,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    /* clang-format off */\n    uint8_t header[] = {\n        AWS_MQTT_PACKET_CONNECT << 4,   /* Packet type */\n        10 + (2 + CLIENT_ID_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n        (1 << 7) | (1 << 6),            /* Connect Flags: username bit 7, password bit 6 */\n",
                    "rendered": {
                      "text": "    /* clang-format off */\n    uint8_t header[] = {\n        AWS_MQTT_PACKET_CONNECT << 4,   /* Packet type */\n        10 + (2 + CLIENT_ID_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n        (1 << 7) | (1 << 6),            /* Connect Flags: username bit 7, password bit 6 */\n",
                      "markdown": "`    /* clang-format off */\n    uint8_t header[] = {\n        AWS_MQTT_PACKET_CONNECT << 4,   /* Packet type */\n        10 + (2 + CLIENT_ID_LEN) + (2 + USERNAME_LEN) + (2 + PASSWORD_LEN), /* Remaining length */\n        0, 4, 'M', 'Q', 'T', 'T',       /* Protocol name */\n        4,                              /* Protocol level */\n        (1 << 7) | (1 << 6),            /* Connect Flags: username bit 7, password bit 6 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 47,
                  "endLine": 363,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 37,
                  "endLine": 363,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_mqtt_packet_connect_add_credentials(\n        fixture->in_packet,\n        aws_byte_cursor_from_array(s_username, USERNAME_LEN),\n        aws_byte_cursor_from_array(s_password, PASSWORD_LEN)));\n\n    /* Init buffer */\n    /* clang-format off */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 26,
                  "endLine": 356,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    NULL,\n    &s_test_connect_eq)\n\nstatic int s_test_connect_password_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n    ASSERT_SUCCESS(aws_mqtt_packet_connect_init(\n        fixture->in_packet, aws_byte_cursor_from_array(s_client_id, CLIENT_ID_LEN), false, 0xBEEF));\n",
                    "rendered": {
                      "text": "    NULL,\n    &s_test_connect_eq)\n\nstatic int s_test_connect_password_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n    ASSERT_SUCCESS(aws_mqtt_packet_connect_init(\n        fixture->in_packet, aws_byte_cursor_from_array(s_client_id, CLIENT_ID_LEN), false, 0xBEEF));\n",
                      "markdown": "`    NULL,\n    &s_test_connect_eq)\n\nstatic int s_test_connect_password_init(struct packet_test_fixture *fixture) {\n    /* Init packet */\n    ASSERT_SUCCESS(aws_mqtt_packet_connect_init(\n        fixture->in_packet, aws_byte_cursor_from_array(s_client_id, CLIENT_ID_LEN), false, 0xBEEF));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 48,
                  "endLine": 259,
                  "endColumn": 56,
                  "snippet": {
                    "text": "           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n           aws_byte_cursor_eq(&l->password, &r->password);\n}\nPACKET_TEST(CONNECT, connect, &s_test_connect_init, NULL, &s_test_connect_eq)\n\n",
                    "rendered": {
                      "text": "           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n           aws_byte_cursor_eq(&l->password, &r->password);\n}\nPACKET_TEST(CONNECT, connect, &s_test_connect_init, NULL, &s_test_connect_eq)\n\n",
                      "markdown": "`           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n           aws_byte_cursor_eq(&l->password, &r->password);\n}\nPACKET_TEST(CONNECT, connect, &s_test_connect_init, NULL, &s_test_connect_eq)\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 34,
                  "endLine": 259,
                  "endColumn": 42,
                  "snippet": {
                    "text": "           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n           aws_byte_cursor_eq(&l->password, &r->password);\n}\nPACKET_TEST(CONNECT, connect, &s_test_connect_init, NULL, &s_test_connect_eq)\n\n",
                    "rendered": {
                      "text": "           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n           aws_byte_cursor_eq(&l->password, &r->password);\n}\nPACKET_TEST(CONNECT, connect, &s_test_connect_init, NULL, &s_test_connect_eq)\n\n",
                      "markdown": "`           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n           aws_byte_cursor_eq(&l->password, &r->password);\n}\nPACKET_TEST(CONNECT, connect, &s_test_connect_init, NULL, &s_test_connect_eq)\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 37,
                  "endLine": 255,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    return s_fixed_header_eq(&l->fixed_header, &r->fixed_header) && l->clean_session == r->clean_session &&\n           l->has_will == r->has_will && l->will_qos == r->will_qos && l->will_retain == r->will_retain &&\n           l->has_password == r->has_password && l->has_username == r->has_username &&\n           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n",
                    "rendered": {
                      "text": "\n    return s_fixed_header_eq(&l->fixed_header, &r->fixed_header) && l->clean_session == r->clean_session &&\n           l->has_will == r->has_will && l->will_qos == r->will_qos && l->will_retain == r->will_retain &&\n           l->has_password == r->has_password && l->has_username == r->has_username &&\n           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n",
                      "markdown": "`\n    return s_fixed_header_eq(&l->fixed_header, &r->fixed_header) && l->clean_session == r->clean_session &&\n           l->has_will == r->has_will && l->will_qos == r->will_qos && l->will_retain == r->will_retain &&\n           l->has_password == r->has_password && l->has_username == r->has_username &&\n           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 18,
                  "endLine": 255,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n    return s_fixed_header_eq(&l->fixed_header, &r->fixed_header) && l->clean_session == r->clean_session &&\n           l->has_will == r->has_will && l->will_qos == r->will_qos && l->will_retain == r->will_retain &&\n           l->has_password == r->has_password && l->has_username == r->has_username &&\n           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n",
                    "rendered": {
                      "text": "\n    return s_fixed_header_eq(&l->fixed_header, &r->fixed_header) && l->clean_session == r->clean_session &&\n           l->has_will == r->has_will && l->will_qos == r->will_qos && l->will_retain == r->will_retain &&\n           l->has_password == r->has_password && l->has_username == r->has_username &&\n           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n",
                      "markdown": "`\n    return s_fixed_header_eq(&l->fixed_header, &r->fixed_header) && l->clean_session == r->clean_session &&\n           l->has_will == r->has_will && l->will_qos == r->will_qos && l->will_retain == r->will_retain &&\n           l->has_password == r->has_password && l->has_username == r->has_username &&\n           l->keep_alive_timeout == r->keep_alive_timeout &&\n           aws_byte_cursor_eq(&l->client_identifier, &r->client_identifier) &&\n           aws_byte_cursor_eq(&l->will_topic, &r->will_topic) && aws_byte_cursor_eq(&l->username, &r->username) &&\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 31,
                  "endLine": 161,
                  "endColumn": 39,
                  "snippet": {
                    "text": "static uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n/* Ack                                                                       */\n",
                    "rendered": {
                      "text": "static uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n/* Ack                                                                       */\n",
                      "markdown": "`static uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n/* Ack                                                                       */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 7,
                  "endLine": 161,
                  "endColumn": 15,
                  "snippet": {
                    "text": "static uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n/* Ack                                                                       */\n",
                    "rendered": {
                      "text": "static uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n/* Ack                                                                       */\n",
                      "markdown": "`static uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n/* Ack                                                                       */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/packet_encoding_test.c"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 17,
                  "endLine": 160,
                  "endColumn": 25,
                  "snippet": {
                    "text": "enum { PAYLOAD_LEN = sizeof(s_payload) };\nstatic uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n",
                    "rendered": {
                      "text": "enum { PAYLOAD_LEN = sizeof(s_payload) };\nstatic uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n",
                      "markdown": "`enum { PAYLOAD_LEN = sizeof(s_payload) };\nstatic uint8_t s_username[] = \"admin\";\nenum { USERNAME_LEN = sizeof(s_username) };\nstatic uint8_t s_password[] = \"12345\";\nenum { PASSWORD_LEN = sizeof(s_password) };\n\n/*****************************************************************************/\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 93,
                  "endLine": 705,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    struct aws_mqtt5_packet_connect_view *stored_view = &connect_storage.storage_view;\n\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_CURSOR(&connect_storage, &connect_options, username);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_CURSOR(&connect_storage, &connect_options, password);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_UINT(\n        &connect_storage, &connect_options, session_expiry_interval_seconds);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_UINT(\n",
                    "rendered": {
                      "text": "    struct aws_mqtt5_packet_connect_view *stored_view = &connect_storage.storage_view;\n\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_CURSOR(&connect_storage, &connect_options, username);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_CURSOR(&connect_storage, &connect_options, password);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_UINT(\n        &connect_storage, &connect_options, session_expiry_interval_seconds);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_UINT(\n",
                      "markdown": "`    struct aws_mqtt5_packet_connect_view *stored_view = &connect_storage.storage_view;\n\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_CURSOR(&connect_storage, &connect_options, username);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_CURSOR(&connect_storage, &connect_options, password);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_UINT(\n        &connect_storage, &connect_options, session_expiry_interval_seconds);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULLABLE_UINT(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 23,
                  "endLine": 679,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 50,\n        .client_id = aws_byte_cursor_from_string(s_client_id),\n        .username = &s_username_cursor,\n        .password = &s_password_cursor,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &s_session_expiry_interval_seconds,\n        .request_response_information = &s_request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 50,\n        .client_id = aws_byte_cursor_from_string(s_client_id),\n        .username = &s_username_cursor,\n        .password = &s_password_cursor,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &s_session_expiry_interval_seconds,\n        .request_response_information = &s_request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 50,\n        .client_id = aws_byte_cursor_from_string(s_client_id),\n        .username = &s_username_cursor,\n        .password = &s_password_cursor,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &s_session_expiry_interval_seconds,\n        .request_response_information = &s_request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 9,
                  "endLine": 679,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 50,\n        .client_id = aws_byte_cursor_from_string(s_client_id),\n        .username = &s_username_cursor,\n        .password = &s_password_cursor,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &s_session_expiry_interval_seconds,\n        .request_response_information = &s_request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 50,\n        .client_id = aws_byte_cursor_from_string(s_client_id),\n        .username = &s_username_cursor,\n        .password = &s_password_cursor,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &s_session_expiry_interval_seconds,\n        .request_response_information = &s_request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 50,\n        .client_id = aws_byte_cursor_from_string(s_client_id),\n        .username = &s_username_cursor,\n        .password = &s_password_cursor,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &s_session_expiry_interval_seconds,\n        .request_response_information = &s_request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 28,
                  "endLine": 643,
                  "endColumn": 36,
                  "snippet": {
                    "text": "static const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n\nstatic const uint32_t s_session_expiry_interval_seconds = 60;\n",
                    "rendered": {
                      "text": "static const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n\nstatic const uint32_t s_session_expiry_interval_seconds = 60;\n",
                      "markdown": "`static const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n\nstatic const uint32_t s_session_expiry_interval_seconds = 60;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 24,
                  "endLine": 642,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n\n",
                    "rendered": {
                      "text": "\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n\n",
                      "markdown": "`\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 38,
                  "endLine": 641,
                  "endColumn": 46,
                  "snippet": {
                    "text": "};\n\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n",
                    "rendered": {
                      "text": "};\n\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n",
                      "markdown": "`};\n\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 20,
                  "endLine": 640,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    .len = AWS_ARRAY_SIZE(s_username) - 1,\n};\n\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n",
                    "rendered": {
                      "text": "    .len = AWS_ARRAY_SIZE(s_username) - 1,\n};\n\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n",
                      "markdown": "`    .len = AWS_ARRAY_SIZE(s_username) - 1,\n};\n\nstatic const char s_password[] = \"CantBeGuessed\";\nstatic const struct aws_byte_cursor s_password_cursor = {\n    .ptr = (uint8_t *)s_password,\n    .len = AWS_ARRAY_SIZE(s_password) - 1,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 606,
                  "startColumn": 64,
                  "endLine": 606,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_mqtt5_packet_connect_view_validate(stored_view));\n\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, username);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, password);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, session_expiry_interval_seconds);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, request_response_information);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, request_problem_information);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_mqtt5_packet_connect_view_validate(stored_view));\n\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, username);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, password);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, session_expiry_interval_seconds);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, request_response_information);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, request_problem_information);\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_mqtt5_packet_connect_view_validate(stored_view));\n\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, username);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, password);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, session_expiry_interval_seconds);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, request_response_information);\n    AWS_VERIFY_VIEW_STORAGE_RELATIONSHIP_NULL(&connect_storage, request_problem_information);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_operation_and_storage_tests.c"
                },
                "region": {
                  "startLine": 2375,
                  "startColumn": 7,
                  "endLine": 2375,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        struct aws_mqtt5_operation *queued_operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n\n        ASSERT_PTR_EQUALS(operation, queued_operation);\n        node = aws_linked_list_next(node);\n    }\n    ASSERT_TRUE(node == aws_linked_list_end(operation_list));\n\n",
                    "rendered": {
                      "text": "        struct aws_mqtt5_operation *queued_operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n\n        ASSERT_PTR_EQUALS(operation, queued_operation);\n        node = aws_linked_list_next(node);\n    }\n    ASSERT_TRUE(node == aws_linked_list_end(operation_list));\n\n",
                      "markdown": "`        struct aws_mqtt5_operation *queued_operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n\n        ASSERT_PTR_EQUALS(operation, queued_operation);\n        node = aws_linked_list_next(node);\n    }\n    ASSERT_TRUE(node == aws_linked_list_end(operation_list));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/bin/elastipubsub5/main.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 49,
                  "endLine": 68,
                  "endColumn": 55,
                  "snippet": {
                    "text": " \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke",
                    "rendered": {
                      "text": " \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke",
                      "markdown": "` \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client_channel_handler.c"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 75,
                  "endLine": 944,
                  "endColumn": 79,
                  "snippet": {
                    "text": "                mqtt_connection_unlock_synced_data(connection);\n                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_CLIENT,\n                    \"id=%p: Queue is full. No more packet IDs are available at this time.\",\n                    (void *)connection);\n                aws_raise_error(AWS_ERROR_MQTT_QUEUE_FULL);\n                return 0;\n",
                    "rendered": {
                      "text": "                mqtt_connection_unlock_synced_data(connection);\n                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_CLIENT,\n                    \"id=%p: Queue is full. No more packet IDs are available at this time.\",\n                    (void *)connection);\n                aws_raise_error(AWS_ERROR_MQTT_QUEUE_FULL);\n                return 0;\n",
                      "markdown": "`                mqtt_connection_unlock_synced_data(connection);\n                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_CLIENT,\n                    \"id=%p: Queue is full. No more packet IDs are available at this time.\",\n                    (void *)connection);\n                aws_raise_error(AWS_ERROR_MQTT_QUEUE_FULL);\n                return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client_channel_handler.c"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 43,
                  "endLine": 106,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n                connection->next_ping_time,\n                now);\n",
                    "rendered": {
                      "text": "                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n                connection->next_ping_time,\n                now);\n",
                      "markdown": "`                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n                connection->next_ping_time,\n                now);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client_channel_handler.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 46,
                  "endLine": 81,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    AWS_LOGF_TRACE(\n        AWS_LS_MQTT_CLIENT,\n        \"id=%p: The next PING task will be run at timestamp %\" PRIu64,\n        (void *)connection,\n        connection->next_ping_time);\n\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_TRACE(\n        AWS_LS_MQTT_CLIENT,\n        \"id=%p: The next PING task will be run at timestamp %\" PRIu64,\n        (void *)connection,\n        connection->next_ping_time);\n\n",
                      "markdown": "`\n    AWS_LOGF_TRACE(\n        AWS_LS_MQTT_CLIENT,\n        \"id=%p: The next PING task will be run at timestamp %\" PRIu64,\n        (void *)connection,\n        connection->next_ping_time);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client_channel_handler.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 46,
                  "endLine": 105,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            AWS_LOGF_TRACE(\n                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n                connection->next_ping_time,\n",
                    "rendered": {
                      "text": "            AWS_LOGF_TRACE(\n                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n                connection->next_ping_time,\n",
                      "markdown": "`            AWS_LOGF_TRACE(\n                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n                connection->next_ping_time,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client_channel_handler.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 67,
                  "endLine": 104,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n            AWS_LOGF_TRACE(\n                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n",
                    "rendered": {
                      "text": "\n            AWS_LOGF_TRACE(\n                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n",
                      "markdown": "`\n            AWS_LOGF_TRACE(\n                AWS_LS_MQTT_CLIENT,\n                \"id=%p: Skipped sending PING because scheduled ping time %\" PRIu64\n                \" has not elapsed yet. Current time is %\" PRIu64\n                \". Rescheduling ping to run at the scheduled ping time...\",\n                (void *)connection,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt.c"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 64,
                  "endLine": 118,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                \"[MQTT-3.1.2-2] Protocol level specified is unsupported.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT_INVALID_CREDENTIALS,\n                \"[MQTT-3.1.2-21] Connect packet may not include password when no username is present.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT_INVALID_QOS,\n                \"Both bits in a QoS field must not be set.\"),\n",
                    "rendered": {
                      "text": "                \"[MQTT-3.1.2-2] Protocol level specified is unsupported.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT_INVALID_CREDENTIALS,\n                \"[MQTT-3.1.2-21] Connect packet may not include password when no username is present.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT_INVALID_QOS,\n                \"Both bits in a QoS field must not be set.\"),\n",
                      "markdown": "`                \"[MQTT-3.1.2-2] Protocol level specified is unsupported.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT_INVALID_CREDENTIALS,\n                \"[MQTT-3.1.2-21] Connect packet may not include password when no username is present.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT_INVALID_QOS,\n                \"Both bits in a QoS field must not be set.\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt.c"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 66,
                  "endLine": 265,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                \"Streaming operation activation failed because the operation had already been activated.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                 AWS_ERROR_MQTT_REQUEST_RESPONSE_MODELED_SERVICE_ERROR,\n                 \"Request-response operation failed with a modeled service error.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                 AWS_ERROR_MQTT_REQUEST_RESPONSE_PAYLOAD_PARSE_ERROR,\n                 \"Request-response operation failed due to an inability to parse the payload.\"),\n",
                    "rendered": {
                      "text": "                \"Streaming operation activation failed because the operation had already been activated.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                 AWS_ERROR_MQTT_REQUEST_RESPONSE_MODELED_SERVICE_ERROR,\n                 \"Request-response operation failed with a modeled service error.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                 AWS_ERROR_MQTT_REQUEST_RESPONSE_PAYLOAD_PARSE_ERROR,\n                 \"Request-response operation failed due to an inability to parse the payload.\"),\n",
                      "markdown": "`                \"Streaming operation activation failed because the operation had already been activated.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                 AWS_ERROR_MQTT_REQUEST_RESPONSE_MODELED_SERVICE_ERROR,\n                 \"Request-response operation failed with a modeled service error.\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                 AWS_ERROR_MQTT_REQUEST_RESPONSE_PAYLOAD_PARSE_ERROR,\n                 \"Request-response operation failed due to an inability to parse the payload.\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt.c"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 68,
                  "endLine": 199,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                \"Remote endpoint did not respond to a CONNECT request before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_PING_RESPONSE_TIMEOUT,\n                \"Remote endpoint did not respond to a PINGREQ before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_USER_REQUESTED_STOP,\n                \"Mqtt5 client connection interrupted by user request.\"),\n",
                    "rendered": {
                      "text": "                \"Remote endpoint did not respond to a CONNECT request before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_PING_RESPONSE_TIMEOUT,\n                \"Remote endpoint did not respond to a PINGREQ before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_USER_REQUESTED_STOP,\n                \"Mqtt5 client connection interrupted by user request.\"),\n",
                      "markdown": "`                \"Remote endpoint did not respond to a CONNECT request before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_PING_RESPONSE_TIMEOUT,\n                \"Remote endpoint did not respond to a PINGREQ before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_USER_REQUESTED_STOP,\n                \"Mqtt5 client connection interrupted by user request.\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/mqtt.c"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 76,
                  "endLine": 196,
                  "endColumn": 85,
                  "snippet": {
                    "text": "                \"Remote endpoint rejected the CONNECT attempt by returning an unsuccessful CONNACK\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_CONNACK_TIMEOUT,\n                \"Remote endpoint did not respond to a CONNECT request before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_PING_RESPONSE_TIMEOUT,\n                \"Remote endpoint did not respond to a PINGREQ before timeout exceeded\"),\n",
                    "rendered": {
                      "text": "                \"Remote endpoint rejected the CONNECT attempt by returning an unsuccessful CONNACK\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_CONNACK_TIMEOUT,\n                \"Remote endpoint did not respond to a CONNECT request before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_PING_RESPONSE_TIMEOUT,\n                \"Remote endpoint did not respond to a PINGREQ before timeout exceeded\"),\n",
                      "markdown": "`                \"Remote endpoint rejected the CONNECT attempt by returning an unsuccessful CONNACK\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_CONNACK_TIMEOUT,\n                \"Remote endpoint did not respond to a CONNECT request before timeout exceeded\"),\n            AWS_DEFINE_ERROR_INFO_MQTT(\n                AWS_ERROR_MQTT5_PING_RESPONSE_TIMEOUT,\n                \"Remote endpoint did not respond to a PINGREQ before timeout exceeded\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/client.h"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 34,
                  "endLine": 396,
                  "endColumn": 42,
                  "snippet": {
                    "text": "int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n\n/**\n * Use MQTT over websockets when connecting.\n",
                    "rendered": {
                      "text": "int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n\n/**\n * Use MQTT over websockets when connecting.\n",
                      "markdown": "`int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n\n/**\n * Use MQTT over websockets when connecting.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/client.h"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 43,
                  "endLine": 390,
                  "endColumn": 51,
                  "snippet": {
                    "text": " *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n * \\param[in] password      [optional] The password to connect with\n */\nAWS_MQTT_API\nint aws_mqtt_client_connection_set_login(\n",
                    "rendered": {
                      "text": " *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n * \\param[in] password      [optional] The password to connect with\n */\nAWS_MQTT_API\nint aws_mqtt_client_connection_set_login(\n",
                      "markdown": "` *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n * \\param[in] password      [optional] The password to connect with\n */\nAWS_MQTT_API\nint aws_mqtt_client_connection_set_login(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/client.h"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 14,
                  "endLine": 390,
                  "endColumn": 22,
                  "snippet": {
                    "text": " *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n * \\param[in] password      [optional] The password to connect with\n */\nAWS_MQTT_API\nint aws_mqtt_client_connection_set_login(\n",
                    "rendered": {
                      "text": " *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n * \\param[in] password      [optional] The password to connect with\n */\nAWS_MQTT_API\nint aws_mqtt_client_connection_set_login(\n",
                      "markdown": "` *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n * \\param[in] password      [optional] The password to connect with\n */\nAWS_MQTT_API\nint aws_mqtt_client_connection_set_login(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/client.h"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 28,
                  "endLine": 386,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    const struct aws_byte_cursor *payload);\n\n/**\n * Sets the username and/or password to send with the CONNECT packet.\n *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n",
                    "rendered": {
                      "text": "    const struct aws_byte_cursor *payload);\n\n/**\n * Sets the username and/or password to send with the CONNECT packet.\n *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n",
                      "markdown": "`    const struct aws_byte_cursor *payload);\n\n/**\n * Sets the username and/or password to send with the CONNECT packet.\n *\n * \\param[in] connection    The connection object\n * \\param[in] username      The username to connect with\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/closed-issue-message.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 27,
                  "endLine": 17,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                    "rendered": {
                      "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                      "markdown": "`                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/codecov.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 9,
                  "endLine": 24,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --coverage\n",
                    "rendered": {
                      "text": "      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --coverage\n",
                      "markdown": "`      - name: Build ${{ env.PACKAGE_NAME }} + consumers\n        run: |\n          python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n          chmod a+x builder\n          ./builder build -p ${{ env.PACKAGE_NAME }} --compiler=gcc-9 --coverage\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_callbacks.c"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 7,
                  "endLine": 141,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt5_callback_set *callback_set = &entry->callbacks;\n\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt5_callback_set *callback_set = &entry->callbacks;\n\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt5_callback_set *callback_set = &entry->callbacks;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_callbacks.c"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 7,
                  "endLine": 114,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt5_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->listener_publish_received_handler != NULL) {\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt5_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->listener_publish_received_handler != NULL) {\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        struct aws_mqtt5_callback_set *callback_set = &entry->callbacks;\n        if (callback_set->listener_publish_received_handler != NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_callbacks.c"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 7,
                  "endLine": 84,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        if (entry->id == callback_set_id) {\n            aws_linked_list_remove(&entry->node);\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        if (entry->id == callback_set_id) {\n            aws_linked_list_remove(&entry->node);\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        if (entry->id == callback_set_id) {\n            aws_linked_list_remove(&entry->node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_callbacks.c"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 7,
                  "endLine": 38,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        aws_linked_list_remove(&entry->node);\n        aws_mem_release(entry->allocator, entry);\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        aws_linked_list_remove(&entry->node);\n        aws_mem_release(entry->allocator, entry);\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_begin(&manager->callback_set_entries);\n    while (node != aws_linked_list_end(&manager->callback_set_entries)) {\n        struct aws_mqtt5_callback_set_entry *entry = AWS_CONTAINER_OF(node, struct aws_mqtt5_callback_set_entry, node);\n        node = aws_linked_list_next(node);\n\n        aws_linked_list_remove(&entry->node);\n        aws_mem_release(entry->allocator, entry);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_types.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 37,
                  "endLine": 70,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        case AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID:\n            return s_client_identifier_not_valid;\n        case AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD:\n            return s_bad_username_or_password;\n        case AWS_MQTT5_CRC_NOT_AUTHORIZED:\n            return s_not_authorized;\n        case AWS_MQTT5_CRC_SERVER_UNAVAILABLE:\n",
                    "rendered": {
                      "text": "        case AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID:\n            return s_client_identifier_not_valid;\n        case AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD:\n            return s_bad_username_or_password;\n        case AWS_MQTT5_CRC_NOT_AUTHORIZED:\n            return s_not_authorized;\n        case AWS_MQTT5_CRC_SERVER_UNAVAILABLE:\n",
                      "markdown": "`        case AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID:\n            return s_client_identifier_not_valid;\n        case AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD:\n            return s_bad_username_or_password;\n        case AWS_MQTT5_CRC_NOT_AUTHORIZED:\n            return s_not_authorized;\n        case AWS_MQTT5_CRC_SERVER_UNAVAILABLE:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_types.c"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 43,
                  "endLine": 69,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            return s_unsupported_protocol_version;\n        case AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID:\n            return s_client_identifier_not_valid;\n        case AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD:\n            return s_bad_username_or_password;\n        case AWS_MQTT5_CRC_NOT_AUTHORIZED:\n            return s_not_authorized;\n",
                    "rendered": {
                      "text": "            return s_unsupported_protocol_version;\n        case AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID:\n            return s_client_identifier_not_valid;\n        case AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD:\n            return s_bad_username_or_password;\n        case AWS_MQTT5_CRC_NOT_AUTHORIZED:\n            return s_not_authorized;\n",
                      "markdown": "`            return s_unsupported_protocol_version;\n        case AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID:\n            return s_client_identifier_not_valid;\n        case AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD:\n            return s_bad_username_or_password;\n        case AWS_MQTT5_CRC_NOT_AUTHORIZED:\n            return s_not_authorized;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_types.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 65,
                  "endLine": 41,
                  "endColumn": 73,
                  "snippet": {
                    "text": "static const char *s_success = \"Success\";\nstatic const char *s_unsupported_protocol_version = \"Unsupported Protocol Version\";\nstatic const char *s_client_identifier_not_valid = \"Client Identifier Not Valid\";\nstatic const char *s_bad_username_or_password = \"Bad Username Or Password\";\nstatic const char *s_server_unavailable = \"Server Unavailable\";\nstatic const char *s_banned = \"Banned\";\nstatic const char *s_bad_authentication_method = \"Bad Authentication Method\";\n",
                    "rendered": {
                      "text": "static const char *s_success = \"Success\";\nstatic const char *s_unsupported_protocol_version = \"Unsupported Protocol Version\";\nstatic const char *s_client_identifier_not_valid = \"Client Identifier Not Valid\";\nstatic const char *s_bad_username_or_password = \"Bad Username Or Password\";\nstatic const char *s_server_unavailable = \"Server Unavailable\";\nstatic const char *s_banned = \"Banned\";\nstatic const char *s_bad_authentication_method = \"Bad Authentication Method\";\n",
                      "markdown": "`static const char *s_success = \"Success\";\nstatic const char *s_unsupported_protocol_version = \"Unsupported Protocol Version\";\nstatic const char *s_client_identifier_not_valid = \"Client Identifier Not Valid\";\nstatic const char *s_bad_username_or_password = \"Bad Username Or Password\";\nstatic const char *s_server_unavailable = \"Server Unavailable\";\nstatic const char *s_banned = \"Banned\";\nstatic const char *s_bad_authentication_method = \"Bad Authentication Method\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_types.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 37,
                  "endLine": 41,
                  "endColumn": 45,
                  "snippet": {
                    "text": "static const char *s_success = \"Success\";\nstatic const char *s_unsupported_protocol_version = \"Unsupported Protocol Version\";\nstatic const char *s_client_identifier_not_valid = \"Client Identifier Not Valid\";\nstatic const char *s_bad_username_or_password = \"Bad Username Or Password\";\nstatic const char *s_server_unavailable = \"Server Unavailable\";\nstatic const char *s_banned = \"Banned\";\nstatic const char *s_bad_authentication_method = \"Bad Authentication Method\";\n",
                    "rendered": {
                      "text": "static const char *s_success = \"Success\";\nstatic const char *s_unsupported_protocol_version = \"Unsupported Protocol Version\";\nstatic const char *s_client_identifier_not_valid = \"Client Identifier Not Valid\";\nstatic const char *s_bad_username_or_password = \"Bad Username Or Password\";\nstatic const char *s_server_unavailable = \"Server Unavailable\";\nstatic const char *s_banned = \"Banned\";\nstatic const char *s_bad_authentication_method = \"Bad Authentication Method\";\n",
                      "markdown": "`static const char *s_success = \"Success\";\nstatic const char *s_unsupported_protocol_version = \"Unsupported Protocol Version\";\nstatic const char *s_client_identifier_not_valid = \"Client Identifier Not Valid\";\nstatic const char *s_bad_username_or_password = \"Bad Username Or Password\";\nstatic const char *s_server_unavailable = \"Server Unavailable\";\nstatic const char *s_banned = \"Banned\";\nstatic const char *s_bad_authentication_method = \"Bad Authentication Method\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_types.c"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 38,
                  "endLine": 274,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        case AWS_MQTT5_RHT_SEND_ON_SUBSCRIBE_IF_NEW:\n            return \"Send retained on subscribe if not already subscribed\";\n        case AWS_MQTT5_RHT_DONT_SEND:\n            return \"Dont send retained at all\";\n    }\n\n    return \"Unknown Retain Handling Type\";\n",
                    "rendered": {
                      "text": "        case AWS_MQTT5_RHT_SEND_ON_SUBSCRIBE_IF_NEW:\n            return \"Send retained on subscribe if not already subscribed\";\n        case AWS_MQTT5_RHT_DONT_SEND:\n            return \"Dont send retained at all\";\n    }\n\n    return \"Unknown Retain Handling Type\";\n",
                      "markdown": "`        case AWS_MQTT5_RHT_SEND_ON_SUBSCRIBE_IF_NEW:\n            return \"Send retained on subscribe if not already subscribed\";\n        case AWS_MQTT5_RHT_DONT_SEND:\n            return \"Dont send retained at all\";\n    }\n\n    return \"Unknown Retain Handling Type\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 65,
                  "endLine": 549,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n    /*\n     * This catches both the case when there's an existing service schedule and we either want to not\n     * perform it (next_service_time == 0) or need to run service at a different time than the current scheduled time.\n     */\n    if (next_service_time != client->next_service_task_run_time && client->next_service_task_run_time > 0) {\n        aws_event_loop_cancel_task(client->loop, &client->service_task);\n",
                    "rendered": {
                      "text": "\n    /*\n     * This catches both the case when there's an existing service schedule and we either want to not\n     * perform it (next_service_time == 0) or need to run service at a different time than the current scheduled time.\n     */\n    if (next_service_time != client->next_service_task_run_time && client->next_service_task_run_time > 0) {\n        aws_event_loop_cancel_task(client->loop, &client->service_task);\n",
                      "markdown": "`\n    /*\n     * This catches both the case when there's an existing service schedule and we either want to not\n     * perform it (next_service_time == 0) or need to run service at a different time than the current scheduled time.\n     */\n    if (next_service_time != client->next_service_task_run_time && client->next_service_task_run_time > 0) {\n        aws_event_loop_cancel_task(client->loop, &client->service_task);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 2664,
                  "startColumn": 7,
                  "endLine": 2664,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(operation_list);\n    while (node != aws_linked_list_end(operation_list)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        aws_mqtt5_client_statistics_change_operation_statistic_state(client, operation, new_state_flags);\n    }\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(operation_list);\n    while (node != aws_linked_list_end(operation_list)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        aws_mqtt5_client_statistics_change_operation_statistic_state(client, operation, new_state_flags);\n    }\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_begin(operation_list);\n    while (node != aws_linked_list_end(operation_list)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        aws_mqtt5_client_statistics_change_operation_statistic_state(client, operation, new_state_flags);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 1504,
                  "startColumn": 29,
                  "endLine": 1504,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service CLEAN_DISCONNECT operation queue with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                    "rendered": {
                      "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service CLEAN_DISCONNECT operation queue with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                      "markdown": "`        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service CLEAN_DISCONNECT operation queue with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 1489,
                  "startColumn": 29,
                  "endLine": 1489,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service CONNECTED operation queue with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                    "rendered": {
                      "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service CONNECTED operation queue with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                      "markdown": "`        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service CONNECTED operation queue with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 1415,
                  "startColumn": 29,
                  "endLine": 1415,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service outgoing CONNECT packet to channel with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                    "rendered": {
                      "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service outgoing CONNECT packet to channel with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                      "markdown": "`        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_CLIENT,\n            \"id=%p: failed to service outgoing CONNECT packet to channel with error %d(%s)\",\n            (void *)client,\n            error_code,\n            aws_error_debug_str(error_code));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 1220,
                  "startColumn": 40,
                  "endLine": 1220,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT,\n        \"id=%p: reconnection delay reset time set to %\" PRIu64,\n        (void *)client,\n        client->next_reconnect_delay_reset_time_ns);\n}\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT,\n        \"id=%p: reconnection delay reset time set to %\" PRIu64,\n        (void *)client,\n        client->next_reconnect_delay_reset_time_ns);\n}\n",
                      "markdown": "`\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT,\n        \"id=%p: reconnection delay reset time set to %\" PRIu64,\n        (void *)client,\n        client->next_reconnect_delay_reset_time_ns);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 1204,
                  "startColumn": 31,
                  "endLine": 1204,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT,\n        \"id=%p: setting CONNECT timeout to %\" PRIu64,\n        (void *)client,\n        client->next_mqtt_connect_packet_timeout_time);\n}\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT,\n        \"id=%p: setting CONNECT timeout to %\" PRIu64,\n        (void *)client,\n        client->next_mqtt_connect_packet_timeout_time);\n}\n",
                      "markdown": "`\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT,\n        \"id=%p: setting CONNECT timeout to %\" PRIu64,\n        (void *)client,\n        client->next_mqtt_connect_packet_timeout_time);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 1079,
                  "startColumn": 63,
                  "endLine": 1079,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    }\n\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT, \"id=%p: next PINGREQ scheduled for time %\" PRIu64, (void *)client, client->next_ping_time);\n}\n\nstatic void s_aws_mqtt5_on_socket_write_completion_mqtt_connect(struct aws_mqtt5_client *client, int error_code) {\n",
                    "rendered": {
                      "text": "    }\n\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT, \"id=%p: next PINGREQ scheduled for time %\" PRIu64, (void *)client, client->next_ping_time);\n}\n\nstatic void s_aws_mqtt5_on_socket_write_completion_mqtt_connect(struct aws_mqtt5_client *client, int error_code) {\n",
                      "markdown": "`    }\n\n    AWS_LOGF_DEBUG(\n        AWS_LS_MQTT5_CLIENT, \"id=%p: next PINGREQ scheduled for time %\" PRIu64, (void *)client, client->next_ping_time);\n}\n\nstatic void s_aws_mqtt5_on_socket_write_completion_mqtt_connect(struct aws_mqtt5_client *client, int error_code) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 67,
                  "endLine": 563,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        aws_event_loop_schedule_task_future(client->loop, &client->service_task, next_service_time);\n\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT5_CLIENT, \"id=%p: scheduled service task for time %\" PRIu64, (void *)client, next_service_time);\n    }\n\n    client->next_service_task_run_time = next_service_time;\n",
                    "rendered": {
                      "text": "        aws_event_loop_schedule_task_future(client->loop, &client->service_task, next_service_time);\n\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT5_CLIENT, \"id=%p: scheduled service task for time %\" PRIu64, (void *)client, next_service_time);\n    }\n\n    client->next_service_task_run_time = next_service_time;\n",
                      "markdown": "`        aws_event_loop_schedule_task_future(client->loop, &client->service_task, next_service_time);\n\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT5_CLIENT, \"id=%p: scheduled service task for time %\" PRIu64, (void *)client, next_service_time);\n    }\n\n    client->next_service_task_run_time = next_service_time;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 50,
                  "endLine": 563,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        aws_event_loop_schedule_task_future(client->loop, &client->service_task, next_service_time);\n\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT5_CLIENT, \"id=%p: scheduled service task for time %\" PRIu64, (void *)client, next_service_time);\n    }\n\n    client->next_service_task_run_time = next_service_time;\n",
                    "rendered": {
                      "text": "        aws_event_loop_schedule_task_future(client->loop, &client->service_task, next_service_time);\n\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT5_CLIENT, \"id=%p: scheduled service task for time %\" PRIu64, (void *)client, next_service_time);\n    }\n\n    client->next_service_task_run_time = next_service_time;\n",
                      "markdown": "`        aws_event_loop_schedule_task_future(client->loop, &client->service_task, next_service_time);\n\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT5_CLIENT, \"id=%p: scheduled service task for time %\" PRIu64, (void *)client, next_service_time);\n    }\n\n    client->next_service_task_run_time = next_service_time;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 83,
                  "endLine": 555,
                  "endColumn": 92,
                  "snippet": {
                    "text": "        aws_event_loop_cancel_task(client->loop, &client->service_task);\n        client->next_service_task_run_time = 0;\n\n        AWS_LOGF_TRACE(AWS_LS_MQTT5_CLIENT, \"id=%p: cancelling previously scheduled service task\", (void *)client);\n    }\n\n    if (next_service_time > 0 &&\n",
                    "rendered": {
                      "text": "        aws_event_loop_cancel_task(client->loop, &client->service_task);\n        client->next_service_task_run_time = 0;\n\n        AWS_LOGF_TRACE(AWS_LS_MQTT5_CLIENT, \"id=%p: cancelling previously scheduled service task\", (void *)client);\n    }\n\n    if (next_service_time > 0 &&\n",
                      "markdown": "`        aws_event_loop_cancel_task(client->loop, &client->service_task);\n        client->next_service_task_run_time = 0;\n\n        AWS_LOGF_TRACE(AWS_LS_MQTT5_CLIENT, \"id=%p: cancelling previously scheduled service task\", (void *)client);\n    }\n\n    if (next_service_time > 0 &&\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 44,
                  "endLine": 238,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n        if (elem == NULL || elem->value == NULL) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_CLIENT, \"id=%p: timeout for unknown operation with id %d\", (void *)client, (int)packet_id);\n            return;\n        }\n\n",
                    "rendered": {
                      "text": "\n        if (elem == NULL || elem->value == NULL) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_CLIENT, \"id=%p: timeout for unknown operation with id %d\", (void *)client, (int)packet_id);\n            return;\n        }\n\n",
                      "markdown": "`\n        if (elem == NULL || elem->value == NULL) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_CLIENT, \"id=%p: timeout for unknown operation with id %d\", (void *)client, (int)packet_id);\n            return;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 7,
                  "endLine": 197,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(operation_list)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n\n        node = aws_linked_list_next(node);\n\n        s_complete_operation(client, operation, error_code, AWS_MQTT5_PT_NONE, NULL);\n    }\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(operation_list)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n\n        node = aws_linked_list_next(node);\n\n        s_complete_operation(client, operation, error_code, AWS_MQTT5_PT_NONE, NULL);\n    }\n",
                      "markdown": "`    while (node != aws_linked_list_end(operation_list)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n\n        node = aws_linked_list_next(node);\n\n        s_complete_operation(client, operation, error_code, AWS_MQTT5_PT_NONE, NULL);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 7,
                  "endLine": 150,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(operations);\n    while (node != aws_linked_list_end(operations)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        applicator_fn(operation, applicator_context);\n    }\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(operations);\n    while (node != aws_linked_list_end(operations)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        applicator_fn(operation, applicator_context);\n    }\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_begin(operations);\n    while (node != aws_linked_list_end(operations)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        applicator_fn(operation, applicator_context);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_client.c"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 7,
                  "endLine": 132,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(source_operations);\n    while (node != aws_linked_list_end(source_operations)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        if (filter_fn(operation, filter_context)) {\n            aws_linked_list_remove(&operation->node);\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(source_operations);\n    while (node != aws_linked_list_end(source_operations)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        if (filter_fn(operation, filter_context)) {\n            aws_linked_list_remove(&operation->node);\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_begin(source_operations);\n    while (node != aws_linked_list_end(source_operations)) {\n        struct aws_mqtt5_operation *operation = AWS_CONTAINER_OF(node, struct aws_mqtt5_operation, node);\n        node = aws_linked_list_next(node);\n\n        if (filter_fn(operation, filter_context)) {\n            aws_linked_list_remove(&operation->node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1686,
                  "startColumn": 77,
                  "endLine": 1686,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    struct aws_mqtt_client_connection_5_impl *adapter = impl;\n\n    struct aws_mqtt_set_login_task *task =\n        s_aws_mqtt_set_login_task_new(adapter->allocator, adapter, username, password);\n    if (task == NULL) {\n        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n",
                    "rendered": {
                      "text": "    struct aws_mqtt_client_connection_5_impl *adapter = impl;\n\n    struct aws_mqtt_set_login_task *task =\n        s_aws_mqtt_set_login_task_new(adapter->allocator, adapter, username, password);\n    if (task == NULL) {\n        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n",
                      "markdown": "`    struct aws_mqtt_client_connection_5_impl *adapter = impl;\n\n    struct aws_mqtt_set_login_task *task =\n        s_aws_mqtt_set_login_task_new(adapter->allocator, adapter, username, password);\n    if (task == NULL) {\n        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1681,
                  "startColumn": 34,
                  "endLine": 1681,
                  "endColumn": 42,
                  "snippet": {
                    "text": "static int s_aws_mqtt_client_connection_5_set_login(\n    void *impl,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_client_connection_5_impl *adapter = impl;\n\n",
                    "rendered": {
                      "text": "static int s_aws_mqtt_client_connection_5_set_login(\n    void *impl,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_client_connection_5_impl *adapter = impl;\n\n",
                      "markdown": "`static int s_aws_mqtt_client_connection_5_set_login(\n    void *impl,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_client_connection_5_impl *adapter = impl;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1672,
                  "startColumn": 83,
                  "endLine": 1672,
                  "endColumn": 91,
                  "snippet": {
                    "text": "    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n    return set_task;\n",
                    "rendered": {
                      "text": "    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n    return set_task;\n",
                      "markdown": "`    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n    return set_task;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1672,
                  "startColumn": 54,
                  "endLine": 1672,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n    return set_task;\n",
                    "rendered": {
                      "text": "    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n    return set_task;\n",
                      "markdown": "`    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n    return set_task;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1671,
                  "startColumn": 8,
                  "endLine": 1671,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        aws_byte_buf_init_copy_from_cursor(&set_task->username_buffer, allocator, *username);\n    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n",
                    "rendered": {
                      "text": "        aws_byte_buf_init_copy_from_cursor(&set_task->username_buffer, allocator, *username);\n    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n",
                      "markdown": "`        aws_byte_buf_init_copy_from_cursor(&set_task->username_buffer, allocator, *username);\n    }\n\n    if (password != NULL) {\n        aws_byte_buf_init_copy_from_cursor(&set_task->password_buffer, allocator, *password);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1659,
                  "startColumn": 34,
                  "endLine": 1659,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    struct aws_allocator *allocator,\n    struct aws_mqtt_client_connection_5_impl *adapter,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_set_login_task *set_task = aws_mem_calloc(allocator, 1, sizeof(struct aws_mqtt_set_login_task));\n\n",
                    "rendered": {
                      "text": "    struct aws_allocator *allocator,\n    struct aws_mqtt_client_connection_5_impl *adapter,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_set_login_task *set_task = aws_mem_calloc(allocator, 1, sizeof(struct aws_mqtt_set_login_task));\n\n",
                      "markdown": "`    struct aws_allocator *allocator,\n    struct aws_mqtt_client_connection_5_impl *adapter,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    struct aws_mqtt_set_login_task *set_task = aws_mem_calloc(allocator, 1, sizeof(struct aws_mqtt_set_login_task));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1635,
                  "startColumn": 69,
                  "endLine": 1635,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    if (aws_mqtt5_packet_connect_view_validate(&new_connect_view)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: mqtt3-to-5-adapter - invalid CONNECT username or password\",\n            (void *)adapter);\n        goto done;\n    }\n",
                    "rendered": {
                      "text": "    if (aws_mqtt5_packet_connect_view_validate(&new_connect_view)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: mqtt3-to-5-adapter - invalid CONNECT username or password\",\n            (void *)adapter);\n        goto done;\n    }\n",
                      "markdown": "`    if (aws_mqtt5_packet_connect_view_validate(&new_connect_view)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: mqtt3-to-5-adapter - invalid CONNECT username or password\",\n            (void *)adapter);\n        goto done;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1629,
                  "startColumn": 25,
                  "endLine": 1629,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n\n    if (aws_mqtt5_packet_connect_view_validate(&new_connect_view)) {\n",
                    "rendered": {
                      "text": "    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n\n    if (aws_mqtt5_packet_connect_view_validate(&new_connect_view)) {\n",
                      "markdown": "`    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n\n    if (aws_mqtt5_packet_connect_view_validate(&new_connect_view)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1627,
                  "startColumn": 37,
                  "endLine": 1627,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n",
                    "rendered": {
                      "text": "    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n",
                      "markdown": "`    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1627,
                  "startColumn": 25,
                  "endLine": 1627,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n",
                    "rendered": {
                      "text": "    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n",
                      "markdown": "`    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1626,
                  "startColumn": 18,
                  "endLine": 1626,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        new_connect_view.username = NULL;\n    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n",
                    "rendered": {
                      "text": "        new_connect_view.username = NULL;\n    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n",
                      "markdown": "`        new_connect_view.username = NULL;\n    }\n\n    if (set_task->password_buffer.len > 0) {\n        new_connect_view.password = &password_cursor;\n    } else {\n        new_connect_view.password = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1609,
                  "startColumn": 81,
                  "endLine": 1609,
                  "endColumn": 89,
                  "snippet": {
                    "text": "    }\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_buf(&set_task->username_buffer);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_buf(&set_task->password_buffer);\n\n    /* we're in the mqtt5 client's event loop; it's safe to access internal state */\n    struct aws_mqtt5_packet_connect_storage *old_connect = adapter->client->config->connect;\n",
                    "rendered": {
                      "text": "    }\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_buf(&set_task->username_buffer);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_buf(&set_task->password_buffer);\n\n    /* we're in the mqtt5 client's event loop; it's safe to access internal state */\n    struct aws_mqtt5_packet_connect_storage *old_connect = adapter->client->config->connect;\n",
                      "markdown": "`    }\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_buf(&set_task->username_buffer);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_buf(&set_task->password_buffer);\n\n    /* we're in the mqtt5 client's event loop; it's safe to access internal state */\n    struct aws_mqtt5_packet_connect_storage *old_connect = adapter->client->config->connect;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1609,
                  "startColumn": 27,
                  "endLine": 1609,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    }\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_buf(&set_task->username_buffer);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_buf(&set_task->password_buffer);\n\n    /* we're in the mqtt5 client's event loop; it's safe to access internal state */\n    struct aws_mqtt5_packet_connect_storage *old_connect = adapter->client->config->connect;\n",
                    "rendered": {
                      "text": "    }\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_buf(&set_task->username_buffer);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_buf(&set_task->password_buffer);\n\n    /* we're in the mqtt5 client's event loop; it's safe to access internal state */\n    struct aws_mqtt5_packet_connect_storage *old_connect = adapter->client->config->connect;\n",
                      "markdown": "`    }\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_buf(&set_task->username_buffer);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_buf(&set_task->password_buffer);\n\n    /* we're in the mqtt5 client's event loop; it's safe to access internal state */\n    struct aws_mqtt5_packet_connect_storage *old_connect = adapter->client->config->connect;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1594,
                  "startColumn": 40,
                  "endLine": 1594,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    }\n\n    aws_byte_buf_clean_up_secure(&task->username_buffer);\n    aws_byte_buf_clean_up_secure(&task->password_buffer);\n\n    aws_mem_release(task->allocator, task);\n}\n",
                    "rendered": {
                      "text": "    }\n\n    aws_byte_buf_clean_up_secure(&task->username_buffer);\n    aws_byte_buf_clean_up_secure(&task->password_buffer);\n\n    aws_mem_release(task->allocator, task);\n}\n",
                      "markdown": "`    }\n\n    aws_byte_buf_clean_up_secure(&task->username_buffer);\n    aws_byte_buf_clean_up_secure(&task->password_buffer);\n\n    aws_mem_release(task->allocator, task);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1585,
                  "startColumn": 24,
                  "endLine": 1585,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    struct aws_mqtt_client_connection_5_impl *adapter;\n\n    struct aws_byte_buf username_buffer;\n    struct aws_byte_buf password_buffer;\n};\n\nstatic void s_aws_mqtt_set_login_task_destroy(struct aws_mqtt_set_login_task *task) {\n",
                    "rendered": {
                      "text": "    struct aws_mqtt_client_connection_5_impl *adapter;\n\n    struct aws_byte_buf username_buffer;\n    struct aws_byte_buf password_buffer;\n};\n\nstatic void s_aws_mqtt_set_login_task_destroy(struct aws_mqtt_set_login_task *task) {\n",
                      "markdown": "`    struct aws_mqtt_client_connection_5_impl *adapter;\n\n    struct aws_byte_buf username_buffer;\n    struct aws_byte_buf password_buffer;\n};\n\nstatic void s_aws_mqtt_set_login_task_destroy(struct aws_mqtt_set_login_task *task) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 2712,
                  "startColumn": 8,
                  "endLine": 2712,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        &operation->base.submission_task,\n        s_adapter_unsubscribe_submission_fn,\n        operation,\n        \"Mqtt5ToMqtt3AdapterUnsubscribeSubmission\");\n\n    aws_event_loop_schedule_task_now(adapter->loop, &operation->base.submission_task);\n\n",
                    "rendered": {
                      "text": "        &operation->base.submission_task,\n        s_adapter_unsubscribe_submission_fn,\n        operation,\n        \"Mqtt5ToMqtt3AdapterUnsubscribeSubmission\");\n\n    aws_event_loop_schedule_task_now(adapter->loop, &operation->base.submission_task);\n\n",
                      "markdown": "`        &operation->base.submission_task,\n        s_adapter_unsubscribe_submission_fn,\n        operation,\n        \"Mqtt5ToMqtt3AdapterUnsubscribeSubmission\");\n\n    aws_event_loop_schedule_task_now(adapter->loop, &operation->base.submission_task);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 2506,
                  "startColumn": 8,
                  "endLine": 2506,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        &operation->base.submission_task,\n        s_adapter_subscribe_submission_fn,\n        operation,\n        \"Mqtt5ToMqtt3AdapterSubscribeMultipleSubmission\");\n\n    aws_event_loop_schedule_task_now(adapter->loop, &operation->base.submission_task);\n\n",
                    "rendered": {
                      "text": "        &operation->base.submission_task,\n        s_adapter_subscribe_submission_fn,\n        operation,\n        \"Mqtt5ToMqtt3AdapterSubscribeMultipleSubmission\");\n\n    aws_event_loop_schedule_task_now(adapter->loop, &operation->base.submission_task);\n\n",
                      "markdown": "`        &operation->base.submission_task,\n        s_adapter_subscribe_submission_fn,\n        operation,\n        \"Mqtt5ToMqtt3AdapterSubscribeMultipleSubmission\");\n\n    aws_event_loop_schedule_task_now(adapter->loop, &operation->base.submission_task);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1442,
                  "startColumn": 50,
                  "endLine": 1442,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: failed to create set reconnect timeout task, error code %d(%s)\",\n            (void *)adapter,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                    "rendered": {
                      "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: failed to create set reconnect timeout task, error code %d(%s)\",\n            (void *)adapter,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                      "markdown": "`        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: failed to create set reconnect timeout task, error code %d(%s)\",\n            (void *)adapter,\n            error_code,\n            aws_error_debug_str(error_code));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_to_mqtt3_adapter.c"
                },
                "region": {
                  "startLine": 1169,
                  "startColumn": 50,
                  "endLine": 1169,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: failed to create set reconnect timeout task, error code %d(%s)\",\n            (void *)adapter,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                    "rendered": {
                      "text": "        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: failed to create set reconnect timeout task, error code %d(%s)\",\n            (void *)adapter,\n            error_code,\n            aws_error_debug_str(error_code));\n",
                      "markdown": "`        int error_code = aws_last_error();\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_TO_MQTT3_ADAPTER,\n            \"id=%p: failed to create set reconnect timeout task, error code %d(%s)\",\n            (void *)adapter,\n            error_code,\n            aws_error_debug_str(error_code));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_utils.c"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 37,
                  "endLine": 354,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        case AWS_MQTT5_EVAFCO_NONE:\n            return \"No additional flow control or packet validation\";\n        case AWS_MQTT5_EVAFCO_AWS_IOT_CORE_DEFAULTS:\n            return \"AWS IoT Core flow control and packet validation\";\n        default:\n            return \"Unknown extended validation behavior\";\n    }\n",
                    "rendered": {
                      "text": "        case AWS_MQTT5_EVAFCO_NONE:\n            return \"No additional flow control or packet validation\";\n        case AWS_MQTT5_EVAFCO_AWS_IOT_CORE_DEFAULTS:\n            return \"AWS IoT Core flow control and packet validation\";\n        default:\n            return \"Unknown extended validation behavior\";\n    }\n",
                      "markdown": "`        case AWS_MQTT5_EVAFCO_NONE:\n            return \"No additional flow control or packet validation\";\n        case AWS_MQTT5_EVAFCO_AWS_IOT_CORE_DEFAULTS:\n            return \"AWS IoT Core flow control and packet validation\";\n        default:\n            return \"Unknown extended validation behavior\";\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_utils.c"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 38,
                  "endLine": 352,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    enum aws_mqtt5_extended_validation_and_flow_control_options extended_validation_behavior) {\n    switch (extended_validation_behavior) {\n        case AWS_MQTT5_EVAFCO_NONE:\n            return \"No additional flow control or packet validation\";\n        case AWS_MQTT5_EVAFCO_AWS_IOT_CORE_DEFAULTS:\n            return \"AWS IoT Core flow control and packet validation\";\n        default:\n",
                    "rendered": {
                      "text": "    enum aws_mqtt5_extended_validation_and_flow_control_options extended_validation_behavior) {\n    switch (extended_validation_behavior) {\n        case AWS_MQTT5_EVAFCO_NONE:\n            return \"No additional flow control or packet validation\";\n        case AWS_MQTT5_EVAFCO_AWS_IOT_CORE_DEFAULTS:\n            return \"AWS IoT Core flow control and packet validation\";\n        default:\n",
                      "markdown": "`    enum aws_mqtt5_extended_validation_and_flow_control_options extended_validation_behavior) {\n    switch (extended_validation_behavior) {\n        case AWS_MQTT5_EVAFCO_NONE:\n            return \"No additional flow control or packet validation\";\n        case AWS_MQTT5_EVAFCO_AWS_IOT_CORE_DEFAULTS:\n            return \"AWS IoT Core flow control and packet validation\";\n        default:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_utils.c"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 12,
                  "endLine": 410,
                  "endColumn": 18,
                  "snippet": {
                    "text": "     * 1. random range is now inclusive/closed: [from, to] rather than half-open [from, to)\n     * 2. as a corollary, diff == 0 => return min, not 0\n     */\n    uint64_t diff = max - min;\n    if (!diff) {\n        return min;\n    }\n",
                    "rendered": {
                      "text": "     * 1. random range is now inclusive/closed: [from, to] rather than half-open [from, to)\n     * 2. as a corollary, diff == 0 => return min, not 0\n     */\n    uint64_t diff = max - min;\n    if (!diff) {\n        return min;\n    }\n",
                      "markdown": "`     * 1. random range is now inclusive/closed: [from, to] rather than half-open [from, to)\n     * 2. as a corollary, diff == 0 => return min, not 0\n     */\n    uint64_t diff = max - min;\n    if (!diff) {\n        return min;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/request-response/request_response_client.c"
                },
                "region": {
                  "startLine": 1952,
                  "startColumn": 8,
                  "endLine": 1952,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        &operation->destroy_task,\n        s_mqtt_rr_client_destroy_operation,\n        operation,\n        \"MQTTRequestResponseClientOperationDestroy\");\n}\n\nvoid s_aws_mqtt_request_operation_storage_init_from_options(\n",
                    "rendered": {
                      "text": "        &operation->destroy_task,\n        s_mqtt_rr_client_destroy_operation,\n        operation,\n        \"MQTTRequestResponseClientOperationDestroy\");\n}\n\nvoid s_aws_mqtt_request_operation_storage_init_from_options(\n",
                      "markdown": "`        &operation->destroy_task,\n        s_mqtt_rr_client_destroy_operation,\n        operation,\n        \"MQTTRequestResponseClientOperationDestroy\");\n}\n\nvoid s_aws_mqtt_request_operation_storage_init_from_options(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/request-response/request_response_client.c"
                },
                "region": {
                  "startLine": 1947,
                  "startColumn": 8,
                  "endLine": 1947,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        &operation->submit_task,\n        s_mqtt_rr_client_submit_operation,\n        operation,\n        \"MQTTRequestResponseClientOperationSubmit\");\n    aws_task_init(\n        &operation->destroy_task,\n        s_mqtt_rr_client_destroy_operation,\n",
                    "rendered": {
                      "text": "        &operation->submit_task,\n        s_mqtt_rr_client_submit_operation,\n        operation,\n        \"MQTTRequestResponseClientOperationSubmit\");\n    aws_task_init(\n        &operation->destroy_task,\n        s_mqtt_rr_client_destroy_operation,\n",
                      "markdown": "`        &operation->submit_task,\n        s_mqtt_rr_client_submit_operation,\n        operation,\n        \"MQTTRequestResponseClientOperationSubmit\");\n    aws_task_init(\n        &operation->destroy_task,\n        s_mqtt_rr_client_destroy_operation,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/request-response/request_response_client.c"
                },
                "region": {
                  "startLine": 1007,
                  "startColumn": 32,
                  "endLine": 1007,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_REQUEST_RESPONSE,\n                    \"id=%p: request-response client incoming publish on response path topic '\" PRInSTR\n                    \"' could not find path segment '\" PRInSTR \"'\",\n                    (void *)rr_client,\n                    AWS_BYTE_CURSOR_PRI(publish_event->topic),\n                    AWS_BYTE_CURSOR_PRI(segment));\n",
                    "rendered": {
                      "text": "                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_REQUEST_RESPONSE,\n                    \"id=%p: request-response client incoming publish on response path topic '\" PRInSTR\n                    \"' could not find path segment '\" PRInSTR \"'\",\n                    (void *)rr_client,\n                    AWS_BYTE_CURSOR_PRI(publish_event->topic),\n                    AWS_BYTE_CURSOR_PRI(segment));\n",
                      "markdown": "`                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_REQUEST_RESPONSE,\n                    \"id=%p: request-response client incoming publish on response path topic '\" PRInSTR\n                    \"' could not find path segment '\" PRInSTR \"'\",\n                    (void *)rr_client,\n                    AWS_BYTE_CURSOR_PRI(publish_event->topic),\n                    AWS_BYTE_CURSOR_PRI(segment));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/request-response/request_response_client.c"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 7,
                  "endLine": 883,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(&entry->operations)) {\n        struct aws_mqtt_rr_client_operation *operation =\n            AWS_CONTAINER_OF(node, struct aws_mqtt_rr_client_operation, node);\n        node = aws_linked_list_next(node);\n\n        if (operation->type != AWS_MRROT_STREAMING) {\n            continue;\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(&entry->operations)) {\n        struct aws_mqtt_rr_client_operation *operation =\n            AWS_CONTAINER_OF(node, struct aws_mqtt_rr_client_operation, node);\n        node = aws_linked_list_next(node);\n\n        if (operation->type != AWS_MRROT_STREAMING) {\n            continue;\n",
                      "markdown": "`    while (node != aws_linked_list_end(&entry->operations)) {\n        struct aws_mqtt_rr_client_operation *operation =\n            AWS_CONTAINER_OF(node, struct aws_mqtt_rr_client_operation, node);\n        node = aws_linked_list_next(node);\n\n        if (operation->type != AWS_MRROT_STREAMING) {\n            continue;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/request-response/request_response_client.c"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 73,
                  "endLine": 600,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        aws_event_loop_schedule_task_now(client->loop, &client->service_task);\n\n        AWS_LOGF_DEBUG(\n            AWS_LS_MQTT_REQUEST_RESPONSE, \"id=%p: request-response client service task woke\", (void *)client);\n    }\n}\n\n",
                    "rendered": {
                      "text": "        aws_event_loop_schedule_task_now(client->loop, &client->service_task);\n\n        AWS_LOGF_DEBUG(\n            AWS_LS_MQTT_REQUEST_RESPONSE, \"id=%p: request-response client service task woke\", (void *)client);\n    }\n}\n\n",
                      "markdown": "`        aws_event_loop_schedule_task_now(client->loop, &client->service_task);\n\n        AWS_LOGF_DEBUG(\n            AWS_LS_MQTT_REQUEST_RESPONSE, \"id=%p: request-response client service task woke\", (void *)client);\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 20,
                  "endLine": 375,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    }\n\n    /* Do validation */\n    if (packet->has_password && !packet->has_username) {\n\n        return aws_raise_error(AWS_ERROR_MQTT_INVALID_CREDENTIALS);\n    }\n",
                    "rendered": {
                      "text": "    }\n\n    /* Do validation */\n    if (packet->has_password && !packet->has_username) {\n\n        return aws_raise_error(AWS_ERROR_MQTT_INVALID_CREDENTIALS);\n    }\n",
                      "markdown": "`    }\n\n    /* Do validation */\n    if (packet->has_password && !packet->has_username) {\n\n        return aws_raise_error(AWS_ERROR_MQTT_INVALID_CREDENTIALS);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 42,
                  "endLine": 369,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n        }\n    }\n",
                    "rendered": {
                      "text": "\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n        }\n    }\n",
                      "markdown": "`\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 20,
                  "endLine": 368,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    }\n\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n        }\n",
                    "rendered": {
                      "text": "    }\n\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n        }\n",
                      "markdown": "`    }\n\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 12,
                  "endLine": 367,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        }\n    }\n\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n",
                      "markdown": "`        }\n    }\n\n    /* Read password */\n    if (packet->has_password) {\n        if (s_decode_buffer(cur, &packet->password)) {\n            return AWS_OP_ERR;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 16,
                  "endLine": 334,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    packet->has_will = (connect_flags >> 2) & 0x1;\n    packet->will_qos = (connect_flags >> 3) & 0x3;\n    packet->will_retain = (connect_flags >> 5) & 0x1;\n    packet->has_password = (connect_flags >> 6) & 0x1;\n    packet->has_username = (connect_flags >> 7) & 0x1;\n\n    /* Read keep alive */\n",
                    "rendered": {
                      "text": "    packet->has_will = (connect_flags >> 2) & 0x1;\n    packet->will_qos = (connect_flags >> 3) & 0x3;\n    packet->will_retain = (connect_flags >> 5) & 0x1;\n    packet->has_password = (connect_flags >> 6) & 0x1;\n    packet->has_username = (connect_flags >> 7) & 0x1;\n\n    /* Read keep alive */\n",
                      "markdown": "`    packet->has_will = (connect_flags >> 2) & 0x1;\n    packet->will_qos = (connect_flags >> 3) & 0x3;\n    packet->will_retain = (connect_flags >> 5) & 0x1;\n    packet->has_password = (connect_flags >> 6) & 0x1;\n    packet->has_username = (connect_flags >> 7) & 0x1;\n\n    /* Read keep alive */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 41,
                  "endLine": 277,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n        }\n    }\n",
                    "rendered": {
                      "text": "\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n        }\n    }\n",
                      "markdown": "`\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 20,
                  "endLine": 276,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    }\n\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n        }\n",
                    "rendered": {
                      "text": "    }\n\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n        }\n",
                      "markdown": "`    }\n\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 13,
                  "endLine": 275,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        }\n    }\n\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n",
                      "markdown": "`        }\n    }\n\n    /* Write password */\n    if (packet->has_password) {\n        if (s_encode_buffer(buf, packet->password)) {\n            return AWS_OP_ERR;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 77,
                  "endLine": 239,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n    /* Write connect flags [MQTT-3.1.2.3] */\n    uint8_t connect_flags = (uint8_t)(packet->clean_session << 1 | packet->has_will << 2 | packet->will_qos << 3 |\n                                      packet->will_retain << 5 | packet->has_password << 6 | packet->has_username << 7);\n\n    if (!aws_byte_buf_write_u8(buf, connect_flags)) {\n        return aws_raise_error(AWS_ERROR_SHORT_BUFFER);\n",
                    "rendered": {
                      "text": "\n    /* Write connect flags [MQTT-3.1.2.3] */\n    uint8_t connect_flags = (uint8_t)(packet->clean_session << 1 | packet->has_will << 2 | packet->will_qos << 3 |\n                                      packet->will_retain << 5 | packet->has_password << 6 | packet->has_username << 7);\n\n    if (!aws_byte_buf_write_u8(buf, connect_flags)) {\n        return aws_raise_error(AWS_ERROR_SHORT_BUFFER);\n",
                      "markdown": "`\n    /* Write connect flags [MQTT-3.1.2.3] */\n    uint8_t connect_flags = (uint8_t)(packet->clean_session << 1 | packet->has_will << 2 | packet->will_qos << 3 |\n                                      packet->will_retain << 5 | packet->has_password << 6 | packet->has_username << 7);\n\n    if (!aws_byte_buf_write_u8(buf, connect_flags)) {\n        return aws_raise_error(AWS_ERROR_SHORT_BUFFER);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 20,
                  "endLine": 212,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    AWS_PRECONDITION(packet);\n\n    /* Do validation */\n    if (packet->has_password && !packet->has_username) {\n\n        return aws_raise_error(AWS_ERROR_MQTT_INVALID_CREDENTIALS);\n    }\n",
                    "rendered": {
                      "text": "    AWS_PRECONDITION(packet);\n\n    /* Do validation */\n    if (packet->has_password && !packet->has_username) {\n\n        return aws_raise_error(AWS_ERROR_MQTT_INVALID_CREDENTIALS);\n    }\n",
                      "markdown": "`    AWS_PRECONDITION(packet);\n\n    /* Do validation */\n    if (packet->has_password && !packet->has_username) {\n\n        return aws_raise_error(AWS_ERROR_MQTT_INVALID_CREDENTIALS);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 27,
                  "endLine": 182,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 16,
                  "endLine": 182,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 20,
                  "endLine": 180,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n",
                    "rendered": {
                      "text": "\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n",
                      "markdown": "`\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 72,
                  "endLine": 179,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        }\n\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n",
                    "rendered": {
                      "text": "        }\n\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n",
                      "markdown": "`        }\n\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 49,
                  "endLine": 179,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        }\n\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n",
                    "rendered": {
                      "text": "        }\n\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n",
                      "markdown": "`        }\n\n        /* Add change in size to remaining_length */\n        packet->fixed_header.remaining_length += password.len - packet->password.len;\n        packet->has_password = true;\n\n        packet->password = password;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 30,
                  "endLine": 174,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n            packet->fixed_header.remaining_length += 2;\n        }\n\n",
                    "rendered": {
                      "text": "    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n            packet->fixed_header.remaining_length += 2;\n        }\n\n",
                      "markdown": "`    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n            packet->fixed_header.remaining_length += 2;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 25,
                  "endLine": 173,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n            packet->fixed_header.remaining_length += 2;\n        }\n",
                    "rendered": {
                      "text": "\n    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n            packet->fixed_header.remaining_length += 2;\n        }\n",
                      "markdown": "`\n    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n            packet->fixed_header.remaining_length += 2;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 8,
                  "endLine": 171,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    packet->username = username;\n\n    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n",
                    "rendered": {
                      "text": "\n    packet->username = username;\n\n    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n",
                      "markdown": "`\n    packet->username = username;\n\n    if (password.len > 0) {\n\n        if (!packet->has_password) {\n            /* If not already password, add size of length field */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/packets.c"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 27,
                  "endLine": 155,
                  "endColumn": 35,
                  "snippet": {
                    "text": "int aws_mqtt_packet_connect_add_credentials(\n    struct aws_mqtt_packet_connect *packet,\n    struct aws_byte_cursor username,\n    struct aws_byte_cursor password) {\n\n    AWS_PRECONDITION(packet);\n    AWS_PRECONDITION(username.len > 0);\n",
                    "rendered": {
                      "text": "int aws_mqtt_packet_connect_add_credentials(\n    struct aws_mqtt_packet_connect *packet,\n    struct aws_byte_cursor username,\n    struct aws_byte_cursor password) {\n\n    AWS_PRECONDITION(packet);\n    AWS_PRECONDITION(username.len > 0);\n",
                      "markdown": "`int aws_mqtt_packet_connect_add_credentials(\n    struct aws_mqtt_packet_connect *packet,\n    struct aws_byte_cursor username,\n    struct aws_byte_cursor password) {\n\n    AWS_PRECONDITION(packet);\n    AWS_PRECONDITION(username.len > 0);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client_impl_shared.c"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 75,
                  "endLine": 38,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    return (*connection->vtable->set_login_fn)(connection->impl, username, password);\n}\n\nint aws_mqtt_client_connection_use_websockets(\n",
                    "rendered": {
                      "text": "    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    return (*connection->vtable->set_login_fn)(connection->impl, username, password);\n}\n\nint aws_mqtt_client_connection_use_websockets(\n",
                      "markdown": "`    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    return (*connection->vtable->set_login_fn)(connection->impl, username, password);\n}\n\nint aws_mqtt_client_connection_use_websockets(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/client_impl_shared.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 34,
                  "endLine": 36,
                  "endColumn": 42,
                  "snippet": {
                    "text": "int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    return (*connection->vtable->set_login_fn)(connection->impl, username, password);\n}\n",
                    "rendered": {
                      "text": "int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    return (*connection->vtable->set_login_fn)(connection->impl, username, password);\n}\n",
                      "markdown": "`int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password) {\n\n    return (*connection->vtable->set_login_fn)(connection->impl, username, password);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1686,
                  "startColumn": 38,
                  "endLine": 1686,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    ASSERT_TRUE(client_id_cursor.ptr < will_topic_cursor.ptr);\n    ASSERT_TRUE(will_topic_cursor.ptr < will_message_payload_cursor.ptr);\n    ASSERT_TRUE(will_message_payload_cursor.ptr < username_cursor.ptr);\n    ASSERT_TRUE(username_cursor.ptr < password_cursor.ptr);\n\n    aws_byte_buf_clean_up(&encoding_buffer);\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(client_id_cursor.ptr < will_topic_cursor.ptr);\n    ASSERT_TRUE(will_topic_cursor.ptr < will_message_payload_cursor.ptr);\n    ASSERT_TRUE(will_message_payload_cursor.ptr < username_cursor.ptr);\n    ASSERT_TRUE(username_cursor.ptr < password_cursor.ptr);\n\n    aws_byte_buf_clean_up(&encoding_buffer);\n\n",
                      "markdown": "`    ASSERT_TRUE(client_id_cursor.ptr < will_topic_cursor.ptr);\n    ASSERT_TRUE(will_topic_cursor.ptr < will_message_payload_cursor.ptr);\n    ASSERT_TRUE(will_message_payload_cursor.ptr < username_cursor.ptr);\n    ASSERT_TRUE(username_cursor.ptr < password_cursor.ptr);\n\n    aws_byte_buf_clean_up(&encoding_buffer);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1681,
                  "startColumn": 20,
                  "endLine": 1681,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n    ASSERT_NOT_NULL(will_message_payload_cursor.ptr);\n    ASSERT_NOT_NULL(username_cursor.ptr);\n    ASSERT_NOT_NULL(password_cursor.ptr);\n\n    ASSERT_TRUE(client_id_cursor.ptr < will_topic_cursor.ptr);\n    ASSERT_TRUE(will_topic_cursor.ptr < will_message_payload_cursor.ptr);\n",
                    "rendered": {
                      "text": "    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n    ASSERT_NOT_NULL(will_message_payload_cursor.ptr);\n    ASSERT_NOT_NULL(username_cursor.ptr);\n    ASSERT_NOT_NULL(password_cursor.ptr);\n\n    ASSERT_TRUE(client_id_cursor.ptr < will_topic_cursor.ptr);\n    ASSERT_TRUE(will_topic_cursor.ptr < will_message_payload_cursor.ptr);\n",
                      "markdown": "`    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n    ASSERT_NOT_NULL(will_message_payload_cursor.ptr);\n    ASSERT_NOT_NULL(username_cursor.ptr);\n    ASSERT_NOT_NULL(password_cursor.ptr);\n\n    ASSERT_TRUE(client_id_cursor.ptr < will_topic_cursor.ptr);\n    ASSERT_TRUE(will_topic_cursor.ptr < will_message_payload_cursor.ptr);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1675,
                  "startColumn": 88,
                  "endLine": 1675,
                  "endColumn": 96,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n",
                      "markdown": "`\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1675,
                  "startColumn": 77,
                  "endLine": 1675,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n",
                      "markdown": "`\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n    ASSERT_NOT_NULL(will_topic_cursor.ptr);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1674,
                  "startColumn": 20,
                  "endLine": 1674,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.username, &username_cursor));\n\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.username, &username_cursor));\n\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.username, &username_cursor));\n\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n    ASSERT_NOT_NULL(client_id_cursor.ptr);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1673,
                  "startColumn": 27,
                  "endLine": 1673,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    AWS_ZERO_STRUCT(username_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.username, &username_cursor));\n\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n",
                    "rendered": {
                      "text": "    AWS_ZERO_STRUCT(username_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.username, &username_cursor));\n\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n",
                      "markdown": "`    AWS_ZERO_STRUCT(username_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.username, &username_cursor));\n\n    struct aws_byte_cursor password_cursor;\n    AWS_ZERO_STRUCT(password_cursor);\n    ASSERT_SUCCESS(aws_byte_cursor_find_exact(&encoding_cursor, connect_view.password, &password_cursor));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1636,
                  "startColumn": 21,
                  "endLine": 1636,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1636,
                  "startColumn": 9,
                  "endLine": 1636,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1607,
                  "startColumn": 67,
                  "endLine": 1607,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                      "markdown": "`    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1607,
                  "startColumn": 27,
                  "endLine": 1607,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                      "markdown": "`    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1595,
                  "startColumn": 88,
                  "endLine": 1595,
                  "endColumn": 96,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_password, s_mqtt5_packet_encode_connect_no_password_fn)\n\nstatic int s_mqtt5_packet_encode_connect_will_property_order_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_password, s_mqtt5_packet_encode_connect_no_password_fn)\n\nstatic int s_mqtt5_packet_encode_connect_will_property_order_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_password, s_mqtt5_packet_encode_connect_no_password_fn)\n\nstatic int s_mqtt5_packet_encode_connect_will_property_order_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1595,
                  "startColumn": 45,
                  "endLine": 1595,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_password, s_mqtt5_packet_encode_connect_no_password_fn)\n\nstatic int s_mqtt5_packet_encode_connect_will_property_order_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_password, s_mqtt5_packet_encode_connect_no_password_fn)\n\nstatic int s_mqtt5_packet_encode_connect_will_property_order_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_password, s_mqtt5_packet_encode_connect_no_password_fn)\n\nstatic int s_mqtt5_packet_encode_connect_will_property_order_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1585,
                  "startColumn": 48,
                  "endLine": 1585,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    uint8_t connect_flags = encoding_buffer.buffer[connect_flags_byte_index];\n\n    /*\n     * Verify Will flag, Will QoS, Will Retain, Password are all zero,\n     * while clean start (0x02), username (0x80) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0x82);\n",
                    "rendered": {
                      "text": "    uint8_t connect_flags = encoding_buffer.buffer[connect_flags_byte_index];\n\n    /*\n     * Verify Will flag, Will QoS, Will Retain, Password are all zero,\n     * while clean start (0x02), username (0x80) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0x82);\n",
                      "markdown": "`    uint8_t connect_flags = encoding_buffer.buffer[connect_flags_byte_index];\n\n    /*\n     * Verify Will flag, Will QoS, Will Retain, Password are all zero,\n     * while clean start (0x02), username (0x80) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0x82);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1549,
                  "startColumn": 9,
                  "endLine": 1549,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = NULL,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = NULL,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = NULL,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1531,
                  "startColumn": 44,
                  "endLine": 1531,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_username, s_mqtt5_packet_encode_connect_no_username_fn)\n\nstatic int s_mqtt5_packet_encode_connect_no_password_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n",
                    "rendered": {
                      "text": "\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_username, s_mqtt5_packet_encode_connect_no_username_fn)\n\nstatic int s_mqtt5_packet_encode_connect_no_password_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n",
                      "markdown": "`\nAWS_TEST_CASE(mqtt5_packet_encode_connect_no_username, s_mqtt5_packet_encode_connect_no_username_fn)\n\nstatic int s_mqtt5_packet_encode_connect_no_password_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1520,
                  "startColumn": 33,
                  "endLine": 1520,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    /*\n     * Verify Will flag, Will QoS, Will Retain, Username are all zero,\n     * while clean start (0x02), password (0x40) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0x42);\n\n",
                    "rendered": {
                      "text": "\n    /*\n     * Verify Will flag, Will QoS, Will Retain, Username are all zero,\n     * while clean start (0x02), password (0x40) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0x42);\n\n",
                      "markdown": "`\n    /*\n     * Verify Will flag, Will QoS, Will Retain, Username are all zero,\n     * while clean start (0x02), password (0x40) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0x42);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1483,
                  "startColumn": 21,
                  "endLine": 1483,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = NULL,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = NULL,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = NULL,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1483,
                  "startColumn": 9,
                  "endLine": 1483,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = NULL,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = NULL,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = NULL,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1468,
                  "startColumn": 67,
                  "endLine": 1468,
                  "endColumn": 75,
                  "snippet": {
                    "text": "static int s_mqtt5_packet_encode_connect_no_username_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                    "rendered": {
                      "text": "static int s_mqtt5_packet_encode_connect_no_username_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                      "markdown": "`static int s_mqtt5_packet_encode_connect_no_username_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1468,
                  "startColumn": 27,
                  "endLine": 1468,
                  "endColumn": 35,
                  "snippet": {
                    "text": "static int s_mqtt5_packet_encode_connect_no_username_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                    "rendered": {
                      "text": "static int s_mqtt5_packet_encode_connect_no_username_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                      "markdown": "`static int s_mqtt5_packet_encode_connect_no_username_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1454,
                  "startColumn": 33,
                  "endLine": 1454,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    /*\n     * Verify Will flag, Will QoS, Will Retain are all zero,\n     * while clean start (0x02), password (0x40) and username (0x80) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0xC2);\n\n",
                    "rendered": {
                      "text": "\n    /*\n     * Verify Will flag, Will QoS, Will Retain are all zero,\n     * while clean start (0x02), password (0x40) and username (0x80) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0xC2);\n\n",
                      "markdown": "`\n    /*\n     * Verify Will flag, Will QoS, Will Retain are all zero,\n     * while clean start (0x02), password (0x40) and username (0x80) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0xC2);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1417,
                  "startColumn": 21,
                  "endLine": 1417,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1417,
                  "startColumn": 9,
                  "endLine": 1417,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1402,
                  "startColumn": 67,
                  "endLine": 1402,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1402,
                  "startColumn": 27,
                  "endLine": 1402,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1362,
                  "startColumn": 34,
                  "endLine": 1362,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n    }\n\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n",
                    "rendered": {
                      "text": "            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n    }\n\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n",
                      "markdown": "`            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n    }\n\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1360,
                  "startColumn": 26,
                  "endLine": 1360,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n    }\n",
                    "rendered": {
                      "text": "            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n    }\n",
                      "markdown": "`            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1359,
                  "startColumn": 26,
                  "endLine": 1359,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n",
                    "rendered": {
                      "text": "        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n",
                      "markdown": "`        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n        ASSERT_NULL(connect_view->password);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1358,
                  "startColumn": 27,
                  "endLine": 1358,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n",
                    "rendered": {
                      "text": "    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n",
                      "markdown": "`    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n    } else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1357,
                  "startColumn": 27,
                  "endLine": 1357,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n",
                    "rendered": {
                      "text": "\n    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n",
                      "markdown": "`\n    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n            connect_view->password->ptr,\n            connect_view->password->len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 1355,
                  "startColumn": 23,
                  "endLine": 1355,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        ASSERT_NULL(connect_view->username);\n    }\n\n    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n",
                    "rendered": {
                      "text": "        ASSERT_NULL(connect_view->username);\n    }\n\n    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n",
                      "markdown": "`        ASSERT_NULL(connect_view->username);\n    }\n\n    if (expected_view->password != NULL) {\n        ASSERT_BIN_ARRAYS_EQUALS(\n            expected_view->password->ptr,\n            expected_view->password->len,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 27,
                  "endLine": 692,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    /*\n     * Verify Will flag (0x04), Will QoS (0x08), Will Retain (0x20), Username (0x80),\n     * clean start (0x02), password (0x40) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0xEE);\n\n",
                    "rendered": {
                      "text": "\n    /*\n     * Verify Will flag (0x04), Will QoS (0x08), Will Retain (0x20), Username (0x80),\n     * clean start (0x02), password (0x40) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0xEE);\n\n",
                      "markdown": "`\n    /*\n     * Verify Will flag (0x04), Will QoS (0x08), Will Retain (0x20), Username (0x80),\n     * clean start (0x02), password (0x40) flags are set\n     */\n    ASSERT_INT_EQUALS(connect_flags, 0xEE);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 21,
                  "endLine": 655,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 9,
                  "endLine": 655,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n",
                      "markdown": "`        .keep_alive_interval_seconds = 1200,\n        .client_id = aws_byte_cursor_from_c_str(s_client_id),\n        .username = &username,\n        .password = &password,\n        .clean_start = true,\n        .session_expiry_interval_seconds = &session_expiry_interval_seconds,\n        .request_response_information = &request_response_information,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 67,
                  "endLine": 626,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                      "markdown": "`    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 27,
                  "endLine": 626,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n",
                      "markdown": "`    struct aws_byte_cursor will_correlation_data = aws_byte_cursor_from_c_str(s_will_correlation_data);\n    struct aws_byte_cursor will_content_type = aws_byte_cursor_from_c_str(s_will_content_type);\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(s_username);\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(s_password);\n    uint32_t session_expiry_interval_seconds = 3600;\n    uint8_t request_response_information = 1;\n    uint8_t request_problem_information = 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 22,
                  "endLine": 525,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n    ASSERT_INT_EQUALS(*expected_view->session_expiry_interval_seconds, *connect_view->session_expiry_interval_seconds);\n\n",
                    "rendered": {
                      "text": "        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n    ASSERT_INT_EQUALS(*expected_view->session_expiry_interval_seconds, *connect_view->session_expiry_interval_seconds);\n\n",
                      "markdown": "`        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n    ASSERT_INT_EQUALS(*expected_view->session_expiry_interval_seconds, *connect_view->session_expiry_interval_seconds);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 22,
                  "endLine": 524,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n    ASSERT_INT_EQUALS(*expected_view->session_expiry_interval_seconds, *connect_view->session_expiry_interval_seconds);\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n    ASSERT_INT_EQUALS(*expected_view->session_expiry_interval_seconds, *connect_view->session_expiry_interval_seconds);\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n    ASSERT_INT_EQUALS(*expected_view->session_expiry_interval_seconds, *connect_view->session_expiry_interval_seconds);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 23,
                  "endLine": 523,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        connect_view->username->len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n",
                    "rendered": {
                      "text": "        connect_view->username->len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n",
                      "markdown": "`        connect_view->username->len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n    ASSERT_TRUE(expected_view->clean_start == connect_view->clean_start);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 23,
                  "endLine": 522,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        connect_view->username->ptr,\n        connect_view->username->len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n",
                    "rendered": {
                      "text": "        connect_view->username->ptr,\n        connect_view->username->len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n",
                      "markdown": "`        connect_view->username->ptr,\n        connect_view->username->len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        expected_view->password->ptr,\n        expected_view->password->len,\n        connect_view->password->ptr,\n        connect_view->password->len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_encoding_tests.c"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 21,
                  "endLine": 196,
                  "endColumn": 29,
                  "snippet": {
                    "text": "static const char *s_will_content_type = \"Json\";\nstatic const char *s_client_id = \"DeviceNumber47\";\nstatic const char *s_username = \"MyUser\";\nstatic const char *s_password = \"SuprSekritDontRead\";\n\nstruct aws_mqtt5_encode_decode_tester {\n    struct aws_mqtt5_encoder_function_table encoder_function_table;\n",
                    "rendered": {
                      "text": "static const char *s_will_content_type = \"Json\";\nstatic const char *s_client_id = \"DeviceNumber47\";\nstatic const char *s_username = \"MyUser\";\nstatic const char *s_password = \"SuprSekritDontRead\";\n\nstruct aws_mqtt5_encode_decode_tester {\n    struct aws_mqtt5_encoder_function_table encoder_function_table;\n",
                      "markdown": "`static const char *s_will_content_type = \"Json\";\nstatic const char *s_client_id = \"DeviceNumber47\";\nstatic const char *s_username = \"MyUser\";\nstatic const char *s_password = \"SuprSekritDontRead\";\n\nstruct aws_mqtt5_encode_decode_tester {\n    struct aws_mqtt5_encoder_function_table encoder_function_table;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_to_mqtt3_adapter_tests.c"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 21,
                  "endLine": 853,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 30,\n        .clean_start = true,\n        .username = &username_cursor,\n        .password = &password_cursor,\n    };\n\n    ASSERT_SUCCESS(aws_mqtt5_packet_connect_storage_init(expected_connect, allocator, &expected_connect_view));\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 30,\n        .clean_start = true,\n        .username = &username_cursor,\n        .password = &password_cursor,\n    };\n\n    ASSERT_SUCCESS(aws_mqtt5_packet_connect_storage_init(expected_connect, allocator, &expected_connect_view));\n",
                      "markdown": "`        .keep_alive_interval_seconds = 30,\n        .clean_start = true,\n        .username = &username_cursor,\n        .password = &password_cursor,\n    };\n\n    ASSERT_SUCCESS(aws_mqtt5_packet_connect_storage_init(expected_connect, allocator, &expected_connect_view));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_to_mqtt3_adapter_tests.c"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 9,
                  "endLine": 853,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        .keep_alive_interval_seconds = 30,\n        .clean_start = true,\n        .username = &username_cursor,\n        .password = &password_cursor,\n    };\n\n    ASSERT_SUCCESS(aws_mqtt5_packet_connect_storage_init(expected_connect, allocator, &expected_connect_view));\n",
                    "rendered": {
                      "text": "        .keep_alive_interval_seconds = 30,\n        .clean_start = true,\n        .username = &username_cursor,\n        .password = &password_cursor,\n    };\n\n    ASSERT_SUCCESS(aws_mqtt5_packet_connect_storage_init(expected_connect, allocator, &expected_connect_view));\n",
                      "markdown": "`        .keep_alive_interval_seconds = 30,\n        .clean_start = true,\n        .username = &username_cursor,\n        .password = &password_cursor,\n    };\n\n    ASSERT_SUCCESS(aws_mqtt5_packet_connect_storage_init(expected_connect, allocator, &expected_connect_view));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_to_mqtt3_adapter_tests.c"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 84,
                  "endLine": 846,
                  "endColumn": 92,
                  "snippet": {
                    "text": "    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n    struct aws_mqtt5_packet_connect_view expected_connect_view = {\n        .client_id = aws_byte_cursor_from_string(g_default_client_id),\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n    struct aws_mqtt5_packet_connect_view expected_connect_view = {\n        .client_id = aws_byte_cursor_from_string(g_default_client_id),\n",
                      "markdown": "`    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n    struct aws_mqtt5_packet_connect_view expected_connect_view = {\n        .client_id = aws_byte_cursor_from_string(g_default_client_id),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_to_mqtt3_adapter_tests.c"
                },
                "region": {
                  "startLine": 844,
                  "startColumn": 75,
                  "endLine": 844,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    struct aws_mqtt5_packet_connect_storage *expected_connect) {\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n",
                    "rendered": {
                      "text": "    struct aws_mqtt5_packet_connect_storage *expected_connect) {\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n",
                      "markdown": "`    struct aws_mqtt5_packet_connect_storage *expected_connect) {\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_to_mqtt3_adapter_tests.c"
                },
                "region": {
                  "startLine": 844,
                  "startColumn": 27,
                  "endLine": 844,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    struct aws_mqtt5_packet_connect_storage *expected_connect) {\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n",
                    "rendered": {
                      "text": "    struct aws_mqtt5_packet_connect_storage *expected_connect) {\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n",
                      "markdown": "`    struct aws_mqtt5_packet_connect_storage *expected_connect) {\n\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(s_username);\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(s_password);\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(adapter, &username_cursor, &password_cursor));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_to_mqtt3_adapter_tests.c"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 33,
                  "endLine": 836,
                  "endColumn": 41,
                  "snippet": {
                    "text": "AWS_TEST_CASE(mqtt5to3_adapter_set_will, s_mqtt5to3_adapter_set_will_fn)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_username, \"MyUsername\");\nAWS_STATIC_STRING_FROM_LITERAL(s_password, \"TopTopSecret\");\n\nstatic int s_mqtt5to3_adapter_set_login_setup(\n    struct aws_allocator *allocator,\n",
                    "rendered": {
                      "text": "AWS_TEST_CASE(mqtt5to3_adapter_set_will, s_mqtt5to3_adapter_set_will_fn)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_username, \"MyUsername\");\nAWS_STATIC_STRING_FROM_LITERAL(s_password, \"TopTopSecret\");\n\nstatic int s_mqtt5to3_adapter_set_login_setup(\n    struct aws_allocator *allocator,\n",
                      "markdown": "`AWS_TEST_CASE(mqtt5to3_adapter_set_will, s_mqtt5to3_adapter_set_will_fn)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_username, \"MyUsername\");\nAWS_STATIC_STRING_FROM_LITERAL(s_password, \"TopTopSecret\");\n\nstatic int s_mqtt5to3_adapter_set_login_setup(\n    struct aws_allocator *allocator,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_testing_utils.c"
                },
                "region": {
                  "startLine": 1571,
                  "startColumn": 75,
                  "endLine": 1571,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->keep_alive_interval_seconds, rhs->keep_alive_interval_seconds);\n    AWS_MQTT5_CLIENT_TEST_CHECK_CURSOR_EQUALS(lhs->client_id, rhs->client_id);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->username, rhs->username);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->password, rhs->password);\n    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->clean_start, rhs->clean_start);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_INT_EQUALS(\n        lhs->session_expiry_interval_seconds, rhs->session_expiry_interval_seconds);\n",
                    "rendered": {
                      "text": "    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->keep_alive_interval_seconds, rhs->keep_alive_interval_seconds);\n    AWS_MQTT5_CLIENT_TEST_CHECK_CURSOR_EQUALS(lhs->client_id, rhs->client_id);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->username, rhs->username);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->password, rhs->password);\n    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->clean_start, rhs->clean_start);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_INT_EQUALS(\n        lhs->session_expiry_interval_seconds, rhs->session_expiry_interval_seconds);\n",
                      "markdown": "`    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->keep_alive_interval_seconds, rhs->keep_alive_interval_seconds);\n    AWS_MQTT5_CLIENT_TEST_CHECK_CURSOR_EQUALS(lhs->client_id, rhs->client_id);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->username, rhs->username);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->password, rhs->password);\n    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->clean_start, rhs->clean_start);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_INT_EQUALS(\n        lhs->session_expiry_interval_seconds, rhs->session_expiry_interval_seconds);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_testing_utils.c"
                },
                "region": {
                  "startLine": 1571,
                  "startColumn": 60,
                  "endLine": 1571,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->keep_alive_interval_seconds, rhs->keep_alive_interval_seconds);\n    AWS_MQTT5_CLIENT_TEST_CHECK_CURSOR_EQUALS(lhs->client_id, rhs->client_id);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->username, rhs->username);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->password, rhs->password);\n    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->clean_start, rhs->clean_start);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_INT_EQUALS(\n        lhs->session_expiry_interval_seconds, rhs->session_expiry_interval_seconds);\n",
                    "rendered": {
                      "text": "    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->keep_alive_interval_seconds, rhs->keep_alive_interval_seconds);\n    AWS_MQTT5_CLIENT_TEST_CHECK_CURSOR_EQUALS(lhs->client_id, rhs->client_id);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->username, rhs->username);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->password, rhs->password);\n    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->clean_start, rhs->clean_start);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_INT_EQUALS(\n        lhs->session_expiry_interval_seconds, rhs->session_expiry_interval_seconds);\n",
                      "markdown": "`    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->keep_alive_interval_seconds, rhs->keep_alive_interval_seconds);\n    AWS_MQTT5_CLIENT_TEST_CHECK_CURSOR_EQUALS(lhs->client_id, rhs->client_id);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->username, rhs->username);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_CURSOR_EQUALS(lhs->password, rhs->password);\n    AWS_MQTT5_CLIENT_TEST_CHECK_INT_EQUALS(lhs->clean_start, rhs->clean_start);\n    AWS_MQTT5_CLIENT_TEST_CHECK_OPTIONAL_INT_EQUALS(\n        lhs->session_expiry_interval_seconds, rhs->session_expiry_interval_seconds);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_testing_utils.c"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 78,
                  "endLine": 669,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n\n    if (packet_cursor.len == 0) {\n",
                    "rendered": {
                      "text": "\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n\n    if (packet_cursor.len == 0) {\n",
                      "markdown": "`\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n\n    if (packet_cursor.len == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_testing_utils.c"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 45,
                  "endLine": 669,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n\n    if (packet_cursor.len == 0) {\n",
                    "rendered": {
                      "text": "\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n\n    if (packet_cursor.len == 0) {\n",
                      "markdown": "`\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n\n    if (packet_cursor.len == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_testing_utils.c"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 49,
                  "endLine": 667,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            &packet_cursor, &connect_storage.username, &connect_storage_view->username, done);\n    }\n\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n",
                    "rendered": {
                      "text": "            &packet_cursor, &connect_storage.username, &connect_storage_view->username, done);\n    }\n\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n",
                      "markdown": "`            &packet_cursor, &connect_storage.username, &connect_storage_view->username, done);\n    }\n\n    if ((connect_flags & AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT) != 0) {\n        AWS_MQTT5_DECODE_LENGTH_PREFIXED_CURSOR_OPTIONAL(\n            &packet_cursor, &connect_storage.password, &connect_storage_view->password, done);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v5/mqtt5_testing_utils.c"
                },
                "region": {
                  "startLine": 1738,
                  "startColumn": 7,
                  "endLine": 1738,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(list);\n    while (node != aws_linked_list_end(list)) {\n        ++length;\n        node = aws_linked_list_next(node);\n    }\n\n    return length;\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_begin(list);\n    while (node != aws_linked_list_end(list)) {\n        ++length;\n        node = aws_linked_list_next(node);\n    }\n\n    return length;\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_begin(list);\n    while (node != aws_linked_list_end(list)) {\n        ++length;\n        node = aws_linked_list_next(node);\n    }\n\n    return length;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/private/v5/mqtt5_utils.h"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 32,
                  "endLine": 55,
                  "endColumn": 40,
                  "snippet": {
                    "text": "#define AWS_MQTT5_CONNECT_FLAGS_WILL_BIT (1U << 2)\n#define AWS_MQTT5_CONNECT_FLAGS_CLEAN_START_BIT (1U << 1)\n#define AWS_MQTT5_CONNECT_FLAGS_USER_NAME_BIT (1U << 7)\n#define AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT (1U << 6)\n#define AWS_MQTT5_CONNECT_FLAGS_WILL_RETAIN_BIT (1U << 5)\n\n#define AWS_MQTT5_CONNECT_FLAGS_WILL_QOS_BIT_POSITION 3\n",
                    "rendered": {
                      "text": "#define AWS_MQTT5_CONNECT_FLAGS_WILL_BIT (1U << 2)\n#define AWS_MQTT5_CONNECT_FLAGS_CLEAN_START_BIT (1U << 1)\n#define AWS_MQTT5_CONNECT_FLAGS_USER_NAME_BIT (1U << 7)\n#define AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT (1U << 6)\n#define AWS_MQTT5_CONNECT_FLAGS_WILL_RETAIN_BIT (1U << 5)\n\n#define AWS_MQTT5_CONNECT_FLAGS_WILL_QOS_BIT_POSITION 3\n",
                      "markdown": "`#define AWS_MQTT5_CONNECT_FLAGS_WILL_BIT (1U << 2)\n#define AWS_MQTT5_CONNECT_FLAGS_CLEAN_START_BIT (1U << 1)\n#define AWS_MQTT5_CONNECT_FLAGS_USER_NAME_BIT (1U << 7)\n#define AWS_MQTT5_CONNECT_FLAGS_PASSWORD_BIT (1U << 6)\n#define AWS_MQTT5_CONNECT_FLAGS_WILL_RETAIN_BIT (1U << 5)\n\n#define AWS_MQTT5_CONNECT_FLAGS_WILL_QOS_BIT_POSITION 3\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/private/client_impl.h"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 23,
                  "endLine": 240,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    uint64_t ping_timeout_ns;\n    uint64_t operation_timeout_ns;\n    struct aws_string *username;\n    struct aws_string *password;\n    struct {\n        struct aws_byte_buf topic;\n        enum aws_mqtt_qos qos;\n",
                    "rendered": {
                      "text": "    uint64_t ping_timeout_ns;\n    uint64_t operation_timeout_ns;\n    struct aws_string *username;\n    struct aws_string *password;\n    struct {\n        struct aws_byte_buf topic;\n        enum aws_mqtt_qos qos;\n",
                      "markdown": "`    uint64_t ping_timeout_ns;\n    uint64_t operation_timeout_ns;\n    struct aws_string *username;\n    struct aws_string *password;\n    struct {\n        struct aws_byte_buf topic;\n        enum aws_mqtt_qos qos;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/private/client_impl_shared.h"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 106,
                  "endLine": 40,
                  "endColumn": 114,
                  "snippet": {
                    "text": "        bool retain,\n        const struct aws_byte_cursor *payload);\n\n    int (*set_login_fn)(void *impl, const struct aws_byte_cursor *username, const struct aws_byte_cursor *password);\n\n    int (*use_websockets_fn)(\n        void *impl,\n",
                    "rendered": {
                      "text": "        bool retain,\n        const struct aws_byte_cursor *payload);\n\n    int (*set_login_fn)(void *impl, const struct aws_byte_cursor *username, const struct aws_byte_cursor *password);\n\n    int (*use_websockets_fn)(\n        void *impl,\n",
                      "markdown": "`        bool retain,\n        const struct aws_byte_cursor *payload);\n\n    int (*set_login_fn)(void *impl, const struct aws_byte_cursor *username, const struct aws_byte_cursor *password);\n\n    int (*use_websockets_fn)(\n        void *impl,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/v5/mqtt5_packet_storage.h"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 27,
                  "endLine": 26,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor username;\n\n    struct aws_byte_cursor password;\n\n    uint32_t session_expiry_interval_seconds;\n\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor username;\n\n    struct aws_byte_cursor password;\n\n    uint32_t session_expiry_interval_seconds;\n\n",
                      "markdown": "`\n    struct aws_byte_cursor username;\n\n    struct aws_byte_cursor password;\n\n    uint32_t session_expiry_interval_seconds;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/v5/mqtt5_types.h"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 34,
                  "endLine": 376,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    struct aws_byte_cursor client_id;\n\n    const struct aws_byte_cursor *username;\n    const struct aws_byte_cursor *password;\n\n    bool clean_start;\n\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor client_id;\n\n    const struct aws_byte_cursor *username;\n    const struct aws_byte_cursor *password;\n\n    bool clean_start;\n\n",
                      "markdown": "`    struct aws_byte_cursor client_id;\n\n    const struct aws_byte_cursor *username;\n    const struct aws_byte_cursor *password;\n\n    bool clean_start;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/v5/mqtt5_types.h"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 34,
                  "endLine": 69,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    AWS_MQTT5_CRC_IMPLEMENTATION_SPECIFIC_ERROR = 131,\n    AWS_MQTT5_CRC_UNSUPPORTED_PROTOCOL_VERSION = 132,\n    AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID = 133,\n    AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD = 134,\n    AWS_MQTT5_CRC_NOT_AUTHORIZED = 135,\n    AWS_MQTT5_CRC_SERVER_UNAVAILABLE = 136,\n    AWS_MQTT5_CRC_SERVER_BUSY = 137,\n",
                    "rendered": {
                      "text": "    AWS_MQTT5_CRC_IMPLEMENTATION_SPECIFIC_ERROR = 131,\n    AWS_MQTT5_CRC_UNSUPPORTED_PROTOCOL_VERSION = 132,\n    AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID = 133,\n    AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD = 134,\n    AWS_MQTT5_CRC_NOT_AUTHORIZED = 135,\n    AWS_MQTT5_CRC_SERVER_UNAVAILABLE = 136,\n    AWS_MQTT5_CRC_SERVER_BUSY = 137,\n",
                      "markdown": "`    AWS_MQTT5_CRC_IMPLEMENTATION_SPECIFIC_ERROR = 131,\n    AWS_MQTT5_CRC_UNSUPPORTED_PROTOCOL_VERSION = 132,\n    AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID = 133,\n    AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD = 134,\n    AWS_MQTT5_CRC_NOT_AUTHORIZED = 135,\n    AWS_MQTT5_CRC_SERVER_UNAVAILABLE = 136,\n    AWS_MQTT5_CRC_SERVER_BUSY = 137,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 235,
                  "endLine": 18,
                  "endColumn": 243,
                  "snippet": {
                    "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                    "rendered": {
                      "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                      "markdown": "`hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 334,
                  "endLine": 18,
                  "endColumn": 340,
                  "snippet": {
                    "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                    "rendered": {
                      "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                      "markdown": "`ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 232,
                  "endLine": 17,
                  "endColumn": 238,
                  "snippet": {
                    "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                    "rendered": {
                      "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                      "markdown": "`ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 40,
                  "endLine": 101,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14 --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14 --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14 --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 122,
                  "endLine": 148,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 16,
                  "endLine": 148,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 7,
                  "endLine": 137,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  # Test downstream repos.\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 7,
                  "endLine": 128,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  macos-x64:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  macos-x64:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  macos-x64:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 48,
                  "endLine": 93,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                    "rendered": {
                      "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                      "markdown": "`        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 122,
                  "endLine": 81,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 16,
                  "endLine": 81,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 122,
                  "endLine": 72,
                  "endColumn": 129,
                  "snippet": {
                    "text": "teps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers",
                    "rendered": {
                      "text": "teps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers",
                      "markdown": "`teps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DASSERT_LOCK_HELD=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 16,
                  "endLine": 72,
                  "endColumn": 20,
                  "snippet": {
                    "text": "ntu-20.04 # latest\n    strategy:\n      matrix:\n        sanitizers: [\",thread\", \",address,undefined\"]\n    steps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra",
                    "rendered": {
                      "text": "ntu-20.04 # latest\n    strategy:\n      matrix:\n        sanitizers: [\",thread\", \",address,undefined\"]\n    steps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra",
                      "markdown": "`ntu-20.04 # latest\n    strategy:\n      matrix:\n        sanitizers: [\",thread\", \",address,undefined\"]\n    steps:\n      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 122,
                  "endLine": 60,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 16,
                  "endLine": 60,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 120,
                  "endLine": 37,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  linux-compiler-compat:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 14,
                  "endLine": 37,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  linux-compiler-compat:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DASSERT_LOCK_HELD=ON\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/bin/mqtt5canary/main.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 49,
                  "endLine": 96,
                  "endColumn": 55,
                  "snippet": {
                    "text": " \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke",
                    "rendered": {
                      "text": " \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke",
                      "markdown": "` \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.gitignore"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 3,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n# Created by https://www.gitignore.io/api/macos,linux,clion,windows,visualstudiocode\n# Edit at https://www.gitignore.io/?templates=macos,linux,clion,windows,visualstudiocode\n\n### CLion ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n",
                    "rendered": {
                      "text": "\n# Created by https://www.gitignore.io/api/macos,linux,clion,windows,visualstudiocode\n# Edit at https://www.gitignore.io/?templates=macos,linux,clion,windows,visualstudiocode\n\n### CLion ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n",
                      "markdown": "`\n# Created by https://www.gitignore.io/api/macos,linux,clion,windows,visualstudiocode\n# Edit at https://www.gitignore.io/?templates=macos,linux,clion,windows,visualstudiocode\n\n### CLion ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 54,
                  "endLine": 139,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n`aws_mqtt_client_connection_connect`.\n\n```c\n",
                    "rendered": {
                      "text": "    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n`aws_mqtt_client_connection_connect`.\n\n```c\n",
                      "markdown": "`    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n`aws_mqtt_client_connection_connect`.\n\n```c\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 22,
                  "endLine": 138,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n`aws_mqtt_client_connection_connect`.\n\n",
                    "rendered": {
                      "text": "    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n`aws_mqtt_client_connection_connect`.\n\n",
                      "markdown": "`    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n`aws_mqtt_client_connection_connect`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 34,
                  "endLine": 136,
                  "endColumn": 42,
                  "snippet": {
                    "text": "int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n",
                    "rendered": {
                      "text": "int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n",
                      "markdown": "`int aws_mqtt_client_connection_set_login(\n    struct aws_mqtt_client_connection *connection,\n    const struct aws_byte_cursor *username,\n    const struct aws_byte_cursor *password);\n```\nSets the username and password to be sent to the server on connection. Must be called before\n`aws_mqtt_client_connection_connect`. `username` and `password` must persist past the call to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 95,
                  "endLine": 148,
                  "endColumn": 99,
                  "snippet": {
                    "text": "    uint64_t min_timeout,\n    uint64_t max_timeout);\n```\nSets the minimum and maximum reconnect timeouts. The time between reconnect attempts will start at min and multipy by 2\nuntil max is reached.\n\n```c\n",
                    "rendered": {
                      "text": "    uint64_t min_timeout,\n    uint64_t max_timeout);\n```\nSets the minimum and maximum reconnect timeouts. The time between reconnect attempts will start at min and multipy by 2\nuntil max is reached.\n\n```c\n",
                      "markdown": "`    uint64_t min_timeout,\n    uint64_t max_timeout);\n```\nSets the minimum and maximum reconnect timeouts. The time between reconnect attempts will start at min and multipy by 2\nuntil max is reached.\n\n```c\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 52,
                  "endLine": 148,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    uint64_t min_timeout,\n    uint64_t max_timeout);\n```\nSets the minimum and maximum reconnect timeouts. The time between reconnect attempts will start at min and multipy by 2\nuntil max is reached.\n\n```c\n",
                    "rendered": {
                      "text": "    uint64_t min_timeout,\n    uint64_t max_timeout);\n```\nSets the minimum and maximum reconnect timeouts. The time between reconnect attempts will start at min and multipy by 2\nuntil max is reached.\n\n```c\n",
                      "markdown": "`    uint64_t min_timeout,\n    uint64_t max_timeout);\n```\nSets the minimum and maximum reconnect timeouts. The time between reconnect attempts will start at min and multipy by 2\nuntil max is reached.\n\n```c\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 80,
                  "endLine": 105,
                  "endColumn": 84,
                  "snippet": {
                    "text": "configure connection parameters, and then call `aws_mqtt_client_connection_connect` to actually open the connection.\n* `client` is required in order to use an existing DNS resolver, event loop group, and allocator.\n* `callbacks` provides the connection-level (not operation level) callbacks and the userdata to be given back.\n* `host_name` lists the end point to connect to. This may be a DNS address or an IP address.\n    *This resource may be freed immediately after return.*\n* `port` the port to connect to on `host_name`.\n* `socket_options` describes how to open the connection.\n",
                    "rendered": {
                      "text": "configure connection parameters, and then call `aws_mqtt_client_connection_connect` to actually open the connection.\n* `client` is required in order to use an existing DNS resolver, event loop group, and allocator.\n* `callbacks` provides the connection-level (not operation level) callbacks and the userdata to be given back.\n* `host_name` lists the end point to connect to. This may be a DNS address or an IP address.\n    *This resource may be freed immediately after return.*\n* `port` the port to connect to on `host_name`.\n* `socket_options` describes how to open the connection.\n",
                      "markdown": "`configure connection parameters, and then call `aws_mqtt_client_connection_connect` to actually open the connection.\n* `client` is required in order to use an existing DNS resolver, event loop group, and allocator.\n* `callbacks` provides the connection-level (not operation level) callbacks and the userdata to be given back.\n* `host_name` lists the end point to connect to. This may be a DNS address or an IP address.\n    *This resource may be freed immediately after return.*\n* `port` the port to connect to on `host_name`.\n* `socket_options` describes how to open the connection.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 54,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\ngit clone git@github.com:awslabs/aws-c-mqtt.git\ncmake -S aws-c-mqtt -B aws-c-mqtt/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-mqtt/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\ngit clone git@github.com:awslabs/aws-c-mqtt.git\ncmake -S aws-c-mqtt -B aws-c-mqtt/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-mqtt/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\ngit clone git@github.com:awslabs/aws-c-mqtt.git\ncmake -S aws-c-mqtt -B aws-c-mqtt/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-mqtt/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 50,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 46,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 42,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 34,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n#### Building aws-c-mqtt and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                    "rendered": {
                      "text": "\n#### Building aws-c-mqtt and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                      "markdown": "`\n#### Building aws-c-mqtt and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 26,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/README.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 22,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n",
                    "rendered": {
                      "text": "\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n",
                      "markdown": "`\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 43,
                  "endLine": 702,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            return AWS_OP_ERR;\n        }\n\n        storage_view->password = &storage->password;\n    }\n\n    storage_view->clean_start = view->clean_start;\n",
                    "rendered": {
                      "text": "            return AWS_OP_ERR;\n        }\n\n        storage_view->password = &storage->password;\n    }\n\n    storage_view->clean_start = view->clean_start;\n",
                      "markdown": "`            return AWS_OP_ERR;\n        }\n\n        storage_view->password = &storage->password;\n    }\n\n    storage_view->clean_start = view->clean_start;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 22,
                  "endLine": 702,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            return AWS_OP_ERR;\n        }\n\n        storage_view->password = &storage->password;\n    }\n\n    storage_view->clean_start = view->clean_start;\n",
                    "rendered": {
                      "text": "            return AWS_OP_ERR;\n        }\n\n        storage_view->password = &storage->password;\n    }\n\n    storage_view->clean_start = view->clean_start;\n",
                      "markdown": "`            return AWS_OP_ERR;\n        }\n\n        storage_view->password = &storage->password;\n    }\n\n    storage_view->clean_start = view->clean_start;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 72,
                  "endLine": 698,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n\n",
                    "rendered": {
                      "text": "\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n\n",
                      "markdown": "`\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 35,
                  "endLine": 697,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n",
                    "rendered": {
                      "text": "    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n",
                      "markdown": "`    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 17,
                  "endLine": 697,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n",
                    "rendered": {
                      "text": "    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n",
                      "markdown": "`    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 14,
                  "endLine": 696,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        storage_view->username = &storage->username;\n    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n",
                    "rendered": {
                      "text": "        storage_view->username = &storage->username;\n    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n",
                      "markdown": "`        storage_view->username = &storage->username;\n    }\n\n    if (view->password != NULL) {\n        storage->password = *view->password;\n        if (aws_byte_buf_append_and_update(&storage->storage, &storage->password)) {\n            return AWS_OP_ERR;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 30,
                  "endLine": 649,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        storage_size += view->username->len;\n    }\n    if (view->password != NULL) {\n        storage_size += view->password->len;\n    }\n\n    storage_size +=\n",
                    "rendered": {
                      "text": "        storage_size += view->username->len;\n    }\n    if (view->password != NULL) {\n        storage_size += view->password->len;\n    }\n\n    storage_size +=\n",
                      "markdown": "`        storage_size += view->username->len;\n    }\n    if (view->password != NULL) {\n        storage_size += view->password->len;\n    }\n\n    storage_size +=\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 14,
                  "endLine": 648,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    if (view->username != NULL) {\n        storage_size += view->username->len;\n    }\n    if (view->password != NULL) {\n        storage_size += view->password->len;\n    }\n\n",
                    "rendered": {
                      "text": "    if (view->username != NULL) {\n        storage_size += view->username->len;\n    }\n    if (view->password != NULL) {\n        storage_size += view->password->len;\n    }\n\n",
                      "markdown": "`    if (view->username != NULL) {\n        storage_size += view->username->len;\n    }\n    if (view->password != NULL) {\n        storage_size += view->password->len;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 22,
                  "endLine": 612,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            (void *)connect_view);\n    }\n\n    if (connect_view->password != NULL) {\n        AWS_LOGUF(\n            log_handle,\n            level,\n",
                    "rendered": {
                      "text": "            (void *)connect_view);\n    }\n\n    if (connect_view->password != NULL) {\n        AWS_LOGUF(\n            log_handle,\n            level,\n",
                      "markdown": "`            (void *)connect_view);\n    }\n\n    if (connect_view->password != NULL) {\n        AWS_LOGUF(\n            log_handle,\n            level,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 50,
                  "endLine": 501,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            log_handle,\n            level,\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_connect_view password set\",\n            (void *)connect_view);\n    }\n\n",
                    "rendered": {
                      "text": "            log_handle,\n            level,\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_connect_view password set\",\n            (void *)connect_view);\n    }\n\n",
                      "markdown": "`            log_handle,\n            level,\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_connect_view password set\",\n            (void *)connect_view);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 22,
                  "endLine": 496,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            (void *)connect_view);\n    }\n\n    if (connect_view->password != NULL) {\n        AWS_LOGUF(\n            log_handle,\n            level,\n",
                    "rendered": {
                      "text": "            (void *)connect_view);\n    }\n\n    if (connect_view->password != NULL) {\n        AWS_LOGUF(\n            log_handle,\n            level,\n",
                      "markdown": "`            (void *)connect_view);\n    }\n\n    if (connect_view->password != NULL) {\n        AWS_LOGUF(\n            log_handle,\n            level,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 56,
                  "endLine": 374,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n                \"id=%p: aws_mqtt5_packet_connect_view - password too long\",\n                (void *)connect_options);\n            return aws_raise_error(AWS_ERROR_MQTT5_CONNECT_OPTIONS_VALIDATION);\n        }\n",
                    "rendered": {
                      "text": "        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n                \"id=%p: aws_mqtt5_packet_connect_view - password too long\",\n                (void *)connect_options);\n            return aws_raise_error(AWS_ERROR_MQTT5_CONNECT_OPTIONS_VALIDATION);\n        }\n",
                      "markdown": "`        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n                \"id=%p: aws_mqtt5_packet_connect_view - password too long\",\n                (void *)connect_options);\n            return aws_raise_error(AWS_ERROR_MQTT5_CONNECT_OPTIONS_VALIDATION);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 29,
                  "endLine": 371,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    }\n\n    if (connect_options->password != NULL) {\n        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n                \"id=%p: aws_mqtt5_packet_connect_view - password too long\",\n",
                    "rendered": {
                      "text": "    }\n\n    if (connect_options->password != NULL) {\n        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n                \"id=%p: aws_mqtt5_packet_connect_view - password too long\",\n",
                      "markdown": "`    }\n\n    if (connect_options->password != NULL) {\n        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n                \"id=%p: aws_mqtt5_packet_connect_view - password too long\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 25,
                  "endLine": 370,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        }\n    }\n\n    if (connect_options->password != NULL) {\n        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    if (connect_options->password != NULL) {\n        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n",
                      "markdown": "`        }\n    }\n\n    if (connect_options->password != NULL) {\n        if (connect_options->password->len > UINT16_MAX) {\n            AWS_LOGF_ERROR(\n                AWS_LS_MQTT5_GENERAL,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 3645,
                  "startColumn": 77,
                  "endLine": 3645,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage extended validation and flow control options set to %d (%s)\",\n        (void *)options_storage,\n        (int)options_storage->extended_validation_and_flow_control_options,\n        aws_mqtt5_extended_validation_and_flow_control_options_to_c_string(\n",
                    "rendered": {
                      "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage extended validation and flow control options set to %d (%s)\",\n        (void *)options_storage,\n        (int)options_storage->extended_validation_and_flow_control_options,\n        aws_mqtt5_extended_validation_and_flow_control_options_to_c_string(\n",
                      "markdown": "`        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage extended validation and flow control options set to %d (%s)\",\n        (void *)options_storage,\n        (int)options_storage->extended_validation_and_flow_control_options,\n        aws_mqtt5_extended_validation_and_flow_control_options_to_c_string(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 2679,
                  "startColumn": 66,
                  "endLine": 2679,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    if (subscribe_view->subscription_count == 0) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_subscribe_view - must contain at least one subscription\",\n            (void *)subscribe_view);\n        return aws_raise_error(AWS_ERROR_MQTT5_SUBSCRIBE_OPTIONS_VALIDATION);\n    }\n",
                    "rendered": {
                      "text": "    if (subscribe_view->subscription_count == 0) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_subscribe_view - must contain at least one subscription\",\n            (void *)subscribe_view);\n        return aws_raise_error(AWS_ERROR_MQTT5_SUBSCRIBE_OPTIONS_VALIDATION);\n    }\n",
                      "markdown": "`    if (subscribe_view->subscription_count == 0) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_subscribe_view - must contain at least one subscription\",\n            (void *)subscribe_view);\n        return aws_raise_error(AWS_ERROR_MQTT5_SUBSCRIBE_OPTIONS_VALIDATION);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 2314,
                  "startColumn": 68,
                  "endLine": 2314,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    if (unsubscribe_view->topic_filter_count == 0) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_unsubscribe_view - must contain at least one topic\",\n            (void *)unsubscribe_view);\n        return aws_raise_error(AWS_ERROR_MQTT5_UNSUBSCRIBE_OPTIONS_VALIDATION);\n    }\n",
                    "rendered": {
                      "text": "    if (unsubscribe_view->topic_filter_count == 0) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_unsubscribe_view - must contain at least one topic\",\n            (void *)unsubscribe_view);\n        return aws_raise_error(AWS_ERROR_MQTT5_UNSUBSCRIBE_OPTIONS_VALIDATION);\n    }\n",
                      "markdown": "`    if (unsubscribe_view->topic_filter_count == 0) {\n        AWS_LOGF_ERROR(\n            AWS_LS_MQTT5_GENERAL,\n            \"id=%p: aws_mqtt5_packet_unsubscribe_view - must contain at least one topic\",\n            (void *)unsubscribe_view);\n        return aws_raise_error(AWS_ERROR_MQTT5_UNSUBSCRIBE_OPTIONS_VALIDATION);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 3700,
                  "startColumn": 56,
                  "endLine": 3700,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage connack timeout interval set to %\" PRIu32 \" ms\",\n        (void *)options_storage,\n        options_storage->connack_timeout_ms);\n\n",
                    "rendered": {
                      "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage connack timeout interval set to %\" PRIu32 \" ms\",\n        (void *)options_storage,\n        options_storage->connack_timeout_ms);\n\n",
                      "markdown": "`        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage connack timeout interval set to %\" PRIu32 \" ms\",\n        (void *)options_storage,\n        options_storage->connack_timeout_ms);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 3692,
                  "startColumn": 53,
                  "endLine": 3692,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage ping timeout interval set to %\" PRIu32 \" ms\",\n        (void *)options_storage,\n        options_storage->ping_timeout_ms);\n\n",
                    "rendered": {
                      "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage ping timeout interval set to %\" PRIu32 \" ms\",\n        (void *)options_storage,\n        options_storage->ping_timeout_ms);\n\n",
                      "markdown": "`        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage ping timeout interval set to %\" PRIu32 \" ms\",\n        (void *)options_storage,\n        options_storage->ping_timeout_ms);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 3681,
                  "startColumn": 77,
                  "endLine": 3681,
                  "endColumn": 83,
                  "snippet": {
                    "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage minimum necessary connection time in order to reset the reconnect \"\n        \"delay \"\n        \"set \"\n        \"to %\" PRIu64 \" ms\",\n",
                    "rendered": {
                      "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage minimum necessary connection time in order to reset the reconnect \"\n        \"delay \"\n        \"set \"\n        \"to %\" PRIu64 \" ms\",\n",
                      "markdown": "`        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage minimum necessary connection time in order to reset the reconnect \"\n        \"delay \"\n        \"set \"\n        \"to %\" PRIu64 \" ms\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_options_storage.c"
                },
                "region": {
                  "startLine": 3456,
                  "startColumn": 73,
                  "endLine": 3456,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage %s tls options handshake timeout set to %\" PRIu32,\n        (void *)options_storage,\n        log_text,\n        tls_options->timeout_ms);\n",
                    "rendered": {
                      "text": "        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage %s tls options handshake timeout set to %\" PRIu32,\n        (void *)options_storage,\n        log_text,\n        tls_options->timeout_ms);\n",
                      "markdown": "`        log_handle,\n        level,\n        AWS_LS_MQTT5_GENERAL,\n        \"id=%p: aws_mqtt5_client_options_storage %s tls options handshake timeout set to %\" PRIu32,\n        (void *)options_storage,\n        log_text,\n        tls_options->timeout_ms);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/topic_tree.c"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 76,
                  "endLine": 757,
                  "endColumn": 82,
                  "snippet": {
                    "text": "            current = elem->value;\n            if (aws_array_list_push_back(&action->to_remove, &current)) {\n                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_TOPIC_TREE, \"tree=%p: Failed to insert topic node into to_remove list\", (void *)tree);\n                goto handle_error;\n            }\n        } else {\n",
                    "rendered": {
                      "text": "            current = elem->value;\n            if (aws_array_list_push_back(&action->to_remove, &current)) {\n                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_TOPIC_TREE, \"tree=%p: Failed to insert topic node into to_remove list\", (void *)tree);\n                goto handle_error;\n            }\n        } else {\n",
                      "markdown": "`            current = elem->value;\n            if (aws_array_list_push_back(&action->to_remove, &current)) {\n                AWS_LOGF_ERROR(\n                    AWS_LS_MQTT_TOPIC_TREE, \"tree=%p: Failed to insert topic node into to_remove list\", (void *)tree);\n                goto handle_error;\n            }\n        } else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/topic_tree.c"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 78,
                  "endLine": 739,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n    struct aws_mqtt_topic_node *current = tree->root;\n    if (aws_array_list_push_back(&action->to_remove, &current)) {\n        AWS_LOGF_ERROR(AWS_LS_MQTT_TOPIC_TREE, \"tree=%p: Failed to insert root node into to_remove list\", (void *)tree);\n        goto handle_error;\n    }\n\n",
                    "rendered": {
                      "text": "\n    struct aws_mqtt_topic_node *current = tree->root;\n    if (aws_array_list_push_back(&action->to_remove, &current)) {\n        AWS_LOGF_ERROR(AWS_LS_MQTT_TOPIC_TREE, \"tree=%p: Failed to insert root node into to_remove list\", (void *)tree);\n        goto handle_error;\n    }\n\n",
                      "markdown": "`\n    struct aws_mqtt_topic_node *current = tree->root;\n    if (aws_array_list_push_back(&action->to_remove, &current)) {\n        AWS_LOGF_ERROR(AWS_LS_MQTT_TOPIC_TREE, \"tree=%p: Failed to insert root node into to_remove list\", (void *)tree);\n        goto handle_error;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/topic_tree.c"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 47,
                  "endLine": 670,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT_TOPIC_TREE,\n            \"tree=%p node=%p: Updating existing node that already owns its topic_filter, throwing out parameter\",\n            (void *)tree,\n            (void *)current);\n\n",
                    "rendered": {
                      "text": "\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT_TOPIC_TREE,\n            \"tree=%p node=%p: Updating existing node that already owns its topic_filter, throwing out parameter\",\n            (void *)tree,\n            (void *)current);\n\n",
                      "markdown": "`\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT_TOPIC_TREE,\n            \"tree=%p node=%p: Updating existing node that already owns its topic_filter, throwing out parameter\",\n            (void *)tree,\n            (void *)current);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/topic_tree.c"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 47,
                  "endLine": 485,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n                            AWS_LOGF_TRACE(\n                                AWS_LS_MQTT_TOPIC_TREE,\n                                \"tree=%p: Found node %p reusing topic filter part, replacing with next child\",\n                                (void *)tree,\n                                (void *)parent);\n\n",
                    "rendered": {
                      "text": "\n                            AWS_LOGF_TRACE(\n                                AWS_LS_MQTT_TOPIC_TREE,\n                                \"tree=%p: Found node %p reusing topic filter part, replacing with next child\",\n                                (void *)tree,\n                                (void *)parent);\n\n",
                      "markdown": "`\n                            AWS_LOGF_TRACE(\n                                AWS_LS_MQTT_TOPIC_TREE,\n                                \"tree=%p: Found node %p reusing topic filter part, replacing with next child\",\n                                (void *)tree,\n                                (void *)parent);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/topic_tree.c"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 37,
                  "endLine": 444,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n                        AWS_LOGF_TRACE(\n                            AWS_LS_MQTT_TOPIC_TREE,\n                            \"tree=%p: Node %p with topic \\\"\" PRInSTR\n                            \"\\\" has children or is a subscription, leaving in place\",\n                            (void *)tree,\n                            (void *)node,\n",
                    "rendered": {
                      "text": "\n                        AWS_LOGF_TRACE(\n                            AWS_LS_MQTT_TOPIC_TREE,\n                            \"tree=%p: Node %p with topic \\\"\" PRInSTR\n                            \"\\\" has children or is a subscription, leaving in place\",\n                            (void *)tree,\n                            (void *)node,\n",
                      "markdown": "`\n                        AWS_LOGF_TRACE(\n                            AWS_LS_MQTT_TOPIC_TREE,\n                            \"tree=%p: Node %p with topic \\\"\" PRInSTR\n                            \"\\\" has children or is a subscription, leaving in place\",\n                            (void *)tree,\n                            (void *)node,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/topic_tree.c"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 60,
                  "endLine": 420,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n                        AWS_LOGF_TRACE(\n                            AWS_LS_MQTT_TOPIC_TREE,\n                            \"tree=%p node=%p: Removing child node %p with topic \\\"\" PRInSTR \"\\\"\",\n                            (void *)tree,\n                            (void *)grandma,\n                            (void *)node,\n",
                    "rendered": {
                      "text": "\n                        AWS_LOGF_TRACE(\n                            AWS_LS_MQTT_TOPIC_TREE,\n                            \"tree=%p node=%p: Removing child node %p with topic \\\"\" PRInSTR \"\\\"\",\n                            (void *)tree,\n                            (void *)grandma,\n                            (void *)node,\n",
                      "markdown": "`\n                        AWS_LOGF_TRACE(\n                            AWS_LS_MQTT_TOPIC_TREE,\n                            \"tree=%p node=%p: Removing child node %p with topic \\\"\" PRInSTR \"\\\"\",\n                            (void *)tree,\n                            (void *)grandma,\n                            (void *)node,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/topic_tree.c"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 34,
                  "endLine": 139,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    if (topic_filter) {\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT_TOPIC_TREE,\n            \"node=%p: Creating new node with topic filter \" PRInSTR,\n            (void *)node,\n            AWS_BYTE_CURSOR_PRI(*topic_filter));\n    }\n",
                    "rendered": {
                      "text": "    if (topic_filter) {\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT_TOPIC_TREE,\n            \"node=%p: Creating new node with topic filter \" PRInSTR,\n            (void *)node,\n            AWS_BYTE_CURSOR_PRI(*topic_filter));\n    }\n",
                      "markdown": "`    if (topic_filter) {\n        AWS_LOGF_TRACE(\n            AWS_LS_MQTT_TOPIC_TREE,\n            \"node=%p: Creating new node with topic filter \" PRInSTR,\n            (void *)node,\n            AWS_BYTE_CURSOR_PRI(*topic_filter));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_encoder.c"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 75,
                  "endLine": 428,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    }\n\n    ADD_ENCODE_STEP_OPTIONAL_LENGTH_PREFIXED_CURSOR(encoder, connect_view->username);\n    ADD_ENCODE_STEP_OPTIONAL_LENGTH_PREFIXED_CURSOR(encoder, connect_view->password);\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    }\n\n    ADD_ENCODE_STEP_OPTIONAL_LENGTH_PREFIXED_CURSOR(encoder, connect_view->username);\n    ADD_ENCODE_STEP_OPTIONAL_LENGTH_PREFIXED_CURSOR(encoder, connect_view->password);\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    }\n\n    ADD_ENCODE_STEP_OPTIONAL_LENGTH_PREFIXED_CURSOR(encoder, connect_view->username);\n    ADD_ENCODE_STEP_OPTIONAL_LENGTH_PREFIXED_CURSOR(encoder, connect_view->password);\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_encoder.c"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 22,
                  "endLine": 337,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        }\n    }\n\n    if (connect_view->password != NULL) {\n        flags |= 1 << 6;\n    }\n\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    if (connect_view->password != NULL) {\n        flags |= 1 << 6;\n    }\n\n",
                      "markdown": "`        }\n    }\n\n    if (connect_view->password != NULL) {\n        flags |= 1 << 6;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_encoder.c"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 40,
                  "endLine": 312,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    }\n\n    if (connect_view->password != NULL) {\n        payload_length += connect_view->password->len + 2;\n    }\n\n    *total_remaining_length = payload_length + variable_header_length;\n",
                    "rendered": {
                      "text": "    }\n\n    if (connect_view->password != NULL) {\n        payload_length += connect_view->password->len + 2;\n    }\n\n    *total_remaining_length = payload_length + variable_header_length;\n",
                      "markdown": "`    }\n\n    if (connect_view->password != NULL) {\n        payload_length += connect_view->password->len + 2;\n    }\n\n    *total_remaining_length = payload_length + variable_header_length;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/source/v5/mqtt5_encoder.c"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 22,
                  "endLine": 311,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        payload_length += connect_view->username->len + 2;\n    }\n\n    if (connect_view->password != NULL) {\n        payload_length += connect_view->password->len + 2;\n    }\n\n",
                    "rendered": {
                      "text": "        payload_length += connect_view->username->len + 2;\n    }\n\n    if (connect_view->password != NULL) {\n        payload_length += connect_view->password->len + 2;\n    }\n\n",
                      "markdown": "`        payload_length += connect_view->username->len + 2;\n    }\n\n    if (connect_view->password != NULL) {\n        payload_length += connect_view->password->len + 2;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/mqtt_mock_server_handler.h"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 27,
                  "endLine": 30,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    struct aws_byte_cursor will_topic;\n    struct aws_byte_cursor will_message;\n    struct aws_byte_cursor username;\n    struct aws_byte_cursor password;\n\n    /* PUBLISH SUBSCRIBE UNSUBSCRIBE */\n    uint16_t packet_identifier;\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor will_topic;\n    struct aws_byte_cursor will_message;\n    struct aws_byte_cursor username;\n    struct aws_byte_cursor password;\n\n    /* PUBLISH SUBSCRIBE UNSUBSCRIBE */\n    uint16_t packet_identifier;\n",
                      "markdown": "`    struct aws_byte_cursor will_topic;\n    struct aws_byte_cursor will_message;\n    struct aws_byte_cursor username;\n    struct aws_byte_cursor password;\n\n    /* PUBLISH SUBSCRIBE UNSUBSCRIBE */\n    uint16_t packet_identifier;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/mqtt_mock_server_handler.h"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 13,
                  "endLine": 22,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    bool clean_session;\n    bool has_will;\n    bool will_retain;\n    bool has_password;\n    bool has_username;\n    uint16_t keep_alive_timeout;\n    enum aws_mqtt_qos will_qos;\n",
                    "rendered": {
                      "text": "    bool clean_session;\n    bool has_will;\n    bool will_retain;\n    bool has_password;\n    bool has_username;\n    uint16_t keep_alive_timeout;\n    enum aws_mqtt_qos will_qos;\n",
                      "markdown": "`    bool clean_session;\n    bool has_will;\n    bool will_retain;\n    bool has_password;\n    bool has_username;\n    uint16_t keep_alive_timeout;\n    enum aws_mqtt_qos will_qos;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 68,
                  "endLine": 183,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &new_username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &new_password));\n\n    /* disconnect. FINISHED */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &new_username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &new_password));\n\n    /* disconnect. FINISHED */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n",
                      "markdown": "`    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &new_username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &new_password));\n\n    /* disconnect. FINISHED */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 53,
                  "endLine": 183,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &new_username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &new_password));\n\n    /* disconnect. FINISHED */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &new_username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &new_password));\n\n    /* disconnect. FINISHED */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n",
                      "markdown": "`    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &new_username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &new_password));\n\n    /* disconnect. FINISHED */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 99,
                  "endLine": 164,
                  "endColumn": 107,
                  "snippet": {
                    "text": "        state_test_data->mqtt_connection, &new_topic, new_will_qos, true /*retain*/, &new_will_payload));\n\n    ASSERT_SUCCESS(\n        aws_mqtt_client_connection_set_login(state_test_data->mqtt_connection, &new_username, &new_password));\n\n    /* connect again */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_connect(state_test_data->mqtt_connection, &connection_options));\n",
                    "rendered": {
                      "text": "        state_test_data->mqtt_connection, &new_topic, new_will_qos, true /*retain*/, &new_will_payload));\n\n    ASSERT_SUCCESS(\n        aws_mqtt_client_connection_set_login(state_test_data->mqtt_connection, &new_username, &new_password));\n\n    /* connect again */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_connect(state_test_data->mqtt_connection, &connection_options));\n",
                      "markdown": "`        state_test_data->mqtt_connection, &new_topic, new_will_qos, true /*retain*/, &new_will_payload));\n\n    ASSERT_SUCCESS(\n        aws_mqtt_client_connection_set_login(state_test_data->mqtt_connection, &new_username, &new_password));\n\n    /* connect again */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_connect(state_test_data->mqtt_connection, &connection_options));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 74,
                  "endLine": 157,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    struct aws_byte_cursor new_will_payload = aws_byte_cursor_from_c_str(\"this is a new will.\");\n    struct aws_byte_cursor new_topic = aws_byte_cursor_from_c_str(\"test_topic_New\");\n    struct aws_byte_cursor new_username = aws_byte_cursor_from_c_str(\"new user name\");\n    struct aws_byte_cursor new_password = aws_byte_cursor_from_c_str(\"new password\");\n    enum aws_mqtt_qos new_will_qos = AWS_MQTT_QOS_AT_MOST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor new_will_payload = aws_byte_cursor_from_c_str(\"this is a new will.\");\n    struct aws_byte_cursor new_topic = aws_byte_cursor_from_c_str(\"test_topic_New\");\n    struct aws_byte_cursor new_username = aws_byte_cursor_from_c_str(\"new user name\");\n    struct aws_byte_cursor new_password = aws_byte_cursor_from_c_str(\"new password\");\n    enum aws_mqtt_qos new_will_qos = AWS_MQTT_QOS_AT_MOST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n",
                      "markdown": "`    struct aws_byte_cursor new_will_payload = aws_byte_cursor_from_c_str(\"this is a new will.\");\n    struct aws_byte_cursor new_topic = aws_byte_cursor_from_c_str(\"test_topic_New\");\n    struct aws_byte_cursor new_username = aws_byte_cursor_from_c_str(\"new user name\");\n    struct aws_byte_cursor new_password = aws_byte_cursor_from_c_str(\"new password\");\n    enum aws_mqtt_qos new_will_qos = AWS_MQTT_QOS_AT_MOST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 31,
                  "endLine": 157,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    struct aws_byte_cursor new_will_payload = aws_byte_cursor_from_c_str(\"this is a new will.\");\n    struct aws_byte_cursor new_topic = aws_byte_cursor_from_c_str(\"test_topic_New\");\n    struct aws_byte_cursor new_username = aws_byte_cursor_from_c_str(\"new user name\");\n    struct aws_byte_cursor new_password = aws_byte_cursor_from_c_str(\"new password\");\n    enum aws_mqtt_qos new_will_qos = AWS_MQTT_QOS_AT_MOST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor new_will_payload = aws_byte_cursor_from_c_str(\"this is a new will.\");\n    struct aws_byte_cursor new_topic = aws_byte_cursor_from_c_str(\"test_topic_New\");\n    struct aws_byte_cursor new_username = aws_byte_cursor_from_c_str(\"new user name\");\n    struct aws_byte_cursor new_password = aws_byte_cursor_from_c_str(\"new password\");\n    enum aws_mqtt_qos new_will_qos = AWS_MQTT_QOS_AT_MOST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n",
                      "markdown": "`    struct aws_byte_cursor new_will_payload = aws_byte_cursor_from_c_str(\"this is a new will.\");\n    struct aws_byte_cursor new_topic = aws_byte_cursor_from_c_str(\"test_topic_New\");\n    struct aws_byte_cursor new_username = aws_byte_cursor_from_c_str(\"new user name\");\n    struct aws_byte_cursor new_password = aws_byte_cursor_from_c_str(\"new password\");\n    enum aws_mqtt_qos new_will_qos = AWS_MQTT_QOS_AT_MOST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 64,
                  "endLine": 146,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* disconnect */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* disconnect */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n",
                      "markdown": "`    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* disconnect */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 53,
                  "endLine": 146,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* disconnect */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* disconnect */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n",
                      "markdown": "`    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* disconnect */\n    ASSERT_SUCCESS(aws_mqtt_client_connection_disconnect(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 64,
                  "endLine": 122,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* DISCONNECT packet */\n    received_packet = mqtt_mock_server_get_decoded_packet_by_index(state_test_data->mock_server, 1);\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* DISCONNECT packet */\n    received_packet = mqtt_mock_server_get_decoded_packet_by_index(state_test_data->mock_server, 1);\n",
                      "markdown": "`    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* DISCONNECT packet */\n    received_packet = mqtt_mock_server_get_decoded_packet_by_index(state_test_data->mock_server, 1);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 53,
                  "endLine": 122,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* DISCONNECT packet */\n    received_packet = mqtt_mock_server_get_decoded_packet_by_index(state_test_data->mock_server, 1);\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* DISCONNECT packet */\n    received_packet = mqtt_mock_server_get_decoded_packet_by_index(state_test_data->mock_server, 1);\n",
                      "markdown": "`    ASSERT_TRUE(true == received_packet->will_retain);\n    /* validate the received login information */\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->username, &username));\n    ASSERT_TRUE(aws_byte_cursor_eq(&received_packet->password, &password));\n\n    /* DISCONNECT packet */\n    received_packet = mqtt_mock_server_get_decoded_packet_by_index(state_test_data->mock_server, 1);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 102,
                  "endLine": 87,
                  "endColumn": 110,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n        state_test_data->mqtt_connection, &topic, will_qos, true /*retain*/, &will_payload));\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(state_test_data->mqtt_connection, &username, &password));\n\n    struct aws_mqtt_connection_options connection_options = {\n        .user_data = state_test_data,\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n        state_test_data->mqtt_connection, &topic, will_qos, true /*retain*/, &will_payload));\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(state_test_data->mqtt_connection, &username, &password));\n\n    struct aws_mqtt_connection_options connection_options = {\n        .user_data = state_test_data,\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n        state_test_data->mqtt_connection, &topic, will_qos, true /*retain*/, &will_payload));\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_login(state_test_data->mqtt_connection, &username, &password));\n\n    struct aws_mqtt_connection_options connection_options = {\n        .user_data = state_test_data,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 66,
                  "endLine": 81,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    struct aws_byte_cursor will_payload = aws_byte_cursor_from_c_str(\"this is a will.\");\n    struct aws_byte_cursor topic = aws_byte_cursor_from_c_str(\"test_topic\");\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(\"user name\");\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(\"password\");\n    enum aws_mqtt_qos will_qos = AWS_MQTT_QOS_AT_LEAST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor will_payload = aws_byte_cursor_from_c_str(\"this is a will.\");\n    struct aws_byte_cursor topic = aws_byte_cursor_from_c_str(\"test_topic\");\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(\"user name\");\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(\"password\");\n    enum aws_mqtt_qos will_qos = AWS_MQTT_QOS_AT_LEAST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n",
                      "markdown": "`    struct aws_byte_cursor will_payload = aws_byte_cursor_from_c_str(\"this is a will.\");\n    struct aws_byte_cursor topic = aws_byte_cursor_from_c_str(\"test_topic\");\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(\"user name\");\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(\"password\");\n    enum aws_mqtt_qos will_qos = AWS_MQTT_QOS_AT_LEAST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 27,
                  "endLine": 81,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    struct aws_byte_cursor will_payload = aws_byte_cursor_from_c_str(\"this is a will.\");\n    struct aws_byte_cursor topic = aws_byte_cursor_from_c_str(\"test_topic\");\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(\"user name\");\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(\"password\");\n    enum aws_mqtt_qos will_qos = AWS_MQTT_QOS_AT_LEAST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor will_payload = aws_byte_cursor_from_c_str(\"this is a will.\");\n    struct aws_byte_cursor topic = aws_byte_cursor_from_c_str(\"test_topic\");\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(\"user name\");\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(\"password\");\n    enum aws_mqtt_qos will_qos = AWS_MQTT_QOS_AT_LEAST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n",
                      "markdown": "`    struct aws_byte_cursor will_payload = aws_byte_cursor_from_c_str(\"this is a will.\");\n    struct aws_byte_cursor topic = aws_byte_cursor_from_c_str(\"test_topic\");\n    struct aws_byte_cursor username = aws_byte_cursor_from_c_str(\"user name\");\n    struct aws_byte_cursor password = aws_byte_cursor_from_c_str(\"password\");\n    enum aws_mqtt_qos will_qos = AWS_MQTT_QOS_AT_LEAST_ONCE;\n\n    ASSERT_SUCCESS(aws_mqtt_client_connection_set_will(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3/connection_state_test.c"
                },
                "region": {
                  "startLine": 3879,
                  "startColumn": 92,
                  "endLine": 3879,
                  "endColumn": 112,
                  "snippet": {
                    "text": "    s_clean_up_mqtt_server_fn,\n    &test_data)\n\nstatic struct aws_byte_cursor s_bad_client_id_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\xED\\xA0\\x80\\x41\");\nstatic struct aws_byte_cursor s_bad_username_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\x00\\x41\");\nstatic struct aws_byte_cursor s_bad_will_topic_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\xED\\xBF\\xBF\");\n\n",
                    "rendered": {
                      "text": "    s_clean_up_mqtt_server_fn,\n    &test_data)\n\nstatic struct aws_byte_cursor s_bad_client_id_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\xED\\xA0\\x80\\x41\");\nstatic struct aws_byte_cursor s_bad_username_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\x00\\x41\");\nstatic struct aws_byte_cursor s_bad_will_topic_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\xED\\xBF\\xBF\");\n\n",
                      "markdown": "`    s_clean_up_mqtt_server_fn,\n    &test_data)\n\nstatic struct aws_byte_cursor s_bad_client_id_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\xED\\xA0\\x80\\x41\");\nstatic struct aws_byte_cursor s_bad_username_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\x00\\x41\");\nstatic struct aws_byte_cursor s_bad_will_topic_utf8 = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\x41\\xED\\xBF\\xBF\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3-client/aws_iot_client_test.c"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 65,
                  "endLine": 395,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    struct test_context tester;\n    AWS_ZERO_STRUCT(tester);\n\n    AWS_FATAL_ASSERT(s_initialize_test(&tester, allocator, cert, private_key, root_ca, endpoint) == AWS_OP_SUCCESS);\n\n    struct aws_byte_cursor subscribe_topic_cur = aws_byte_cursor_from_string(s_subscribe_topic);\n\n",
                    "rendered": {
                      "text": "    struct test_context tester;\n    AWS_ZERO_STRUCT(tester);\n\n    AWS_FATAL_ASSERT(s_initialize_test(&tester, allocator, cert, private_key, root_ca, endpoint) == AWS_OP_SUCCESS);\n\n    struct aws_byte_cursor subscribe_topic_cur = aws_byte_cursor_from_string(s_subscribe_topic);\n\n",
                      "markdown": "`    struct test_context tester;\n    AWS_ZERO_STRUCT(tester);\n\n    AWS_FATAL_ASSERT(s_initialize_test(&tester, allocator, cert, private_key, root_ca, endpoint) == AWS_OP_SUCCESS);\n\n    struct aws_byte_cursor subscribe_topic_cur = aws_byte_cursor_from_string(s_subscribe_topic);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3-client/aws_iot_client_test.c"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 16,
                  "endLine": 387,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    const char *endpoint = argv[1];\n    const char *cert = argv[2];\n    const char *private_key = argv[3];\n    const char *root_ca = argv[4];\n\n    struct aws_allocator *allocator = aws_mem_tracer_new(aws_default_allocator(), NULL, AWS_MEMTRACE_BYTES, 0);\n",
                    "rendered": {
                      "text": "\n    const char *endpoint = argv[1];\n    const char *cert = argv[2];\n    const char *private_key = argv[3];\n    const char *root_ca = argv[4];\n\n    struct aws_allocator *allocator = aws_mem_tracer_new(aws_default_allocator(), NULL, AWS_MEMTRACE_BYTES, 0);\n",
                      "markdown": "`\n    const char *endpoint = argv[1];\n    const char *cert = argv[2];\n    const char *private_key = argv[3];\n    const char *root_ca = argv[4];\n\n    struct aws_allocator *allocator = aws_mem_tracer_new(aws_default_allocator(), NULL, AWS_MEMTRACE_BYTES, 0);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3-client/aws_iot_client_test.c"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 61,
                  "endLine": 380,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    if (argc < 5) {\n        printf(\n            \"4 args required, only %d passed. Usage:\\n\"\n            \"aws-c-mqtt-iot-client [endpoint] [certificate] [private_key] [root_ca]\\n\",\n            argc - 1);\n        return 1;\n    }\n",
                    "rendered": {
                      "text": "    if (argc < 5) {\n        printf(\n            \"4 args required, only %d passed. Usage:\\n\"\n            \"aws-c-mqtt-iot-client [endpoint] [certificate] [private_key] [root_ca]\\n\",\n            argc - 1);\n        return 1;\n    }\n",
                      "markdown": "`    if (argc < 5) {\n        printf(\n            \"4 args required, only %d passed. Usage:\\n\"\n            \"aws-c-mqtt-iot-client [endpoint] [certificate] [private_key] [root_ca]\\n\",\n            argc - 1);\n        return 1;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3-client/aws_iot_client_test.c"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 104,
                  "endLine": 291,
                  "endColumn": 115,
                  "snippet": {
                    "text": "\n    struct aws_tls_ctx_options tls_ctx_opt;\n    AWS_FATAL_ASSERT(\n        AWS_OP_SUCCESS == aws_tls_ctx_options_init_client_mtls_from_path(&tls_ctx_opt, allocator, cert, private_key));\n    AWS_FATAL_ASSERT(AWS_OP_SUCCESS == aws_tls_ctx_options_set_alpn_list(&tls_ctx_opt, \"x-amzn-mqtt-ca\"));\n    AWS_FATAL_ASSERT(\n        AWS_OP_SUCCESS == aws_tls_ctx_options_override_default_trust_store_from_path(&tls_ctx_opt, NULL, root_ca));\n",
                    "rendered": {
                      "text": "\n    struct aws_tls_ctx_options tls_ctx_opt;\n    AWS_FATAL_ASSERT(\n        AWS_OP_SUCCESS == aws_tls_ctx_options_init_client_mtls_from_path(&tls_ctx_opt, allocator, cert, private_key));\n    AWS_FATAL_ASSERT(AWS_OP_SUCCESS == aws_tls_ctx_options_set_alpn_list(&tls_ctx_opt, \"x-amzn-mqtt-ca\"));\n    AWS_FATAL_ASSERT(\n        AWS_OP_SUCCESS == aws_tls_ctx_options_override_default_trust_store_from_path(&tls_ctx_opt, NULL, root_ca));\n",
                      "markdown": "`\n    struct aws_tls_ctx_options tls_ctx_opt;\n    AWS_FATAL_ASSERT(\n        AWS_OP_SUCCESS == aws_tls_ctx_options_init_client_mtls_from_path(&tls_ctx_opt, allocator, cert, private_key));\n    AWS_FATAL_ASSERT(AWS_OP_SUCCESS == aws_tls_ctx_options_set_alpn_list(&tls_ctx_opt, \"x-amzn-mqtt-ca\"));\n    AWS_FATAL_ASSERT(\n        AWS_OP_SUCCESS == aws_tls_ctx_options_override_default_trust_store_from_path(&tls_ctx_opt, NULL, root_ca));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3-client/aws_iot_client_test.c"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 16,
                  "endLine": 258,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    struct test_context *tester,\n    struct aws_allocator *allocator,\n    const char *cert,\n    const char *private_key,\n    const char *root_ca,\n    const char *endpoint) {\n    aws_mqtt_library_init(allocator);\n",
                    "rendered": {
                      "text": "    struct test_context *tester,\n    struct aws_allocator *allocator,\n    const char *cert,\n    const char *private_key,\n    const char *root_ca,\n    const char *endpoint) {\n    aws_mqtt_library_init(allocator);\n",
                      "markdown": "`    struct test_context *tester,\n    struct aws_allocator *allocator,\n    const char *cert,\n    const char *private_key,\n    const char *root_ca,\n    const char *endpoint) {\n    aws_mqtt_library_init(allocator);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3-client/paho_client_test.c"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 73,
                  "endLine": 323,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    struct test_context tester;\n    AWS_ZERO_STRUCT(tester);\n\n    struct aws_byte_cursor host_name_cur = aws_byte_cursor_from_string(s_hostname);\n\n    struct aws_socket_options options;\n    AWS_ZERO_STRUCT(options);\n",
                    "rendered": {
                      "text": "    struct test_context tester;\n    AWS_ZERO_STRUCT(tester);\n\n    struct aws_byte_cursor host_name_cur = aws_byte_cursor_from_string(s_hostname);\n\n    struct aws_socket_options options;\n    AWS_ZERO_STRUCT(options);\n",
                      "markdown": "`    struct test_context tester;\n    AWS_ZERO_STRUCT(tester);\n\n    struct aws_byte_cursor host_name_cur = aws_byte_cursor_from_string(s_hostname);\n\n    struct aws_socket_options options;\n    AWS_ZERO_STRUCT(options);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/v3-client/paho_client_test.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 33,
                  "endLine": 39,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    .len = 11,\n};\nAWS_STATIC_STRING_FROM_LITERAL(s_subscribe_topic, \"a/b\");\nAWS_STATIC_STRING_FROM_LITERAL(s_hostname, \"localhost\");\n\nenum { PAYLOAD_LEN = 20000 };\nstatic uint8_t s_payload[PAYLOAD_LEN];\n",
                    "rendered": {
                      "text": "    .len = 11,\n};\nAWS_STATIC_STRING_FROM_LITERAL(s_subscribe_topic, \"a/b\");\nAWS_STATIC_STRING_FROM_LITERAL(s_hostname, \"localhost\");\n\nenum { PAYLOAD_LEN = 20000 };\nstatic uint8_t s_payload[PAYLOAD_LEN];\n",
                      "markdown": "`    .len = 11,\n};\nAWS_STATIC_STRING_FROM_LITERAL(s_subscribe_topic, \"a/b\");\nAWS_STATIC_STRING_FROM_LITERAL(s_hostname, \"localhost\");\n\nenum { PAYLOAD_LEN = 20000 };\nstatic uint8_t s_payload[PAYLOAD_LEN];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 45,
                  "endLine": 317,
                  "endColumn": 53,
                  "snippet": {
                    "text": "add_test_case(mqtt5_packet_puback_round_trip)\nadd_test_case(mqtt5_packet_encode_connect_no_will)\nadd_test_case(mqtt5_packet_encode_connect_no_username)\nadd_test_case(mqtt5_packet_encode_connect_no_password)\nadd_test_case(mqtt5_packet_encode_connect_will_property_order)\nadd_test_case(mqtt5_first_byte_reserved_header_check_subscribe)\nadd_test_case(mqtt5_first_byte_reserved_header_check_unsubscribe)\n",
                    "rendered": {
                      "text": "add_test_case(mqtt5_packet_puback_round_trip)\nadd_test_case(mqtt5_packet_encode_connect_no_will)\nadd_test_case(mqtt5_packet_encode_connect_no_username)\nadd_test_case(mqtt5_packet_encode_connect_no_password)\nadd_test_case(mqtt5_packet_encode_connect_will_property_order)\nadd_test_case(mqtt5_first_byte_reserved_header_check_subscribe)\nadd_test_case(mqtt5_first_byte_reserved_header_check_unsubscribe)\n",
                      "markdown": "`add_test_case(mqtt5_packet_puback_round_trip)\nadd_test_case(mqtt5_packet_encode_connect_no_will)\nadd_test_case(mqtt5_packet_encode_connect_no_username)\nadd_test_case(mqtt5_packet_encode_connect_no_password)\nadd_test_case(mqtt5_packet_encode_connect_will_property_order)\nadd_test_case(mqtt5_first_byte_reserved_header_check_subscribe)\nadd_test_case(mqtt5_first_byte_reserved_header_check_unsubscribe)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 57,
                  "endLine": 192,
                  "endColumn": 65,
                  "snippet": {
                    "text": "add_test_case(mqtt5_operation_connect_validation_failure_client_id_invalid_utf8)\nadd_test_case(mqtt5_operation_connect_validation_failure_username_too_long)\nadd_test_case(mqtt5_operation_connect_validation_failure_username_invalid_utf8)\nadd_test_case(mqtt5_operation_connect_validation_failure_password_too_long)\nadd_test_case(mqtt5_operation_connect_validation_failure_receive_maximum_zero)\nadd_test_case(mqtt5_operation_connect_validation_failure_maximum_packet_size_zero)\nadd_test_case(mqtt5_operation_connect_validation_failure_will_invalid)\n",
                    "rendered": {
                      "text": "add_test_case(mqtt5_operation_connect_validation_failure_client_id_invalid_utf8)\nadd_test_case(mqtt5_operation_connect_validation_failure_username_too_long)\nadd_test_case(mqtt5_operation_connect_validation_failure_username_invalid_utf8)\nadd_test_case(mqtt5_operation_connect_validation_failure_password_too_long)\nadd_test_case(mqtt5_operation_connect_validation_failure_receive_maximum_zero)\nadd_test_case(mqtt5_operation_connect_validation_failure_maximum_packet_size_zero)\nadd_test_case(mqtt5_operation_connect_validation_failure_will_invalid)\n",
                      "markdown": "`add_test_case(mqtt5_operation_connect_validation_failure_client_id_invalid_utf8)\nadd_test_case(mqtt5_operation_connect_validation_failure_username_too_long)\nadd_test_case(mqtt5_operation_connect_validation_failure_username_invalid_utf8)\nadd_test_case(mqtt5_operation_connect_validation_failure_password_too_long)\nadd_test_case(mqtt5_operation_connect_validation_failure_receive_maximum_zero)\nadd_test_case(mqtt5_operation_connect_validation_failure_maximum_packet_size_zero)\nadd_test_case(mqtt5_operation_connect_validation_failure_will_invalid)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 34,
                  "endLine": 19,
                  "endColumn": 42,
                  "snippet": {
                    "text": "add_test_case(mqtt_packet_connect)\nadd_test_case(mqtt_packet_connect_will)\nadd_test_case(mqtt_packet_connect_empty_payload_will)\nadd_test_case(mqtt_packet_connect_password)\nadd_test_case(mqtt_packet_connect_all)\nadd_test_case(mqtt_packet_connack)\nadd_test_case(mqtt_packet_publish_qos0_dup)\n",
                    "rendered": {
                      "text": "add_test_case(mqtt_packet_connect)\nadd_test_case(mqtt_packet_connect_will)\nadd_test_case(mqtt_packet_connect_empty_payload_will)\nadd_test_case(mqtt_packet_connect_password)\nadd_test_case(mqtt_packet_connect_all)\nadd_test_case(mqtt_packet_connack)\nadd_test_case(mqtt_packet_publish_qos0_dup)\n",
                      "markdown": "`add_test_case(mqtt_packet_connect)\nadd_test_case(mqtt_packet_connect_will)\nadd_test_case(mqtt_packet_connect_empty_payload_will)\nadd_test_case(mqtt_packet_connect_password)\nadd_test_case(mqtt_packet_connect_all)\nadd_test_case(mqtt_packet_connack)\nadd_test_case(mqtt_packet_publish_qos0_dup)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/shared_utils_tests.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 55,
                  "endLine": 52,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    },\n    {\n        .name = \"UTF8 BOM plus extra\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xEF\\xBB\\xBF\\x24\\xC2\\xA3\"),\n    },\n    {\n        .name = \"First possible 3 byte codepoint\",\n",
                    "rendered": {
                      "text": "    },\n    {\n        .name = \"UTF8 BOM plus extra\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xEF\\xBB\\xBF\\x24\\xC2\\xA3\"),\n    },\n    {\n        .name = \"First possible 3 byte codepoint\",\n",
                      "markdown": "`    },\n    {\n        .name = \"UTF8 BOM plus extra\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\"\\xEF\\xBB\\xBF\\x24\\xC2\\xA3\"),\n    },\n    {\n        .name = \"First possible 3 byte codepoint\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/shared_utils_tests.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 13,
                  "endLine": 44,
                  "endColumn": 89,
                  "snippet": {
                    "text": "    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n",
                    "rendered": {
                      "text": "    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n",
                      "markdown": "`    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/tests/shared_utils_tests.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 13,
                  "endLine": 44,
                  "endColumn": 89,
                  "snippet": {
                    "text": "    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n",
                    "rendered": {
                      "text": "    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n",
                      "markdown": "`    {\n        .name = \"A variety of different length codepoints\",\n        .text = AWS_BYTE_CUR_INIT_FROM_STRING_LITERAL(\n            \"\\xF0\\x90\\x8D\\x88\\xE2\\x82\\xAC\\xC2\\xA3\\x24\\xC2\\xA3\\xE2\\x82\\xAC\\xF0\\x90\\x8D\\x88\"),\n    },\n    {\n        .name = \"UTF8 BOM\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 70,
                  "endLine": 379,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"24/7 Canary finished!\")\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + canary_region_stub\n",
                    "rendered": {
                      "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"24/7 Canary finished!\")\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + canary_region_stub\n",
                      "markdown": "`    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"24/7 Canary finished!\")\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + canary_region_stub\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 97,
                  "endLine": 17,
                  "endColumn": 101,
                  "snippet": {
                    "text": "from CanaryWrapper_MetricFunctions import *\n\n# TODO - Using subprocess may not work on Windows for starting/stopping the application thread.\n#        Canary will likely be running on Linux, so it's probably okay, but need to confirm/check at some point....\n# ================================================================================\n# Code for command line argument parsing\n\n",
                    "rendered": {
                      "text": "from CanaryWrapper_MetricFunctions import *\n\n# TODO - Using subprocess may not work on Windows for starting/stopping the application thread.\n#        Canary will likely be running on Linux, so it's probably okay, but need to confirm/check at some point....\n# ================================================================================\n# Code for command line argument parsing\n\n",
                      "markdown": "`from CanaryWrapper_MetricFunctions import *\n\n# TODO - Using subprocess may not work on Windows for starting/stopping the application thread.\n#        Canary will likely be running on Linux, so it's probably okay, but need to confirm/check at some point....\n# ================================================================================\n# Code for command line argument parsing\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 53,
                  "endLine": 2,
                  "endColumn": 57,
                  "snippet": {
                    "text": "# Python wrapper script for collecting Canary metrics, setting up alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and checking for new\n# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n# Will only stop running if the Canary application itself has an issue - in which case it Canary application will\n",
                    "rendered": {
                      "text": "# Python wrapper script for collecting Canary metrics, setting up alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and checking for new\n# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n# Will only stop running if the Canary application itself has an issue - in which case it Canary application will\n",
                      "markdown": "`# Python wrapper script for collecting Canary metrics, setting up alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and checking for new\n# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n# Will only stop running if the Canary application itself has an issue - in which case it Canary application will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 39,
                  "endLine": 379,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"24/7 Canary finished!\")\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + canary_region_stub\n",
                    "rendered": {
                      "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"24/7 Canary finished!\")\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + canary_region_stub\n",
                      "markdown": "`    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"24/7 Canary finished!\")\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + canary_region_stub\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 43,
                  "endLine": 371,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (f\"Exception: {repr(e)}\", flush=True)\n\n    # Clean everything up and stop\n",
                    "rendered": {
                      "text": "            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (f\"Exception: {repr(e)}\", flush=True)\n\n    # Clean everything up and stop\n",
                      "markdown": "`            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (f\"Exception: {repr(e)}\", flush=True)\n\n    # Clean everything up and stop\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 60,
                  "endLine": 281,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        # Snapshot Monitor\n        elif (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\")\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                    "rendered": {
                      "text": "        # Snapshot Monitor\n        elif (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\")\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                      "markdown": "`        # Snapshot Monitor\n        elif (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\")\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 35,
                  "endLine": 281,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        # Snapshot Monitor\n        elif (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\")\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                    "rendered": {
                      "text": "        # Snapshot Monitor\n        elif (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\")\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                      "markdown": "`        # Snapshot Monitor\n        elif (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\")\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 9,
                  "endLine": 256,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        # S3 Monitor\n        if (s3_monitor.had_internal_error == True):\n            if (s3_monitor.error_due_to_credentials == False):\n",
                    "rendered": {
                      "text": "    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        # S3 Monitor\n        if (s3_monitor.had_internal_error == True):\n            if (s3_monitor.error_due_to_credentials == False):\n",
                      "markdown": "`    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        # S3 Monitor\n        if (s3_monitor.had_internal_error == True):\n            if (s3_monitor.error_due_to_credentials == False):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 35,
                  "endLine": 234,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    start_email_body = \"MQTT5 24/7 Canary Wrapper has started. This will run and continue to test new MQTT5 application builds as\"\n",
                    "rendered": {
                      "text": "    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    start_email_body = \"MQTT5 24/7 Canary Wrapper has started. This will run and continue to test new MQTT5 application builds as\"\n",
                      "markdown": "`    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    start_email_body = \"MQTT5 24/7 Canary Wrapper has started. This will run and continue to test new MQTT5 application builds as\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 32,
                  "endLine": 216,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n        # Did a metric go into alarm?\n        if (snapshot_monitor.has_cut_ticket == True):\n            # Do not allow it to cut anymore tickets until it gets a new build\n            snapshot_monitor.can_cut_ticket = False\n\n        # If an error has occurred or otherwise this thread needs to stop, then break the loop\n",
                    "rendered": {
                      "text": "\n        # Did a metric go into alarm?\n        if (snapshot_monitor.has_cut_ticket == True):\n            # Do not allow it to cut anymore tickets until it gets a new build\n            snapshot_monitor.can_cut_ticket = False\n\n        # If an error has occurred or otherwise this thread needs to stop, then break the loop\n",
                      "markdown": "`\n        # Did a metric go into alarm?\n        if (snapshot_monitor.has_cut_ticket == True):\n            # Do not allow it to cut anymore tickets until it gets a new build\n            snapshot_monitor.can_cut_ticket = False\n\n        # If an error has occurred or otherwise this thread needs to stop, then break the loop\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 43,
                  "endLine": 206,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            # Start the application\n            print (\"[Debug] Starting application monitor...\")\n            application_monitor.start_monitoring()\n            # Allow the snapshot monitor to cut a ticket\n            snapshot_monitor.can_cut_ticket = True\n\n        snapshot_monitor.monitor_loop_function(\n",
                    "rendered": {
                      "text": "            # Start the application\n            print (\"[Debug] Starting application monitor...\")\n            application_monitor.start_monitoring()\n            # Allow the snapshot monitor to cut a ticket\n            snapshot_monitor.can_cut_ticket = True\n\n        snapshot_monitor.monitor_loop_function(\n",
                      "markdown": "`            # Start the application\n            print (\"[Debug] Starting application monitor...\")\n            application_monitor.start_monitoring()\n            # Allow the snapshot monitor to cut a ticket\n            snapshot_monitor.can_cut_ticket = True\n\n        snapshot_monitor.monitor_loop_function(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 108,
                  "endLine": 87,
                  "snippet": {
                    "text": "\n# How long (in seconds) to wait before gathering metrics and pushing them to Cloudwatch\ncanary_metrics_wait_time = 600 # 10 minutes\n# How long (in seconds) to run the Application thread loop. Should be shorter or equal to the Canary Metrics time\ncanary_application_loop_wait_time = 300 # 5 minutes\n\n# For testing - set both to 30 seconds\n# canary_metrics_wait_time = 30\n",
                    "rendered": {
                      "text": "\n# How long (in seconds) to wait before gathering metrics and pushing them to Cloudwatch\ncanary_metrics_wait_time = 600 # 10 minutes\n# How long (in seconds) to run the Application thread loop. Should be shorter or equal to the Canary Metrics time\ncanary_application_loop_wait_time = 300 # 5 minutes\n\n# For testing - set both to 30 seconds\n# canary_metrics_wait_time = 30\n",
                      "markdown": "`\n# How long (in seconds) to wait before gathering metrics and pushing them to Cloudwatch\ncanary_metrics_wait_time = 600 # 10 minutes\n# How long (in seconds) to run the Application thread loop. Should be shorter or equal to the Canary Metrics time\ncanary_application_loop_wait_time = 300 # 5 minutes\n\n# For testing - set both to 30 seconds\n# canary_metrics_wait_time = 30\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "endLine": 12,
                  "snippet": {
                    "text": "# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n\n",
                    "rendered": {
                      "text": "# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n\n",
                      "markdown": "`# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 39,
                  "endLine": 6,
                  "endColumn": 47,
                  "snippet": {
                    "text": "# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n# Will only stop running if the Canary application itself has an issue - in which case it Canary application will\n# need to be fixed and then the wrapper script restarted\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n",
                    "rendered": {
                      "text": "# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n# Will only stop running if the Canary application itself has an issue - in which case it Canary application will\n# need to be fixed and then the wrapper script restarted\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n",
                      "markdown": "`# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n# Will only stop running if the Canary application itself has an issue - in which case it Canary application will\n# need to be fixed and then the wrapper script restarted\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_24_7.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 16,
                  "endLine": 1,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# Python wrapper script for collecting Canary metrics, setting up alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and checking for new\n# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n",
                    "rendered": {
                      "text": "# Python wrapper script for collecting Canary metrics, setting up alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and checking for new\n# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n",
                      "markdown": "`# Python wrapper script for collecting Canary metrics, setting up alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and checking for new\n# builds in S3, downloading them, and launching them if they exist (24/7 operation)\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 70,
                  "endLine": 308,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n",
                    "rendered": {
                      "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n",
                      "markdown": "`    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 53,
                  "endLine": 2,
                  "endColumn": 57,
                  "snippet": {
                    "text": "# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n",
                    "rendered": {
                      "text": "# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n",
                      "markdown": "`# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 39,
                  "endLine": 308,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n",
                    "rendered": {
                      "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n",
                      "markdown": "`    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 43,
                  "endLine": 300,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (f\"Exception: {repr(e)}\", flush=True)\n\n    # Clean everything up and stop\n",
                    "rendered": {
                      "text": "            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (f\"Exception: {repr(e)}\", flush=True)\n\n    # Clean everything up and stop\n",
                      "markdown": "`            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (f\"Exception: {repr(e)}\", flush=True)\n\n    # Clean everything up and stop\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 60,
                  "endLine": 226,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                    "rendered": {
                      "text": "        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                      "markdown": "`        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 35,
                  "endLine": 226,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                    "rendered": {
                      "text": "        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                      "markdown": "`        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "endLine": 223,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n",
                    "rendered": {
                      "text": "    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n",
                      "markdown": "`    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 35,
                  "endLine": 205,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    # Start the execution loop\n",
                    "rendered": {
                      "text": "    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    # Start the execution loop\n",
                      "markdown": "`    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    # Start the execution loop\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 33,
                  "endLine": 67,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\nif (command_parser_arguments.git_hash_as_namespace is not True and command_parser_arguments.git_hash_as_namespace is not False):\n    command_parser_arguments.git_hash_as_namespace = False\nif (command_parser_arguments.output_log_filepath == \"\"):\n",
                    "rendered": {
                      "text": "    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\nif (command_parser_arguments.git_hash_as_namespace is not True and command_parser_arguments.git_hash_as_namespace is not False):\n    command_parser_arguments.git_hash_as_namespace = False\nif (command_parser_arguments.output_log_filepath == \"\"):\n",
                      "markdown": "`    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\nif (command_parser_arguments.git_hash_as_namespace is not True and command_parser_arguments.git_hash_as_namespace is not False):\n    command_parser_arguments.git_hash_as_namespace = False\nif (command_parser_arguments.output_log_filepath == \"\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 33,
                  "endLine": 64,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    exit (1) # cannot run without a canary executable\nif (command_parser_arguments.git_hash == \"\"):\n    print (\"ERROR - required git_hash is empty!\", flush=True)\n    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\n",
                    "rendered": {
                      "text": "    exit (1) # cannot run without a canary executable\nif (command_parser_arguments.git_hash == \"\"):\n    print (\"ERROR - required git_hash is empty!\", flush=True)\n    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\n",
                      "markdown": "`    exit (1) # cannot run without a canary executable\nif (command_parser_arguments.git_hash == \"\"):\n    print (\"ERROR - required git_hash is empty!\", flush=True)\n    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 25,
                  "endColumn": 53,
                  "snippet": {
                    "text": "command_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n    help=\"(OPTIONAL, default=output.log) The file to output log info to. Set to 'None' to disable\")\ncommand_parser.add_argument(\"--output_to_console\", type=bool, default=True,\n",
                    "rendered": {
                      "text": "command_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n    help=\"(OPTIONAL, default=output.log) The file to output log info to. Set to 'None' to disable\")\ncommand_parser.add_argument(\"--output_to_console\", type=bool, default=True,\n",
                      "markdown": "`command_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n    help=\"(OPTIONAL, default=output.log) The file to output log info to. Set to 'None' to disable\")\ncommand_parser.add_argument(\"--output_to_console\", type=bool, default=True,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 25,
                  "endLine": 23,
                  "endColumn": 30,
                  "snippet": {
                    "text": "command_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n",
                    "rendered": {
                      "text": "command_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n",
                      "markdown": "`command_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 13,
                  "endLine": 21,
                  "endColumn": 18,
                  "snippet": {
                    "text": "command_parser.add_argument(\"--canary_arguments\", type=str, default=\"\",\n    help=\"The arguments to pass/launch the canary executable with\")\ncommand_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n",
                    "rendered": {
                      "text": "command_parser.add_argument(\"--canary_arguments\", type=str, default=\"\",\n    help=\"The arguments to pass/launch the canary executable with\")\ncommand_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n",
                      "markdown": "`command_parser.add_argument(\"--canary_arguments\", type=str, default=\"\",\n    help=\"The arguments to pass/launch the canary executable with\")\ncommand_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 6,
                  "endLine": 8,
                  "snippet": {
                    "text": "# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\nimport datetime\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n",
                    "rendered": {
                      "text": "# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\nimport datetime\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n",
                      "markdown": "`# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\nimport datetime\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 16,
                  "endLine": 1,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n",
                    "rendered": {
                      "text": "# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n",
                      "markdown": "`# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 16,
                  "endLine": 23,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  install:\n    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n",
                      "markdown": "`  install:\n    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 4,
                  "snippet": {
                    "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n",
                    "rendered": {
                      "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n",
                      "markdown": "`version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 14,
                  "endLine": 59,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n      # ==========\n\n  post_build:\n",
                    "rendered": {
                      "text": "      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n      # ==========\n\n  post_build:\n",
                      "markdown": "`      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n      # ==========\n\n  post_build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 7,
                  "endLine": 58,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n      # ==========\n\n",
                    "rendered": {
                      "text": "      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n      # ==========\n\n",
                      "markdown": "`      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n      # ==========\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 14,
                  "endLine": 56,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      - aws s3 cp ./${CANARY_LOG_FILE} ${S3_DST}log/${GIT_HASH}/\n      # Upload built canary test build result to s3 bucket\n      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n",
                    "rendered": {
                      "text": "      - aws s3 cp ./${CANARY_LOG_FILE} ${S3_DST}log/${GIT_HASH}/\n      # Upload built canary test build result to s3 bucket\n      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n",
                      "markdown": "`      - aws s3 cp ./${CANARY_LOG_FILE} ${S3_DST}log/${GIT_HASH}/\n      # Upload built canary test build result to s3 bucket\n      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip latestSnapshot.zip {} +\n      - aws s3 cp ./latestSnapshot.zip ${S3_DST}source/latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 53,
                  "endColumn": 18,
                  "snippet": {
                    "text": " $CANNARY_TEST_EXE --canary_arguments \"-s ${CANARY_DURATION} -t ${CANARY_THREADS} -T ${CANARY_TPS} -C ${CANARY_CLIENT_COUNT} -l ${CANARY_LOG_FILE} -v ${CANARY_LOG_LEVEL} endpoint ${ENDPOINT}\" --git_hash ${GIT_HASH} --git_repo_name $PACKAGE_NAME --codebuild_log_path $CODEBUILD_LOG_PATH\n      - aws s3 cp ./${CANARY_LOG_FILE} ${S3_DST}log/${GIT_HASH}/\n      # Upload built canary test build result to s3 bucket\n      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip lates",
                    "rendered": {
                      "text": " $CANNARY_TEST_EXE --canary_arguments \"-s ${CANARY_DURATION} -t ${CANARY_THREADS} -T ${CANARY_TPS} -C ${CANARY_CLIENT_COUNT} -l ${CANARY_LOG_FILE} -v ${CANARY_LOG_LEVEL} endpoint ${ENDPOINT}\" --git_hash ${GIT_HASH} --git_repo_name $PACKAGE_NAME --codebuild_log_path $CODEBUILD_LOG_PATH\n      - aws s3 cp ./${CANARY_LOG_FILE} ${S3_DST}log/${GIT_HASH}/\n      # Upload built canary test build result to s3 bucket\n      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip lates",
                      "markdown": "` $CANNARY_TEST_EXE --canary_arguments \"-s ${CANARY_DURATION} -t ${CANARY_THREADS} -T ${CANARY_TPS} -C ${CANARY_CLIENT_COUNT} -l ${CANARY_LOG_FILE} -v ${CANARY_LOG_LEVEL} endpoint ${ENDPOINT}\" --git_hash ${GIT_HASH} --git_repo_name $PACKAGE_NAME --codebuild_log_path $CODEBUILD_LOG_PATH\n      - aws s3 cp ./${CANARY_LOG_FILE} ${S3_DST}log/${GIT_HASH}/\n      # Upload built canary test build result to s3 bucket\n      - zip -r latestBuild.zip build/install\n      - aws s3 cp ./latestBuild.zip ${S3_DST}build/latest\n      # Upload latest source to S3 bucket\n      - find * -type f ! -perm +r -exec zip lates`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 137,
                  "endLine": 43,
                  "endColumn": 142,
                  "snippet": {
                    "text": "XE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz b",
                    "rendered": {
                      "text": "XE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz b",
                      "markdown": "`XE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz b`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 119,
                  "endLine": 43,
                  "endColumn": 124,
                  "snippet": {
                    "text": "ho $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - pyt",
                    "rendered": {
                      "text": "ho $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - pyt",
                      "markdown": "`ho $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - pyt`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 135,
                  "endLine": 42,
                  "endColumn": 140,
                  "snippet": {
                    "text": "    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n",
                    "rendered": {
                      "text": "    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n",
                      "markdown": "`    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 119,
                  "endLine": 42,
                  "endColumn": 124,
                  "snippet": {
                    "text": "    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n",
                    "rendered": {
                      "text": "    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n",
                      "markdown": "`    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export S3_DST=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_BUILD_S3_DST\" --query \"SecretString\" | cut -f2,3 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 7,
                  "endLine": 32,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n      - cd cmake-3.18.0\n      - ./bootstrap\n      - make\n",
                    "rendered": {
                      "text": "      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n      - cd cmake-3.18.0\n      - ./bootstrap\n      - make\n",
                      "markdown": "`      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n      - cd cmake-3.18.0\n      - ./bootstrap\n      - make\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "endLine": 31,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n      - cd cmake-3.18.0\n      - ./bootstrap\n",
                    "rendered": {
                      "text": "      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n      - cd cmake-3.18.0\n      - ./bootstrap\n",
                      "markdown": "`      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n      - cd cmake-3.18.0\n      - ./bootstrap\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 18,
                  "endLine": 29,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n",
                    "rendered": {
                      "text": "      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n",
                      "markdown": "`      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n      - tar -xvzf cmake-3.18.0.tar.gz\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 18,
                  "endLine": 28,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n",
                    "rendered": {
                      "text": "      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n",
                      "markdown": "`      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n      - wget https://cmake.org/files/v3.18/cmake-3.18.0.tar.gz\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 24,
                  "endLine": 27,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n",
                    "rendered": {
                      "text": "      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n",
                      "markdown": "`      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 12,
                  "endLine": 27,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n",
                    "rendered": {
                      "text": "      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n",
                      "markdown": "`      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n      # Install Cmake3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 12,
                  "endLine": 26,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n",
                    "rendered": {
                      "text": "      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n",
                      "markdown": "`      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 12,
                  "endLine": 24,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n",
                    "rendered": {
                      "text": "    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n",
                      "markdown": "`    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n      - sudo yum install pip -y\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 12,
                  "endLine": 23,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  install:\n    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n",
                      "markdown": "`  install:\n    commands:\n      # install c++ dev libraries for codebuild environment.\n      - sudo yum update -y\n      - sudo yum groupinstall \"Development Tools\" -y\n      # Install necessary lib for canary wrapper\n      - sudo yum install gcc python3-dev -y\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/mqtt-canary-test.yml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 4,
                  "snippet": {
                    "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n",
                    "rendered": {
                      "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n",
                      "markdown": "`version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 91,
                  "endLine": 654,
                  "endColumn": 95,
                  "snippet": {
                    "text": "            if (len(self.metrics_numbers[i]) > self.metric_report_non_zero_count):\n                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n",
                    "rendered": {
                      "text": "            if (len(self.metrics_numbers[i]) > self.metric_report_non_zero_count):\n                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n",
                      "markdown": "`            if (len(self.metrics_numbers[i]) > self.metric_report_non_zero_count):\n                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 9,
                  "endLine": 645,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            self.perform_final_initialization = False\n            self._init_cloudwatch_pre_first_run()\n\n        # Update the metric values internally\n        for i in range(0, len(self.metrics)):\n            metric_value = self.metrics[i].get_metric_value(psutil_process)\n            self.metrics_numbers[i].insert(0, metric_value)\n",
                    "rendered": {
                      "text": "            self.perform_final_initialization = False\n            self._init_cloudwatch_pre_first_run()\n\n        # Update the metric values internally\n        for i in range(0, len(self.metrics)):\n            metric_value = self.metrics[i].get_metric_value(psutil_process)\n            self.metrics_numbers[i].insert(0, metric_value)\n",
                      "markdown": "`            self.perform_final_initialization = False\n            self._init_cloudwatch_pre_first_run()\n\n        # Update the metric values internally\n        for i in range(0, len(self.metrics)):\n            metric_value = self.metrics[i].get_metric_value(psutil_process)\n            self.metrics_numbers[i].insert(0, metric_value)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 15,
                  "endLine": 638,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            self.print_message(\"[DataSnapshot] Not going to crash - just going to try again later\")\n            return\n\n    # Call this at a set interval to post the metrics to Cloudwatch, etc.\n    # This is the function you want to call repeatedly after you have everything setup.\n    def post_metrics(self, psutil_process : psutil.Process):\n        if (self.perform_final_initialization == True):\n",
                    "rendered": {
                      "text": "            self.print_message(\"[DataSnapshot] Not going to crash - just going to try again later\")\n            return\n\n    # Call this at a set interval to post the metrics to Cloudwatch, etc.\n    # This is the function you want to call repeatedly after you have everything setup.\n    def post_metrics(self, psutil_process : psutil.Process):\n        if (self.perform_final_initialization == True):\n",
                      "markdown": "`            self.print_message(\"[DataSnapshot] Not going to crash - just going to try again later\")\n            return\n\n    # Call this at a set interval to post the metrics to Cloudwatch, etc.\n    # This is the function you want to call repeatedly after you have everything setup.\n    def post_metrics(self, psutil_process : psutil.Process):\n        if (self.perform_final_initialization == True):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 22,
                  "endLine": 254,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        self.print_message(\"[DataSnapshot] Data snapshot created!\")\n\n    # Cleans the class - closing any files, removing alarms, and sending data to S3.\n    # Should be called at the end when you are totally finished shadowing metrics\n    def cleanup(self, error_occurred=False):\n        if (self.s3_bucket_upload_on_complete == True):\n            self.export_result_to_s3_bucket(copy_output_log=True, log_is_error=error_occurred)\n",
                    "rendered": {
                      "text": "        self.print_message(\"[DataSnapshot] Data snapshot created!\")\n\n    # Cleans the class - closing any files, removing alarms, and sending data to S3.\n    # Should be called at the end when you are totally finished shadowing metrics\n    def cleanup(self, error_occurred=False):\n        if (self.s3_bucket_upload_on_complete == True):\n            self.export_result_to_s3_bucket(copy_output_log=True, log_is_error=error_occurred)\n",
                      "markdown": "`        self.print_message(\"[DataSnapshot] Data snapshot created!\")\n\n    # Cleans the class - closing any files, removing alarms, and sending data to S3.\n    # Should be called at the end when you are totally finished shadowing metrics\n    def cleanup(self, error_occurred=False):\n        if (self.s3_bucket_upload_on_complete == True):\n            self.export_result_to_s3_bucket(copy_output_log=True, log_is_error=error_occurred)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 12,
                  "endLine": 1299,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    ticket_severity=6,\n    arguments=None):\n\n    # Do not cut a ticket for a severity of 6+\n    if (ticket_severity >= 6):\n        return\n\n",
                    "rendered": {
                      "text": "    ticket_severity=6,\n    arguments=None):\n\n    # Do not cut a ticket for a severity of 6+\n    if (ticket_severity >= 6):\n        return\n\n",
                      "markdown": "`    ticket_severity=6,\n    arguments=None):\n\n    # Do not cut a ticket for a severity of 6+\n    if (ticket_severity >= 6):\n        return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1277,
                  "startColumn": 34,
                  "endLine": 1277,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            StateValue=\"ALARM\",\n            StateReason=\"AUTO TICKET CUT\")\n    except Exception as e:\n        print (f\"ERROR - could not cut ticket due to exception\", flush=True)\n        print(f\"ERROR - Exception {repr(e)}\", flush=True)\n        return\n\n",
                    "rendered": {
                      "text": "            StateValue=\"ALARM\",\n            StateReason=\"AUTO TICKET CUT\")\n    except Exception as e:\n        print (f\"ERROR - could not cut ticket due to exception\", flush=True)\n        print(f\"ERROR - Exception {repr(e)}\", flush=True)\n        return\n\n",
                      "markdown": "`            StateValue=\"ALARM\",\n            StateReason=\"AUTO TICKET CUT\")\n    except Exception as e:\n        print (f\"ERROR - could not cut ticket due to exception\", flush=True)\n        print(f\"ERROR - Exception {repr(e)}\", flush=True)\n        return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1262,
                  "startColumn": 55,
                  "endLine": 1262,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            Threshold=1,\n            ComparisonOperator=\"GreaterThanOrEqualToThreshold\",\n            # The data above does not really matter - it just needs to be valid input data.\n            # This is the part that tells Cloudwatch to cut the ticket\n            AlarmActions=[ticket_arn]\n        )\n    except Exception as e:\n",
                    "rendered": {
                      "text": "            Threshold=1,\n            ComparisonOperator=\"GreaterThanOrEqualToThreshold\",\n            # The data above does not really matter - it just needs to be valid input data.\n            # This is the part that tells Cloudwatch to cut the ticket\n            AlarmActions=[ticket_arn]\n        )\n    except Exception as e:\n",
                      "markdown": "`            Threshold=1,\n            ComparisonOperator=\"GreaterThanOrEqualToThreshold\",\n            # The data above does not really matter - it just needs to be valid input data.\n            # This is the part that tells Cloudwatch to cut the ticket\n            AlarmActions=[ticket_arn]\n        )\n    except Exception as e:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1245,
                  "startColumn": 37,
                  "endLine": 1245,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n\n    ticket_alarm_description = f\"AUTO CUT CANARY WRAPPER TICKET\\n\\nREASON: {ticket_reason}\\n\\nDESCRIPTION: {ticket_description}\\n\\n\"\n\n    # Register a metric alarm so it can auto-cut a ticket for us\n    try:\n",
                    "rendered": {
                      "text": "    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n\n    ticket_alarm_description = f\"AUTO CUT CANARY WRAPPER TICKET\\n\\nREASON: {ticket_reason}\\n\\nDESCRIPTION: {ticket_description}\\n\\n\"\n\n    # Register a metric alarm so it can auto-cut a ticket for us\n    try:\n",
                      "markdown": "`    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n\n    ticket_alarm_description = f\"AUTO CUT CANARY WRAPPER TICKET\\n\\nREASON: {ticket_reason}\\n\\nDESCRIPTION: {ticket_description}\\n\\n\"\n\n    # Register a metric alarm so it can auto-cut a ticket for us\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1240,
                  "startColumn": 77,
                  "endLine": 1240,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n    ticket_arn = f\"arn:aws:cloudwatch::cwa-internal:ticket:{ticket_severity}:{ticket_category}:{ticket_type}:{ticket_item}:{ticket_group}:\"\n    if (ticket_allow_duplicates == True):\n        # use \"DO-NOT-DEDUPE\" so we can run the same commit again and it will cut another ticket.\n        ticket_arn += \"DO-NOT-DEDUPE\"\n    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n",
                    "rendered": {
                      "text": "\n    ticket_arn = f\"arn:aws:cloudwatch::cwa-internal:ticket:{ticket_severity}:{ticket_category}:{ticket_type}:{ticket_item}:{ticket_group}:\"\n    if (ticket_allow_duplicates == True):\n        # use \"DO-NOT-DEDUPE\" so we can run the same commit again and it will cut another ticket.\n        ticket_arn += \"DO-NOT-DEDUPE\"\n    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n",
                      "markdown": "`\n    ticket_arn = f\"arn:aws:cloudwatch::cwa-internal:ticket:{ticket_severity}:{ticket_category}:{ticket_type}:{ticket_item}:{ticket_group}:\"\n    if (ticket_allow_duplicates == True):\n        # use \"DO-NOT-DEDUPE\" so we can run the same commit again and it will cut another ticket.\n        ticket_arn += \"DO-NOT-DEDUPE\"\n    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 80,
                  "endLine": 920,
                  "endColumn": 85,
                  "snippet": {
                    "text": "        if (self.application_process == None):\n            try:\n                canary_command = self.wrapper_application_path + \" \" + self.wrapper_application_arguments\n                self.application_process = subprocess.Popen(canary_command + \" | tee \" + self.stdout_file_path, shell=True)\n                self.application_process_psutil = psutil.Process(self.application_process.pid)\n                self.print_message (\"[ApplicationMonitor] Application started...\")\n            except Exception as e:\n",
                    "rendered": {
                      "text": "        if (self.application_process == None):\n            try:\n                canary_command = self.wrapper_application_path + \" \" + self.wrapper_application_arguments\n                self.application_process = subprocess.Popen(canary_command + \" | tee \" + self.stdout_file_path, shell=True)\n                self.application_process_psutil = psutil.Process(self.application_process.pid)\n                self.print_message (\"[ApplicationMonitor] Application started...\")\n            except Exception as e:\n",
                      "markdown": "`        if (self.application_process == None):\n            try:\n                canary_command = self.wrapper_application_path + \" \" + self.wrapper_application_arguments\n                self.application_process = subprocess.Popen(canary_command + \" | tee \" + self.stdout_file_path, shell=True)\n                self.application_process_psutil = psutil.Process(self.application_process.pid)\n                self.print_message (\"[ApplicationMonitor] Application started...\")\n            except Exception as e:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 73,
                  "endLine": 792,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        new_alarm_ticket_description += \"\\n\"\n                        break\n\n                # If it is a new alarm, then add it to our list so we can cut a new ticket\n                if (new_alarm_found == True):\n                    self.data_snapshot.print_message('    (NEW) Alarm with name \"' + triggered_alarm[1] + '\" is in the ALARM state!')\n                    new_alarms.append(triggered_alarm[1])\n",
                    "rendered": {
                      "text": "                        new_alarm_ticket_description += \"\\n\"\n                        break\n\n                # If it is a new alarm, then add it to our list so we can cut a new ticket\n                if (new_alarm_found == True):\n                    self.data_snapshot.print_message('    (NEW) Alarm with name \"' + triggered_alarm[1] + '\" is in the ALARM state!')\n                    new_alarms.append(triggered_alarm[1])\n",
                      "markdown": "`                        new_alarm_ticket_description += \"\\n\"\n                        break\n\n                # If it is a new alarm, then add it to our list so we can cut a new ticket\n                if (new_alarm_found == True):\n                    self.data_snapshot.print_message('    (NEW) Alarm with name \"' + triggered_alarm[1] + '\" is in the ALARM state!')\n                    new_alarms.append(triggered_alarm[1])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 76,
                  "endLine": 655,
                  "endColumn": 82,
                  "snippet": {
                    "text": "                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n                for j in range(0, len(self.metrics_numbers[i])):\n",
                    "rendered": {
                      "text": "                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n                for j in range(0, len(self.metrics_numbers[i])):\n",
                      "markdown": "`                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n                for j in range(0, len(self.metrics_numbers[i])):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 56,
                  "endLine": 578,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n        widget.remove_metric_from_widget(existing_metric_name=metric_name)\n        return\n",
                    "rendered": {
                      "text": "        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n        widget.remove_metric_from_widget(existing_metric_name=metric_name)\n        return\n",
                      "markdown": "`        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n        widget.remove_metric_from_widget(existing_metric_name=metric_name)\n        return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 42,
                  "endLine": 568,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n        metric_name_formatted = metric_name\n\n        widget.add_metric_to_widget(new_metric_name=metric_name_formatted)\n",
                    "rendered": {
                      "text": "                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n        metric_name_formatted = metric_name\n\n        widget.add_metric_to_widget(new_metric_name=metric_name_formatted)\n",
                      "markdown": "`                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n        metric_name_formatted = metric_name\n\n        widget.add_metric_to_widget(new_metric_name=metric_name_formatted)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 56,
                  "endLine": 565,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n",
                    "rendered": {
                      "text": "        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n",
                      "markdown": "`        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 64,
                  "endLine": 538,
                  "snippet": {
                    "text": "            is_percent=is_percent\n        )\n        self.metrics.append(new_metric)\n        # append an empty list so we can track it's metrics over time\n        self.metrics_numbers.append([])\n\n    def register_dashboard_widget(self, new_widget_name, metrics_to_add=[], new_widget_period=60):\n\n",
                    "rendered": {
                      "text": "            is_percent=is_percent\n        )\n        self.metrics.append(new_metric)\n        # append an empty list so we can track it's metrics over time\n        self.metrics_numbers.append([])\n\n    def register_dashboard_widget(self, new_widget_name, metrics_to_add=[], new_widget_period=60):\n\n",
                      "markdown": "`            is_percent=is_percent\n        )\n        self.metrics.append(new_metric)\n        # append an empty list so we can track it's metrics over time\n        self.metrics_numbers.append([])\n\n    def register_dashboard_widget(self, new_widget_name, metrics_to_add=[], new_widget_period=60):\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 49,
                  "endLine": 422,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n        if (self.s3_client is None):\n",
                    "rendered": {
                      "text": "            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n        if (self.s3_client is None):\n",
                      "markdown": "`            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n        if (self.s3_client is None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 99,
                  "endLine": 421,
                  "endColumn": 104,
                  "snippet": {
                    "text": "            self.print_message(f\"[DataSnapshot] ERROR - Exception {repr(e)}\")\n            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n",
                    "rendered": {
                      "text": "            self.print_message(f\"[DataSnapshot] ERROR - Exception {repr(e)}\")\n            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n",
                      "markdown": "`            self.print_message(f\"[DataSnapshot] ERROR - Exception {repr(e)}\")\n            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 53,
                  "endLine": 421,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            self.print_message(f\"[DataSnapshot] ERROR - Exception {repr(e)}\")\n            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n",
                    "rendered": {
                      "text": "            self.print_message(f\"[DataSnapshot] ERROR - Exception {repr(e)}\")\n            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n",
                      "markdown": "`            self.print_message(f\"[DataSnapshot] ERROR - Exception {repr(e)}\")\n            return None\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 24,
                  "endLine": 391,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        for metric in self.metrics:\n            tmp = self._check_cloudwatch_alarm_state_metric(metric)\n            if (tmp[1] != None):\n                # Do not cut a ticket for the \"Alive_Alarm\" that we use to check if the Canary is running\n                if (\"Alive_Alarm\" in tmp[1] == False):\n                    if (tmp[0] != True):\n                        return_result_list.append(tmp)\n",
                    "rendered": {
                      "text": "        for metric in self.metrics:\n            tmp = self._check_cloudwatch_alarm_state_metric(metric)\n            if (tmp[1] != None):\n                # Do not cut a ticket for the \"Alive_Alarm\" that we use to check if the Canary is running\n                if (\"Alive_Alarm\" in tmp[1] == False):\n                    if (tmp[0] != True):\n                        return_result_list.append(tmp)\n",
                      "markdown": "`        for metric in self.metrics:\n            tmp = self._check_cloudwatch_alarm_state_metric(metric)\n            if (tmp[1] != None):\n                # Do not cut a ticket for the \"Alive_Alarm\" that we use to check if the Canary is running\n                if (\"Alive_Alarm\" in tmp[1] == False):\n                    if (tmp[0] != True):\n                        return_result_list.append(tmp)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 57,
                  "endLine": 185,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n\n        self.git_hash = git_hash\n",
                    "rendered": {
                      "text": "        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n\n        self.git_hash = git_hash\n",
                      "markdown": "`        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n\n        self.git_hash = git_hash\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 43,
                  "endLine": 183,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        # Git related stuff\n        # ==================\n        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n",
                    "rendered": {
                      "text": "        # Git related stuff\n        # ==================\n        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n",
                      "markdown": "`        # Git related stuff\n        # ==================\n        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 9,
                  "endLine": 180,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            return\n        # ==================\n\n        # Git related stuff\n        # ==================\n        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n",
                    "rendered": {
                      "text": "            return\n        # ==================\n\n        # Git related stuff\n        # ==================\n        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n",
                      "markdown": "`            return\n        # ==================\n\n        # Git related stuff\n        # ==================\n        if (git_hash == None or git_repo_name == None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 86,
                  "endLine": 28,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        self.metric_unit = metric_unit\n        self.metric_alarm_threshold = metric_alarm_threshold\n        self.metric_alarm_name = self.metric_name + \"-\" + git_repo_name + \"-\" + git_hash\n        self.metric_alarm_description = 'Alarm for metric \"' + self.metric_name + '\" - git hash: ' + git_hash\n        self.metric_value = None\n        self.reports_to_skip = reports_to_skip\n        self.metric_alarm_severity = metric_alarm_severity\n",
                    "rendered": {
                      "text": "        self.metric_unit = metric_unit\n        self.metric_alarm_threshold = metric_alarm_threshold\n        self.metric_alarm_name = self.metric_name + \"-\" + git_repo_name + \"-\" + git_hash\n        self.metric_alarm_description = 'Alarm for metric \"' + self.metric_name + '\" - git hash: ' + git_hash\n        self.metric_value = None\n        self.reports_to_skip = reports_to_skip\n        self.metric_alarm_severity = metric_alarm_severity\n",
                      "markdown": "`        self.metric_unit = metric_unit\n        self.metric_alarm_threshold = metric_alarm_threshold\n        self.metric_alarm_name = self.metric_name + \"-\" + git_repo_name + \"-\" + git_hash\n        self.metric_alarm_description = 'Alarm for metric \"' + self.metric_name + '\" - git hash: ' + git_hash\n        self.metric_value = None\n        self.reports_to_skip = reports_to_skip\n        self.metric_alarm_severity = metric_alarm_severity\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 6,
                  "endLine": 9,
                  "snippet": {
                    "text": "import boto3\nimport psutil\n# Part of standard packages in Python 3.4+\nimport time\nimport os\nimport json\nimport subprocess\nimport zipfile\n",
                    "rendered": {
                      "text": "import boto3\nimport psutil\n# Part of standard packages in Python 3.4+\nimport time\nimport os\nimport json\nimport subprocess\nimport zipfile\n",
                      "markdown": "`import boto3\nimport psutil\n# Part of standard packages in Python 3.4+\nimport time\nimport os\nimport json\nimport subprocess\nimport zipfile\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/private/packets.h"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 27,
                  "endLine": 177,
                  "endColumn": 35,
                  "snippet": {
                    "text": "int aws_mqtt_packet_connect_add_credentials(\n    struct aws_mqtt_packet_connect *packet,\n    struct aws_byte_cursor username,\n    struct aws_byte_cursor password);\n\nAWS_MQTT_API\nint aws_mqtt_packet_connect_encode(struct aws_byte_buf *buf, const struct aws_mqtt_packet_connect *packet);\n",
                    "rendered": {
                      "text": "int aws_mqtt_packet_connect_add_credentials(\n    struct aws_mqtt_packet_connect *packet,\n    struct aws_byte_cursor username,\n    struct aws_byte_cursor password);\n\nAWS_MQTT_API\nint aws_mqtt_packet_connect_encode(struct aws_byte_buf *buf, const struct aws_mqtt_packet_connect *packet);\n",
                      "markdown": "`int aws_mqtt_packet_connect_add_credentials(\n    struct aws_mqtt_packet_connect *packet,\n    struct aws_byte_cursor username,\n    struct aws_byte_cursor password);\n\nAWS_MQTT_API\nint aws_mqtt_packet_connect_encode(struct aws_byte_buf *buf, const struct aws_mqtt_packet_connect *packet);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/private/packets.h"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 27,
                  "endLine": 81,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    struct aws_byte_cursor will_topic;\n    struct aws_byte_cursor will_message;\n    struct aws_byte_cursor username;\n    struct aws_byte_cursor password;\n};\n\n/* Represents the MQTT CONNACK packet */\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor will_topic;\n    struct aws_byte_cursor will_message;\n    struct aws_byte_cursor username;\n    struct aws_byte_cursor password;\n};\n\n/* Represents the MQTT CONNACK packet */\n",
                      "markdown": "`    struct aws_byte_cursor will_topic;\n    struct aws_byte_cursor will_message;\n    struct aws_byte_cursor username;\n    struct aws_byte_cursor password;\n};\n\n/* Represents the MQTT CONNACK packet */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/private/packets.h"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 13,
                  "endLine": 71,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    bool clean_session;\n    bool has_will;\n    bool will_retain;\n    bool has_password;\n    bool has_username;\n    uint16_t keep_alive_timeout;\n    enum aws_mqtt_qos will_qos;\n",
                    "rendered": {
                      "text": "    bool clean_session;\n    bool has_will;\n    bool will_retain;\n    bool has_password;\n    bool has_username;\n    uint16_t keep_alive_timeout;\n    enum aws_mqtt_qos will_qos;\n",
                      "markdown": "`    bool clean_session;\n    bool has_will;\n    bool will_retain;\n    bool has_password;\n    bool has_username;\n    uint16_t keep_alive_timeout;\n    enum aws_mqtt_qos will_qos;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/include/aws/mqtt/mqtt.h"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 37,
                  "endLine": 33,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    AWS_MQTT_CONNECT_UNACCEPTABLE_PROTOCOL_VERSION,\n    AWS_MQTT_CONNECT_IDENTIFIER_REJECTED,\n    AWS_MQTT_CONNECT_SERVER_UNAVAILABLE,\n    AWS_MQTT_CONNECT_BAD_USERNAME_OR_PASSWORD,\n    AWS_MQTT_CONNECT_NOT_AUTHORIZED,\n    /* reserved = 6 - 255 */\n};\n",
                    "rendered": {
                      "text": "    AWS_MQTT_CONNECT_UNACCEPTABLE_PROTOCOL_VERSION,\n    AWS_MQTT_CONNECT_IDENTIFIER_REJECTED,\n    AWS_MQTT_CONNECT_SERVER_UNAVAILABLE,\n    AWS_MQTT_CONNECT_BAD_USERNAME_OR_PASSWORD,\n    AWS_MQTT_CONNECT_NOT_AUTHORIZED,\n    /* reserved = 6 - 255 */\n};\n",
                      "markdown": "`    AWS_MQTT_CONNECT_UNACCEPTABLE_PROTOCOL_VERSION,\n    AWS_MQTT_CONNECT_IDENTIFIER_REJECTED,\n    AWS_MQTT_CONNECT_SERVER_UNAVAILABLE,\n    AWS_MQTT_CONNECT_BAD_USERNAME_OR_PASSWORD,\n    AWS_MQTT_CONNECT_NOT_AUTHORIZED,\n    /* reserved = 6 - 255 */\n};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/bin/elastipubsub/main.c"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 45,
                  "endLine": 72,
                  "endColumn": 54,
                  "snippet": {
                    "text": "err, \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --cops INT: target control (connect, subscribe) operations per second\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -i, --iterations INT: number of independent iterations to run the test for\\n\");\n    fprintf(stderr, \"  -k, --connections INT: n",
                    "rendered": {
                      "text": "err, \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --cops INT: target control (connect, subscribe) operations per second\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -i, --iterations INT: number of independent iterations to run the test for\\n\");\n    fprintf(stderr, \"  -k, --connections INT: n",
                      "markdown": "`err, \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --cops INT: target control (connect, subscribe) operations per second\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -i, --iterations INT: number of independent iterations to run the test for\\n\");\n    fprintf(stderr, \"  -k, --connections INT: n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/bin/elastipubsub/main.c"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 7,
                  "endLine": 502,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        aws_array_list_push_back(connections, &connection_data);\n        aws_array_list_push_back(topics, &topic_id);\n\n        node = aws_linked_list_next(node);\n    }\n    aws_mutex_unlock(&app_ctx->lock);\n}\n",
                    "rendered": {
                      "text": "        aws_array_list_push_back(connections, &connection_data);\n        aws_array_list_push_back(topics, &topic_id);\n\n        node = aws_linked_list_next(node);\n    }\n    aws_mutex_unlock(&app_ctx->lock);\n}\n",
                      "markdown": "`        aws_array_list_push_back(connections, &connection_data);\n        aws_array_list_push_back(topics, &topic_id);\n\n        node = aws_linked_list_next(node);\n    }\n    aws_mutex_unlock(&app_ctx->lock);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/bin/elastipubsub/main.c"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 49,
                  "endLine": 73,
                  "endColumn": 55,
                  "snippet": {
                    "text": " to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --cops INT: target control (connect, subscribe) operations per second\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -i, --iterations INT: number of independent iterations to run the test for\\n\");\n    fprintf(stderr, \"  -k, --connections INT: number of independent connections to make.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FIL",
                    "rendered": {
                      "text": " to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --cops INT: target control (connect, subscribe) operations per second\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -i, --iterations INT: number of independent iterations to run the test for\\n\");\n    fprintf(stderr, \"  -k, --connections INT: number of independent connections to make.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FIL",
                      "markdown": "` to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --cops INT: target control (connect, subscribe) operations per second\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -i, --iterations INT: number of independent iterations to run the test for\\n\");\n    fprintf(stderr, \"  -k, --connections INT: number of independent connections to make.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FIL`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/format-check.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 8,
                  "snippet": {
                    "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                    "rendered": {
                      "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                      "markdown": "`if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/format-check.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 41,
                  "endColumn": 8,
                  "snippet": {
                    "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                    "rendered": {
                      "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                      "markdown": "`cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/format-check.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 76,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                    "rendered": {
                      "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                      "markdown": "`filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/format-check.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 21,
                  "endLine": 26,
                  "endColumn": 29,
                  "snippet": {
                    "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                    "rendered": {
                      "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                      "markdown": "`filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 221,
                  "endLine": 44,
                  "endColumn": 225,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 7,
                  "endLine": 44,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-mqtt/issues), or [recently closed](https://github.com/awslabs/aws-c-mqtt/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-mqtt/issues), or [recently closed](https://github.com/awslabs/aws-c-mqtt/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-mqtt/issues), or [recently closed](https://github.com/awslabs/aws-c-mqtt/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-mqtt/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-mqtt.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}