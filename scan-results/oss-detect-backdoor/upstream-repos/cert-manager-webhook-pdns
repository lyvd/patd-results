{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/test/tls-with-proxy/config.json"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "{\n    \"host\": \"https://web:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                    "rendered": {
                      "text": "{\n    \"host\": \"https://web:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                      "markdown": "`{\n    \"host\": \"https://web:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/test/no-tls-auth-hdr/config.json"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n    \"apiKeyScheme\": \"\",\n    \"apiKeyHeaderName\": \"X-API-Key\",\n    \"ttl\": 10\n}",
                    "rendered": {
                      "text": "        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n    \"apiKeyScheme\": \"\",\n    \"apiKeyHeaderName\": \"X-API-Key\",\n    \"ttl\": 10\n}",
                      "markdown": "`        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n    \"apiKeyScheme\": \"\",\n    \"apiKeyHeaderName\": \"X-API-Key\",\n    \"ttl\": 10\n}`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/test/no-tls-auth-hdr/config.json"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "{\n    \"host\": \"http://127.0.0.1:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                    "rendered": {
                      "text": "{\n    \"host\": \"http://127.0.0.1:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                      "markdown": "`{\n    \"host\": \"http://127.0.0.1:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/fetch-test-binaries.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\n#hack_dir=$(dirname ${BASH_SOURCE})\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\n#hack_dir=$(dirname ${BASH_SOURCE})\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\n#hack_dir=$(dirname ${BASH_SOURCE})\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/fetch-test-binaries.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  if [ ! -f $kb_tools_archive_path ]; then\n    curl -sL ${kb_tools_download_url} -o \"$kb_tools_archive_path\"\n  fi\n  tar -zvxf \"$kb_tools_archive_path\" -C \"$tmp_root/\"\n}\n\nheader_text \"using tools\"\n",
                    "rendered": {
                      "text": "  if [ ! -f $kb_tools_archive_path ]; then\n    curl -sL ${kb_tools_download_url} -o \"$kb_tools_archive_path\"\n  fi\n  tar -zvxf \"$kb_tools_archive_path\" -C \"$tmp_root/\"\n}\n\nheader_text \"using tools\"\n",
                      "markdown": "`  if [ ! -f $kb_tools_archive_path ]; then\n    curl -sL ${kb_tools_download_url} -o \"$kb_tools_archive_path\"\n  fi\n  tar -zvxf \"$kb_tools_archive_path\" -C \"$tmp_root/\"\n}\n\nheader_text \"using tools\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/fetch-test-binaries.sh"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 3,
                  "endLine": 46,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n  kb_tools_archive_path=\"$tmp_root/$kb_tools_archive_name\"\n  if [ ! -f $kb_tools_archive_path ]; then\n    curl -sL ${kb_tools_download_url} -o \"$kb_tools_archive_path\"\n  fi\n  tar -zvxf \"$kb_tools_archive_path\" -C \"$tmp_root/\"\n}\n",
                    "rendered": {
                      "text": "\n  kb_tools_archive_path=\"$tmp_root/$kb_tools_archive_name\"\n  if [ ! -f $kb_tools_archive_path ]; then\n    curl -sL ${kb_tools_download_url} -o \"$kb_tools_archive_path\"\n  fi\n  tar -zvxf \"$kb_tools_archive_path\" -C \"$tmp_root/\"\n}\n",
                      "markdown": "`\n  kb_tools_archive_path=\"$tmp_root/$kb_tools_archive_name\"\n  if [ ! -f $kb_tools_archive_path ]; then\n    curl -sL ${kb_tools_download_url} -o \"$kb_tools_archive_path\"\n  fi\n  tar -zvxf \"$kb_tools_archive_path\" -C \"$tmp_root/\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/fetch-test-binaries.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 21,
                  "endLine": 20,
                  "endColumn": 29,
                  "snippet": {
                    "text": "tmp_root=./_out\nkb_root_dir=$tmp_root/kubebuilder\n\n# Turn colors in this script off by setting the NO_COLOR variable in your\n# environment to any value:\n#\n# $ NO_COLOR=1 test.sh\n",
                    "rendered": {
                      "text": "tmp_root=./_out\nkb_root_dir=$tmp_root/kubebuilder\n\n# Turn colors in this script off by setting the NO_COLOR variable in your\n# environment to any value:\n#\n# $ NO_COLOR=1 test.sh\n",
                      "markdown": "`tmp_root=./_out\nkb_root_dir=$tmp_root/kubebuilder\n\n# Turn colors in this script off by setting the NO_COLOR variable in your\n# environment to any value:\n#\n# $ NO_COLOR=1 test.sh\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/fetch-test-binaries.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 9,
                  "endLine": 10,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nk8s_version=1.26.1\ngoarch=$(go env GOARCH)\ngoos=$(go env GOOS)\n\nif [[ \"$goos\" == \"unknown\" ]]; then\n  echo \"OS '$OSTYPE' not supported. Aborting.\" >&2\n",
                    "rendered": {
                      "text": "\nk8s_version=1.26.1\ngoarch=$(go env GOARCH)\ngoos=$(go env GOOS)\n\nif [[ \"$goos\" == \"unknown\" ]]; then\n  echo \"OS '$OSTYPE' not supported. Aborting.\" >&2\n",
                      "markdown": "`\nk8s_version=1.26.1\ngoarch=$(go env GOARCH)\ngoos=$(go env GOOS)\n\nif [[ \"$goos\" == \"unknown\" ]]; then\n  echo \"OS '$OSTYPE' not supported. Aborting.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/fetch-test-binaries.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 11,
                  "endLine": 9,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#source ${hack_dir}/common.sh\n\nk8s_version=1.26.1\ngoarch=$(go env GOARCH)\ngoos=$(go env GOOS)\n\nif [[ \"$goos\" == \"unknown\" ]]; then\n",
                    "rendered": {
                      "text": "#source ${hack_dir}/common.sh\n\nk8s_version=1.26.1\ngoarch=$(go env GOARCH)\ngoos=$(go env GOOS)\n\nif [[ \"$goos\" == \"unknown\" ]]; then\n",
                      "markdown": "`#source ${hack_dir}/common.sh\n\nk8s_version=1.26.1\ngoarch=$(go env GOARCH)\ngoos=$(go env GOOS)\n\nif [[ \"$goos\" == \"unknown\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/fetch-test-binaries.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\n#hack_dir=$(dirname ${BASH_SOURCE})\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\n#hack_dir=$(dirname ${BASH_SOURCE})\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\n#hack_dir=$(dirname ${BASH_SOURCE})\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/test/no-tls/config.json"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "{\n    \"host\": \"http://127.0.0.1:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                    "rendered": {
                      "text": "{\n    \"host\": \"http://127.0.0.1:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                      "markdown": "`{\n    \"host\": \"http://127.0.0.1:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/test/no-tls-with-proxy/config.json"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "{\n    \"host\": \"http://pdns:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                    "rendered": {
                      "text": "{\n    \"host\": \"http://pdns:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                      "markdown": "`{\n    \"host\": \"http://pdns:8080\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/test/tls/config.json"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "{\n    \"host\": \"https://127.0.0.1:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                    "rendered": {
                      "text": "{\n    \"host\": \"https://127.0.0.1:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                      "markdown": "`{\n    \"host\": \"https://127.0.0.1:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/test/tls-auth-hdr/config.json"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n    \"apiKeyScheme\": \"\",\n    \"apiKeyHeaderName\": \"X-API-Key\",\n    \"ttl\": 10,\n    \"caBundle\": \"__CERT__\"\n",
                    "rendered": {
                      "text": "        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n    \"apiKeyScheme\": \"\",\n    \"apiKeyHeaderName\": \"X-API-Key\",\n    \"ttl\": 10,\n    \"caBundle\": \"__CERT__\"\n",
                      "markdown": "`        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n    \"apiKeyScheme\": \"\",\n    \"apiKeyHeaderName\": \"X-API-Key\",\n    \"ttl\": 10,\n    \"caBundle\": \"__CERT__\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/test/tls-auth-hdr/config.json"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "{\n    \"host\": \"https://127.0.0.1:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                    "rendered": {
                      "text": "{\n    \"host\": \"https://127.0.0.1:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n",
                      "markdown": "`{\n    \"host\": \"https://127.0.0.1:8443\",\n    \"apiKeySecretRef\": {\n        \"name\": \"pdns-api-key\",\n        \"key\": \"key\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/deploy/cert-manager-webhook-pdns/templates/service.yaml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5,
                  "endLine": 3,
                  "snippet": {
                    "text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"cert-manager-webhook-pdns.fullname\" . }}\n  labels:\n    {{- include \"cert-manager-webhook-pdns.labels\" . | nindent 4 }}\n",
                    "rendered": {
                      "text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"cert-manager-webhook-pdns.fullname\" . }}\n  labels:\n    {{- include \"cert-manager-webhook-pdns.labels\" . | nindent 4 }}\n",
                      "markdown": "`apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"cert-manager-webhook-pdns.fullname\" . }}\n  labels:\n    {{- include \"cert-manager-webhook-pdns.labels\" . | nindent 4 }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/setup-tests.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 20,
                  "endLine": 27,
                  "endColumn": 26,
                  "snippet": {
                    "text": "for suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n# No TLS\n",
                    "rendered": {
                      "text": "for suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n# No TLS\n",
                      "markdown": "`for suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n# No TLS\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/setup-tests.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/setup-tests.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 5,
                  "snippet": {
                    "text": "# No TLS\nfor suite in no-tls no-tls-with-proxy no-tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/{config.json,apikey.yml} _out/testdata/${suite}\ndone\n",
                    "rendered": {
                      "text": "# No TLS\nfor suite in no-tls no-tls-with-proxy no-tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/{config.json,apikey.yml} _out/testdata/${suite}\ndone\n",
                      "markdown": "`# No TLS\nfor suite in no-tls no-tls-with-proxy no-tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/{config.json,apikey.yml} _out/testdata/${suite}\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/setup-tests.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 6,
                  "snippet": {
                    "text": "for suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n# No TLS\n",
                    "rendered": {
                      "text": "for suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n# No TLS\n",
                      "markdown": "`for suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n# No TLS\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/setup-tests.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfor suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n",
                    "rendered": {
                      "text": "\nfor suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n",
                      "markdown": "`\nfor suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n  cp testdata/pdns/test/${suite}/apikey.yml _out/testdata/${suite}/apikey.yml\n  sed \"s#__CERT__#$(base64 -w0 _out/cert.pem)#g\" testdata/pdns/test/${suite}/config.json > _out/testdata/${suite}/config.json\ndone\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/setup-tests.sh"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 22,
                  "endColumn": 8,
                  "snippet": {
                    "text": "IP.1  = 127.0.0.1\nIP.2  = ::1\nEOF\n\nopenssl req -x509 -config _out/openssl.conf -newkey rsa:4096 -keyout _out/key.pem -out _out/cert.pem -sha256 -days 30 -nodes -subj '/CN=localhost'\n\nfor suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n",
                    "rendered": {
                      "text": "IP.1  = 127.0.0.1\nIP.2  = ::1\nEOF\n\nopenssl req -x509 -config _out/openssl.conf -newkey rsa:4096 -keyout _out/key.pem -out _out/cert.pem -sha256 -days 30 -nodes -subj '/CN=localhost'\n\nfor suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n",
                      "markdown": "`IP.1  = 127.0.0.1\nIP.2  = ::1\nEOF\n\nopenssl req -x509 -config _out/openssl.conf -newkey rsa:4096 -keyout _out/key.pem -out _out/cert.pem -sha256 -days 30 -nodes -subj '/CN=localhost'\n\nfor suite in tls tls-with-proxy tls-auth-hdr; do\n  mkdir -p _out/testdata/${suite}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/setup-tests.sh"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 3,
                  "endColumn": 4,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\nx509_extensions    = cert_ext\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\nx509_extensions    = cert_ext\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\nx509_extensions    = cert_ext\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/scripts/setup-tests.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncat <<EOF > _out/openssl.conf\n[ req ]\ndistinguished_name = subject\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/pr.yaml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 14,
                  "endLine": 24,
                  "snippet": {
                    "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                    "rendered": {
                      "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                      "markdown": "`        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/pr.yaml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 13,
                  "endLine": 28,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n",
                    "rendered": {
                      "text": "          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n",
                      "markdown": "`          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/pr.yaml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 14,
                  "endLine": 24,
                  "snippet": {
                    "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                    "rendered": {
                      "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                      "markdown": "`        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/pr.yaml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 20,
                  "endLine": 19,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n",
                    "rendered": {
                      "text": "        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n",
                      "markdown": "`        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/README.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 14,
                  "endLine": 62,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n              # API Key scheme https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n              # default: no scheme \"\"\n              apiKeyScheme: \"\"\n\n              # Header name for API key\n              #\n",
                    "rendered": {
                      "text": "\n              # API Key scheme https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n              # default: no scheme \"\"\n              apiKeyScheme: \"\"\n\n              # Header name for API key\n              #\n",
                      "markdown": "`\n              # API Key scheme https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n              # default: no scheme \"\"\n              apiKeyScheme: \"\"\n\n              # Header name for API key\n              #\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 14,
                  "endLine": 52,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              host: https://ns1.example.ca\n\n              # Reference to the Kubernetes secret containing the API key.\n              apiKeySecretRef:\n                name: pdns-api-key\n                key: key\n\n",
                    "rendered": {
                      "text": "              host: https://ns1.example.ca\n\n              # Reference to the Kubernetes secret containing the API key.\n              apiKeySecretRef:\n                name: pdns-api-key\n                key: key\n\n",
                      "markdown": "`              host: https://ns1.example.ca\n\n              # Reference to the Kubernetes secret containing the API key.\n              apiKeySecretRef:\n                name: pdns-api-key\n                key: key\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/README.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 4,
                  "endLine": 40,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  acme:\n    email: certificates@example.ca\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-staging-account-key\n    solvers:\n      - dns01:\n",
                    "rendered": {
                      "text": "  acme:\n    email: certificates@example.ca\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-staging-account-key\n    solvers:\n      - dns01:\n",
                      "markdown": "`  acme:\n    email: certificates@example.ca\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-staging-account-key\n    solvers:\n      - dns01:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/README.md"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 15,
                  "endLine": 93,
                  "endColumn": 24,
                  "snippet": {
                    "text": "              # (in seconds)\n              ttl: 120\n\n              # Timeout for requests to the PDNS api server\n              # (in seconds)\n              timeout: 30\n\n",
                    "rendered": {
                      "text": "              # (in seconds)\n              ttl: 120\n\n              # Timeout for requests to the PDNS api server\n              # (in seconds)\n              timeout: 30\n\n",
                      "markdown": "`              # (in seconds)\n              ttl: 120\n\n              # Timeout for requests to the PDNS api server\n              # (in seconds)\n              timeout: 30\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 67,
                  "endLine": 86,
                  "endColumn": 75,
                  "snippet": {
                    "text": " active                 BOOL,\n published              BOOL DEFAULT 1,\n content                TEXT,\n FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX domainidindex ON cryptokeys(domain_id);\n",
                    "rendered": {
                      "text": " active                 BOOL,\n published              BOOL DEFAULT 1,\n content                TEXT,\n FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX domainidindex ON cryptokeys(domain_id);\n",
                      "markdown": "` active                 BOOL,\n published              BOOL DEFAULT 1,\n content                TEXT,\n FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX domainidindex ON cryptokeys(domain_id);\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 67,
                  "endLine": 73,
                  "endColumn": 75,
                  "snippet": {
                    "text": " domain_id              INT NOT NULL,\n kind                   VARCHAR(32) COLLATE NOCASE,\n content                TEXT,\n FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX domainmetaidindex ON domainmetadata(domain_id);\n",
                    "rendered": {
                      "text": " domain_id              INT NOT NULL,\n kind                   VARCHAR(32) COLLATE NOCASE,\n content                TEXT,\n FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX domainmetaidindex ON domainmetadata(domain_id);\n",
                      "markdown": "` domain_id              INT NOT NULL,\n kind                   VARCHAR(32) COLLATE NOCASE,\n content                TEXT,\n FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX domainmetaidindex ON domainmetadata(domain_id);\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 68,
                  "endLine": 61,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  modified_at           INT NOT NULL,\n  account               VARCHAR(40) DEFAULT NULL,\n  comment               VARCHAR(65535) NOT NULL,\n  FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX comments_idx ON comments(domain_id, name, type);\n",
                    "rendered": {
                      "text": "  modified_at           INT NOT NULL,\n  account               VARCHAR(40) DEFAULT NULL,\n  comment               VARCHAR(65535) NOT NULL,\n  FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX comments_idx ON comments(domain_id, name, type);\n",
                      "markdown": "`  modified_at           INT NOT NULL,\n  account               VARCHAR(40) DEFAULT NULL,\n  comment               VARCHAR(65535) NOT NULL,\n  FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX comments_idx ON comments(domain_id, name, type);\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 68,
                  "endLine": 36,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  disabled              BOOLEAN DEFAULT 0,\n  ordername             VARCHAR(255),\n  auth                  BOOL DEFAULT 1,\n  FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX records_lookup_idx ON records(name, type);\n",
                    "rendered": {
                      "text": "  disabled              BOOLEAN DEFAULT 0,\n  ordername             VARCHAR(255),\n  auth                  BOOL DEFAULT 1,\n  FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX records_lookup_idx ON records(name, type);\n",
                      "markdown": "`  disabled              BOOLEAN DEFAULT 0,\n  ordername             VARCHAR(255),\n  auth                  BOOL DEFAULT 1,\n  FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE INDEX records_lookup_idx ON records(name, type);\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 14,
                  "endLine": 113,
                  "endColumn": 4,
                  "snippet": {
                    "text": "chown -R pdns:pdns /data\nfi\n\n# write config\ncat <<EOF >/etc/powerdns/pdns.conf\nlaunch=gsqlite3\ngsqlite3-database=${DB}\n\n",
                    "rendered": {
                      "text": "chown -R pdns:pdns /data\nfi\n\n# write config\ncat <<EOF >/etc/powerdns/pdns.conf\nlaunch=gsqlite3\ngsqlite3-database=${DB}\n\n",
                      "markdown": "`chown -R pdns:pdns /data\nfi\n\n# write config\ncat <<EOF >/etc/powerdns/pdns.conf\nlaunch=gsqlite3\ngsqlite3-database=${DB}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 109,
                  "endColumn": 6,
                  "snippet": {
                    "text": "INSERT INTO records (domain_id, name, type, ttl, content) VALUES (1, \"example.ca\", \"SOA\", 60, \"127.0.0.1.ip.onzs.ca hostmaster.example.ca 1 60 60 60 60\");\nINSERT INTO records (domain_id, name, type, ttl, content) VALUES (1, \"example.ca\", \"NS\", 60, \"127.0.0.1.ip.onzs.ca\");\nEOF\n\nchown -R pdns:pdns /data\nfi\n\n# write config\n",
                    "rendered": {
                      "text": "INSERT INTO records (domain_id, name, type, ttl, content) VALUES (1, \"example.ca\", \"SOA\", 60, \"127.0.0.1.ip.onzs.ca hostmaster.example.ca 1 60 60 60 60\");\nINSERT INTO records (domain_id, name, type, ttl, content) VALUES (1, \"example.ca\", \"NS\", 60, \"127.0.0.1.ip.onzs.ca\");\nEOF\n\nchown -R pdns:pdns /data\nfi\n\n# write config\n",
                      "markdown": "`INSERT INTO records (domain_id, name, type, ttl, content) VALUES (1, \"example.ca\", \"SOA\", 60, \"127.0.0.1.ip.onzs.ca hostmaster.example.ca 1 60 60 60 60\");\nINSERT INTO records (domain_id, name, type, ttl, content) VALUES (1, \"example.ca\", \"NS\", 60, \"127.0.0.1.ip.onzs.ca\");\nEOF\n\nchown -R pdns:pdns /data\nfi\n\n# write config\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n\nCREATE TABLE supermasters (\n  ip                    VARCHAR(64) NOT NULL,\n  nameserver            VARCHAR(255) NOT NULL COLLATE NOCASE,\n  account               VARCHAR(40) NOT NULL\n);\n",
                    "rendered": {
                      "text": "\n\nCREATE TABLE supermasters (\n  ip                    VARCHAR(64) NOT NULL,\n  nameserver            VARCHAR(255) NOT NULL COLLATE NOCASE,\n  account               VARCHAR(40) NOT NULL\n);\n",
                      "markdown": "`\n\nCREATE TABLE supermasters (\n  ip                    VARCHAR(64) NOT NULL,\n  nameserver            VARCHAR(255) NOT NULL COLLATE NOCASE,\n  account               VARCHAR(40) NOT NULL\n);\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 13,
                  "endLine": 9,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  echo \"Database not found. Initializing...\"\n\n  # initialize\n  cat <<EOF | sqlite3 \"${DB}\"\nPRAGMA foreign_keys = 1;\n\nCREATE TABLE domains (\n",
                    "rendered": {
                      "text": "  echo \"Database not found. Initializing...\"\n\n  # initialize\n  cat <<EOF | sqlite3 \"${DB}\"\nPRAGMA foreign_keys = 1;\n\nCREATE TABLE domains (\n",
                      "markdown": "`  echo \"Database not found. Initializing...\"\n\n  # initialize\n  cat <<EOF | sqlite3 \"${DB}\"\nPRAGMA foreign_keys = 1;\n\nCREATE TABLE domains (\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/start.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  echo \"Database not found. Initializing...\"\n\n  # initialize\n  cat <<EOF | sqlite3 \"${DB}\"\nPRAGMA foreign_keys = 1;\n\nCREATE TABLE domains (\n",
                    "rendered": {
                      "text": "  echo \"Database not found. Initializing...\"\n\n  # initialize\n  cat <<EOF | sqlite3 \"${DB}\"\nPRAGMA foreign_keys = 1;\n\nCREATE TABLE domains (\n",
                      "markdown": "`  echo \"Database not found. Initializing...\"\n\n  # initialize\n  cat <<EOF | sqlite3 \"${DB}\"\nPRAGMA foreign_keys = 1;\n\nCREATE TABLE domains (\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 11,
                  "endLine": 17,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n",
                    "rendered": {
                      "text": "    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n",
                      "markdown": "`    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 11,
                  "endLine": 5,
                  "endColumn": 19,
                  "snippet": {
                    "text": "FROM ${IMAGE}\n\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n",
                    "rendered": {
                      "text": "FROM ${IMAGE}\n\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n",
                      "markdown": "`FROM ${IMAGE}\n\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 6,
                  "endLine": 18,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\nCOPY start.sh /start.sh\n",
                    "rendered": {
                      "text": "\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\nCOPY start.sh /start.sh\n",
                      "markdown": "`\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\nCOPY start.sh /start.sh\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 17,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n",
                    "rendered": {
                      "text": "    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n",
                      "markdown": "`    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y pdns-server pdns-backend-sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 6,
                  "endLine": 14,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    && echo 'Package: pdns-*' > /etc/apt/preferences.d/powerdns \\\n    && echo 'Pin: origin repo.powerdns.com' >> /etc/apt/preferences.d/powerdns \\\n    && echo 'Pin-Priority: 600' >> /etc/apt/preferences.d/powerdns \\\n    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n",
                    "rendered": {
                      "text": "    && echo 'Package: pdns-*' > /etc/apt/preferences.d/powerdns \\\n    && echo 'Pin: origin repo.powerdns.com' >> /etc/apt/preferences.d/powerdns \\\n    && echo 'Pin-Priority: 600' >> /etc/apt/preferences.d/powerdns \\\n    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n",
                      "markdown": "`    && echo 'Package: pdns-*' > /etc/apt/preferences.d/powerdns \\\n    && echo 'Pin: origin repo.powerdns.com' >> /etc/apt/preferences.d/powerdns \\\n    && echo 'Pin-Priority: 600' >> /etc/apt/preferences.d/powerdns \\\n    && curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add -\n\n# Install\nRUN apt-get update \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 77,
                  "endLine": 6,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n",
                    "rendered": {
                      "text": "\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n",
                      "markdown": "`\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 49,
                  "endLine": 6,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n",
                    "rendered": {
                      "text": "\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n",
                      "markdown": "`\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "endLine": 6,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n",
                    "rendered": {
                      "text": "\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n",
                      "markdown": "`\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n# Configure repository\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/testdata/pdns/docker/pdns/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM ${IMAGE}\n\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n",
                    "rendered": {
                      "text": "FROM ${IMAGE}\n\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n",
                      "markdown": "`FROM ${IMAGE}\n\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates sqlite3 \\\n    && rm -rf /var/lib/apt/lists/\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/deploy/cert-manager-webhook-pdns/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 11,
                  "endLine": 11,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"cert-manager-webhook-pdns.fullname\" -}}\n",
                    "rendered": {
                      "text": "\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"cert-manager-webhook-pdns.fullname\" -}}\n",
                      "markdown": "`\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"cert-manager-webhook-pdns.fullname\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/deploy/cert-manager-webhook-pdns/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4,
                  "endLine": 3,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-manager-webhook-pdns.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-manager-webhook-pdns.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-manager-webhook-pdns.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/deploy/cert-manager-webhook-pdns/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 22,
                  "endLine": 48,
                  "endColumn": 31,
                  "snippet": {
                    "text": "{{- end }}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"cert-manager-webhook-pdns.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create }}\n",
                    "rendered": {
                      "text": "{{- end }}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"cert-manager-webhook-pdns.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create }}\n",
                      "markdown": "`{{- end }}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"cert-manager-webhook-pdns.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create }}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/deploy/cert-manager-webhook-pdns/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4,
                  "endLine": 3,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-manager-webhook-pdns.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-manager-webhook-pdns.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-manager-webhook-pdns.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/deploy/cert-manager-webhook-pdns/values.yaml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 19,
                  "endLine": 33,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  create: true\n  # Annotations to add to the service account\n  annotations: {}\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"\"\n\n",
                    "rendered": {
                      "text": "  create: true\n  # Annotations to add to the service account\n  annotations: {}\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"\"\n\n",
                      "markdown": "`  create: true\n  # Annotations to add to the service account\n  annotations: {}\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/deploy/cert-manager-webhook-pdns/values.yaml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 29,
                  "endLine": 31,
                  "endColumn": 38,
                  "snippet": {
                    "text": "serviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations: {}\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n",
                    "rendered": {
                      "text": "serviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations: {}\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n",
                      "markdown": "`serviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations: {}\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/deploy/cert-manager-webhook-pdns/values.yaml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 23,
                  "endLine": 29,
                  "endColumn": 32,
                  "snippet": {
                    "text": "fullnameOverride: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations: {}\n",
                    "rendered": {
                      "text": "fullnameOverride: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations: {}\n",
                      "markdown": "`fullnameOverride: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations: {}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/chart.yaml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 23,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      -\n        name: Install Helm\n",
                    "rendered": {
                      "text": "        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      -\n        name: Install Helm\n",
                      "markdown": "`        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      -\n        name: Install Helm\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/chart.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 9,
                  "endLine": 22,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      -\n        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      -\n",
                    "rendered": {
                      "text": "      -\n        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      -\n",
                      "markdown": "`      -\n        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      -\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/chart.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 23,
                  "endLine": 21,
                  "snippet": {
                    "text": "          fetch-depth: 0\n\n      -\n        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n",
                    "rendered": {
                      "text": "          fetch-depth: 0\n\n      -\n        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n",
                      "markdown": "`          fetch-depth: 0\n\n      -\n        name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/test.yaml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 14,
                  "endLine": 26,
                  "snippet": {
                    "text": "          make setup\n      -\n        name: Run tests\n        shell: bash\n        run: |\n          make test\n",
                    "rendered": {
                      "text": "          make setup\n      -\n        name: Run tests\n        shell: bash\n        run: |\n          make test\n",
                      "markdown": "`          make setup\n      -\n        name: Run tests\n        shell: bash\n        run: |\n          make test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/test.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 14,
                  "endLine": 21,
                  "snippet": {
                    "text": "          go-version: '1.20.3'\n      -\n        name: Start test infrastructure\n        shell: bash\n        run: |\n          make setup\n      -\n        name: Run tests\n",
                    "rendered": {
                      "text": "          go-version: '1.20.3'\n      -\n        name: Start test infrastructure\n        shell: bash\n        run: |\n          make setup\n      -\n        name: Run tests\n",
                      "markdown": "`          go-version: '1.20.3'\n      -\n        name: Start test infrastructure\n        shell: bash\n        run: |\n          make setup\n      -\n        name: Run tests\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/test.yaml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 14,
                  "endLine": 26,
                  "snippet": {
                    "text": "          make setup\n      -\n        name: Run tests\n        shell: bash\n        run: |\n          make test\n",
                    "rendered": {
                      "text": "          make setup\n      -\n        name: Run tests\n        shell: bash\n        run: |\n          make test\n",
                      "markdown": "`          make setup\n      -\n        name: Run tests\n        shell: bash\n        run: |\n          make test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/test.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 14,
                  "endLine": 21,
                  "snippet": {
                    "text": "          go-version: '1.20.3'\n      -\n        name: Start test infrastructure\n        shell: bash\n        run: |\n          make setup\n      -\n        name: Run tests\n",
                    "rendered": {
                      "text": "          go-version: '1.20.3'\n      -\n        name: Start test infrastructure\n        shell: bash\n        run: |\n          make setup\n      -\n        name: Run tests\n",
                      "markdown": "`          go-version: '1.20.3'\n      -\n        name: Start test infrastructure\n        shell: bash\n        run: |\n          make setup\n      -\n        name: Run tests\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/tags.yaml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        id: docker_build\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        id: docker_build\n",
                      "markdown": "`        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        id: docker_build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/tags.yaml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 14,
                  "endLine": 24,
                  "snippet": {
                    "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                    "rendered": {
                      "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                      "markdown": "`        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/tags.yaml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 13,
                  "endLine": 28,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n",
                    "rendered": {
                      "text": "          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n",
                      "markdown": "`          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/tags.yaml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 14,
                  "endLine": 24,
                  "snippet": {
                    "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                    "rendered": {
                      "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                      "markdown": "`        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/tags.yaml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 20,
                  "endLine": 19,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n",
                    "rendered": {
                      "text": "        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n",
                      "markdown": "`        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/main.yaml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        id: docker_build\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        id: docker_build\n",
                      "markdown": "`        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        id: docker_build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/main.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 14,
                  "endLine": 27,
                  "snippet": {
                    "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                    "rendered": {
                      "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                      "markdown": "`        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/main.yaml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 13,
                  "endLine": 31,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n",
                    "rendered": {
                      "text": "          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n",
                      "markdown": "`          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n        name: Docker meta\n        id: meta\n        uses: crazy-max/ghaction-docker-meta@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/main.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 14,
                  "endLine": 27,
                  "snippet": {
                    "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                    "rendered": {
                      "text": "        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n",
                      "markdown": "`        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n        shell: bash\n        run: |\n          echo \"TAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n          echo \"GIT_SHA=${GITHUB_SHA}\" >> $GITHUB_ENV\n      -\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/.github/workflows/main.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 20,
                  "endLine": 22,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n",
                    "rendered": {
                      "text": "        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n",
                      "markdown": "`        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Set environment variables\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 28,
                  "endLine": 359,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nfunc (c *powerDNSProviderSolver) getExistingRecords(ctx context.Context, provider *powerdns.Client, domain, name string) ([]powerdns.Record, error) {\n\t// Find existing records\n\tzone, err := provider.Zones.Get(ctx, domain)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed loading zone %s: %v\", domain, err)\n\t}\n",
                    "rendered": {
                      "text": "\nfunc (c *powerDNSProviderSolver) getExistingRecords(ctx context.Context, provider *powerdns.Client, domain, name string) ([]powerdns.Record, error) {\n\t// Find existing records\n\tzone, err := provider.Zones.Get(ctx, domain)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed loading zone %s: %v\", domain, err)\n\t}\n",
                      "markdown": "`\nfunc (c *powerDNSProviderSolver) getExistingRecords(ctx context.Context, provider *powerdns.Client, domain, name string) ([]powerdns.Record, error) {\n\t// Find existing records\n\tzone, err := provider.Zones.Get(ctx, domain)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed loading zone %s: %v\", domain, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 49,
                  "endLine": 305,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t}\n\n\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n",
                      "markdown": "`\t}\n\n\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 20,
                  "endLine": 348,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t// Add request headers\n\theaders := map[string]string{\n\t\tcfg.APIKeyHeaderName: strings.TrimLeft(\n\t\t\tstrings.Trim(cfg.APIKeyScheme, \" \")+\" \"+apiKey,\n\t\t\t\" \"),\n\t\t\"Content-Type\": \"application/json\",\n\t}\n",
                    "rendered": {
                      "text": "\t// Add request headers\n\theaders := map[string]string{\n\t\tcfg.APIKeyHeaderName: strings.TrimLeft(\n\t\t\tstrings.Trim(cfg.APIKeyScheme, \" \")+\" \"+apiKey,\n\t\t\t\" \"),\n\t\t\"Content-Type\": \"application/json\",\n\t}\n",
                      "markdown": "`\t// Add request headers\n\theaders := map[string]string{\n\t\tcfg.APIKeyHeaderName: strings.TrimLeft(\n\t\t\tstrings.Trim(cfg.APIKeyScheme, \" \")+\" \"+apiKey,\n\t\t\t\" \"),\n\t\t\"Content-Type\": \"application/json\",\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 99,
                  "endLine": 312,
                  "endColumn": 106,
                  "snippet": {
                    "text": "\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n\n\tapiKey := string(secBytes)\n",
                    "rendered": {
                      "text": "\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n\n\tapiKey := string(secBytes)\n",
                      "markdown": "`\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n\n\tapiKey := string(secBytes)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 74,
                  "endLine": 312,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n\n\tapiKey := string(secBytes)\n",
                    "rendered": {
                      "text": "\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n\n\tapiKey := string(secBytes)\n",
                      "markdown": "`\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n\n\tapiKey := string(secBytes)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 30,
                  "endLine": 310,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n",
                      "markdown": "`\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n\tif !ok {\n\t\treturn nil, cfg, fmt.Errorf(\"key %q not found in secret \\\"%s/%s\\\"\", cfg.APIKeySecretRef.Key, cfg.APIKeySecretRef.LocalObjectReference.Name, namespace)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 88,
                  "endLine": 307,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n",
                    "rendered": {
                      "text": "\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n",
                      "markdown": "`\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n\n\tsecBytes, ok := sec.Data[cfg.APIKeySecretRef.Key]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 74,
                  "endLine": 305,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\t}\n\n\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n",
                      "markdown": "`\t}\n\n\t// Load the API key secret\n\tsec, err := c.client.CoreV1().Secrets(namespace).Get(context.TODO(), cfg.APIKeySecretRef.LocalObjectReference.Name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, cfg, fmt.Errorf(\"failed loading api key secret %s/%s: %v\", namespace, cfg.APIKeySecretRef.LocalObjectReference.Name, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 38,
                  "endLine": 286,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t}\n\n\t// Try to load the API key\n\tif cfg.APIKeySecretRef == nil || cfg.APIKeySecretRef.LocalObjectReference.Name == \"\" {\n\t\treturn errors.New(\"no PowerDNS API key provided\")\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Try to load the API key\n\tif cfg.APIKeySecretRef == nil || cfg.APIKeySecretRef.LocalObjectReference.Name == \"\" {\n\t\treturn errors.New(\"no PowerDNS API key provided\")\n\t}\n\n",
                      "markdown": "`\t}\n\n\t// Try to load the API key\n\tif cfg.APIKeySecretRef == nil || cfg.APIKeySecretRef.LocalObjectReference.Name == \"\" {\n\t\treturn errors.New(\"no PowerDNS API key provided\")\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 8,
                  "endLine": 286,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t}\n\n\t// Try to load the API key\n\tif cfg.APIKeySecretRef == nil || cfg.APIKeySecretRef.LocalObjectReference.Name == \"\" {\n\t\treturn errors.New(\"no PowerDNS API key provided\")\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Try to load the API key\n\tif cfg.APIKeySecretRef == nil || cfg.APIKeySecretRef.LocalObjectReference.Name == \"\" {\n\t\treturn errors.New(\"no PowerDNS API key provided\")\n\t}\n\n",
                      "markdown": "`\t}\n\n\t// Try to load the API key\n\tif cfg.APIKeySecretRef == nil || cfg.APIKeySecretRef.LocalObjectReference.Name == \"\" {\n\t\treturn errors.New(\"no PowerDNS API key provided\")\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 2,
                  "endLine": 265,
                  "endColumn": 9,
                  "snippet": {
                    "text": "// the typed config struct.\nfunc loadConfig(cfgJSON *apiextensionsv1.JSON) (*powerDNSProviderConfig, error) {\n\tcfg := &powerDNSProviderConfig{\n\t\tAPIKeyScheme:     defaultScheme,\n\t\tAPIKeyHeaderName: defaultAuthHeader,\n\t}\n\t// handle the 'base case' where no configuration has been provided\n",
                    "rendered": {
                      "text": "// the typed config struct.\nfunc loadConfig(cfgJSON *apiextensionsv1.JSON) (*powerDNSProviderConfig, error) {\n\tcfg := &powerDNSProviderConfig{\n\t\tAPIKeyScheme:     defaultScheme,\n\t\tAPIKeyHeaderName: defaultAuthHeader,\n\t}\n\t// handle the 'base case' where no configuration has been provided\n",
                      "markdown": "`// the typed config struct.\nfunc loadConfig(cfgJSON *apiextensionsv1.JSON) (*powerDNSProviderConfig, error) {\n\tcfg := &powerDNSProviderConfig{\n\t\tAPIKeyScheme:     defaultScheme,\n\t\tAPIKeyHeaderName: defaultAuthHeader,\n\t}\n\t// handle the 'base case' where no configuration has been provided\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 28,
                  "endLine": 93,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n\t//\n\t// +optional default \"\"\n\tAPIKeyScheme string `json:\"apiKeyScheme\"`\n\n\t// APIKeyHeaderName is the header name where apiKey will be set\n\t//\n",
                    "rendered": {
                      "text": "\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n\t//\n\t// +optional default \"\"\n\tAPIKeyScheme string `json:\"apiKeyScheme\"`\n\n\t// APIKeyHeaderName is the header name where apiKey will be set\n\t//\n",
                      "markdown": "`\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n\t//\n\t// +optional default \"\"\n\tAPIKeyScheme string `json:\"apiKeyScheme\"`\n\n\t// APIKeyHeaderName is the header name where apiKey will be set\n\t//\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 1,
                  "endLine": 93,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n\t//\n\t// +optional default \"\"\n\tAPIKeyScheme string `json:\"apiKeyScheme\"`\n\n\t// APIKeyHeaderName is the header name where apiKey will be set\n\t//\n",
                    "rendered": {
                      "text": "\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n\t//\n\t// +optional default \"\"\n\tAPIKeyScheme string `json:\"apiKeyScheme\"`\n\n\t// APIKeyHeaderName is the header name where apiKey will be set\n\t//\n",
                      "markdown": "`\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n\t//\n\t// +optional default \"\"\n\tAPIKeyScheme string `json:\"apiKeyScheme\"`\n\n\t// APIKeyHeaderName is the header name where apiKey will be set\n\t//\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 50,
                  "endLine": 87,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n",
                    "rendered": {
                      "text": "\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n",
                      "markdown": "`\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 25,
                  "endLine": 87,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n",
                    "rendered": {
                      "text": "\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n",
                      "markdown": "`\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n",
                    "rendered": {
                      "text": "\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n",
                      "markdown": "`\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n\t// Scheme supports HTTP AuthSchemes\n\t// https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 4,
                  "endLine": 85,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t// Host is the Base URL (e.g. https://dns.example.ca) of the PowerDNS API.\n\tHost string `json:\"host\"`\n\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n",
                    "rendered": {
                      "text": "\t// Host is the Base URL (e.g. https://dns.example.ca) of the PowerDNS API.\n\tHost string `json:\"host\"`\n\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n",
                      "markdown": "`\t// Host is the Base URL (e.g. https://dns.example.ca) of the PowerDNS API.\n\tHost string `json:\"host\"`\n\n\t// APIKeySecretRef contains the reference information for the Kubernetes\n\t// secret which contains the PowerDNS API Key.\n\tAPIKeySecretRef *cmmeta.SecretKeySelector `json:\"apiKeySecretRef\"`\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 57,
                  "endLine": 60,
                  "endColumn": 61,
                  "snippet": {
                    "text": "type powerDNSProviderSolver struct {\n\t// If a Kubernetes 'clientset' is needed, you must:\n\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n",
                    "rendered": {
                      "text": "type powerDNSProviderSolver struct {\n\t// If a Kubernetes 'clientset' is needed, you must:\n\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n",
                      "markdown": "`type powerDNSProviderSolver struct {\n\t// If a Kubernetes 'clientset' is needed, you must:\n\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 3,
                  "endLine": 358,
                  "endColumn": 9,
                  "snippet": {
                    "text": "}\n\nfunc (c *powerDNSProviderSolver) getExistingRecords(ctx context.Context, provider *powerdns.Client, domain, name string) ([]powerdns.Record, error) {\n\t// Find existing records\n\tzone, err := provider.Zones.Get(ctx, domain)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed loading zone %s: %v\", domain, err)\n",
                    "rendered": {
                      "text": "}\n\nfunc (c *powerDNSProviderSolver) getExistingRecords(ctx context.Context, provider *powerdns.Client, domain, name string) ([]powerdns.Record, error) {\n\t// Find existing records\n\tzone, err := provider.Zones.Get(ctx, domain)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed loading zone %s: %v\", domain, err)\n",
                      "markdown": "`}\n\nfunc (c *powerDNSProviderSolver) getExistingRecords(ctx context.Context, provider *powerdns.Client, domain, name string) ([]powerdns.Record, error) {\n\t// Find existing records\n\tzone, err := provider.Zones.Get(ctx, domain)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed loading zone %s: %v\", domain, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 46,
                  "endLine": 326,
                  "snippet": {
                    "text": "\t// Create the client\n\thttpClient := &http.Client{}\n\n\t// If the timeout is configured, then set the timeout\n\tif cfg.Timeout > 0 {\n\t\thttpClient.Timeout = time.Duration(cfg.Timeout) * time.Second\n\t}\n\n",
                    "rendered": {
                      "text": "\t// Create the client\n\thttpClient := &http.Client{}\n\n\t// If the timeout is configured, then set the timeout\n\tif cfg.Timeout > 0 {\n\t\thttpClient.Timeout = time.Duration(cfg.Timeout) * time.Second\n\t}\n\n",
                      "markdown": "`\t// Create the client\n\thttpClient := &http.Client{}\n\n\t// If the timeout is configured, then set the timeout\n\tif cfg.Timeout > 0 {\n\t\thttpClient.Timeout = time.Duration(cfg.Timeout) * time.Second\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 10,
                  "endLine": 325,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t// Create the client\n\thttpClient := &http.Client{}\n\n\t// If the timeout is configured, then set the timeout\n\tif cfg.Timeout > 0 {\n\t\thttpClient.Timeout = time.Duration(cfg.Timeout) * time.Second\n\t}\n",
                    "rendered": {
                      "text": "\t// Create the client\n\thttpClient := &http.Client{}\n\n\t// If the timeout is configured, then set the timeout\n\tif cfg.Timeout > 0 {\n\t\thttpClient.Timeout = time.Duration(cfg.Timeout) * time.Second\n\t}\n",
                      "markdown": "`\t// Create the client\n\thttpClient := &http.Client{}\n\n\t// If the timeout is configured, then set the timeout\n\tif cfg.Timeout > 0 {\n\t\thttpClient.Timeout = time.Duration(cfg.Timeout) * time.Second\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t// The value is specified in seconds.\n\t//\n\t// +optional\n\tTimeout int `json:\"timeout\"`\n\n\t// AllowedZones is the list of zones that may be edited. If the list is\n\t// empty, all zones are permitted.\n",
                    "rendered": {
                      "text": "\t// The value is specified in seconds.\n\t//\n\t// +optional\n\tTimeout int `json:\"timeout\"`\n\n\t// AllowedZones is the list of zones that may be edited. If the list is\n\t// empty, all zones are permitted.\n",
                      "markdown": "`\t// The value is specified in seconds.\n\t//\n\t// +optional\n\tTimeout int `json:\"timeout\"`\n\n\t// AllowedZones is the list of zones that may be edited. If the list is\n\t// empty, all zones are permitted.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 18,
                  "endLine": 121,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t// +optional\n\tTTL int `json:\"ttl\"`\n\n\t// Timeout is the timeout value for requests to the PowerDNS API.\n\t// The value is specified in seconds.\n\t//\n\t// +optional\n",
                    "rendered": {
                      "text": "\t// +optional\n\tTTL int `json:\"ttl\"`\n\n\t// Timeout is the timeout value for requests to the PowerDNS API.\n\t// The value is specified in seconds.\n\t//\n\t// +optional\n",
                      "markdown": "`\t// +optional\n\tTTL int `json:\"ttl\"`\n\n\t// Timeout is the timeout value for requests to the PowerDNS API.\n\t// The value is specified in seconds.\n\t//\n\t// +optional\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 3,
                  "endLine": 121,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t// +optional\n\tTTL int `json:\"ttl\"`\n\n\t// Timeout is the timeout value for requests to the PowerDNS API.\n\t// The value is specified in seconds.\n\t//\n\t// +optional\n",
                    "rendered": {
                      "text": "\t// +optional\n\tTTL int `json:\"ttl\"`\n\n\t// Timeout is the timeout value for requests to the PowerDNS API.\n\t// The value is specified in seconds.\n\t//\n\t// +optional\n",
                      "markdown": "`\t// +optional\n\tTTL int `json:\"ttl\"`\n\n\t// Timeout is the timeout value for requests to the PowerDNS API.\n\t// The value is specified in seconds.\n\t//\n\t// +optional\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 28,
                  "endLine": 62,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n\tclient *kubernetes.Clientset\n}\n",
                    "rendered": {
                      "text": "\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n\tclient *kubernetes.Clientset\n}\n",
                      "markdown": "`\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n\tclient *kubernetes.Clientset\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/main.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 64,
                  "endLine": 60,
                  "endColumn": 69,
                  "snippet": {
                    "text": "type powerDNSProviderSolver struct {\n\t// If a Kubernetes 'clientset' is needed, you must:\n\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n",
                    "rendered": {
                      "text": "type powerDNSProviderSolver struct {\n\t// If a Kubernetes 'clientset' is needed, you must:\n\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n",
                      "markdown": "`type powerDNSProviderSolver struct {\n\t// If a Kubernetes 'clientset' is needed, you must:\n\t// 1. uncomment the additional `client` field in this structure below\n\t// 2. uncomment the \"k8s.io/client-go/kubernetes\" import at the top of the file\n\t// 3. uncomment the relevant code in the Initialize method below\n\t// 4. ensure your webhook's service account has the required RBAC role\n\t//    assigned to it for interacting with the Kubernetes APIs you need.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 6,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nRUN apk add --no-cache git\n\nWORKDIR /workspace\nENV GO111MODULE=on\n\nCOPY go.mod .\nCOPY go.sum .\n",
                    "rendered": {
                      "text": "\nRUN apk add --no-cache git\n\nWORKDIR /workspace\nENV GO111MODULE=on\n\nCOPY go.mod .\nCOPY go.sum .\n",
                      "markdown": "`\nRUN apk add --no-cache git\n\nWORKDIR /workspace\nENV GO111MODULE=on\n\nCOPY go.mod .\nCOPY go.sum .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/Dockerfile"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 22,
                  "endLine": 4,
                  "snippet": {
                    "text": "FROM golang:1.22-alpine AS build_deps\n\nRUN apk add --no-cache git\n\nWORKDIR /workspace\nENV GO111MODULE=on\n\n",
                    "rendered": {
                      "text": "FROM golang:1.22-alpine AS build_deps\n\nRUN apk add --no-cache git\n\nWORKDIR /workspace\nENV GO111MODULE=on\n\n",
                      "markdown": "`FROM golang:1.22-alpine AS build_deps\n\nRUN apk add --no-cache git\n\nWORKDIR /workspace\nENV GO111MODULE=on\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/Makefile"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "endColumn": 8,
                  "snippet": {
                    "text": "test: verify\n\nbuild:\n\tdocker build -t \"$(IMAGE_NAME):$(IMAGE_TAG)\" .\n\nrendered-manifest.yaml:\n\thelm template \\\n",
                    "rendered": {
                      "text": "test: verify\n\nbuild:\n\tdocker build -t \"$(IMAGE_NAME):$(IMAGE_TAG)\" .\n\nrendered-manifest.yaml:\n\thelm template \\\n",
                      "markdown": "`test: verify\n\nbuild:\n\tdocker build -t \"$(IMAGE_NAME):$(IMAGE_TAG)\" .\n\nrendered-manifest.yaml:\n\thelm template \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/Makefile"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nclean:\n\trm -rf _out/\n\tdocker compose -f docker-compose.test.yaml down -v\n\tgo clean\n\tgo clean -testcache\n\n",
                    "rendered": {
                      "text": "\nclean:\n\trm -rf _out/\n\tdocker compose -f docker-compose.test.yaml down -v\n\tgo clean\n\tgo clean -testcache\n\n",
                      "markdown": "`\nclean:\n\trm -rf _out/\n\tdocker compose -f docker-compose.test.yaml down -v\n\tgo clean\n\tgo clean -testcache\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-webhook-pdns.zip/Makefile"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "endColumn": 8,
                  "snippet": {
                    "text": "setup:\n\t./scripts/fetch-test-binaries.sh\n\t./scripts/setup-tests.sh\n\tdocker compose -f docker-compose.test.yaml up --build -d\n\nclean:\n\trm -rf _out/\n",
                    "rendered": {
                      "text": "setup:\n\t./scripts/fetch-test-binaries.sh\n\t./scripts/setup-tests.sh\n\tdocker compose -f docker-compose.test.yaml up --build -d\n\nclean:\n\trm -rf _out/\n",
                      "markdown": "`setup:\n\t./scripts/fetch-test-binaries.sh\n\t./scripts/setup-tests.sh\n\tdocker compose -f docker-compose.test.yaml up --build -d\n\nclean:\n\trm -rf _out/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}