{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/.rubocop.yml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 5,
                  "snippet": {
                    "text": "Style/DocumentationMethod:\n  Enabled: false\n\n# At this point, we're not ready to enforce any metrics\nMetrics/AbcSize:\n  Enabled: false\nMetrics/BlockLength:\n",
                    "rendered": {
                      "text": "Style/DocumentationMethod:\n  Enabled: false\n\n# At this point, we're not ready to enforce any metrics\nMetrics/AbcSize:\n  Enabled: false\nMetrics/BlockLength:\n",
                      "markdown": "`Style/DocumentationMethod:\n  Enabled: false\n\n# At this point, we're not ready to enforce any metrics\nMetrics/AbcSize:\n  Enabled: false\nMetrics/BlockLength:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/.rubocop.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 5,
                  "snippet": {
                    "text": "Security/YAMLLoad:\n  Enabled: false\n\n# At this point, we're not ready to enforce inline documentation requirements\nStyle/Documentation:\n  Enabled: false\nStyle/DocumentationMethod:\n",
                    "rendered": {
                      "text": "Security/YAMLLoad:\n  Enabled: false\n\n# At this point, we're not ready to enforce inline documentation requirements\nStyle/Documentation:\n  Enabled: false\nStyle/DocumentationMethod:\n",
                      "markdown": "`Security/YAMLLoad:\n  Enabled: false\n\n# At this point, we're not ready to enforce inline documentation requirements\nStyle/Documentation:\n  Enabled: false\nStyle/DocumentationMethod:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/.rubocop.yml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 72,
                  "endLine": 26,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  EnforcedHashRocketStyle: table\n  EnforcedColonStyle: table\n\n# We purposefully use these insecure features because they're what makes Ruby awesome\nSecurity/Eval:\n  Enabled: false\nSecurity/YAMLLoad:\n",
                    "rendered": {
                      "text": "  EnforcedHashRocketStyle: table\n  EnforcedColonStyle: table\n\n# We purposefully use these insecure features because they're what makes Ruby awesome\nSecurity/Eval:\n  Enabled: false\nSecurity/YAMLLoad:\n",
                      "markdown": "`  EnforcedHashRocketStyle: table\n  EnforcedColonStyle: table\n\n# We purposefully use these insecure features because they're what makes Ruby awesome\nSecurity/Eval:\n  Enabled: false\nSecurity/YAMLLoad:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/.rubocop.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 71,
                  "endLine": 8,
                  "endColumn": 77,
                  "snippet": {
                    "text": "AllCops:\n  TargetRubyVersion: 2.1\n\n# These are areas where ThrowTheSwitch's coding style diverges from the Ruby standard\nStyle/SpecialGlobalVars:\n  EnforcedStyle: use_perl_names\nStyle/FormatString:\n",
                    "rendered": {
                      "text": "AllCops:\n  TargetRubyVersion: 2.1\n\n# These are areas where ThrowTheSwitch's coding style diverges from the Ruby standard\nStyle/SpecialGlobalVars:\n  EnforcedStyle: use_perl_names\nStyle/FormatString:\n",
                      "markdown": "`AllCops:\n  TargetRubyVersion: 2.1\n\n# These are areas where ThrowTheSwitch's coding style diverges from the Ruby standard\nStyle/SpecialGlobalVars:\n  EnforcedStyle: use_perl_names\nStyle/FormatString:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/library_config/uninstall.cmake"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 31,
                  "endLine": 6,
                  "endColumn": 37,
                  "snippet": {
                    "text": "set(MANIFEST \"${CMAKE_CURRENT_BINARY_DIR}/install_manifest.txt\")\n\nif(NOT EXISTS ${MANIFEST})\n    message(FATAL_ERROR \"Cannot find install mainfest: ${MANIFEST}\")\nendif()\n\nfile(STRINGS ${MANIFEST} files)\n",
                    "rendered": {
                      "text": "set(MANIFEST \"${CMAKE_CURRENT_BINARY_DIR}/install_manifest.txt\")\n\nif(NOT EXISTS ${MANIFEST})\n    message(FATAL_ERROR \"Cannot find install mainfest: ${MANIFEST}\")\nendif()\n\nfile(STRINGS ${MANIFEST} files)\n",
                      "markdown": "`set(MANIFEST \"${CMAKE_CURRENT_BINARY_DIR}/install_manifest.txt\")\n\nif(NOT EXISTS ${MANIFEST})\n    message(FATAL_ERROR \"Cannot find install mainfest: ${MANIFEST}\")\nendif()\n\nfile(STRINGS ${MANIFEST} files)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/parse_output.rb"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 39,
                  "endLine": 107,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  def test_failed(array)\n    last_item = array.length - 1\n    test_name = array[last_item - 2]\n    reason = array[last_item].chomp + ' at line: ' + array[last_item - 3]\n    test_suite_verify(array[@class_name])\n    printf \"%-40s FAILED\\n\", test_name\n\n",
                    "rendered": {
                      "text": "  def test_failed(array)\n    last_item = array.length - 1\n    test_name = array[last_item - 2]\n    reason = array[last_item].chomp + ' at line: ' + array[last_item - 3]\n    test_suite_verify(array[@class_name])\n    printf \"%-40s FAILED\\n\", test_name\n\n",
                      "markdown": "`  def test_failed(array)\n    last_item = array.length - 1\n    test_name = array[last_item - 2]\n    reason = array[last_item].chomp + ' at line: ' + array[last_item - 3]\n    test_suite_verify(array[@class_name])\n    printf \"%-40s FAILED\\n\", test_name\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/parse_output.rb"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 4,
                  "endLine": 14,
                  "endColumn": 10,
                  "snippet": {
                    "text": "#      make | tee Output.txt\n#\n#    To use this parser use the following command\n#    ruby parseOutput.rb [options] [file]\n#        options:  -xml  : produce a JUnit compatible XML file\n#        file      :  file to scan for results\n#============================================================\n",
                    "rendered": {
                      "text": "#      make | tee Output.txt\n#\n#    To use this parser use the following command\n#    ruby parseOutput.rb [options] [file]\n#        options:  -xml  : produce a JUnit compatible XML file\n#        file      :  file to scan for results\n#============================================================\n",
                      "markdown": "`#      make | tee Output.txt\n#\n#    To use this parser use the following command\n#    ruby parseOutput.rb [options] [file]\n#        options:  -xml  : produce a JUnit compatible XML file\n#        file      :  file to scan for results\n#============================================================\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/parse_output.rb"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 13,
                  "endLine": 11,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#      devenv [build instructions]  > Output.txt & type Output.txt\n#\n#    To capture an output file under GCC/Linux builds use the following:\n#      make | tee Output.txt\n#\n#    To use this parser use the following command\n#    ruby parseOutput.rb [options] [file]\n",
                    "rendered": {
                      "text": "#      devenv [build instructions]  > Output.txt & type Output.txt\n#\n#    To capture an output file under GCC/Linux builds use the following:\n#      make | tee Output.txt\n#\n#    To use this parser use the following command\n#    ruby parseOutput.rb [options] [file]\n",
                      "markdown": "`#      devenv [build instructions]  > Output.txt & type Output.txt\n#\n#    To capture an output file under GCC/Linux builds use the following:\n#      make | tee Output.txt\n#\n#    To use this parser use the following command\n#    ruby parseOutput.rb [options] [file]\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/generate_config.yml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 23,
                  "endLine": 22,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      - Board.h\n      - Exception.h\n  :boilerplates: \n    #these are inserted at the top of generated files.\n    #just comment out or remove if not desired.\n    #use %1$s where you would like the file name to appear (path/extension not included)\n    :src: |\n",
                    "rendered": {
                      "text": "      - Board.h\n      - Exception.h\n  :boilerplates: \n    #these are inserted at the top of generated files.\n    #just comment out or remove if not desired.\n    #use %1$s where you would like the file name to appear (path/extension not included)\n    :src: |\n",
                      "markdown": "`      - Board.h\n      - Exception.h\n  :boilerplates: \n    #these are inserted at the top of generated files.\n    #just comment out or remove if not desired.\n    #use %1$s where you would like the file name to appear (path/extension not included)\n    :src: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/generate_config.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 60,
                  "endLine": 6,
                  "endColumn": 64,
                  "snippet": {
                    "text": "#files like this are useful for customizing generate_module to your environment\n:generate_module:\n  :defaults:\n    #these defaults are used in place of any missing options at the command line\n    :path_src: ../src/\n    :path_inc: ../src/\n    :path_tst: ../test/\n",
                    "rendered": {
                      "text": "#files like this are useful for customizing generate_module to your environment\n:generate_module:\n  :defaults:\n    #these defaults are used in place of any missing options at the command line\n    :path_src: ../src/\n    :path_inc: ../src/\n    :path_tst: ../test/\n",
                      "markdown": "`#files like this are useful for customizing generate_module to your environment\n:generate_module:\n  :defaults:\n    #these defaults are used in place of any missing options at the command line\n    :path_src: ../src/\n    :path_inc: ../src/\n    :path_tst: ../test/\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/generate_config.yml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 30,
                  "endLine": 22,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      - Board.h\n      - Exception.h\n  :boilerplates: \n    #these are inserted at the top of generated files.\n    #just comment out or remove if not desired.\n    #use %1$s where you would like the file name to appear (path/extension not included)\n    :src: |\n",
                    "rendered": {
                      "text": "      - Board.h\n      - Exception.h\n  :boilerplates: \n    #these are inserted at the top of generated files.\n    #just comment out or remove if not desired.\n    #use %1$s where you would like the file name to appear (path/extension not included)\n    :src: |\n",
                      "markdown": "`      - Board.h\n      - Exception.h\n  :boilerplates: \n    #these are inserted at the top of generated files.\n    #just comment out or remove if not desired.\n    #use %1$s where you would like the file name to appear (path/extension not included)\n    :src: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/generate_test_runner.rb"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 19,
                  "endLine": 430,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  # make sure there is at least one parameter left (the input file)\n  unless ARGV[0]\n    puts [\"\\nusage: ruby #{__FILE__} (files) (options) input_test_file (output)\",\n          \"\\n  input_test_file         - this is the C file you want to create a runner for\",\n          '  output                  - this is the name of the runner file to generate',\n          '                            defaults to (input_test_file)_Runner',\n",
                    "rendered": {
                      "text": "\n  # make sure there is at least one parameter left (the input file)\n  unless ARGV[0]\n    puts [\"\\nusage: ruby #{__FILE__} (files) (options) input_test_file (output)\",\n          \"\\n  input_test_file         - this is the C file you want to create a runner for\",\n          '  output                  - this is the name of the runner file to generate',\n          '                            defaults to (input_test_file)_Runner',\n",
                      "markdown": "`\n  # make sure there is at least one parameter left (the input file)\n  unless ARGV[0]\n    puts [\"\\nusage: ruby #{__FILE__} (files) (options) input_test_file (output)\",\n          \"\\n  input_test_file         - this is the C file you want to create a runner for\",\n          '  output                  - this is the name of the runner file to generate',\n          '                            defaults to (input_test_file)_Runner',\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/unity_test_summary.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 16,
                  "endLine": 6,
                  "endColumn": 22,
                  "snippet": {
                    "text": "#   Unity Project - A Test Framework for C\n#   Copyright (c) 2015 Alexander Mueller / XelaRellum@web.de\n#   [Released under MIT License. Please refer to license.txt for details]\n#   Based on the ruby script by  Mike Karlesky, Mark VanderVoord, Greg Williams\n# ==========================================\nimport sys\nimport os\n",
                    "rendered": {
                      "text": "#   Unity Project - A Test Framework for C\n#   Copyright (c) 2015 Alexander Mueller / XelaRellum@web.de\n#   [Released under MIT License. Please refer to license.txt for details]\n#   Based on the ruby script by  Mike Karlesky, Mark VanderVoord, Greg Williams\n# ==========================================\nimport sys\nimport os\n",
                      "markdown": "`#   Unity Project - A Test Framework for C\n#   Copyright (c) 2015 Alexander Mueller / XelaRellum@web.de\n#   [Released under MIT License. Please refer to license.txt for details]\n#   Based on the ruby script by  Mike Karlesky, Mark VanderVoord, Greg Williams\n# ==========================================\nimport sys\nimport os\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/fuzzing/inputs/test4"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 18,
                  "endLine": 41,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        \"dataStoreDriver\": \"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n        \"dataStoreUrl\": \"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n        \"dataStoreUser\": \"sa\",\n        \"dataStorePassword\": \"dataStoreTestQuery\",\n        \"dataStoreTestQuery\": \"SET NOCOUNT ON;select test='test';\",\n        \"dataStoreLogFile\": \"/usr/local/tomcat/logs/datastore.log\",\n        \"dataStoreInitConns\": 10,\n",
                    "rendered": {
                      "text": "        \"dataStoreDriver\": \"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n        \"dataStoreUrl\": \"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n        \"dataStoreUser\": \"sa\",\n        \"dataStorePassword\": \"dataStoreTestQuery\",\n        \"dataStoreTestQuery\": \"SET NOCOUNT ON;select test='test';\",\n        \"dataStoreLogFile\": \"/usr/local/tomcat/logs/datastore.log\",\n        \"dataStoreInitConns\": 10,\n",
                      "markdown": "`        \"dataStoreDriver\": \"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n        \"dataStoreUrl\": \"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n        \"dataStoreUser\": \"sa\",\n        \"dataStorePassword\": \"dataStoreTestQuery\",\n        \"dataStoreTestQuery\": \"SET NOCOUNT ON;select test='test';\",\n        \"dataStoreLogFile\": \"/usr/local/tomcat/logs/datastore.log\",\n        \"dataStoreInitConns\": 10,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 62,
                  "endLine": 31,
                  "endColumn": 70,
                  "snippet": {
                    "text": "Example:\n\n```c\n/* calculate the new length of the string in a printbuffer and update the offset */\nstatic void update_offset(printbuffer * const buffer)\n{\n    const unsigned char *buffer_pointer = NULL;\n",
                    "rendered": {
                      "text": "Example:\n\n```c\n/* calculate the new length of the string in a printbuffer and update the offset */\nstatic void update_offset(printbuffer * const buffer)\n{\n    const unsigned char *buffer_pointer = NULL;\n",
                      "markdown": "`Example:\n\n```c\n/* calculate the new length of the string in a printbuffer and update the offset */\nstatic void update_offset(printbuffer * const buffer)\n{\n    const unsigned char *buffer_pointer = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 28,
                  "endLine": 20,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n* Use 4 spaces for indentation\n* No oneliners (conditions, loops, variable declarations ...)\n* Always use parenthesis for control structures\n* Don't implicitly rely on operator precedence, use round brackets in expressions. e.g. `(a > b) && (c < d)` instead of `a>b && c<d`\n* opening curly braces start in the next line\n* use spaces around operators\n",
                    "rendered": {
                      "text": "\n* Use 4 spaces for indentation\n* No oneliners (conditions, loops, variable declarations ...)\n* Always use parenthesis for control structures\n* Don't implicitly rely on operator precedence, use round brackets in expressions. e.g. `(a > b) && (c < d)` instead of `a>b && c<d`\n* opening curly braces start in the next line\n* use spaces around operators\n",
                      "markdown": "`\n* Use 4 spaces for indentation\n* No oneliners (conditions, loops, variable declarations ...)\n* Always use parenthesis for control structures\n* Don't implicitly rely on operator precedence, use round brackets in expressions. e.g. `(a > b) && (c < d)` instead of `a>b && c<d`\n* opening curly braces start in the next line\n* use spaces around operators\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 42,
                  "endLine": 4,
                  "endColumn": 48,
                  "snippet": {
                    "text": "Contribution Guidelines\n=======================\n\nContributions to cJSON are welcome. If you find a bug or want to improve cJSON in another way, pull requests are appreciated.\n\nFor bigger changes, in order to avoid wasted effort, please open an issue to discuss the technical details before creating a pull request.\n\n",
                    "rendered": {
                      "text": "Contribution Guidelines\n=======================\n\nContributions to cJSON are welcome. If you find a bug or want to improve cJSON in another way, pull requests are appreciated.\n\nFor bigger changes, in order to avoid wasted effort, please open an issue to discuss the technical details before creating a pull request.\n\n",
                      "markdown": "`Contribution Guidelines\n=======================\n\nContributions to cJSON are welcome. If you find a bug or want to improve cJSON in another way, pull requests are appreciated.\n\nFor bigger changes, in order to avoid wasted effort, please open an issue to discuss the technical details before creating a pull request.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/inputs/test4.expected"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 15,
                  "endLine": 41,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\t\t\t\"dataStoreDriver\":\t\"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n\t\t\t\t\t\"dataStoreUrl\":\t\"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n\t\t\t\t\t\"dataStoreUser\":\t\"sa\",\n\t\t\t\t\t\"dataStorePassword\":\t\"dataStoreTestQuery\",\n\t\t\t\t\t\"dataStoreTestQuery\":\t\"SET NOCOUNT ON;select test='test';\",\n\t\t\t\t\t\"dataStoreLogFile\":\t\"/usr/local/tomcat/logs/datastore.log\",\n\t\t\t\t\t\"dataStoreInitConns\":\t10,\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\"dataStoreDriver\":\t\"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n\t\t\t\t\t\"dataStoreUrl\":\t\"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n\t\t\t\t\t\"dataStoreUser\":\t\"sa\",\n\t\t\t\t\t\"dataStorePassword\":\t\"dataStoreTestQuery\",\n\t\t\t\t\t\"dataStoreTestQuery\":\t\"SET NOCOUNT ON;select test='test';\",\n\t\t\t\t\t\"dataStoreLogFile\":\t\"/usr/local/tomcat/logs/datastore.log\",\n\t\t\t\t\t\"dataStoreInitConns\":\t10,\n",
                      "markdown": "`\t\t\t\t\t\"dataStoreDriver\":\t\"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n\t\t\t\t\t\"dataStoreUrl\":\t\"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n\t\t\t\t\t\"dataStoreUser\":\t\"sa\",\n\t\t\t\t\t\"dataStorePassword\":\t\"dataStoreTestQuery\",\n\t\t\t\t\t\"dataStoreTestQuery\":\t\"SET NOCOUNT ON;select test='test';\",\n\t\t\t\t\t\"dataStoreLogFile\":\t\"/usr/local/tomcat/logs/datastore.log\",\n\t\t\t\t\t\"dataStoreInitConns\":\t10,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/tests/test_generate_test_runner.rb"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 13,
                  "endLine": 554,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    }\n  },\n\n  { :name => 'CustomSetupAndTeardownThroughCommandLine',\n    :testfile => 'testdata/testRunnerGeneratorWithMocks.c',\n    :testdefines => ['TEST'],\n    :cmdline => \" --test_prefix=\\\"custtest|test\\\" --setup_name=\\\"custom_setup\\\" --teardown_name=\\\"custom_teardown\\\"\",\n",
                    "rendered": {
                      "text": "    }\n  },\n\n  { :name => 'CustomSetupAndTeardownThroughCommandLine',\n    :testfile => 'testdata/testRunnerGeneratorWithMocks.c',\n    :testdefines => ['TEST'],\n    :cmdline => \" --test_prefix=\\\"custtest|test\\\" --setup_name=\\\"custom_setup\\\" --teardown_name=\\\"custom_teardown\\\"\",\n",
                      "markdown": "`    }\n  },\n\n  { :name => 'CustomSetupAndTeardownThroughCommandLine',\n    :testfile => 'testdata/testRunnerGeneratorWithMocks.c',\n    :testdefines => ['TEST'],\n    :cmdline => \" --test_prefix=\\\"custtest|test\\\" --setup_name=\\\"custom_setup\\\" --teardown_name=\\\"custom_teardown\\\"\",\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/tests/test_generate_test_runner.rb"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 13,
                  "endLine": 229,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    }\n  },\n\n  { :name => 'CustomSetupAndTeardownThroughCommandLine',\n    :testfile => 'testdata/testRunnerGenerator.c',\n    :testdefines => ['TEST'],\n    :cmdline => \" --test_prefix=\\\"custtest|test\\\" --setup_name=\\\"custom_setup\\\" --teardown_name=\\\"custom_teardown\\\"\",\n",
                    "rendered": {
                      "text": "    }\n  },\n\n  { :name => 'CustomSetupAndTeardownThroughCommandLine',\n    :testfile => 'testdata/testRunnerGenerator.c',\n    :testdefines => ['TEST'],\n    :cmdline => \" --test_prefix=\\\"custtest|test\\\" --setup_name=\\\"custom_setup\\\" --teardown_name=\\\"custom_teardown\\\"\",\n",
                      "markdown": "`    }\n  },\n\n  { :name => 'CustomSetupAndTeardownThroughCommandLine',\n    :testfile => 'testdata/testRunnerGenerator.c',\n    :testdefines => ['TEST'],\n    :cmdline => \" --test_prefix=\\\"custtest|test\\\" --setup_name=\\\"custom_setup\\\" --teardown_name=\\\"custom_teardown\\\"\",\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/src/unity.c"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 17,
                  "endLine": 684,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    if (isinf(expected) && isinf(actual) && ((expected < 0) == (actual < 0))) return 1;   \\\n    if (UNITY_NAN_CHECK) return 1;                                                        \\\n    diff = actual - expected;                                                             \\\n    if (diff < 0) diff = -diff;                                                           \\\n    if (delta < 0) delta = -delta;                                                        \\\n    return !(isnan(diff) || isinf(diff) || (diff > delta))\n    /* This first part of this condition will catch any NaN or Infinite values */\n",
                    "rendered": {
                      "text": "    if (isinf(expected) && isinf(actual) && ((expected < 0) == (actual < 0))) return 1;   \\\n    if (UNITY_NAN_CHECK) return 1;                                                        \\\n    diff = actual - expected;                                                             \\\n    if (diff < 0) diff = -diff;                                                           \\\n    if (delta < 0) delta = -delta;                                                        \\\n    return !(isnan(diff) || isinf(diff) || (diff > delta))\n    /* This first part of this condition will catch any NaN or Infinite values */\n",
                      "markdown": "`    if (isinf(expected) && isinf(actual) && ((expected < 0) == (actual < 0))) return 1;   \\\n    if (UNITY_NAN_CHECK) return 1;                                                        \\\n    diff = actual - expected;                                                             \\\n    if (diff < 0) diff = -diff;                                                           \\\n    if (delta < 0) delta = -delta;                                                        \\\n    return !(isnan(diff) || isinf(diff) || (diff > delta))\n    /* This first part of this condition will catch any NaN or Infinite values */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/src/unity.c"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 3,
                  "endLine": 683,
                  "endColumn": 9,
                  "snippet": {
                    "text": "s float or double */\n#define UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff)                       \\\n    if (isinf(expected) && isinf(actual) && ((expected < 0) == (actual < 0))) return 1;   \\\n    if (UNITY_NAN_CHECK) return 1;                                                        \\\n    diff = actual - expected;                                                             \\\n    if (diff < 0) diff = -diff;                                                           \\\n    if (delta < 0) delta = -delta;                                                        \\\n    return !(isnan(diff) || isinf",
                    "rendered": {
                      "text": "s float or double */\n#define UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff)                       \\\n    if (isinf(expected) && isinf(actual) && ((expected < 0) == (actual < 0))) return 1;   \\\n    if (UNITY_NAN_CHECK) return 1;                                                        \\\n    diff = actual - expected;                                                             \\\n    if (diff < 0) diff = -diff;                                                           \\\n    if (delta < 0) delta = -delta;                                                        \\\n    return !(isnan(diff) || isinf",
                      "markdown": "`s float or double */\n#define UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff)                       \\\n    if (isinf(expected) && isinf(actual) && ((expected < 0) == (actual < 0))) return 1;   \\\n    if (UNITY_NAN_CHECK) return 1;                                                        \\\n    diff = actual - expected;                                                             \\\n    if (diff < 0) diff = -diff;                                                           \\\n    if (delta < 0) delta = -delta;                                                        \\\n    return !(isnan(diff) || isinf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/extras/fixture/test/Makefile"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t./$(TARGET) > /dev/null ; ./$(TARGET) -v > /dev/null\n\tcd $(BUILD_DIR) && \\\n\tgcov unity_fixture.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity_fixture.c.gcov -C2 || true # Show uncovered lines\n\n# These extended flags DO get included before any target build runs\nCFLAGS += -Wbad-function-cast\n",
                    "rendered": {
                      "text": "\t./$(TARGET) > /dev/null ; ./$(TARGET) -v > /dev/null\n\tcd $(BUILD_DIR) && \\\n\tgcov unity_fixture.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity_fixture.c.gcov -C2 || true # Show uncovered lines\n\n# These extended flags DO get included before any target build runs\nCFLAGS += -Wbad-function-cast\n",
                      "markdown": "`\t./$(TARGET) > /dev/null ; ./$(TARGET) -v > /dev/null\n\tcd $(BUILD_DIR) && \\\n\tgcov unity_fixture.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity_fixture.c.gcov -C2 || true # Show uncovered lines\n\n# These extended flags DO get included before any target build runs\nCFLAGS += -Wbad-function-cast\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/extras/fixture/test/Makefile"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 23,
                  "endLine": 56,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) > /dev/null ; ./$(TARGET) -v > /dev/null\n\tcd $(BUILD_DIR) && \\\n\tgcov unity_fixture.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity_fixture.c.gcov -C2 || true # Show uncovered lines\n\n# These extended flags DO get included before any target build runs\n",
                    "rendered": {
                      "text": "\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) > /dev/null ; ./$(TARGET) -v > /dev/null\n\tcd $(BUILD_DIR) && \\\n\tgcov unity_fixture.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity_fixture.c.gcov -C2 || true # Show uncovered lines\n\n# These extended flags DO get included before any target build runs\n",
                      "markdown": "`\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) > /dev/null ; ./$(TARGET) -v > /dev/null\n\tcd $(BUILD_DIR) && \\\n\tgcov unity_fixture.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity_fixture.c.gcov -C2 || true # Show uncovered lines\n\n# These extended flags DO get included before any target build runs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/misc_tests.c"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 47,
                  "endLine": 123,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"One\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Should not find something that isn't there.\");\n\n    cJSON_Delete(item);\n}\n",
                    "rendered": {
                      "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"One\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Should not find something that isn't there.\");\n\n    cJSON_Delete(item);\n}\n",
                      "markdown": "`    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"One\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Should not find something that isn't there.\");\n\n    cJSON_Delete(item);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/misc_tests.c"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 50,
                  "endLine": 119,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"tHree\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"One\");\n",
                    "rendered": {
                      "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"tHree\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"One\");\n",
                      "markdown": "`    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"tHree\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"One\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/misc_tests.c"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 50,
                  "endLine": 115,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"Two\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"tHree\");\n",
                    "rendered": {
                      "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"Two\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"tHree\");\n",
                      "markdown": "`    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"Two\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"tHree\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/misc_tests.c"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 50,
                  "endLine": 111,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL string.\");\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"one\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"Two\");\n",
                    "rendered": {
                      "text": "    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL string.\");\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"one\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"Two\");\n",
                      "markdown": "`    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL string.\");\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"one\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"Two\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/misc_tests.c"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 47,
                  "endLine": 92,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItem(item, \"four\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Should not find something that isn't there.\");\n\n    cJSON_Delete(item);\n}\n",
                    "rendered": {
                      "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItem(item, \"four\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Should not find something that isn't there.\");\n\n    cJSON_Delete(item);\n}\n",
                      "markdown": "`    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItem(item, \"four\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Should not find something that isn't there.\");\n\n    cJSON_Delete(item);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/misc_tests.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 50,
                  "endLine": 88,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItem(item, \"three\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItem(item, \"four\");\n",
                    "rendered": {
                      "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItem(item, \"three\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItem(item, \"four\");\n",
                      "markdown": "`    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItem(item, \"three\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItem(item, \"four\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/misc_tests.c"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 50,
                  "endLine": 84,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItem(item, \"tWo\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItem(item, \"three\");\n",
                    "rendered": {
                      "text": "    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItem(item, \"tWo\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItem(item, \"three\");\n",
                      "markdown": "`    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItem(item, \"tWo\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItem(item, \"three\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/misc_tests.c"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 50,
                  "endLine": 80,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL string.\");\n\n    found = cJSON_GetObjectItem(item, \"one\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItem(item, \"tWo\");\n",
                    "rendered": {
                      "text": "    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL string.\");\n\n    found = cJSON_GetObjectItem(item, \"one\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItem(item, \"tWo\");\n",
                      "markdown": "`    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL string.\");\n\n    found = cJSON_GetObjectItem(item, \"one\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItem(item, \"tWo\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON_Utils.c"
                },
                "region": {
                  "startLine": 1432,
                  "startColumn": 11,
                  "endLine": 1432,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        }\n        else\n        {\n            diff = 1;\n        }\n\n        if (diff < 0)\n",
                    "rendered": {
                      "text": "        }\n        else\n        {\n            diff = 1;\n        }\n\n        if (diff < 0)\n",
                      "markdown": "`        }\n        else\n        {\n            diff = 1;\n        }\n\n        if (diff < 0)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON_Utils.c"
                },
                "region": {
                  "startLine": 1427,
                  "startColumn": 15,
                  "endLine": 1427,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            }\n            else\n            {\n                diff = -1;\n            }\n        }\n        else\n",
                    "rendered": {
                      "text": "            }\n            else\n            {\n                diff = -1;\n            }\n        }\n        else\n",
                      "markdown": "`            }\n            else\n            {\n                diff = -1;\n            }\n        }\n        else\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON_Utils.c"
                },
                "region": {
                  "startLine": 1423,
                  "startColumn": 15,
                  "endLine": 1423,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        {\n            if (to_child != NULL)\n            {\n                diff = strcmp(from_child->string, to_child->string);\n            }\n            else\n            {\n",
                    "rendered": {
                      "text": "        {\n            if (to_child != NULL)\n            {\n                diff = strcmp(from_child->string, to_child->string);\n            }\n            else\n            {\n",
                      "markdown": "`        {\n            if (to_child != NULL)\n            {\n                diff = strcmp(from_child->string, to_child->string);\n            }\n            else\n            {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON_Utils.c"
                },
                "region": {
                  "startLine": 1238,
                  "startColumn": 19,
                  "endLine": 1238,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                }\n                else\n                {\n                    diff = compare_strings((unsigned char*)from_child->string, (unsigned char*)to_child->string, case_sensitive);\n                }\n\n                if (diff == 0)\n",
                    "rendered": {
                      "text": "                }\n                else\n                {\n                    diff = compare_strings((unsigned char*)from_child->string, (unsigned char*)to_child->string, case_sensitive);\n                }\n\n                if (diff == 0)\n",
                      "markdown": "`                }\n                else\n                {\n                    diff = compare_strings((unsigned char*)from_child->string, (unsigned char*)to_child->string, case_sensitive);\n                }\n\n                if (diff == 0)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON_Utils.c"
                },
                "region": {
                  "startLine": 1234,
                  "startColumn": 19,
                  "endLine": 1234,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                }\n                else if (to_child == NULL)\n                {\n                    diff = -1;\n                }\n                else\n                {\n",
                    "rendered": {
                      "text": "                }\n                else if (to_child == NULL)\n                {\n                    diff = -1;\n                }\n                else\n                {\n",
                      "markdown": "`                }\n                else if (to_child == NULL)\n                {\n                    diff = -1;\n                }\n                else\n                {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON_Utils.c"
                },
                "region": {
                  "startLine": 1230,
                  "startColumn": 19,
                  "endLine": 1230,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                int diff;\n                if (from_child == NULL)\n                {\n                    diff = 1;\n                }\n                else if (to_child == NULL)\n                {\n",
                    "rendered": {
                      "text": "                int diff;\n                if (from_child == NULL)\n                {\n                    diff = 1;\n                }\n                else if (to_child == NULL)\n                {\n",
                      "markdown": "`                int diff;\n                if (from_child == NULL)\n                {\n                    diff = 1;\n                }\n                else if (to_child == NULL)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/appveyor.yml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 56,
                  "endLine": 86,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\non_failure:\n  - ps: if(Test-Path builds/CMakeFiles/CMakeOutput.log) { cat builds/CMakeFiles/CMakeOutput.log }\n  - ps: if(Test-Path builds/CMakeFiles/CMakeError.log) { cat builds/CMakeFiles/CMakeError.log }",
                    "rendered": {
                      "text": "\non_failure:\n  - ps: if(Test-Path builds/CMakeFiles/CMakeOutput.log) { cat builds/CMakeFiles/CMakeOutput.log }\n  - ps: if(Test-Path builds/CMakeFiles/CMakeError.log) { cat builds/CMakeFiles/CMakeError.log }",
                      "markdown": "`\non_failure:\n  - ps: if(Test-Path builds/CMakeFiles/CMakeOutput.log) { cat builds/CMakeFiles/CMakeOutput.log }\n  - ps: if(Test-Path builds/CMakeFiles/CMakeError.log) { cat builds/CMakeFiles/CMakeError.log }`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/appveyor.yml"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 57,
                  "endLine": 85,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n\non_failure:\n  - ps: if(Test-Path builds/CMakeFiles/CMakeOutput.log) { cat builds/CMakeFiles/CMakeOutput.log }\n  - ps: if(Test-Path builds/CMakeFiles/CMakeError.log) { cat builds/CMakeFiles/CMakeError.log }",
                    "rendered": {
                      "text": "\n\non_failure:\n  - ps: if(Test-Path builds/CMakeFiles/CMakeOutput.log) { cat builds/CMakeFiles/CMakeOutput.log }\n  - ps: if(Test-Path builds/CMakeFiles/CMakeError.log) { cat builds/CMakeFiles/CMakeError.log }",
                      "markdown": "`\n\non_failure:\n  - ps: if(Test-Path builds/CMakeFiles/CMakeOutput.log) { cat builds/CMakeFiles/CMakeOutput.log }\n  - ps: if(Test-Path builds/CMakeFiles/CMakeError.log) { cat builds/CMakeFiles/CMakeError.log }`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 222,
                  "endLine": 566,
                  "endColumn": 226,
                  "snippet": {
                    "text": "\n#### Deep Nesting Of Arrays And Objects\n\ncJSON doesn't support arrays and objects that are nested too deeply because this would result in a stack overflow. To prevent this cJSON limits the depth to `CJSON_NESTING_LIMIT` which is 1000 by default but can be changed at compile time.\n\n#### Thread Safety\n\n",
                    "rendered": {
                      "text": "\n#### Deep Nesting Of Arrays And Objects\n\ncJSON doesn't support arrays and objects that are nested too deeply because this would result in a stack overflow. To prevent this cJSON limits the depth to `CJSON_NESTING_LIMIT` which is 1000 by default but can be changed at compile time.\n\n#### Thread Safety\n\n",
                      "markdown": "`\n#### Deep Nesting Of Arrays And Objects\n\ncJSON doesn't support arrays and objects that are nested too deeply because this would result in a stack overflow. To prevent this cJSON limits the depth to `CJSON_NESTING_LIMIT` which is 1000 by default but can be changed at compile time.\n\n#### Thread Safety\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 116,
                  "endLine": 304,
                  "endColumn": 120,
                  "snippet": {
                    "text": "ed JSON will not be considered as an error.\n\nIf you want more options, use `cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)`.\n`return_parse_end` returns a pointer to the end of the JSON in the input string or the position that an error occurs at (thereby replacing `cJSON_GetErrorPtr` in a thread safe way). `require_null_terminated`, if set to `1` will make it an error if the input string contains data after the JSON.\n\nIf you want more options giving buffer length, use `cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const",
                    "rendered": {
                      "text": "ed JSON will not be considered as an error.\n\nIf you want more options, use `cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)`.\n`return_parse_end` returns a pointer to the end of the JSON in the input string or the position that an error occurs at (thereby replacing `cJSON_GetErrorPtr` in a thread safe way). `require_null_terminated`, if set to `1` will make it an error if the input string contains data after the JSON.\n\nIf you want more options giving buffer length, use `cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const",
                      "markdown": "`ed JSON will not be considered as an error.\n\nIf you want more options, use `cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)`.\n`return_parse_end` returns a pointer to the end of the JSON in the input string or the position that an error occurs at (thereby replacing `cJSON_GetErrorPtr` in a thread safe way). `require_null_terminated`, if set to `1` will make it an error if the input string contains data after the JSON.\n\nIf you want more options giving buffer length, use `cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 97,
                  "endLine": 257,
                  "endColumn": 101,
                  "snippet": {
                    "text": "iaPointer` given a pointer to an element. `cJSON_ReplaceItemViaPointer` will return `0` if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.\n\nTo get the size of an array, use `cJSON_GetArraySize`. Use `cJSON_GetArrayItem` to get an element at a given index.\n\nBecause an array is stored as a linked list, iterating it via index is inefficient (`O(n²)`), so you can iterate over an array using the `cJSON_ArrayForEach` macro in `O(n)` time complexity.\n\n#### Objects\n\nYou can create an empty object with `cJSON_CreateObject`. `cJSON_CreateObjectR",
                    "rendered": {
                      "text": "iaPointer` given a pointer to an element. `cJSON_ReplaceItemViaPointer` will return `0` if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.\n\nTo get the size of an array, use `cJSON_GetArraySize`. Use `cJSON_GetArrayItem` to get an element at a given index.\n\nBecause an array is stored as a linked list, iterating it via index is inefficient (`O(n²)`), so you can iterate over an array using the `cJSON_ArrayForEach` macro in `O(n)` time complexity.\n\n#### Objects\n\nYou can create an empty object with `cJSON_CreateObject`. `cJSON_CreateObjectR",
                      "markdown": "`iaPointer` given a pointer to an element. `cJSON_ReplaceItemViaPointer` will return `0` if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.\n\nTo get the size of an array, use `cJSON_GetArraySize`. Use `cJSON_GetArrayItem` to get an element at a given index.\n\nBecause an array is stored as a linked list, iterating it via index is inefficient (`O(n²)`), so you can iterate over an array using the `cJSON_ArrayForEach` macro in `O(n)` time complexity.\n\n#### Objects\n\nYou can create an empty object with `cJSON_CreateObject`. `cJSON_CreateObjectR`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 43,
                  "endLine": 251,
                  "endColumn": 47,
                  "snippet": {
                    "text": "r `valuestring` properties, so no double frees are occurring if they are already used elsewhere.\nTo insert items in the middle, use `cJSON_InsertItemInArray`. It will insert an item at the given 0 based index and shift all the existing items to the right.\n\nIf you want to take an item out of an array at a given index and continue using it, use `cJSON_DetachItemFromArray`, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.\n\nDeleting items is done with `cJSON_DeleteItemFromArray`. It works like `cJSON_DetachItemFromArray`, but deletes the de",
                    "rendered": {
                      "text": "r `valuestring` properties, so no double frees are occurring if they are already used elsewhere.\nTo insert items in the middle, use `cJSON_InsertItemInArray`. It will insert an item at the given 0 based index and shift all the existing items to the right.\n\nIf you want to take an item out of an array at a given index and continue using it, use `cJSON_DetachItemFromArray`, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.\n\nDeleting items is done with `cJSON_DeleteItemFromArray`. It works like `cJSON_DetachItemFromArray`, but deletes the de",
                      "markdown": "`r `valuestring` properties, so no double frees are occurring if they are already used elsewhere.\nTo insert items in the middle, use `cJSON_InsertItemInArray`. It will insert an item at the given 0 based index and shift all the existing items to the right.\n\nIf you want to take an item out of an array at a given index and continue using it, use `cJSON_DetachItemFromArray`, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.\n\nDeleting items is done with `cJSON_DeleteItemFromArray`. It works like `cJSON_DetachItemFromArray`, but deletes the de`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 84,
                  "endLine": 249,
                  "endColumn": 88,
                  "snippet": {
                    "text": "ed as a reference to another item, array or string. This means that `cJSON_Delete` will not delete that items `child` or `valuestring` properties, so no double frees are occurring if they are already used elsewhere.\nTo insert items in the middle, use `cJSON_InsertItemInArray`. It will insert an item at the given 0 based index and shift all the existing items to the right.\n\nIf you want to take an item out of an array at a given index and continue using it, use `cJSON_DetachItemFromArray`, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.\n",
                    "rendered": {
                      "text": "ed as a reference to another item, array or string. This means that `cJSON_Delete` will not delete that items `child` or `valuestring` properties, so no double frees are occurring if they are already used elsewhere.\nTo insert items in the middle, use `cJSON_InsertItemInArray`. It will insert an item at the given 0 based index and shift all the existing items to the right.\n\nIf you want to take an item out of an array at a given index and continue using it, use `cJSON_DetachItemFromArray`, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.\n",
                      "markdown": "`ed as a reference to another item, array or string. This means that `cJSON_Delete` will not delete that items `child` or `valuestring` properties, so no double frees are occurring if they are already used elsewhere.\nTo insert items in the middle, use `cJSON_InsertItemInArray`. It will insert an item at the given 0 based index and shift all the existing items to the right.\n\nIf you want to take an item out of an array at a given index and continue using it, use `cJSON_DetachItemFromArray`, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 33,
                  "endLine": 232,
                  "endColumn": 37,
                  "snippet": {
                    "text": "t try to deallocate `string`.\n\n### Working with the data structure\n\nFor every value type there is a `cJSON_Create...` function that can be used to create an item of that type.\nAll of these will allocate a `cJSON` struct that can later be deleted with `cJSON_Delete`.\nNote that you have to delete them at some point, otherwise you will get a memory leak.  \n**Important**: If you have added an item to an array or an object already, you **mustn't** delete it with `cJSON_Delete`. Adding it to an array or object transfers its ownership so that when that array or object is deleted, \nit gets deleted as well",
                    "rendered": {
                      "text": "t try to deallocate `string`.\n\n### Working with the data structure\n\nFor every value type there is a `cJSON_Create...` function that can be used to create an item of that type.\nAll of these will allocate a `cJSON` struct that can later be deleted with `cJSON_Delete`.\nNote that you have to delete them at some point, otherwise you will get a memory leak.  \n**Important**: If you have added an item to an array or an object already, you **mustn't** delete it with `cJSON_Delete`. Adding it to an array or object transfers its ownership so that when that array or object is deleted, \nit gets deleted as well",
                      "markdown": "`t try to deallocate `string`.\n\n### Working with the data structure\n\nFor every value type there is a `cJSON_Create...` function that can be used to create an item of that type.\nAll of these will allocate a `cJSON` struct that can later be deleted with `cJSON_Delete`.\nNote that you have to delete them at some point, otherwise you will get a memory leak.  \n**Important**: If you have added an item to an array or an object already, you **mustn't** delete it with `cJSON_Delete`. Adding it to an array or object transfers its ownership so that when that array or object is deleted, \nit gets deleted as well`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 49,
                  "endLine": 137,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n#### Makefile\n\n**NOTE:** This Method is deprecated. Use CMake if at all possible. Makefile support is limited to fixing bugs.\n\nIf you don't have CMake available, but still have GNU make. You can use the makefile to build cJSON:\n\n",
                    "rendered": {
                      "text": "\n#### Makefile\n\n**NOTE:** This Method is deprecated. Use CMake if at all possible. Makefile support is limited to fixing bugs.\n\nIf you don't have CMake available, but still have GNU make. You can use the makefile to build cJSON:\n\n",
                      "markdown": "`\n#### Makefile\n\n**NOTE:** This Method is deprecated. Use CMake if at all possible. Makefile support is limited to fixing bugs.\n\nIf you don't have CMake available, but still have GNU make. You can use the makefile to build cJSON:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 173,
                  "endLine": 259,
                  "endColumn": 179,
                  "snippet": {
                    "text": "\nTo get the size of an array, use `cJSON_GetArraySize`. Use `cJSON_GetArrayItem` to get an element at a given index.\n\nBecause an array is stored as a linked list, iterating it via index is inefficient (`O(n²)`), so you can iterate over an array using the `cJSON_ArrayForEach` macro in `O(n)` time complexity.\n\n#### Objects\n\n",
                    "rendered": {
                      "text": "\nTo get the size of an array, use `cJSON_GetArraySize`. Use `cJSON_GetArrayItem` to get an element at a given index.\n\nBecause an array is stored as a linked list, iterating it via index is inefficient (`O(n²)`), so you can iterate over an array using the `cJSON_ArrayForEach` macro in `O(n)` time complexity.\n\n#### Objects\n\n",
                      "markdown": "`\nTo get the size of an array, use `cJSON_GetArraySize`. Use `cJSON_GetArrayItem` to get an element at a given index.\n\nBecause an array is stored as a linked list, iterating it via index is inefficient (`O(n²)`), so you can iterate over an array using the `cJSON_ArrayForEach` macro in `O(n)` time complexity.\n\n#### Objects\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 118,
                  "endLine": 207,
                  "endColumn": 124,
                  "snippet": {
                    "text": "} cJSON;\n```\n\nAn item of this type represents a JSON value. The type is stored in `type` as a bit-flag (**this means that you cannot find out the type by just comparing the value of `type`**).\n\nTo check the type of an item, use the corresponding `cJSON_Is...` function. It does a `NULL` check followed by a type check and returns a boolean value if the item is of this type.\n\n",
                    "rendered": {
                      "text": "} cJSON;\n```\n\nAn item of this type represents a JSON value. The type is stored in `type` as a bit-flag (**this means that you cannot find out the type by just comparing the value of `type`**).\n\nTo check the type of an item, use the corresponding `cJSON_Is...` function. It does a `NULL` check followed by a type check and returns a boolean value if the item is of this type.\n\n",
                      "markdown": "`} cJSON;\n```\n\nAn item of this type represents a JSON value. The type is stored in `type` as a bit-flag (**this means that you cannot find out the type by just comparing the value of `type`**).\n\nTo check the type of an item, use the corresponding `cJSON_Is...` function. It does a `NULL` check followed by a type check and returns a boolean value if the item is of this type.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/README.md"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 3,
                  "endLine": 170,
                  "endColumn": 4,
                  "snippet": {
                    "text": "#### Vcpkg\n\nYou can download and install cJSON using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n",
                    "rendered": {
                      "text": "#### Vcpkg\n\nYou can download and install cJSON using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n",
                      "markdown": "`#### Vcpkg\n\nYou can download and install cJSON using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/json-patch-tests/tests.json"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 35,
                  "endLine": 135,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      \"patch\": [{\"op\":\"add\", \"path\": \"/2\", \"value\": \"bar\"}],\n      \"expected\": [\"foo\", \"sil\", \"bar\"] },\n\n    { \"comment\": \"add item to array at index > length should fail\",\n      \"doc\": [\"foo\", \"sil\"],\n      \"patch\": [{\"op\":\"add\", \"path\": \"/3\", \"value\": \"bar\"}],\n      \"error\": \"index is greater than number of items in array\" },\n",
                    "rendered": {
                      "text": "      \"patch\": [{\"op\":\"add\", \"path\": \"/2\", \"value\": \"bar\"}],\n      \"expected\": [\"foo\", \"sil\", \"bar\"] },\n\n    { \"comment\": \"add item to array at index > length should fail\",\n      \"doc\": [\"foo\", \"sil\"],\n      \"patch\": [{\"op\":\"add\", \"path\": \"/3\", \"value\": \"bar\"}],\n      \"error\": \"index is greater than number of items in array\" },\n",
                      "markdown": "`      \"patch\": [{\"op\":\"add\", \"path\": \"/2\", \"value\": \"bar\"}],\n      \"expected\": [\"foo\", \"sil\", \"bar\"] },\n\n    { \"comment\": \"add item to array at index > length should fail\",\n      \"doc\": [\"foo\", \"sil\"],\n      \"patch\": [{\"op\":\"add\", \"path\": \"/3\", \"value\": \"bar\"}],\n      \"error\": \"index is greater than number of items in array\" },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/json-patch-tests/tests.json"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 37,
                  "endLine": 83,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      \"patch\": [ {\"op\": \"add\", \"path\": \"/foo/\", \"value\":1 } ],\n      \"expected\": {\"foo\":{\"\": 1}} },\n\n    { \"comment\": \"Add composite value at top level\",\n      \"doc\": {\"foo\": 1},\n      \"patch\": [{\"op\": \"add\", \"path\": \"/bar\", \"value\": [1, 2]}],\n      \"expected\": {\"foo\": 1, \"bar\": [1, 2]} },\n",
                    "rendered": {
                      "text": "      \"patch\": [ {\"op\": \"add\", \"path\": \"/foo/\", \"value\":1 } ],\n      \"expected\": {\"foo\":{\"\": 1}} },\n\n    { \"comment\": \"Add composite value at top level\",\n      \"doc\": {\"foo\": 1},\n      \"patch\": [{\"op\": \"add\", \"path\": \"/bar\", \"value\": [1, 2]}],\n      \"expected\": {\"foo\": 1, \"bar\": [1, 2]} },\n",
                      "markdown": "`      \"patch\": [ {\"op\": \"add\", \"path\": \"/foo/\", \"value\":1 } ],\n      \"expected\": {\"foo\":{\"\": 1}} },\n\n    { \"comment\": \"Add composite value at top level\",\n      \"doc\": {\"foo\": 1},\n      \"patch\": [{\"op\": \"add\", \"path\": \"/bar\", \"value\": [1, 2]}],\n      \"expected\": {\"foo\": 1, \"bar\": [1, 2]} },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/json-patch-tests/tests.json"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 40,
                  "endLine": 83,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      \"patch\": [ {\"op\": \"add\", \"path\": \"/foo/\", \"value\":1 } ],\n      \"expected\": {\"foo\":{\"\": 1}} },\n\n    { \"comment\": \"Add composite value at top level\",\n      \"doc\": {\"foo\": 1},\n      \"patch\": [{\"op\": \"add\", \"path\": \"/bar\", \"value\": [1, 2]}],\n      \"expected\": {\"foo\": 1, \"bar\": [1, 2]} },\n",
                    "rendered": {
                      "text": "      \"patch\": [ {\"op\": \"add\", \"path\": \"/foo/\", \"value\":1 } ],\n      \"expected\": {\"foo\":{\"\": 1}} },\n\n    { \"comment\": \"Add composite value at top level\",\n      \"doc\": {\"foo\": 1},\n      \"patch\": [{\"op\": \"add\", \"path\": \"/bar\", \"value\": [1, 2]}],\n      \"expected\": {\"foo\": 1, \"bar\": [1, 2]} },\n",
                      "markdown": "`      \"patch\": [ {\"op\": \"add\", \"path\": \"/foo/\", \"value\":1 } ],\n      \"expected\": {\"foo\":{\"\": 1}} },\n\n    { \"comment\": \"Add composite value at top level\",\n      \"doc\": {\"foo\": 1},\n      \"patch\": [{\"op\": \"add\", \"path\": \"/bar\", \"value\": [1, 2]}],\n      \"expected\": {\"foo\": 1, \"bar\": [1, 2]} },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/json-patch-tests/README.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 39,
                  "endLine": 67,
                  "snippet": {
                    "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/json-patch-tests/README.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 33,
                  "endLine": 6,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nThese are test cases for implementations of [IETF JSON Patch (RFC6902)](http://tools.ietf.org/html/rfc6902).\n\nSome implementations can be found at [jsonpatch.com](http://jsonpatch.com).\n\n\nTest Format\n",
                    "rendered": {
                      "text": "\nThese are test cases for implementations of [IETF JSON Patch (RFC6902)](http://tools.ietf.org/html/rfc6902).\n\nSome implementations can be found at [jsonpatch.com](http://jsonpatch.com).\n\n\nTest Format\n",
                      "markdown": "`\nThese are test cases for implementations of [IETF JSON Patch (RFC6902)](http://tools.ietf.org/html/rfc6902).\n\nSome implementations can be found at [jsonpatch.com](http://jsonpatch.com).\n\n\nTest Format\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/examples/example_1/makefile"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "endColumn": 6,
                  "snippet": {
                    "text": "test/test_runners/TestProductionCode_Runner.c: test/TestProductionCode.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode.c  test/test_runners/TestProductionCode_Runner.c\ntest/test_runners/TestProductionCode2_Runner.c: test/TestProductionCode2.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode2.c test/test_runners/TestProductionCode2_Runner.c\n\nclean:\n\t$(CLEANUP) $(TARGET1) $(TARGET2)\n",
                    "rendered": {
                      "text": "test/test_runners/TestProductionCode_Runner.c: test/TestProductionCode.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode.c  test/test_runners/TestProductionCode_Runner.c\ntest/test_runners/TestProductionCode2_Runner.c: test/TestProductionCode2.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode2.c test/test_runners/TestProductionCode2_Runner.c\n\nclean:\n\t$(CLEANUP) $(TARGET1) $(TARGET2)\n",
                      "markdown": "`test/test_runners/TestProductionCode_Runner.c: test/TestProductionCode.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode.c  test/test_runners/TestProductionCode_Runner.c\ntest/test_runners/TestProductionCode2_Runner.c: test/TestProductionCode2.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode2.c test/test_runners/TestProductionCode2_Runner.c\n\nclean:\n\t$(CLEANUP) $(TARGET1) $(TARGET2)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/examples/example_1/makefile"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t./$(TARGET2)\n\ntest/test_runners/TestProductionCode_Runner.c: test/TestProductionCode.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode.c  test/test_runners/TestProductionCode_Runner.c\ntest/test_runners/TestProductionCode2_Runner.c: test/TestProductionCode2.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode2.c test/test_runners/TestProductionCode2_Runner.c\n\n",
                    "rendered": {
                      "text": "\t./$(TARGET2)\n\ntest/test_runners/TestProductionCode_Runner.c: test/TestProductionCode.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode.c  test/test_runners/TestProductionCode_Runner.c\ntest/test_runners/TestProductionCode2_Runner.c: test/TestProductionCode2.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode2.c test/test_runners/TestProductionCode2_Runner.c\n\n",
                      "markdown": "`\t./$(TARGET2)\n\ntest/test_runners/TestProductionCode_Runner.c: test/TestProductionCode.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode.c  test/test_runners/TestProductionCode_Runner.c\ntest/test_runners/TestProductionCode2_Runner.c: test/TestProductionCode2.c\n\truby $(UNITY_ROOT)/auto/generate_test_runner.rb test/TestProductionCode2.c test/test_runners/TestProductionCode2_Runner.c\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/Makefile"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 55,
                  "endLine": 56,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\nAWK_SCRIPT=\\\n  '/^void test/{ declarations[d++]=$$0; gsub(/\\(?void\\)? ?/,\"\"); tests[t++]=$$0; line[u++]=NR } \\\n  END{ print \"\\#include \\\"unity.h\\\" /* Autogenerated by awk in Makefile */\" ;                   \\\n       for (i=0; i<d; i++) { print declarations[i] \";\" }                                        \\\n       print \"int main(void)\\n{\\n    UnityBegin(\\\"\" FILENAME \"\\\");\" ;                           \\\n       for (i=0; i<t; i++) { print \"    RUN_TEST(\" tests[i] \", \" line[i] \");\" }                 \\\n",
                    "rendered": {
                      "text": "\nAWK_SCRIPT=\\\n  '/^void test/{ declarations[d++]=$$0; gsub(/\\(?void\\)? ?/,\"\"); tests[t++]=$$0; line[u++]=NR } \\\n  END{ print \"\\#include \\\"unity.h\\\" /* Autogenerated by awk in Makefile */\" ;                   \\\n       for (i=0; i<d; i++) { print declarations[i] \";\" }                                        \\\n       print \"int main(void)\\n{\\n    UnityBegin(\\\"\" FILENAME \"\\\");\" ;                           \\\n       for (i=0; i<t; i++) { print \"    RUN_TEST(\" tests[i] \", \" line[i] \");\" }                 \\\n",
                      "markdown": "`\nAWK_SCRIPT=\\\n  '/^void test/{ declarations[d++]=$$0; gsub(/\\(?void\\)? ?/,\"\"); tests[t++]=$$0; line[u++]=NR } \\\n  END{ print \"\\#include \\\"unity.h\\\" /* Autogenerated by awk in Makefile */\" ;                   \\\n       for (i=0; i<d; i++) { print declarations[i] \";\" }                                        \\\n       print \"int main(void)\\n{\\n    UnityBegin(\\\"\" FILENAME \"\\\");\" ;                           \\\n       for (i=0; i<t; i++) { print \"    RUN_TEST(\" tests[i] \", \" line[i] \");\" }                 \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/Makefile"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t$(CC) $(CFLAGS) $(INC_DIR) $(UNITY_C_ONLY) -D UNITY_EXCLUDE_LIMITS_H\n\n$(BUILD_DIR)/testunityRunner.c: tests/testunity.c | $(BUILD_DIR)\n\tawk $(AWK_SCRIPT) tests/testunity.c > $@\n\nAWK_SCRIPT=\\\n  '/^void test/{ declarations[d++]=$$0; gsub(/\\(?void\\)? ?/,\"\"); tests[t++]=$$0; line[u++]=NR } \\\n",
                    "rendered": {
                      "text": "\t$(CC) $(CFLAGS) $(INC_DIR) $(UNITY_C_ONLY) -D UNITY_EXCLUDE_LIMITS_H\n\n$(BUILD_DIR)/testunityRunner.c: tests/testunity.c | $(BUILD_DIR)\n\tawk $(AWK_SCRIPT) tests/testunity.c > $@\n\nAWK_SCRIPT=\\\n  '/^void test/{ declarations[d++]=$$0; gsub(/\\(?void\\)? ?/,\"\"); tests[t++]=$$0; line[u++]=NR } \\\n",
                      "markdown": "`\t$(CC) $(CFLAGS) $(INC_DIR) $(UNITY_C_ONLY) -D UNITY_EXCLUDE_LIMITS_H\n\n$(BUILD_DIR)/testunityRunner.c: tests/testunity.c | $(BUILD_DIR)\n\tawk $(AWK_SCRIPT) tests/testunity.c > $@\n\nAWK_SCRIPT=\\\n  '/^void test/{ declarations[d++]=$$0; gsub(/\\(?void\\)? ?/,\"\"); tests[t++]=$$0; line[u++]=NR } \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/Makefile"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n\ntest: $(BUILD_DIR)/testunityRunner.c\n\t$(CC) $(CFLAGS) $(DEFINES) $(INC_DIR) $(SRC) -o $(TARGET)\n",
                    "rendered": {
                      "text": "\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n\ntest: $(BUILD_DIR)/testunityRunner.c\n\t$(CC) $(CFLAGS) $(DEFINES) $(INC_DIR) $(SRC) -o $(TARGET)\n",
                      "markdown": "`\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n\ntest: $(BUILD_DIR)/testunityRunner.c\n\t$(CC) $(CFLAGS) $(DEFINES) $(INC_DIR) $(SRC) -o $(TARGET)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/Makefile"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 15,
                  "endLine": 38,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n\ntest: $(BUILD_DIR)/testunityRunner.c\n",
                    "rendered": {
                      "text": "\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n\ntest: $(BUILD_DIR)/testunityRunner.c\n",
                      "markdown": "`\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n\ntest: $(BUILD_DIR)/testunityRunner.c\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/Makefile"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\tcd $(BUILD_DIR) && \\\n\t$(CC) $(CFLAGS) $(DEFINES) $(foreach i,$(SRC), ../$i) $(COV_FLAGS) -o ../$(TARGET)\n\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n",
                    "rendered": {
                      "text": "\tcd $(BUILD_DIR) && \\\n\t$(CC) $(CFLAGS) $(DEFINES) $(foreach i,$(SRC), ../$i) $(COV_FLAGS) -o ../$(TARGET)\n\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n",
                      "markdown": "`\tcd $(BUILD_DIR) && \\\n\t$(CC) $(CFLAGS) $(DEFINES) $(foreach i,$(SRC), ../$i) $(COV_FLAGS) -o ../$(TARGET)\n\trm -f $(BUILD_DIR)/*.gcda\n\t./$(TARGET) | grep 'Tests\\|]]]' -A1\n\tcd $(BUILD_DIR) && \\\n\tgcov unity.c | head -3\n\tgrep '###' $(BUILD_DIR)/unity.c.gcov -C2 || true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 33,
                  "endLine": 191,
                  "endColumn": 37,
                  "snippet": {
                    "text": "our final release!\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                    "rendered": {
                      "text": "our final release!\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                      "markdown": "`our final release!\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 38,
                  "endLine": 169,
                  "endColumn": 47,
                  "snippet": {
                    "text": "unit tests on your hardware.\nThere are many reasons for this, but here's a short version:\n- On hardware, you have too many constraints (processing power, memory, etc),\n- On hardware, you don't have complete control over all registers,\n- On hardware, unit testing is more challenging,\n- Unit testing isn't System testing. Keep them separate.\n\n",
                    "rendered": {
                      "text": "unit tests on your hardware.\nThere are many reasons for this, but here's a short version:\n- On hardware, you have too many constraints (processing power, memory, etc),\n- On hardware, you don't have complete control over all registers,\n- On hardware, unit testing is more challenging,\n- Unit testing isn't System testing. Keep them separate.\n\n",
                      "markdown": "`unit tests on your hardware.\nThere are many reasons for this, but here's a short version:\n- On hardware, you have too many constraints (processing power, memory, etc),\n- On hardware, you don't have complete control over all registers,\n- On hardware, unit testing is more challenging,\n- Unit testing isn't System testing. Keep them separate.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 69,
                  "endLine": 159,
                  "endColumn": 73,
                  "snippet": {
                    "text": "## How to Build and Run A Test File\n\nThis is the single biggest challenge to picking up a new unit testing framework,\nat least in a language like C or C++. These languages are REALLY good at getting\nyou \"close to the metal\" (why is the phrase metal? Wouldn't it be more accurate\nto say \"close to the silicon\"?). While this feature is usually a good thing, it\ncan make testing more challenging.\n",
                    "rendered": {
                      "text": "## How to Build and Run A Test File\n\nThis is the single biggest challenge to picking up a new unit testing framework,\nat least in a language like C or C++. These languages are REALLY good at getting\nyou \"close to the metal\" (why is the phrase metal? Wouldn't it be more accurate\nto say \"close to the silicon\"?). While this feature is usually a good thing, it\ncan make testing more challenging.\n",
                      "markdown": "`## How to Build and Run A Test File\n\nThis is the single biggest challenge to picking up a new unit testing framework,\nat least in a language like C or C++. These languages are REALLY good at getting\nyou \"close to the metal\" (why is the phrase metal? Wouldn't it be more accurate\nto say \"close to the silicon\"?). While this feature is usually a good thing, it\ncan make testing more challenging.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 80,
                  "endLine": 159,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\n## How to Build and Run A Test File\n\nThis is the single biggest challenge to picking up a new unit testing framework,\nat least in a language like C or C++. These languages are REALLY good at getting\nyou \"close to the metal\" (why is the phrase metal? Wouldn't it be more accurate\nto say \"close to the silicon\"?). While this feature is usually a good thing, it\ncan make testing more challenging.\n",
                    "rendered": {
                      "text": "\n## How to Build and Run A Test File\n\nThis is the single biggest challenge to picking up a new unit testing framework,\nat least in a language like C or C++. These languages are REALLY good at getting\nyou \"close to the metal\" (why is the phrase metal? Wouldn't it be more accurate\nto say \"close to the silicon\"?). While this feature is usually a good thing, it\ncan make testing more challenging.\n",
                      "markdown": "`\n## How to Build and Run A Test File\n\nThis is the single biggest challenge to picking up a new unit testing framework,\nat least in a language like C or C++. These languages are REALLY good at getting\nyou \"close to the metal\" (why is the phrase metal? Wouldn't it be more accurate\nto say \"close to the silicon\"?). While this feature is usually a good thing, it\ncan make testing more challenging.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 52,
                  "endLine": 152,
                  "endColumn": 56,
                  "snippet": {
                    "text": "```\n\nIt's possible that you will require more customization than this, eventually.\nFor that sort of thing, you're going to want to look at the configuration guide.\nThis should be enough to get you going, though.\n\n\n",
                    "rendered": {
                      "text": "```\n\nIt's possible that you will require more customization than this, eventually.\nFor that sort of thing, you're going to want to look at the configuration guide.\nThis should be enough to get you going, though.\n\n\n",
                      "markdown": "````\n\nIt's possible that you will require more customization than this, eventually.\nFor that sort of thing, you're going to want to look at the configuration guide.\nThis should be enough to get you going, though.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 21,
                  "snippet": {
                    "text": "of our handy generate_test_runner.rb script. This will create the main function\nand all the calls for you, assuming that you have followed the suggested naming\nconventions. In this case, there is no need for you to include the main function\nin your test file at all.\n\nWhen you're done, your test file will look something like this:\n\n",
                    "rendered": {
                      "text": "of our handy generate_test_runner.rb script. This will create the main function\nand all the calls for you, assuming that you have followed the suggested naming\nconventions. In this case, there is no need for you to include the main function\nin your test file at all.\n\nWhen you're done, your test file will look something like this:\n\n",
                      "markdown": "`of our handy generate_test_runner.rb script. This will create the main function\nand all the calls for you, assuming that you have followed the suggested naming\nconventions. In this case, there is no need for you to include the main function\nin your test file at all.\n\nWhen you're done, your test file will look something like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 8,
                  "endLine": 108,
                  "endColumn": 12,
                  "snippet": {
                    "text": "developers.  Test functions take no arguments and return nothing. All test\naccounting is handled internally in Unity.\n\nFinally, at the bottom of your test file, you will write a `main()` function.\nThis function will call `UNITY_BEGIN()`, then `RUN_TEST` for each test, and\nfinally `UNITY_END()`.This is what will actually trigger each of those test\nfunctions to run, so it is important that each function gets its own `RUN_TEST`\n",
                    "rendered": {
                      "text": "developers.  Test functions take no arguments and return nothing. All test\naccounting is handled internally in Unity.\n\nFinally, at the bottom of your test file, you will write a `main()` function.\nThis function will call `UNITY_BEGIN()`, then `RUN_TEST` for each test, and\nfinally `UNITY_END()`.This is what will actually trigger each of those test\nfunctions to run, so it is important that each function gets its own `RUN_TEST`\n",
                      "markdown": "`developers.  Test functions take no arguments and return nothing. All test\naccounting is handled internally in Unity.\n\nFinally, at the bottom of your test file, you will write a `main()` function.\nThis function will call `UNITY_BEGIN()`, then `RUN_TEST` for each test, and\nfinally `UNITY_END()`.This is what will actually trigger each of those test\nfunctions to run, so it is important that each function gets its own `RUN_TEST`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 61,
                  "endLine": 99,
                  "endColumn": 65,
                  "snippet": {
                    "text": "both of these blank if you have no need for them. If you're using a compiler\nthat is configured to make these functions optional, you may leave them off\ncompletely. Not sure? Give it a try. If you compiler complains that it can't\nfind setUp or tearDown when it links, you'll know you need to at least include\nan empty function for these.\n\nThe majority of the file will be a series of test functions. Test functions\n",
                    "rendered": {
                      "text": "both of these blank if you have no need for them. If you're using a compiler\nthat is configured to make these functions optional, you may leave them off\ncompletely. Not sure? Give it a try. If you compiler complains that it can't\nfind setUp or tearDown when it links, you'll know you need to at least include\nan empty function for these.\n\nThe majority of the file will be a series of test functions. Test functions\n",
                      "markdown": "`both of these blank if you have no need for them. If you're using a compiler\nthat is configured to make these functions optional, you may leave them off\ncompletely. Not sure? Give it a try. If you compiler complains that it can't\nfind setUp or tearDown when it links, you'll know you need to at least include\nan empty function for these.\n\nThe majority of the file will be a series of test functions. Test functions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 45,
                  "endLine": 66,
                  "endColumn": 49,
                  "snippet": {
                    "text": "If you have obtained Unity through Github or something similar, you might be\nsurprised by just how much stuff you suddenly have staring you in the face.\nDon't worry, Unity itself is very small. The rest of it is just there to make\nyour life easier. You can ignore it or use it at your convenience. Here's an\noverview of everything in the project.\n\n- `src` - This is the code you care about! This folder contains a C file and two\n",
                    "rendered": {
                      "text": "If you have obtained Unity through Github or something similar, you might be\nsurprised by just how much stuff you suddenly have staring you in the face.\nDon't worry, Unity itself is very small. The rest of it is just there to make\nyour life easier. You can ignore it or use it at your convenience. Here's an\noverview of everything in the project.\n\n- `src` - This is the code you care about! This folder contains a C file and two\n",
                      "markdown": "`If you have obtained Unity through Github or something similar, you might be\nsurprised by just how much stuff you suddenly have staring you in the face.\nDon't worry, Unity itself is very small. The rest of it is just there to make\nyour life easier. You can ignore it or use it at your convenience. Here's an\noverview of everything in the project.\n\n- `src` - This is the code you care about! This folder contains a C file and two\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 8,
                  "endLine": 152,
                  "endColumn": 14,
                  "snippet": {
                    "text": "```\n\nIt's possible that you will require more customization than this, eventually.\nFor that sort of thing, you're going to want to look at the configuration guide.\nThis should be enough to get you going, though.\n\n\n",
                    "rendered": {
                      "text": "```\n\nIt's possible that you will require more customization than this, eventually.\nFor that sort of thing, you're going to want to look at the configuration guide.\nThis should be enough to get you going, though.\n\n\n",
                      "markdown": "````\n\nIt's possible that you will require more customization than this, eventually.\nFor that sort of thing, you're going to want to look at the configuration guide.\nThis should be enough to get you going, though.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 76,
                  "endLine": 99,
                  "endColumn": 5,
                  "snippet": {
                    "text": "Both functions accept no arguments and return nothing. You may leave either or\nboth of these blank if you have no need for them. If you're using a compiler\nthat is configured to make these functions optional, you may leave them off\ncompletely. Not sure? Give it a try. If you compiler complains that it can't\nfind setUp or tearDown when it links, you'll know you need to at least include\nan empty function for these.\n\nThe majority of the file will be a series of test functions. Test functions\n",
                    "rendered": {
                      "text": "Both functions accept no arguments and return nothing. You may leave either or\nboth of these blank if you have no need for them. If you're using a compiler\nthat is configured to make these functions optional, you may leave them off\ncompletely. Not sure? Give it a try. If you compiler complains that it can't\nfind setUp or tearDown when it links, you'll know you need to at least include\nan empty function for these.\n\nThe majority of the file will be a series of test functions. Test functions\n",
                      "markdown": "`Both functions accept no arguments and return nothing. You may leave either or\nboth of these blank if you have no need for them. If you're using a compiler\nthat is configured to make these functions optional, you may leave them off\ncompletely. Not sure? Give it a try. If you compiler complains that it can't\nfind setUp or tearDown when it links, you'll know you need to at least include\nan empty function for these.\n\nThe majority of the file will be a series of test functions. Test functions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 37,
                  "endLine": 82,
                  "endColumn": 43,
                  "snippet": {
                    "text": "Unity, you'll likely never need to go in here. If you are the lucky team member\nwho gets to port Unity to a new toolchain, this is a good place to verify\neverything is configured properly.\n- `auto` - Here you will find helpful Ruby scripts for simplifying your test\nworkflow. They are purely optional and are not required to make use of Unity.\n\n\n",
                    "rendered": {
                      "text": "Unity, you'll likely never need to go in here. If you are the lucky team member\nwho gets to port Unity to a new toolchain, this is a good place to verify\neverything is configured properly.\n- `auto` - Here you will find helpful Ruby scripts for simplifying your test\nworkflow. They are purely optional and are not required to make use of Unity.\n\n\n",
                      "markdown": "`Unity, you'll likely never need to go in here. If you are the lucky team member\nwho gets to port Unity to a new toolchain, this is a good place to verify\neverything is configured properly.\n- `auto` - Here you will find helpful Ruby scripts for simplifying your test\nworkflow. They are purely optional and are not required to make use of Unity.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 24,
                  "endLine": 82,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Unity, you'll likely never need to go in here. If you are the lucky team member\nwho gets to port Unity to a new toolchain, this is a good place to verify\neverything is configured properly.\n- `auto` - Here you will find helpful Ruby scripts for simplifying your test\nworkflow. They are purely optional and are not required to make use of Unity.\n\n\n",
                    "rendered": {
                      "text": "Unity, you'll likely never need to go in here. If you are the lucky team member\nwho gets to port Unity to a new toolchain, this is a good place to verify\neverything is configured properly.\n- `auto` - Here you will find helpful Ruby scripts for simplifying your test\nworkflow. They are purely optional and are not required to make use of Unity.\n\n\n",
                      "markdown": "`Unity, you'll likely never need to go in here. If you are the lucky team member\nwho gets to port Unity to a new toolchain, this is a good place to verify\neverything is configured properly.\n- `auto` - Here you will find helpful Ruby scripts for simplifying your test\nworkflow. They are purely optional and are not required to make use of Unity.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 19,
                  "snippet": {
                    "text": "your testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n\n\n#### Unity License\n",
                    "rendered": {
                      "text": "your testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n\n\n#### Unity License\n",
                      "markdown": "`your testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n\n\n#### Unity License\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 66,
                  "endLine": 48,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\nThis document describes the helper scripts that are available for simplifying\nyour testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n\n",
                    "rendered": {
                      "text": "\nThis document describes the helper scripts that are available for simplifying\nyour testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n\n",
                      "markdown": "`\nThis document describes the helper scripts that are available for simplifying\nyour testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 62,
                  "endLine": 47,
                  "endColumn": 68,
                  "snippet": {
                    "text": "#### Unity Helper Scripts\n\nThis document describes the helper scripts that are available for simplifying\nyour testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n",
                    "rendered": {
                      "text": "#### Unity Helper Scripts\n\nThis document describes the helper scripts that are available for simplifying\nyour testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n",
                      "markdown": "`#### Unity Helper Scripts\n\nThis document describes the helper scripts that are available for simplifying\nyour testing workflow. It describes the collection of optional Ruby scripts\nincluded in the auto directory of your Unity installation. Neither Ruby nor\nthese scripts are necessary for using Unity. They are provided as a convenience\nfor those who wish to use them.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityGettingStartedGuide.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 80,
                  "endLine": 27,
                  "endColumn": 5,
                  "snippet": {
                    "text": "#### Unity Assertions reference\n\nThis document will guide you through all the assertion options provided by\nUnity. This is going to be your unit testing bread and butter. You'll spend more\ntime with assertions than any other part of Unity.\n\n\n#### Unity Assertions Cheat Sheet\n",
                    "rendered": {
                      "text": "#### Unity Assertions reference\n\nThis document will guide you through all the assertion options provided by\nUnity. This is going to be your unit testing bread and butter. You'll spend more\ntime with assertions than any other part of Unity.\n\n\n#### Unity Assertions Cheat Sheet\n",
                      "markdown": "`#### Unity Assertions reference\n\nThis document will guide you through all the assertion options provided by\nUnity. This is going to be your unit testing bread and butter. You'll spend more\ntime with assertions than any other part of Unity.\n\n\n#### Unity Assertions Cheat Sheet\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 33,
                  "endLine": 207,
                  "endColumn": 37,
                  "snippet": {
                    "text": "look nice while still being portable. Good enough?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                    "rendered": {
                      "text": "look nice while still being portable. Good enough?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                      "markdown": "`look nice while still being portable. Good enough?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 23,
                  "endLine": 120,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nWe don't really want to add to the style battles out there. Tabs or spaces?\nHow many spaces? Where do the braces go? These are age-old questions that will\nnever be answered... or at least not answered in a way that will make everyone\nhappy.\n\nWe've decided on our own style preferences. If you'd like to contribute to these\n",
                    "rendered": {
                      "text": "\nWe don't really want to add to the style battles out there. Tabs or spaces?\nHow many spaces? Where do the braces go? These are age-old questions that will\nnever be answered... or at least not answered in a way that will make everyone\nhappy.\n\nWe've decided on our own style preferences. If you'd like to contribute to these\n",
                      "markdown": "`\nWe don't really want to add to the style battles out there. Tabs or spaces?\nHow many spaces? Where do the braces go? These are age-old questions that will\nnever be answered... or at least not answered in a way that will make everyone\nhappy.\n\nWe've decided on our own style preferences. If you'd like to contribute to these\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 4,
                  "endLine": 204,
                  "endColumn": 10,
                  "snippet": {
                    "text": "## Documentation\n\nEgad. Really? We use markdown and we like pdf files because they can be made to\nlook nice while still being portable. Good enough?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                    "rendered": {
                      "text": "## Documentation\n\nEgad. Really? We use markdown and we like pdf files because they can be made to\nlook nice while still being portable. Good enough?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                      "markdown": "`## Documentation\n\nEgad. Really? We use markdown and we like pdf files because they can be made to\nlook nice while still being portable. Good enough?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 60,
                  "endLine": 189,
                  "endColumn": 66,
                  "snippet": {
                    "text": "Our Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n\n\n#### Case\n",
                    "rendered": {
                      "text": "Our Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n\n\n#### Case\n",
                      "markdown": "`Our Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n\n\n#### Case\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 77,
                  "endLine": 187,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n#### Whitespace\n\nOur Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n\n",
                    "rendered": {
                      "text": "\n#### Whitespace\n\nOur Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n\n",
                      "markdown": "`\n#### Whitespace\n\nOur Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 3,
                  "endLine": 186,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n#### Whitespace\n\nOur Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n",
                    "rendered": {
                      "text": "\n#### Whitespace\n\nOur Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n",
                      "markdown": "`\n#### Whitespace\n\nOur Ruby style is to use spaces and to use 2 of them per indent level. It's a\nnice power-of-2 number that really grooves with Ruby's compact style. We have no\nmore reason than that. We break that rule when we have lines that wrap. When\nthat happens, we like to indent further to line things up in nice tidy columns.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 53,
                  "endLine": 179,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\none method! We'll keep it really brief!\n\n",
                    "rendered": {
                      "text": "\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\none method! We'll keep it really brief!\n\n",
                      "markdown": "`\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\none method! We'll keep it really brief!\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 31,
                  "endLine": 179,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\none method! We'll keep it really brief!\n\n",
                    "rendered": {
                      "text": "\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\none method! We'll keep it really brief!\n\n",
                      "markdown": "`\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\none method! We'll keep it really brief!\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 2,
                  "endLine": 177,
                  "endColumn": 8,
                  "snippet": {
                    "text": "think they are ugly too.\n\n\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\n",
                    "rendered": {
                      "text": "think they are ugly too.\n\n\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\n",
                      "markdown": "`think they are ugly too.\n\n\n## Ruby Details\n\nIs there really such thing as a Ruby coding standard? Ruby is such a free form\nlanguage, it seems almost sacrilegious to suggest that people should comply to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 12,
                  "endLine": 134,
                  "endColumn": 18,
                  "snippet": {
                    "text": "power-of-2 number that looks decent on a wide screen. We have no more reason\nthan that. We break that rule when we have lines that wrap (macros or function\narguments or whatnot). When that happens, we like to indent further to line\nthings up in nice tidy columns.\n\n```C\n    if (stuff_happened)\n",
                    "rendered": {
                      "text": "power-of-2 number that looks decent on a wide screen. We have no more reason\nthan that. We break that rule when we have lines that wrap (macros or function\narguments or whatnot). When that happens, we like to indent further to line\nthings up in nice tidy columns.\n\n```C\n    if (stuff_happened)\n",
                      "markdown": "`power-of-2 number that looks decent on a wide screen. We have no more reason\nthan that. We break that rule when we have lines that wrap (macros or function\narguments or whatnot). When that happens, we like to indent further to line\nthings up in nice tidy columns.\n\n```C\n    if (stuff_happened)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 74,
                  "endLine": 131,
                  "snippet": {
                    "text": "\n#### Whitespace\n\nOur C-style is to use spaces and to use 4 of them per indent level. It's a nice\npower-of-2 number that looks decent on a wide screen. We have no more reason\nthan that. We break that rule when we have lines that wrap (macros or function\narguments or whatnot). When that happens, we like to indent further to line\nthings up in nice tidy columns.\n",
                    "rendered": {
                      "text": "\n#### Whitespace\n\nOur C-style is to use spaces and to use 4 of them per indent level. It's a nice\npower-of-2 number that looks decent on a wide screen. We have no more reason\nthan that. We break that rule when we have lines that wrap (macros or function\narguments or whatnot). When that happens, we like to indent further to line\nthings up in nice tidy columns.\n",
                      "markdown": "`\n#### Whitespace\n\nOur C-style is to use spaces and to use 4 of them per indent level. It's a nice\npower-of-2 number that looks decent on a wide screen. We have no more reason\nthan that. We break that rule when we have lines that wrap (macros or function\narguments or whatnot). When that happens, we like to indent further to line\nthings up in nice tidy columns.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 10,
                  "endLine": 90,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nSecond, loop counters and other local throw-away variables often have a purpose\nwhich is obvious. There's no need, therefore, to get carried away with complex\nnaming. We find i, j, and k are better loop counters than loopCounterVar or\nwhatnot. We only break this rule when we see that more description could improve\nunderstanding of an algorithm.\n\n",
                    "rendered": {
                      "text": "\nSecond, loop counters and other local throw-away variables often have a purpose\nwhich is obvious. There's no need, therefore, to get carried away with complex\nnaming. We find i, j, and k are better loop counters than loopCounterVar or\nwhatnot. We only break this rule when we see that more description could improve\nunderstanding of an algorithm.\n\n",
                      "markdown": "`\nSecond, loop counters and other local throw-away variables often have a purpose\nwhich is obvious. There's no need, therefore, to get carried away with complex\nnaming. We find i, j, and k are better loop counters than loopCounterVar or\nwhatnot. We only break this rule when we see that more description could improve\nunderstanding of an algorithm.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 78,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "## Naming Things\n\nLet's talk about naming things. Programming is all about naming things. We name\nfiles, functions, variables, and so much more. While we're not always going to\nfind the best name for something, we actually put quite a bit of effort into\nfinding *What Something WANTS to be Called*™.\n\nWhen naming things, we more or less follow this hierarchy, the first being the\n",
                    "rendered": {
                      "text": "## Naming Things\n\nLet's talk about naming things. Programming is all about naming things. We name\nfiles, functions, variables, and so much more. While we're not always going to\nfind the best name for something, we actually put quite a bit of effort into\nfinding *What Something WANTS to be Called*™.\n\nWhen naming things, we more or less follow this hierarchy, the first being the\n",
                      "markdown": "`## Naming Things\n\nLet's talk about naming things. Programming is all about naming things. We name\nfiles, functions, variables, and so much more. While we're not always going to\nfind the best name for something, we actually put quite a bit of effort into\nfinding *What Something WANTS to be Called*™.\n\nWhen naming things, we more or less follow this hierarchy, the first being the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 60,
                  "endLine": 15,
                  "endColumn": 68,
                  "snippet": {
                    "text": "## Why Have A Coding Standard?\n\nBeing consistent makes code easier to understand. We've made an attempt to keep\nour standard simple because we also believe that we can only expect someone to\nfollow something that is understandable. Please do your best.\n\n\n",
                    "rendered": {
                      "text": "## Why Have A Coding Standard?\n\nBeing consistent makes code easier to understand. We've made an attempt to keep\nour standard simple because we also believe that we can only expect someone to\nfollow something that is understandable. Please do your best.\n\n\n",
                      "markdown": "`## Why Have A Coding Standard?\n\nBeing consistent makes code easier to understand. We've made an attempt to keep\nour standard simple because we also believe that we can only expect someone to\nfollow something that is understandable. Please do your best.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/ThrowTheSwitchCodingStandard.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 31,
                  "endLine": 5,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nHi. Welcome to the coding standard for ThrowTheSwitch.org. For the most part,\nwe try to follow these standards to unify our contributors' code into a cohesive\nunit (puns intended). You might find places where these standards aren't\nfollowed. We're not perfect. Please be polite where you notice these discrepancies\nand we'll try to be polite when we notice yours.\n\n",
                    "rendered": {
                      "text": "\nHi. Welcome to the coding standard for ThrowTheSwitch.org. For the most part,\nwe try to follow these standards to unify our contributors' code into a cohesive\nunit (puns intended). You might find places where these standards aren't\nfollowed. We're not perfect. Please be polite where you notice these discrepancies\nand we'll try to be polite when we notice yours.\n\n",
                      "markdown": "`\nHi. Welcome to the coding standard for ThrowTheSwitch.org. For the most part,\nwe try to follow these standards to unify our contributors' code into a cohesive\nunit (puns intended). You might find places where these standards aren't\nfollowed. We're not perfect. Please be polite where you notice these discrepancies\nand we'll try to be polite when we notice yours.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 33,
                  "endLine": 435,
                  "endColumn": 37,
                  "snippet": {
                    "text": "asking for help on the forums. We love a good challenge!\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                    "rendered": {
                      "text": "asking for help on the forums. We love a good challenge!\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                      "markdown": "`asking for help on the forums. We love a good challenge!\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 65,
                  "endLine": 358,
                  "endColumn": 69,
                  "snippet": {
                    "text": "with a target simulator run from your local command line. But especially if you\nmust run your test suite on your target hardware, your Unity configuration will\nrequire special help. This special help will usually reside in one of two\nplaces: the `main()` function or the `RUN_TEST` macro. Let's look at how these\nwork.\n\n\n",
                    "rendered": {
                      "text": "with a target simulator run from your local command line. But especially if you\nmust run your test suite on your target hardware, your Unity configuration will\nrequire special help. This special help will usually reside in one of two\nplaces: the `main()` function or the `RUN_TEST` macro. Let's look at how these\nwork.\n\n\n",
                      "markdown": "`with a target simulator run from your local command line. But especially if you\nmust run your test suite on your target hardware, your Unity configuration will\nrequire special help. This special help will usually reside in one of two\nplaces: the `main()` function or the `RUN_TEST` macro. Let's look at how these\nwork.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 5,
                  "endLine": 332,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nIf your embedded system doesn't support the standard library setjmp, you can\nexclude Unity's reliance on this by using this define. This dropped dependence\ncomes at a price, though. You will be unable to use custom helper functions for\nyour tests, and you will be unable to use tools like CMock. Very likely, if your\ncompiler doesn't support setjmp, you wouldn't have had the memory space for those\nthings anyway, though... so this option exists for those situations.\n",
                    "rendered": {
                      "text": "\nIf your embedded system doesn't support the standard library setjmp, you can\nexclude Unity's reliance on this by using this define. This dropped dependence\ncomes at a price, though. You will be unable to use custom helper functions for\nyour tests, and you will be unable to use tools like CMock. Very likely, if your\ncompiler doesn't support setjmp, you wouldn't have had the memory space for those\nthings anyway, though... so this option exists for those situations.\n",
                      "markdown": "`\nIf your embedded system doesn't support the standard library setjmp, you can\nexclude Unity's reliance on this by using this define. This dropped dependence\ncomes at a price, though. You will be unable to use custom helper functions for\nyour tests, and you will be unable to use tools like CMock. Very likely, if your\ncompiler doesn't support setjmp, you wouldn't have had the memory space for those\nthings anyway, though... so this option exists for those situations.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 28,
                  "endLine": 306,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n##### `UNITY_PRINT_EOL`\n\nBy default, Unity outputs \\n at the end of each line of output. This is easy\nto parse by the scripts, by Ceedling, etc, but it might not be ideal for YOUR\nsystem. Feel free to override this and to make it whatever you wish.\n\n",
                    "rendered": {
                      "text": "\n##### `UNITY_PRINT_EOL`\n\nBy default, Unity outputs \\n at the end of each line of output. This is easy\nto parse by the scripts, by Ceedling, etc, but it might not be ideal for YOUR\nsystem. Feel free to override this and to make it whatever you wish.\n\n",
                      "markdown": "`\n##### `UNITY_PRINT_EOL`\n\nBy default, Unity outputs \\n at the end of each line of output. This is easy\nto parse by the scripts, by Ceedling, etc, but it might not be ideal for YOUR\nsystem. Feel free to override this and to make it whatever you wish.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 64,
                  "endLine": 243,
                  "endColumn": 68,
                  "snippet": {
                    "text": "routed back to the command line. There are times, however, where the simulator\nwill lack support for dumping results or you will want to route results\nelsewhere for other reasons. In these cases, you should define the\n`UNITY_OUTPUT_CHAR` macro. This macro accepts a single character at a time (as\nan `int`, since this is the parameter type of the standard C `putchar` function\nmost commonly used). You may replace this with whatever function call you like.\n\n",
                    "rendered": {
                      "text": "routed back to the command line. There are times, however, where the simulator\nwill lack support for dumping results or you will want to route results\nelsewhere for other reasons. In these cases, you should define the\n`UNITY_OUTPUT_CHAR` macro. This macro accepts a single character at a time (as\nan `int`, since this is the parameter type of the standard C `putchar` function\nmost commonly used). You may replace this with whatever function call you like.\n\n",
                      "markdown": "`routed back to the command line. There are times, however, where the simulator\nwill lack support for dumping results or you will want to route results\nelsewhere for other reasons. In these cases, you should define the\n`UNITY_OUTPUT_CHAR` macro. This macro accepts a single character at a time (as\nan `int`, since this is the parameter type of the standard C `putchar` function\nmost commonly used). You may replace this with whatever function call you like.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 23,
                  "endLine": 137,
                  "endColumn": 27,
                  "snippet": {
                    "text": "floating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\nwould result in an error. This leaves manual configuration as the only option.\n\n\n",
                    "rendered": {
                      "text": "floating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\nwould result in an error. This leaves manual configuration as the only option.\n\n\n",
                      "markdown": "`floating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\nwould result in an error. This leaves manual configuration as the only option.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 23,
                  "endLine": 136,
                  "endColumn": 27,
                  "snippet": {
                    "text": "In the embedded world, it's not uncommon for targets to have no support for\nfloating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\nwould result in an error. This leaves manual configuration as the only option.\n\n",
                    "rendered": {
                      "text": "In the embedded world, it's not uncommon for targets to have no support for\nfloating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\nwould result in an error. This leaves manual configuration as the only option.\n\n",
                      "markdown": "`In the embedded world, it's not uncommon for targets to have no support for\nfloating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\nwould result in an error. This leaves manual configuration as the only option.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 25,
                  "endLine": 134,
                  "endColumn": 29,
                  "snippet": {
                    "text": "### Floating Point Types\n\nIn the embedded world, it's not uncommon for targets to have no support for\nfloating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\n",
                    "rendered": {
                      "text": "### Floating Point Types\n\nIn the embedded world, it's not uncommon for targets to have no support for\nfloating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\n",
                      "markdown": "`### Floating Point Types\n\nIn the embedded world, it's not uncommon for targets to have no support for\nfloating point operations at all or to have support that is limited to only\nsingle precision. We are able to guess integer sizes on the fly because integers\nare always available in at least one size. Floating point, on the other hand, is\nsometimes not available at all. Trying to include `float.h` on these platforms\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 33,
                  "endLine": 14,
                  "endColumn": 37,
                  "snippet": {
                    "text": "Unity is designed to run on almost anything that is targeted by a C compiler. It\nwould be awesome if this could be done with zero configuration. While there are\nsome targets that come close to this dream, it is sadly not universal. It is\nlikely that you are going to need at least a couple of the configuration options\ndescribed in this document.\n\nAll of Unity's configuration options are `#defines`. Most of these are simple\n",
                    "rendered": {
                      "text": "Unity is designed to run on almost anything that is targeted by a C compiler. It\nwould be awesome if this could be done with zero configuration. While there are\nsome targets that come close to this dream, it is sadly not universal. It is\nlikely that you are going to need at least a couple of the configuration options\ndescribed in this document.\n\nAll of Unity's configuration options are `#defines`. Most of these are simple\n",
                      "markdown": "`Unity is designed to run on almost anything that is targeted by a C compiler. It\nwould be awesome if this could be done with zero configuration. While there are\nsome targets that come close to this dream, it is sadly not universal. It is\nlikely that you are going to need at least a couple of the configuration options\ndescribed in this document.\n\nAll of Unity's configuration options are `#defines`. Most of these are simple\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 29,
                  "endLine": 272,
                  "endColumn": 35,
                  "snippet": {
                    "text": "##### `UNITY_NO_WEAK`\n\nFor some targets, Unity can make the otherwise required setUp() and tearDown()\nfunctions optional. This is a nice convenience for test writers since setUp and\ntearDown don’t often actually do anything. If you’re using gcc or clang, this\noption is automatically defined for you. Other compilers can also support this\nbehavior, if they support a C feature called weak functions. A weak function is\n",
                    "rendered": {
                      "text": "##### `UNITY_NO_WEAK`\n\nFor some targets, Unity can make the otherwise required setUp() and tearDown()\nfunctions optional. This is a nice convenience for test writers since setUp and\ntearDown don’t often actually do anything. If you’re using gcc or clang, this\noption is automatically defined for you. Other compilers can also support this\nbehavior, if they support a C feature called weak functions. A weak function is\n",
                      "markdown": "`##### `UNITY_NO_WEAK`\n\nFor some targets, Unity can make the otherwise required setUp() and tearDown()\nfunctions optional. This is a nice convenience for test writers since setUp and\ntearDown don’t often actually do anything. If you’re using gcc or clang, this\noption is automatically defined for you. Other compilers can also support this\nbehavior, if they support a C feature called weak functions. A weak function is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityConfigurationGuide.md"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 69,
                  "endLine": 243,
                  "endColumn": 75,
                  "snippet": {
                    "text": "routed back to the command line. There are times, however, where the simulator\nwill lack support for dumping results or you will want to route results\nelsewhere for other reasons. In these cases, you should define the\n`UNITY_OUTPUT_CHAR` macro. This macro accepts a single character at a time (as\nan `int`, since this is the parameter type of the standard C `putchar` function\nmost commonly used). You may replace this with whatever function call you like.\n\n",
                    "rendered": {
                      "text": "routed back to the command line. There are times, however, where the simulator\nwill lack support for dumping results or you will want to route results\nelsewhere for other reasons. In these cases, you should define the\n`UNITY_OUTPUT_CHAR` macro. This macro accepts a single character at a time (as\nan `int`, since this is the parameter type of the standard C `putchar` function\nmost commonly used). You may replace this with whatever function call you like.\n\n",
                      "markdown": "`routed back to the command line. There are times, however, where the simulator\nwill lack support for dumping results or you will want to route results\nelsewhere for other reasons. In these cases, you should define the\n`UNITY_OUTPUT_CHAR` macro. This macro accepts a single character at a time (as\nan `int`, since this is the parameter type of the standard C `putchar` function\nmost commonly used). You may replace this with whatever function call you like.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 33,
                  "endLine": 254,
                  "endColumn": 37,
                  "snippet": {
                    "text": "How convenient is that?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                    "rendered": {
                      "text": "How convenient is that?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                      "markdown": "`How convenient is that?\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 63,
                  "endLine": 127,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n##### `:includes`\n\nThis option specifies an array of file names to be `#include`'d at the top of\nyour runner C file. You might use it to reference custom types or anything else\nuniversally needed in your generated runners.\n\n",
                    "rendered": {
                      "text": "\n##### `:includes`\n\nThis option specifies an array of file names to be `#include`'d at the top of\nyour runner C file. You might use it to reference custom types or anything else\nuniversally needed in your generated runners.\n\n",
                      "markdown": "`\n##### `:includes`\n\nThis option specifies an array of file names to be `#include`'d at the top of\nyour runner C file. You might use it to reference custom types or anything else\nuniversally needed in your generated runners.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 40,
                  "endLine": 82,
                  "endColumn": 44,
                  "snippet": {
                    "text": "```\n\nIf you would like to force your generated test runner to include one or more\nheader files, you can just include those at the command line too. Just make sure\nthese are _after_ the YAML file, if you are using one:\n\n```Shell\n",
                    "rendered": {
                      "text": "```\n\nIf you would like to force your generated test runner to include one or more\nheader files, you can just include those at the command line too. Just make sure\nthese are _after_ the YAML file, if you are using one:\n\n```Shell\n",
                      "markdown": "````\n\nIf you would like to force your generated test runner to include one or more\nheader files, you can just include those at the command line too. Just make sure\nthese are _after_ the YAML file, if you are using one:\n\n```Shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 33,
                  "endLine": 9,
                  "endColumn": 37,
                  "snippet": {
                    "text": "The Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n\n\n### `generate_test_runner.rb`\n",
                    "rendered": {
                      "text": "The Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n\n\n### `generate_test_runner.rb`\n",
                      "markdown": "`The Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n\n\n### `generate_test_runner.rb`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 8,
                  "endLine": 228,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nOr, if you're more of a Windows sort of person:\n\n```Shell\nruby unity_test_summary.rb build\\teat\\ C:\\projects\\myproject\\\n```\n\nWhen configured correctly, you'll see a final summary, like so:\n",
                    "rendered": {
                      "text": "\nOr, if you're more of a Windows sort of person:\n\n```Shell\nruby unity_test_summary.rb build\\teat\\ C:\\projects\\myproject\\\n```\n\nWhen configured correctly, you'll see a final summary, like so:\n",
                      "markdown": "`\nOr, if you're more of a Windows sort of person:\n\n```Shell\nruby unity_test_summary.rb build\\teat\\ C:\\projects\\myproject\\\n```\n\nWhen configured correctly, you'll see a final summary, like so:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 31,
                  "endLine": 225,
                  "endColumn": 37,
                  "snippet": {
                    "text": "ruby unity_test_summary.rb build/test/ ~/projects/myproject/\n```\n\nOr, if you're more of a Windows sort of person:\n\n```Shell\nruby unity_test_summary.rb build\\teat\\ C:\\projects\\myproject\\\n",
                    "rendered": {
                      "text": "ruby unity_test_summary.rb build/test/ ~/projects/myproject/\n```\n\nOr, if you're more of a Windows sort of person:\n\n```Shell\nruby unity_test_summary.rb build\\teat\\ C:\\projects\\myproject\\\n",
                      "markdown": "`ruby unity_test_summary.rb build/test/ ~/projects/myproject/\n```\n\nOr, if you're more of a Windows sort of person:\n\n```Shell\nruby unity_test_summary.rb build\\teat\\ C:\\projects\\myproject\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 8,
                  "endLine": 222,
                  "endColumn": 5,
                  "snippet": {
                    "text": "are using relative paths in your tools' setup, but you want to pull the summary\ninto an IDE like Eclipse for clickable shortcuts.\n\n```Shell\nruby unity_test_summary.rb build/test/ ~/projects/myproject/\n```\n\nOr, if you're more of a Windows sort of person:\n",
                    "rendered": {
                      "text": "are using relative paths in your tools' setup, but you want to pull the summary\ninto an IDE like Eclipse for clickable shortcuts.\n\n```Shell\nruby unity_test_summary.rb build/test/ ~/projects/myproject/\n```\n\nOr, if you're more of a Windows sort of person:\n",
                      "markdown": "`are using relative paths in your tools' setup, but you want to pull the summary\ninto an IDE like Eclipse for clickable shortcuts.\n\n```Shell\nruby unity_test_summary.rb build/test/ ~/projects/myproject/\n```\n\nOr, if you're more of a Windows sort of person:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 8,
                  "endLine": 214,
                  "endColumn": 5,
                  "snippet": {
                    "text": "results, and aggregates and prints a summary. Calling it from the command line\nlooks like this:\n\n```Shell\nruby unity_test_summary.rb build/test/\n```\n\nYou can optionally specify a root path as well. This is really helpful when you\n",
                    "rendered": {
                      "text": "results, and aggregates and prints a summary. Calling it from the command line\nlooks like this:\n\n```Shell\nruby unity_test_summary.rb build/test/\n```\n\nYou can optionally specify a root path as well. This is really helpful when you\n",
                      "markdown": "`results, and aggregates and prints a summary. Calling it from the command line\nlooks like this:\n\n```Shell\nruby unity_test_summary.rb build/test/\n```\n\nYou can optionally specify a root path as well. This is really helpful when you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 72,
                  "endLine": 209,
                  "snippet": {
                    "text": "This script assumes the existence of files ending with the extensions\n`.testpass` and `.testfail`.The contents of these files includes the test\nresults summary corresponding to each test file executed with the extension set\naccording to the presence or absence of failures for that test file. The script\nsearches a specified path for these files, opens each one it finds, parses the\nresults, and aggregates and prints a summary. Calling it from the command line\nlooks like this:\n\n",
                    "rendered": {
                      "text": "This script assumes the existence of files ending with the extensions\n`.testpass` and `.testfail`.The contents of these files includes the test\nresults summary corresponding to each test file executed with the extension set\naccording to the presence or absence of failures for that test file. The script\nsearches a specified path for these files, opens each one it finds, parses the\nresults, and aggregates and prints a summary. Calling it from the command line\nlooks like this:\n\n",
                      "markdown": "`This script assumes the existence of files ending with the extensions\n`.testpass` and `.testfail`.The contents of these files includes the test\nresults summary corresponding to each test file executed with the extension set\naccording to the presence or absence of failures for that test file. The script\nsearches a specified path for these files, opens each one it finds, parses the\nresults, and aggregates and prints a summary. Calling it from the command line\nlooks like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 4,
                  "endLine": 205,
                  "endColumn": 12,
                  "snippet": {
                    "text": "Ceedling build tool project (ceedling.sourceforge.net) that works with Unity and\nCMock and supports xunit-style xml as well as other goodies.\n\nThis script assumes the existence of files ending with the extensions\n`.testpass` and `.testfail`.The contents of these files includes the test\nresults summary corresponding to each test file executed with the extension set\naccording to the presence or absence of failures for that test file. The script\n",
                    "rendered": {
                      "text": "Ceedling build tool project (ceedling.sourceforge.net) that works with Unity and\nCMock and supports xunit-style xml as well as other goodies.\n\nThis script assumes the existence of files ending with the extensions\n`.testpass` and `.testfail`.The contents of these files includes the test\nresults summary corresponding to each test file executed with the extension set\naccording to the presence or absence of failures for that test file. The script\n",
                      "markdown": "`Ceedling build tool project (ceedling.sourceforge.net) that works with Unity and\nCMock and supports xunit-style xml as well as other goodies.\n\nThis script assumes the existence of files ending with the extensions\n`.testpass` and `.testfail`.The contents of these files includes the test\nresults summary corresponding to each test file executed with the extension set\naccording to the presence or absence of failures for that test file. The script\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 65,
                  "endLine": 193,
                  "snippet": {
                    "text": "\npass, fail, or be ignored. Each test file is run individually producing results\nfor its collection of test cases. A given project will almost certainly be\ncomposed of multiple test files. Therefore, the suite of tests is comprised of\none or more test cases spread across one or more test files. This script\naggregates individual test file results to generate a summary of all executed\ntest cases. The output includes how many tests were run, how many were ignored,\nand how many failed. In addition, the output includes a listing of which\nspecific tests were ignored and failed. A good example of the breadth",
                    "rendered": {
                      "text": "\npass, fail, or be ignored. Each test file is run individually producing results\nfor its collection of test cases. A given project will almost certainly be\ncomposed of multiple test files. Therefore, the suite of tests is comprised of\none or more test cases spread across one or more test files. This script\naggregates individual test file results to generate a summary of all executed\ntest cases. The output includes how many tests were run, how many were ignored,\nand how many failed. In addition, the output includes a listing of which\nspecific tests were ignored and failed. A good example of the breadth",
                      "markdown": "`\npass, fail, or be ignored. Each test file is run individually producing results\nfor its collection of test cases. A given project will almost certainly be\ncomposed of multiple test files. Therefore, the suite of tests is comprised of\none or more test cases spread across one or more test files. This script\naggregates individual test file results to generate a summary of all executed\ntest cases. The output includes how many tests were run, how many were ignored,\nand how many failed. In addition, the output includes a listing of which\nspecific tests were ignored and failed. A good example of the breadth`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 63,
                  "endLine": 182,
                  "endColumn": 71,
                  "snippet": {
                    "text": "```\n\nIf you are using CMock, it is very likely that you are already passing an array\nof plugins to CMock. You can just use the same array here. This script will just\nignore the plugins that don't require additional support.\n\n\n",
                    "rendered": {
                      "text": "```\n\nIf you are using CMock, it is very likely that you are already passing an array\nof plugins to CMock. You can just use the same array here. This script will just\nignore the plugins that don't require additional support.\n\n\n",
                      "markdown": "````\n\nIf you are using CMock, it is very likely that you are already passing an array\nof plugins to CMock. You can just use the same array here. This script will just\nignore the plugins that don't require additional support.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 70,
                  "endLine": 127,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n##### `:includes`\n\nThis option specifies an array of file names to be `#include`'d at the top of\nyour runner C file. You might use it to reference custom types or anything else\nuniversally needed in your generated runners.\n\n",
                    "rendered": {
                      "text": "\n##### `:includes`\n\nThis option specifies an array of file names to be `#include`'d at the top of\nyour runner C file. You might use it to reference custom types or anything else\nuniversally needed in your generated runners.\n\n",
                      "markdown": "`\n##### `:includes`\n\nThis option specifies an array of file names to be `#include`'d at the top of\nyour runner C file. You might use it to reference custom types or anything else\nuniversally needed in your generated runners.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 20,
                  "endLine": 122,
                  "endColumn": 26,
                  "snippet": {
                    "text": "The following options are available when executing `generate_test_runner`. You\nmay pass these as a Ruby hash directly or specify them in a YAML file, both of\nwhich are described above. In the `examples` directory, Example 3's Rakefile\ndemonstrates using a Ruby hash.\n\n\n##### `:includes`\n",
                    "rendered": {
                      "text": "The following options are available when executing `generate_test_runner`. You\nmay pass these as a Ruby hash directly or specify them in a YAML file, both of\nwhich are described above. In the `examples` directory, Example 3's Rakefile\ndemonstrates using a Ruby hash.\n\n\n##### `:includes`\n",
                      "markdown": "`The following options are available when executing `generate_test_runner`. You\nmay pass these as a Ruby hash directly or specify them in a YAML file, both of\nwhich are described above. In the `examples` directory, Example 3's Rakefile\ndemonstrates using a Ruby hash.\n\n\n##### `:includes`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#### Options accepted by generate_test_runner.rb:\n\nThe following options are available when executing `generate_test_runner`. You\nmay pass these as a Ruby hash directly or specify them in a YAML file, both of\nwhich are described above. In the `examples` directory, Example 3's Rakefile\ndemonstrates using a Ruby hash.\n\n",
                    "rendered": {
                      "text": "#### Options accepted by generate_test_runner.rb:\n\nThe following options are available when executing `generate_test_runner`. You\nmay pass these as a Ruby hash directly or specify them in a YAML file, both of\nwhich are described above. In the `examples` directory, Example 3's Rakefile\ndemonstrates using a Ruby hash.\n\n",
                      "markdown": "`#### Options accepted by generate_test_runner.rb:\n\nThe following options are available when executing `generate_test_runner`. You\nmay pass these as a Ruby hash directly or specify them in a YAML file, both of\nwhich are described above. In the `examples` directory, Example 3's Rakefile\ndemonstrates using a Ruby hash.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 49,
                  "endLine": 106,
                  "endColumn": 57,
                  "snippet": {
                    "text": "UnityTestRunnerGenerator.new.run(testfile, runner_name, options)\n```\n\nIf you have multiple files to generate in a build script (such as a Rakefile),\nyou might want to instantiate a generator object with your options and call it\nto generate each runner thereafter. Like thus:\n\n",
                    "rendered": {
                      "text": "UnityTestRunnerGenerator.new.run(testfile, runner_name, options)\n```\n\nIf you have multiple files to generate in a build script (such as a Rakefile),\nyou might want to instantiate a generator object with your options and call it\nto generate each runner thereafter. Like thus:\n\n",
                      "markdown": "`UnityTestRunnerGenerator.new.run(testfile, runner_name, options)\n```\n\nIf you have multiple files to generate in a build script (such as a Rakefile),\nyou might want to instantiate a generator object with your options and call it\nto generate each runner thereafter. Like thus:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 41,
                  "endLine": 93,
                  "endColumn": 47,
                  "snippet": {
                    "text": "builds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\nrequire \"generate_test_runner.rb\"\n",
                    "rendered": {
                      "text": "builds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\nrequire \"generate_test_runner.rb\"\n",
                      "markdown": "`builds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\nrequire \"generate_test_runner.rb\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 28,
                  "endLine": 93,
                  "endColumn": 34,
                  "snippet": {
                    "text": "builds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\nrequire \"generate_test_runner.rb\"\n",
                    "rendered": {
                      "text": "builds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\nrequire \"generate_test_runner.rb\"\n",
                      "markdown": "`builds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\nrequire \"generate_test_runner.rb\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 13,
                  "endLine": 92,
                  "endColumn": 21,
                  "snippet": {
                    "text": "Another option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\n",
                    "rendered": {
                      "text": "Another option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\n",
                      "markdown": "`Another option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n```Ruby\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 74,
                  "endLine": 91,
                  "endColumn": 7,
                  "snippet": {
                    "text": "```\n\nAnother option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n",
                    "rendered": {
                      "text": "```\n\nAnother option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n",
                      "markdown": "````\n\nAnother option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\nset as we did above but this time through Ruby code directly:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 53,
                  "endLine": 89,
                  "endColumn": 59,
                  "snippet": {
                    "text": "ruby generate_test_runner.rb TestFile.c my_config.yml extras.h\n```\n\nAnother option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\n",
                    "rendered": {
                      "text": "ruby generate_test_runner.rb TestFile.c my_config.yml extras.h\n```\n\nAnother option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\n",
                      "markdown": "`ruby generate_test_runner.rb TestFile.c my_config.yml extras.h\n```\n\nAnother option, particularly if you are already using Ruby to orchestrate your\nbuilds - or more likely the Ruby-based build tool Rake - is requiring this\nscript directly. Anything that you would have specified in a YAML file can be\npassed to the script as part of a hash. Let's push the exact same requirement\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 8,
                  "endLine": 86,
                  "endColumn": 5,
                  "snippet": {
                    "text": "header files, you can just include those at the command line too. Just make sure\nthese are _after_ the YAML file, if you are using one:\n\n```Shell\nruby generate_test_runner.rb TestFile.c my_config.yml extras.h\n```\n\nAnother option, particularly if you are already using Ruby to orchestrate your\n",
                    "rendered": {
                      "text": "header files, you can just include those at the command line too. Just make sure\nthese are _after_ the YAML file, if you are using one:\n\n```Shell\nruby generate_test_runner.rb TestFile.c my_config.yml extras.h\n```\n\nAnother option, particularly if you are already using Ruby to orchestrate your\n",
                      "markdown": "`header files, you can just include those at the command line too. Just make sure\nthese are _after_ the YAML file, if you are using one:\n\n```Shell\nruby generate_test_runner.rb TestFile.c my_config.yml extras.h\n```\n\nAnother option, particularly if you are already using Ruby to orchestrate your\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 8,
                  "endLine": 64,
                  "endColumn": 5,
                  "snippet": {
                    "text": "CMock. So if you are using YAML files already, you can simply pass the very same\nfile into the generator script.\n\n```Shell\nruby generate_test_runner.rb TestFile.c my_config.yml\n```\n\nThe contents of the YAML file `my_config.yml` could look something like the\n",
                    "rendered": {
                      "text": "CMock. So if you are using YAML files already, you can simply pass the very same\nfile into the generator script.\n\n```Shell\nruby generate_test_runner.rb TestFile.c my_config.yml\n```\n\nThe contents of the YAML file `my_config.yml` could look something like the\n",
                      "markdown": "`CMock. So if you are using YAML files already, you can simply pass the very same\nfile into the generator script.\n\n```Shell\nruby generate_test_runner.rb TestFile.c my_config.yml\n```\n\nThe contents of the YAML file `my_config.yml` could look something like the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 5,
                  "snippet": {
                    "text": "the name of the test file and automatically append \"_Runner\" to the name of the\ngenerated file. The example immediately below will create TestFile_Runner.c.\n\n```Shell\nruby generate_test_runner.rb TestFile.c\n```\n\nYou can also add a [YAML](http://www.yaml.org/) file to configure extra options.\n",
                    "rendered": {
                      "text": "the name of the test file and automatically append \"_Runner\" to the name of the\ngenerated file. The example immediately below will create TestFile_Runner.c.\n\n```Shell\nruby generate_test_runner.rb TestFile.c\n```\n\nYou can also add a [YAML](http://www.yaml.org/) file to configure extra options.\n",
                      "markdown": "`the name of the test file and automatically append \"_Runner\" to the name of the\ngenerated file. The example immediately below will create TestFile_Runner.c.\n\n```Shell\nruby generate_test_runner.rb TestFile.c\n```\n\nYou can also add a [YAML](http://www.yaml.org/) file to configure extra options.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 63,
                  "endLine": 50,
                  "endColumn": 71,
                  "snippet": {
                    "text": "ruby generate_test_runner.rb TestFile.c NameOfRunner.c\n```\n\nAlternatively, if you include only the test file parameter, the script will copy\nthe name of the test file and automatically append \"_Runner\" to the name of the\ngenerated file. The example immediately below will create TestFile_Runner.c.\n\n",
                    "rendered": {
                      "text": "ruby generate_test_runner.rb TestFile.c NameOfRunner.c\n```\n\nAlternatively, if you include only the test file parameter, the script will copy\nthe name of the test file and automatically append \"_Runner\" to the name of the\ngenerated file. The example immediately below will create TestFile_Runner.c.\n\n",
                      "markdown": "`ruby generate_test_runner.rb TestFile.c NameOfRunner.c\n```\n\nAlternatively, if you include only the test file parameter, the script will copy\nthe name of the test file and automatically append \"_Runner\" to the name of the\ngenerated file. The example immediately below will create TestFile_Runner.c.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 8,
                  "endLine": 47,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nYou can run this script a couple of ways. The first is from the command line:\n\n```Shell\nruby generate_test_runner.rb TestFile.c NameOfRunner.c\n```\n\nAlternatively, if you include only the test file parameter, the script will copy\n",
                    "rendered": {
                      "text": "\nYou can run this script a couple of ways. The first is from the command line:\n\n```Shell\nruby generate_test_runner.rb TestFile.c NameOfRunner.c\n```\n\nAlternatively, if you include only the test file parameter, the script will copy\n",
                      "markdown": "`\nYou can run this script a couple of ways. The first is from the command line:\n\n```Shell\nruby generate_test_runner.rb TestFile.c NameOfRunner.c\n```\n\nAlternatively, if you include only the test file parameter, the script will copy\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 16,
                  "endLine": 44,
                  "endColumn": 24,
                  "snippet": {
                    "text": "}\n```\n\nYou can run this script a couple of ways. The first is from the command line:\n\n```Shell\nruby generate_test_runner.rb TestFile.c NameOfRunner.c\n",
                    "rendered": {
                      "text": "}\n```\n\nYou can run this script a couple of ways. The first is from the command line:\n\n```Shell\nruby generate_test_runner.rb TestFile.c NameOfRunner.c\n",
                      "markdown": "`}\n```\n\nYou can run this script a couple of ways. The first is from the command line:\n\n```Shell\nruby generate_test_runner.rb TestFile.c NameOfRunner.c\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 4,
                  "endLine": 26,
                  "endColumn": 12,
                  "snippet": {
                    "text": "cases within the scanned test file. All you do then is add the generated runner\nto your list of files to be compiled and linked, and presto you're done!\n\nThis script searches your test file for void function signatures having a\nfunction name beginning with \"test\" or \"spec\". It treats each of these\nfunctions as a test case and builds up a test suite of them. For example, the\nfollowing includes three test cases:\n",
                    "rendered": {
                      "text": "cases within the scanned test file. All you do then is add the generated runner\nto your list of files to be compiled and linked, and presto you're done!\n\nThis script searches your test file for void function signatures having a\nfunction name beginning with \"test\" or \"spec\". It treats each of these\nfunctions as a test case and builds up a test suite of them. For example, the\nfollowing includes three test cases:\n",
                      "markdown": "`cases within the scanned test file. All you do then is add the generated runner\nto your list of files to be compiled and linked, and presto you're done!\n\nThis script searches your test file for void function signatures having a\nfunction name beginning with \"test\" or \"spec\". It treats each of these\nfunctions as a test case and builds up a test suite of them. For example, the\nfollowing includes three test cases:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 26,
                  "endLine": 21,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nWell then we have the perfect script for you!\n\nThe `generate_test_runner` script processes a given test file and automatically\ncreates a separate test runner file that includes ?main?to execute the test\ncases within the scanned test file. All you do then is add the generated runner\nto your list of files to be compiled and linked, and presto you're done!\n",
                    "rendered": {
                      "text": "\nWell then we have the perfect script for you!\n\nThe `generate_test_runner` script processes a given test file and automatically\ncreates a separate test runner file that includes ?main?to execute the test\ncases within the scanned test file. All you do then is add the generated runner\nto your list of files to be compiled and linked, and presto you're done!\n",
                      "markdown": "`\nWell then we have the perfect script for you!\n\nThe `generate_test_runner` script processes a given test file and automatically\ncreates a separate test runner file that includes ?main?to execute the test\ncases within the scanned test file. All you do then is add the generated runner\nto your list of files to be compiled and linked, and presto you're done!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 29,
                  "endLine": 19,
                  "endColumn": 37,
                  "snippet": {
                    "text": "suite? Do you want to use CMock or other fancy add-ons but don't want to figure\nout how to create your own `RUN_TEST` macro?\n\nWell then we have the perfect script for you!\n\nThe `generate_test_runner` script processes a given test file and automatically\ncreates a separate test runner file that includes ?main?to execute the test\n",
                    "rendered": {
                      "text": "suite? Do you want to use CMock or other fancy add-ons but don't want to figure\nout how to create your own `RUN_TEST` macro?\n\nWell then we have the perfect script for you!\n\nThe `generate_test_runner` script processes a given test file and automatically\ncreates a separate test runner file that includes ?main?to execute the test\n",
                      "markdown": "`suite? Do you want to use CMock or other fancy add-ons but don't want to figure\nout how to create your own `RUN_TEST` macro?\n\nWell then we have the perfect script for you!\n\nThe `generate_test_runner` script processes a given test file and automatically\ncreates a separate test runner file that includes ?main?to execute the test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 23,
                  "endLine": 9,
                  "endColumn": 29,
                  "snippet": {
                    "text": "The Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n\n\n### `generate_test_runner.rb`\n",
                    "rendered": {
                      "text": "The Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n\n\n### `generate_test_runner.rb`\n",
                      "markdown": "`The Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n\n\n### `generate_test_runner.rb`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityHelperScriptsGuide.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 35,
                  "endLine": 6,
                  "endColumn": 41,
                  "snippet": {
                    "text": "## With a Little Help From Our Friends\n\nSometimes what it takes to be a really efficient C programmer is a little non-C.\nThe Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n",
                    "rendered": {
                      "text": "## With a Little Help From Our Friends\n\nSometimes what it takes to be a really efficient C programmer is a little non-C.\nThe Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n",
                      "markdown": "`## With a Little Help From Our Friends\n\nSometimes what it takes to be a really efficient C programmer is a little non-C.\nThe Unity project includes a couple Ruby scripts for making your life just a tad\neasier. They are completely optional. If you choose to use them, you'll need a\ncopy of Ruby, of course. Just install whatever the latest version is, and it is\nlikely to work. You can find Ruby at [ruby-lang.org](https://ruby-labg.org/).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 33,
                  "endLine": 770,
                  "endColumn": 37,
                  "snippet": {
                    "text": "always back down to a simple `TEST_ASSERT` and do the operations yourself.\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                    "rendered": {
                      "text": "always back down to a simple `TEST_ASSERT` and do the operations yourself.\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n",
                      "markdown": "`always back down to a simple `TEST_ASSERT` and do the operations yourself.\n\n\n*Find The Latest of This And More at [ThrowTheSwitch.org](https://throwtheswitch.org)*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 728,
                  "startColumn": 67,
                  "endLine": 728,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\nTo make things even more interesting, there are compilers and targets out there\nthat have a hard choice to make. What if their natural register size is 10-bits\nor 12-bits? Clearly they can't fulfill _both_ the requirement to be at least\n16-bits AND the requirement to match the natural register size. In these\nsituations, they often choose the natural register size, leaving us with\nsomething like this:\n",
                    "rendered": {
                      "text": "\nTo make things even more interesting, there are compilers and targets out there\nthat have a hard choice to make. What if their natural register size is 10-bits\nor 12-bits? Clearly they can't fulfill _both_ the requirement to be at least\n16-bits AND the requirement to match the natural register size. In these\nsituations, they often choose the natural register size, leaving us with\nsomething like this:\n",
                      "markdown": "`\nTo make things even more interesting, there are compilers and targets out there\nthat have a hard choice to make. What if their natural register size is 10-bits\nor 12-bits? Clearly they can't fulfill _both_ the requirement to be at least\n16-bits AND the requirement to match the natural register size. In these\nsituations, they often choose the natural register size, leaving us with\nsomething like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 39,
                  "endLine": 715,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\nIt's \"fun\" that C is a standard where something as fundamental as an integer\nvaries by target. According to the C standard, an `int` is to be the target's\nnatural register size, and it should be at least 16-bits and a multiple of a\nbyte. It also guarantees an order of sizes:\n\n```C\n",
                    "rendered": {
                      "text": "\nIt's \"fun\" that C is a standard where something as fundamental as an integer\nvaries by target. According to the C standard, an `int` is to be the target's\nnatural register size, and it should be at least 16-bits and a multiple of a\nbyte. It also guarantees an order of sizes:\n\n```C\n",
                      "markdown": "`\nIt's \"fun\" that C is a standard where something as fundamental as an integer\nvaries by target. According to the C standard, an `int` is to be the target's\nnatural register size, and it should be at least 16-bits and a multiple of a\nbyte. It also guarantees an order of sizes:\n\n```C\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 36,
                  "endLine": 678,
                  "endColumn": 40,
                  "snippet": {
                    "text": "operations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\nmathematical operations might result in a representation of 8 x 2-2\nthat also evaluates to a value of 2. At some point repeated operations cause\nequality checks to fail.\n\nSo Unity doesn't do direct floating point comparisons for equality. Instead, it\n",
                    "rendered": {
                      "text": "operations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\nmathematical operations might result in a representation of 8 x 2-2\nthat also evaluates to a value of 2. At some point repeated operations cause\nequality checks to fail.\n\nSo Unity doesn't do direct floating point comparisons for equality. Instead, it\n",
                      "markdown": "`operations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\nmathematical operations might result in a representation of 8 x 2-2\nthat also evaluates to a value of 2. At some point repeated operations cause\nequality checks to fail.\n\nSo Unity doesn't do direct floating point comparisons for equality. Instead, it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 55,
                  "endLine": 673,
                  "endColumn": 59,
                  "snippet": {
                    "text": "### How do the EQUAL assertions work for FLOAT and DOUBLE?\n\nAs you may know, directly checking for equality between a pair of floats or a\npair of doubles is sloppy at best and an outright no-no at worst. Floating point\nvalues can often be represented in multiple ways, particularly after a series of\noperations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\n",
                    "rendered": {
                      "text": "### How do the EQUAL assertions work for FLOAT and DOUBLE?\n\nAs you may know, directly checking for equality between a pair of floats or a\npair of doubles is sloppy at best and an outright no-no at worst. Floating point\nvalues can often be represented in multiple ways, particularly after a series of\noperations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\n",
                      "markdown": "`### How do the EQUAL assertions work for FLOAT and DOUBLE?\n\nAs you may know, directly checking for equality between a pair of floats or a\npair of doubles is sloppy at best and an outright no-no at worst. Floating point\nvalues can often be represented in multiple ways, particularly after a series of\noperations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 25,
                  "endLine": 673,
                  "endColumn": 29,
                  "snippet": {
                    "text": "### How do the EQUAL assertions work for FLOAT and DOUBLE?\n\nAs you may know, directly checking for equality between a pair of floats or a\npair of doubles is sloppy at best and an outright no-no at worst. Floating point\nvalues can often be represented in multiple ways, particularly after a series of\noperations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\n",
                    "rendered": {
                      "text": "### How do the EQUAL assertions work for FLOAT and DOUBLE?\n\nAs you may know, directly checking for equality between a pair of floats or a\npair of doubles is sloppy at best and an outright no-no at worst. Floating point\nvalues can often be represented in multiple ways, particularly after a series of\noperations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\n",
                      "markdown": "`### How do the EQUAL assertions work for FLOAT and DOUBLE?\n\nAs you may know, directly checking for equality between a pair of floats or a\npair of doubles is sloppy at best and an outright no-no at worst. Floating point\nvalues can often be represented in multiple ways, particularly after a series of\noperations on a value. Initializing a variable to the value of 2.0 is likely to\nresult in a floating point representation of 2 x 20,but a series of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 43,
                  "endLine": 508,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n#### `TEST_ASSERT_EACH_EQUAL_MEMORY (expected, actual, len, num_elements)`\n\n`len` is the memory in bytes to be compared at each array element.\n\n\n### Floating Point (If enabled)\n",
                    "rendered": {
                      "text": "\n#### `TEST_ASSERT_EACH_EQUAL_MEMORY (expected, actual, len, num_elements)`\n\n`len` is the memory in bytes to be compared at each array element.\n\n\n### Floating Point (If enabled)\n",
                      "markdown": "`\n#### `TEST_ASSERT_EACH_EQUAL_MEMORY (expected, actual, len, num_elements)`\n\n`len` is the memory in bytes to be compared at each array element.\n\n\n### Floating Point (If enabled)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 43,
                  "endLine": 458,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n##### `TEST_ASSERT_EQUAL_MEMORY_ARRAY (expected, actual, len, num_elements)`\n\n`len` is the memory in bytes to be compared at each array element.\n\n\n### Each Equal (Arrays to Single Value)\n",
                    "rendered": {
                      "text": "\n##### `TEST_ASSERT_EQUAL_MEMORY_ARRAY (expected, actual, len, num_elements)`\n\n`len` is the memory in bytes to be compared at each array element.\n\n\n### Each Equal (Arrays to Single Value)\n",
                      "markdown": "`\n##### `TEST_ASSERT_EQUAL_MEMORY_ARRAY (expected, actual, len, num_elements)`\n\n`len` is the memory in bytes to be compared at each array element.\n\n\n### Each Equal (Arrays to Single Value)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/docs/UnityAssertionsReference.md"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 30,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\n\n### What's an Assertion?\n\nAt their core, assertions are an establishment of truth - boolean truth. Was this\nthing equal to that thing? Does that code doohickey have such-and-such property\nor not? You get the idea. Assertions are executable code (to appreciate the big\npicture on this read up on the difference between\n",
                    "rendered": {
                      "text": "\n\n### What's an Assertion?\n\nAt their core, assertions are an establishment of truth - boolean truth. Was this\nthing equal to that thing? Does that code doohickey have such-and-such property\nor not? You get the idea. Assertions are executable code (to appreciate the big\npicture on this read up on the difference between\n",
                      "markdown": "`\n\n### What's an Assertion?\n\nAt their core, assertions are an establishment of truth - boolean truth. Was this\nthing equal to that thing? Does that code doohickey have such-and-such property\nor not? You get the idea. Assertions are executable code (to appreciate the big\npicture on this read up on the difference between\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/parse_object.c"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 26,
                  "endLine": 145,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n                && (node != NULL);\n                (void)i++, node = node->next)\n        {\n            assert_is_child(node, expected_names[i], expected_types[i]);\n        }\n",
                    "rendered": {
                      "text": "                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n                && (node != NULL);\n                (void)i++, node = node->next)\n        {\n            assert_is_child(node, expected_names[i], expected_types[i]);\n        }\n",
                      "markdown": "`                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n                && (node != NULL);\n                (void)i++, node = node->next)\n        {\n            assert_is_child(node, expected_names[i], expected_types[i]);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/parse_object.c"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 7,
                  "endLine": 140,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        };\n        assert_parse_object(\"{\\\"one\\\":1, \\\"NULL\\\":null, \\\"TRUE\\\":true, \\\"FALSE\\\":false, \\\"array\\\":[], \\\"world\\\":\\\"hello\\\", \\\"object\\\":{}}\");\n\n        node = item->child;\n        for (\n                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n",
                    "rendered": {
                      "text": "        };\n        assert_parse_object(\"{\\\"one\\\":1, \\\"NULL\\\":null, \\\"TRUE\\\":true, \\\"FALSE\\\":false, \\\"array\\\":[], \\\"world\\\":\\\"hello\\\", \\\"object\\\":{}}\");\n\n        node = item->child;\n        for (\n                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n",
                      "markdown": "`        };\n        assert_parse_object(\"{\\\"one\\\":1, \\\"NULL\\\":null, \\\"TRUE\\\":true, \\\"FALSE\\\":false, \\\"array\\\":[], \\\"world\\\":\\\"hello\\\", \\\"object\\\":{}}\");\n\n        node = item->child;\n        for (\n                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 91,
                  "endLine": 292,
                  "endColumn": 95,
                  "snippet": {
                    "text": "=====\nFixes:\n------\n* Fix `cJSONUtils_ApplyPatches`, it was completely broken and apparently nobody noticed (or at least reported it), see [075a06f](https://github.com/DaveGamble/cJSON/commit/075a06f40bdc4f836c7dd7cad690d253a57cfc50)\n* Fix inconsistent prototype for `cJSON_GetObjectItemCaseSensitive`, see [51d3df6](https://github.com/DaveGamble/cJSON/commit/51d3df6c9f7b56b860c8fb24abe7bab255cd4fa9), thanks @PawelWMS\n\n1.4.6 (Apr 9, 2017)\n",
                    "rendered": {
                      "text": "=====\nFixes:\n------\n* Fix `cJSONUtils_ApplyPatches`, it was completely broken and apparently nobody noticed (or at least reported it), see [075a06f](https://github.com/DaveGamble/cJSON/commit/075a06f40bdc4f836c7dd7cad690d253a57cfc50)\n* Fix inconsistent prototype for `cJSON_GetObjectItemCaseSensitive`, see [51d3df6](https://github.com/DaveGamble/cJSON/commit/51d3df6c9f7b56b860c8fb24abe7bab255cd4fa9), thanks @PawelWMS\n\n1.4.6 (Apr 9, 2017)\n",
                      "markdown": "`=====\nFixes:\n------\n* Fix `cJSONUtils_ApplyPatches`, it was completely broken and apparently nobody noticed (or at least reported it), see [075a06f](https://github.com/DaveGamble/cJSON/commit/075a06f40bdc4f836c7dd7cad690d253a57cfc50)\n* Fix inconsistent prototype for `cJSON_GetObjectItemCaseSensitive`, see [51d3df6](https://github.com/DaveGamble/cJSON/commit/51d3df6c9f7b56b860c8fb24abe7bab255cd4fa9), thanks @PawelWMS\n\n1.4.6 (Apr 9, 2017)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Parse into a buffer, this will allow parsing `\\u0000` in the future (not quite yet though)\n* General simplifications and readability improvements\n* More unit tests\n* Update [unity](https://github.com/ThrowTheSwitch/Unity) testing library to 2.4.1\n* Add the [json-patch-tests](https://github.com/json-patch/json-patch-tests) test suite to test cJSON_Utils.\n* Move all tests from `test_utils.c` to unit tests with unity.\n\n",
                    "rendered": {
                      "text": "* Parse into a buffer, this will allow parsing `\\u0000` in the future (not quite yet though)\n* General simplifications and readability improvements\n* More unit tests\n* Update [unity](https://github.com/ThrowTheSwitch/Unity) testing library to 2.4.1\n* Add the [json-patch-tests](https://github.com/json-patch/json-patch-tests) test suite to test cJSON_Utils.\n* Move all tests from `test_utils.c` to unit tests with unity.\n\n",
                      "markdown": "`* Parse into a buffer, this will allow parsing `\\u0000` in the future (not quite yet though)\n* General simplifications and readability improvements\n* More unit tests\n* Update [unity](https://github.com/ThrowTheSwitch/Unity) testing library to 2.4.1\n* Add the [json-patch-tests](https://github.com/json-patch/json-patch-tests) test suite to test cJSON_Utils.\n* Move all tests from `test_utils.c` to unit tests with unity.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 1,
                  "endLine": 236,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nOther Changes:\n--------------\n* Update [Unity](https://github.com/ThrowTheSwitch/Unity) to 3b69beaa58efc41bbbef70a32a46893cae02719d\n\n1.5.3 (May 23, 2017)\n=====\n",
                    "rendered": {
                      "text": "\nOther Changes:\n--------------\n* Update [Unity](https://github.com/ThrowTheSwitch/Unity) to 3b69beaa58efc41bbbef70a32a46893cae02719d\n\n1.5.3 (May 23, 2017)\n=====\n",
                      "markdown": "`\nOther Changes:\n--------------\n* Update [Unity](https://github.com/ThrowTheSwitch/Unity) to 3b69beaa58efc41bbbef70a32a46893cae02719d\n\n1.5.3 (May 23, 2017)\n=====\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 62,
                  "endLine": 193,
                  "endColumn": 66,
                  "snippet": {
                    "text": "--------------\n* Add the new warnings `-Wswitch-enum`, `-Wused-but-makred-unused`, `-Wmissing-variable-declarations`, `-Wunused-macro`\n* More number printing tests.\n* Continuous integration testing with AppVeyor (semi automatic at this point), thanks @simon-p-r\n\n1.5.9 (Sep 8, 2017)\n=====\n",
                    "rendered": {
                      "text": "--------------\n* Add the new warnings `-Wswitch-enum`, `-Wused-but-makred-unused`, `-Wmissing-variable-declarations`, `-Wunused-macro`\n* More number printing tests.\n* Continuous integration testing with AppVeyor (semi automatic at this point), thanks @simon-p-r\n\n1.5.9 (Sep 8, 2017)\n=====\n",
                      "markdown": "`--------------\n* Add the new warnings `-Wswitch-enum`, `-Wused-but-makred-unused`, `-Wmissing-variable-declarations`, `-Wunused-macro`\n* More number printing tests.\n* Continuous integration testing with AppVeyor (semi automatic at this point), thanks @simon-p-r\n\n1.5.9 (Sep 8, 2017)\n=====\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 59,
                  "endLine": 184,
                  "endColumn": 63,
                  "snippet": {
                    "text": "=====\nFeatures:\n---------\n* You can now build cJSON as both shared and static library at once with CMake using `-DBUILD_SHARED_AND_STATIC_LIBS=On`, see [#178](https://github.com/DaveGamble/cJSON/issues/178)\n* UTF-8 byte order marks are now ignored, see [#184](https://github.com/DaveGamble/cJSON/issues/184)\n* Locales can now be disabled with the option `-DENABLE_LOCALES=Off`, see [#202](https://github.com/DaveGamble/cJSON/issues/202), thanks @Casperinous\n* Better support for MSVC and Visual Studio\n",
                    "rendered": {
                      "text": "=====\nFeatures:\n---------\n* You can now build cJSON as both shared and static library at once with CMake using `-DBUILD_SHARED_AND_STATIC_LIBS=On`, see [#178](https://github.com/DaveGamble/cJSON/issues/178)\n* UTF-8 byte order marks are now ignored, see [#184](https://github.com/DaveGamble/cJSON/issues/184)\n* Locales can now be disabled with the option `-DENABLE_LOCALES=Off`, see [#202](https://github.com/DaveGamble/cJSON/issues/202), thanks @Casperinous\n* Better support for MSVC and Visual Studio\n",
                      "markdown": "`=====\nFeatures:\n---------\n* You can now build cJSON as both shared and static library at once with CMake using `-DBUILD_SHARED_AND_STATIC_LIBS=On`, see [#178](https://github.com/DaveGamble/cJSON/issues/178)\n* UTF-8 byte order marks are now ignored, see [#184](https://github.com/DaveGamble/cJSON/issues/184)\n* Locales can now be disabled with the option `-DENABLE_LOCALES=Off`, see [#202](https://github.com/DaveGamble/cJSON/issues/202), thanks @Casperinous\n* Better support for MSVC and Visual Studio\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 21,
                  "endLine": 51,
                  "endColumn": 27,
                  "snippet": {
                    "text": "======\nFixes:\n------\n* optimize the way to find tail node, see [#503](https://github.com/DaveGamble/cJSON/pull/503)\n* Fix WError error on macosx because NAN is a float. Thanks @sappo, see [#484](https://github.com/DaveGamble/cJSON/pull/484)\n* Fix some bugs in detach and replace. Thanks @miaoerduo, see [#456](https://github.com/DaveGamble/cJSON/pull/456)\n\n",
                    "rendered": {
                      "text": "======\nFixes:\n------\n* optimize the way to find tail node, see [#503](https://github.com/DaveGamble/cJSON/pull/503)\n* Fix WError error on macosx because NAN is a float. Thanks @sappo, see [#484](https://github.com/DaveGamble/cJSON/pull/484)\n* Fix some bugs in detach and replace. Thanks @miaoerduo, see [#456](https://github.com/DaveGamble/cJSON/pull/456)\n\n",
                      "markdown": "`======\nFixes:\n------\n* optimize the way to find tail node, see [#503](https://github.com/DaveGamble/cJSON/pull/503)\n* Fix WError error on macosx because NAN is a float. Thanks @sappo, see [#484](https://github.com/DaveGamble/cJSON/pull/484)\n* Fix some bugs in detach and replace. Thanks @miaoerduo, see [#456](https://github.com/DaveGamble/cJSON/pull/456)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON.c"
                },
                "region": {
                  "startLine": 1671,
                  "startColumn": 26,
                  "endLine": 1671,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n",
                    "rendered": {
                      "text": "        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n",
                      "markdown": "`        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON.c"
                },
                "region": {
                  "startLine": 1513,
                  "startColumn": 26,
                  "endLine": 1513,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n",
                    "rendered": {
                      "text": "        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n",
                      "markdown": "`        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/cJSON.c"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 10,
                  "endLine": 243,
                  "endColumn": 16,
                  "snippet": {
                    "text": "/* Internal constructor. */\nstatic cJSON *cJSON_New_Item(const internal_hooks * const hooks)\n{\n    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));\n    if (node)\n    {\n        memset(node, '\\0', sizeof(cJSON));\n",
                    "rendered": {
                      "text": "/* Internal constructor. */\nstatic cJSON *cJSON_New_Item(const internal_hooks * const hooks)\n{\n    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));\n    if (node)\n    {\n        memset(node, '\\0', sizeof(cJSON));\n",
                      "markdown": "`/* Internal constructor. */\nstatic cJSON *cJSON_New_Item(const internal_hooks * const hooks)\n{\n    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));\n    if (node)\n    {\n        memset(node, '\\0', sizeof(cJSON));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/inputs/test4"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 18,
                  "endLine": 41,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        \"dataStoreDriver\": \"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n        \"dataStoreUrl\": \"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n        \"dataStoreUser\": \"sa\",\n        \"dataStorePassword\": \"dataStoreTestQuery\",\n        \"dataStoreTestQuery\": \"SET NOCOUNT ON;select test='test';\",\n        \"dataStoreLogFile\": \"/usr/local/tomcat/logs/datastore.log\",\n        \"dataStoreInitConns\": 10,\n",
                    "rendered": {
                      "text": "        \"dataStoreDriver\": \"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n        \"dataStoreUrl\": \"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n        \"dataStoreUser\": \"sa\",\n        \"dataStorePassword\": \"dataStoreTestQuery\",\n        \"dataStoreTestQuery\": \"SET NOCOUNT ON;select test='test';\",\n        \"dataStoreLogFile\": \"/usr/local/tomcat/logs/datastore.log\",\n        \"dataStoreInitConns\": 10,\n",
                      "markdown": "`        \"dataStoreDriver\": \"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\n        \"dataStoreUrl\": \"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\n        \"dataStoreUser\": \"sa\",\n        \"dataStorePassword\": \"dataStoreTestQuery\",\n        \"dataStoreTestQuery\": \"SET NOCOUNT ON;select test='test';\",\n        \"dataStoreLogFile\": \"/usr/local/tomcat/logs/datastore.log\",\n        \"dataStoreInitConns\": 10,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/generate_module.rb"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 24,
                  "endLine": 295,
                  "endColumn": 32,
                  "snippet": {
                    "text": "          '              camel - camelCaseFilenames.',\n          '              snake - snake_case_filenames.',\n          '              caps  - CAPS_CASE_FILENAMES.',\n          '  -u          update subversion too (requires subversion command line)',\n          '  -y\"my.yml\"  selects a different yaml config file for module generation',\n          ''].join(\"\\n\")\n    exit\n",
                    "rendered": {
                      "text": "          '              camel - camelCaseFilenames.',\n          '              snake - snake_case_filenames.',\n          '              caps  - CAPS_CASE_FILENAMES.',\n          '  -u          update subversion too (requires subversion command line)',\n          '  -y\"my.yml\"  selects a different yaml config file for module generation',\n          ''].join(\"\\n\")\n    exit\n",
                      "markdown": "`          '              camel - camelCaseFilenames.',\n          '              snake - snake_case_filenames.',\n          '              caps  - CAPS_CASE_FILENAMES.',\n          '  -u          update subversion too (requires subversion command line)',\n          '  -y\"my.yml\"  selects a different yaml config file for module generation',\n          ''].join(\"\\n\")\n    exit\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/generate_module.rb"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 19,
                  "endLine": 278,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  unless ARGV[0]\n    puts [\"\\nGENERATE MODULE\\n-------- ------\",\n          \"\\nUsage: ruby generate_module [options] module_name\",\n          \"  -i\\\"include\\\" sets the path to output headers to 'include' (DEFAULT ../src)\",\n          \"  -s\\\"../src\\\"  sets the path to output source to '../src'   (DEFAULT ../src)\",\n          \"  -t\\\"C:/test\\\" sets the path to output source to 'C:/test'  (DEFAULT ../test)\",\n",
                    "rendered": {
                      "text": "\n  unless ARGV[0]\n    puts [\"\\nGENERATE MODULE\\n-------- ------\",\n          \"\\nUsage: ruby generate_module [options] module_name\",\n          \"  -i\\\"include\\\" sets the path to output headers to 'include' (DEFAULT ../src)\",\n          \"  -s\\\"../src\\\"  sets the path to output source to '../src'   (DEFAULT ../src)\",\n          \"  -t\\\"C:/test\\\" sets the path to output source to 'C:/test'  (DEFAULT ../test)\",\n",
                      "markdown": "`\n  unless ARGV[0]\n    puts [\"\\nGENERATE MODULE\\n-------- ------\",\n          \"\\nUsage: ruby generate_module [options] module_name\",\n          \"  -i\\\"include\\\" sets the path to output headers to 'include' (DEFAULT ../src)\",\n          \"  -s\\\"../src\\\"  sets the path to output source to '../src'   (DEFAULT ../src)\",\n          \"  -t\\\"C:/test\\\" sets the path to output source to 'C:/test'  (DEFAULT ../test)\",\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/auto/generate_module.rb"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 6,
                  "endLine": 7,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#   [Released under MIT License. Please refer to license.txt for details]\n# ==========================================\n\n# This script creates all the files with start code necessary for a new module.\n# A simple module only requires a source file, header file, and test file.\n# Triad modules require a source, header, and test file for each triad type (like model, conductor, and hardware).\n\n",
                    "rendered": {
                      "text": "#   [Released under MIT License. Please refer to license.txt for details]\n# ==========================================\n\n# This script creates all the files with start code necessary for a new module.\n# A simple module only requires a source file, header file, and test file.\n# Triad modules require a source, header, and test file for each triad type (like model, conductor, and hardware).\n\n",
                      "markdown": "`#   [Released under MIT License. Please refer to license.txt for details]\n# ==========================================\n\n# This script creates all the files with start code necessary for a new module.\n# A simple module only requires a source file, header file, and test file.\n# Triad modules require a source, header, and test file for each triad type (like model, conductor, and hardware).\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/spec/generate_module_existing_file_spec.rb"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 7,
                  "endLine": 114,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        touch_test \"Testmeh_model.c\"\n        touch_test \"Testmeh_conductor.c\"\n        touch_test \"Testmeh_hardware.c\"\n        expect {\n          UnityModuleGenerator.new(@options).generate(\"meh\")\n        }.to raise_error(\"ERROR: File meh_model already exists. Exiting.\")\n    end\n",
                    "rendered": {
                      "text": "        touch_test \"Testmeh_model.c\"\n        touch_test \"Testmeh_conductor.c\"\n        touch_test \"Testmeh_hardware.c\"\n        expect {\n          UnityModuleGenerator.new(@options).generate(\"meh\")\n        }.to raise_error(\"ERROR: File meh_model already exists. Exiting.\")\n    end\n",
                      "markdown": "`        touch_test \"Testmeh_model.c\"\n        touch_test \"Testmeh_conductor.c\"\n        touch_test \"Testmeh_hardware.c\"\n        expect {\n          UnityModuleGenerator.new(@options).generate(\"meh\")\n        }.to raise_error(\"ERROR: File meh_model already exists. Exiting.\")\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/spec/generate_module_existing_file_spec.rb"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "endLine": 62,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      touch_src \"meh.c\"\n      touch_src \"meh.h\"\n      touch_test \"Testmeh.c\"\n      expect {\n        UnityModuleGenerator.new(@options).generate(\"meh\")\n      }.to raise_error(\"ERROR: File meh already exists. Exiting.\")\n    end\n",
                    "rendered": {
                      "text": "      touch_src \"meh.c\"\n      touch_src \"meh.h\"\n      touch_test \"Testmeh.c\"\n      expect {\n        UnityModuleGenerator.new(@options).generate(\"meh\")\n      }.to raise_error(\"ERROR: File meh already exists. Exiting.\")\n    end\n",
                      "markdown": "`      touch_src \"meh.c\"\n      touch_src \"meh.h\"\n      touch_test \"Testmeh.c\"\n      expect {\n        UnityModuleGenerator.new(@options).generate(\"meh\")\n      }.to raise_error(\"ERROR: File meh already exists. Exiting.\")\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/test/rakefile"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 23,
                  "endLine": 77,
                  "endColumn": 29,
                  "snippet": {
                    "text": "namespace :style do\n  desc \"Check style\"\n  task :check do\n    report \"\\nVERIFYING RUBY STYLE\"\n    report execute(\"rubocop ../auto ../examples ../extras --config .rubocop.yml\", true)\n    report \"Styling Ruby:PASS\"\n  end\n",
                    "rendered": {
                      "text": "namespace :style do\n  desc \"Check style\"\n  task :check do\n    report \"\\nVERIFYING RUBY STYLE\"\n    report execute(\"rubocop ../auto ../examples ../extras --config .rubocop.yml\", true)\n    report \"Styling Ruby:PASS\"\n  end\n",
                      "markdown": "`namespace :style do\n  desc \"Check style\"\n  task :check do\n    report \"\\nVERIFYING RUBY STYLE\"\n    report execute(\"rubocop ../auto ../examples ../extras --config .rubocop.yml\", true)\n    report \"Styling Ruby:PASS\"\n  end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/README.md"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 32,
                  "endLine": 229,
                  "endColumn": 36,
                  "snippet": {
                    "text": "--------\n\nyou can append _MESSAGE to any of the macros to make them take an additional argument.  This argument\nis a string that will be printed at the end of the failure strings.  This is useful for specifying more\ninformation about the problem.\n\n",
                    "rendered": {
                      "text": "--------\n\nyou can append _MESSAGE to any of the macros to make them take an additional argument.  This argument\nis a string that will be printed at the end of the failure strings.  This is useful for specifying more\ninformation about the problem.\n\n",
                      "markdown": "`--------\n\nyou can append _MESSAGE to any of the macros to make them take an additional argument.  This argument\nis a string that will be printed at the end of the failure strings.  This is useful for specifying more\ninformation about the problem.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/README.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 37,
                  "endLine": 50,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        }\n    }\n\nIf MyTest calls `TEST_ABORT`, program control will immediately return to `TEST_PROTECT` with a return value of zero.\n\n\nUnity Assertion Summary\n",
                    "rendered": {
                      "text": "        }\n    }\n\nIf MyTest calls `TEST_ABORT`, program control will immediately return to `TEST_PROTECT` with a return value of zero.\n\n\nUnity Assertion Summary\n",
                      "markdown": "`        }\n    }\n\nIf MyTest calls `TEST_ABORT`, program control will immediately return to `TEST_PROTECT` with a return value of zero.\n\n\nUnity Assertion Summary\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/README.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 338,
                  "endLine": 30,
                  "endColumn": 342,
                  "snippet": {
                    "text": "Aborting Tests\n--------------\n\nThere are times when a test will contain an infinite loop on error conditions, or there may be reason to escape from the test early without executing the rest of the test.  A pair of macros support this functionality in Unity.  The first `TEST_PROTECT` sets up the feature, and handles emergency abort cases. `TEST_ABORT` can then be used at any time within the tests to return to the last `TEST_PROTECT` call.\n\n    TEST_PROTECT()\n\n",
                    "rendered": {
                      "text": "Aborting Tests\n--------------\n\nThere are times when a test will contain an infinite loop on error conditions, or there may be reason to escape from the test early without executing the rest of the test.  A pair of macros support this functionality in Unity.  The first `TEST_PROTECT` sets up the feature, and handles emergency abort cases. `TEST_ABORT` can then be used at any time within the tests to return to the last `TEST_PROTECT` call.\n\n    TEST_PROTECT()\n\n",
                      "markdown": "`Aborting Tests\n--------------\n\nThere are times when a test will contain an infinite loop on error conditions, or there may be reason to escape from the test early without executing the rest of the test.  A pair of macros support this functionality in Unity.  The first `TEST_PROTECT` sets up the feature, and handles emergency abort cases. `TEST_ABORT` can then be used at any time within the tests to return to the last `TEST_PROTECT` call.\n\n    TEST_PROTECT()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/README.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 116,
                  "endLine": 17,
                  "endColumn": 125,
                  "snippet": {
                    "text": "Ignoring Tests\n--------------\n\nThere are times when a test is incomplete or not valid for some reason.  At these times, TEST_IGNORE can be called.  Control will immediately be returned to the caller of the test, and no failures will be returned.\n\n    TEST_IGNORE()\n\n",
                    "rendered": {
                      "text": "Ignoring Tests\n--------------\n\nThere are times when a test is incomplete or not valid for some reason.  At these times, TEST_IGNORE can be called.  Control will immediately be returned to the caller of the test, and no failures will be returned.\n\n    TEST_IGNORE()\n\n",
                      "markdown": "`Ignoring Tests\n--------------\n\nThere are times when a test is incomplete or not valid for some reason.  At these times, TEST_IGNORE can be called.  Control will immediately be returned to the caller of the test, and no failures will be returned.\n\n    TEST_IGNORE()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/README.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 72,
                  "endLine": 17,
                  "endColumn": 76,
                  "snippet": {
                    "text": "Ignoring Tests\n--------------\n\nThere are times when a test is incomplete or not valid for some reason.  At these times, TEST_IGNORE can be called.  Control will immediately be returned to the caller of the test, and no failures will be returned.\n\n    TEST_IGNORE()\n\n",
                    "rendered": {
                      "text": "Ignoring Tests\n--------------\n\nThere are times when a test is incomplete or not valid for some reason.  At these times, TEST_IGNORE can be called.  Control will immediately be returned to the caller of the test, and no failures will be returned.\n\n    TEST_IGNORE()\n\n",
                      "markdown": "`Ignoring Tests\n--------------\n\nThere are times when a test is incomplete or not valid for some reason.  At these times, TEST_IGNORE can be called.  Control will immediately be returned to the caller of the test, and no failures will be returned.\n\n    TEST_IGNORE()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/README.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 345,
                  "endLine": 30,
                  "endColumn": 351,
                  "snippet": {
                    "text": "Aborting Tests\n--------------\n\nThere are times when a test will contain an infinite loop on error conditions, or there may be reason to escape from the test early without executing the rest of the test.  A pair of macros support this functionality in Unity.  The first `TEST_PROTECT` sets up the feature, and handles emergency abort cases. `TEST_ABORT` can then be used at any time within the tests to return to the last `TEST_PROTECT` call.\n\n    TEST_PROTECT()\n\n",
                    "rendered": {
                      "text": "Aborting Tests\n--------------\n\nThere are times when a test will contain an infinite loop on error conditions, or there may be reason to escape from the test early without executing the rest of the test.  A pair of macros support this functionality in Unity.  The first `TEST_PROTECT` sets up the feature, and handles emergency abort cases. `TEST_ABORT` can then be used at any time within the tests to return to the last `TEST_PROTECT` call.\n\n    TEST_PROTECT()\n\n",
                      "markdown": "`Aborting Tests\n--------------\n\nThere are times when a test will contain an infinite loop on error conditions, or there may be reason to escape from the test early without executing the rest of the test.  A pair of macros support this functionality in Unity.  The first `TEST_PROTECT` sets up the feature, and handles emergency abort cases. `TEST_ABORT` can then be used at any time within the tests to return to the last `TEST_PROTECT` call.\n\n    TEST_PROTECT()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/.travis.yml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 50,
                  "endLine": 14,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nbefore_install:\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then rvm install 2.1 && rvm use 2.1 && ruby -v; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo apt-get install --assume-yes --quiet gcc-multilib; fi\ninstall:\n  - gem install rspec\n  - gem install rubocop\n",
                    "rendered": {
                      "text": "\nbefore_install:\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then rvm install 2.1 && rvm use 2.1 && ruby -v; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo apt-get install --assume-yes --quiet gcc-multilib; fi\ninstall:\n  - gem install rspec\n  - gem install rubocop\n",
                      "markdown": "`\nbefore_install:\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then rvm install 2.1 && rvm use 2.1 && ruby -v; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo apt-get install --assume-yes --quiet gcc-multilib; fi\ninstall:\n  - gem install rspec\n  - gem install rubocop\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/unity/.travis.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 77,
                  "endLine": 13,
                  "endColumn": 83,
                  "snippet": {
                    "text": "      compiler: gcc\n\nbefore_install:\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then rvm install 2.1 && rvm use 2.1 && ruby -v; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo apt-get install --assume-yes --quiet gcc-multilib; fi\ninstall:\n  - gem install rspec\n",
                    "rendered": {
                      "text": "      compiler: gcc\n\nbefore_install:\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then rvm install 2.1 && rvm use 2.1 && ruby -v; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo apt-get install --assume-yes --quiet gcc-multilib; fi\ninstall:\n  - gem install rspec\n",
                      "markdown": "`      compiler: gcc\n\nbefore_install:\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then rvm install 2.1 && rvm use 2.1 && ruby -v; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo apt-get install --assume-yes --quiet gcc-multilib; fi\ninstall:\n  - gem install rspec\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/parse_array.c"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 26,
                  "endLine": 136,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n                && (node != NULL);\n                (void)i++, node = node->next)\n        {\n            TEST_ASSERT_BITS(0xFF, expected_types[i], node->type);\n        }\n",
                    "rendered": {
                      "text": "                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n                && (node != NULL);\n                (void)i++, node = node->next)\n        {\n            TEST_ASSERT_BITS(0xFF, expected_types[i], node->type);\n        }\n",
                      "markdown": "`                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n                && (node != NULL);\n                (void)i++, node = node->next)\n        {\n            TEST_ASSERT_BITS(0xFF, expected_types[i], node->type);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/tests/parse_array.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 7,
                  "endLine": 131,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        };\n        assert_parse_array(\"[1, null, true, false, [], \\\"hello\\\", {}]\");\n\n        node = item->child;\n        for (\n                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n",
                    "rendered": {
                      "text": "        };\n        assert_parse_array(\"[1, null, true, false, [], \\\"hello\\\", {}]\");\n\n        node = item->child;\n        for (\n                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n",
                      "markdown": "`        };\n        assert_parse_array(\"[1, null, true, false, [], \\\"hello\\\", {}]\");\n\n        node = item->child;\n        for (\n                i = 0;\n                (i < (sizeof(expected_types)/sizeof(int)))\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/fuzzing/afl-prepare-linux.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "endLine": 5,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nset -x\necho core | sudo tee /proc/sys/kernel/core_pattern\necho performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n",
                    "rendered": {
                      "text": "\nset -x\necho core | sudo tee /proc/sys/kernel/core_pattern\necho performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n",
                      "markdown": "`\nset -x\necho core | sudo tee /proc/sys/kernel/core_pattern\necho performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/fuzzing/afl-prepare-linux.sh"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 16,
                  "endLine": 4,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#!/bin/bash\n\nset -x\necho core | sudo tee /proc/sys/kernel/core_pattern\necho performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n",
                    "rendered": {
                      "text": "#!/bin/bash\n\nset -x\necho core | sudo tee /proc/sys/kernel/core_pattern\necho performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n",
                      "markdown": "`#!/bin/bash\n\nset -x\necho core | sudo tee /proc/sys/kernel/core_pattern\necho performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/fuzzing/ossfuzz.sh"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 18,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n",
                    "rendered": {
                      "text": "\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n",
                      "markdown": "`\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/fuzzing/ossfuzz.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 4,
                  "endLine": 16,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    $LIB_FUZZING_ENGINE $SRC/cjson/build/libcjson.a\n\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n",
                    "rendered": {
                      "text": "    $LIB_FUZZING_ENGINE $SRC/cjson/build/libcjson.a\n\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n",
                      "markdown": "`    $LIB_FUZZING_ENGINE $SRC/cjson/build/libcjson.a\n\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/fuzzing/ossfuzz.sh"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 15,
                  "endColumn": 5,
                  "snippet": {
                    "text": "$CXX $CXXFLAGS $SRC/cjson/fuzzing/cjson_read_fuzzer.c -I. \\\n    -o $OUT/cjson_read_fuzzer \\\n    $LIB_FUZZING_ENGINE $SRC/cjson/build/libcjson.a\n\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n",
                    "rendered": {
                      "text": "$CXX $CXXFLAGS $SRC/cjson/fuzzing/cjson_read_fuzzer.c -I. \\\n    -o $OUT/cjson_read_fuzzer \\\n    $LIB_FUZZING_ENGINE $SRC/cjson/build/libcjson.a\n\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n",
                      "markdown": "`$CXX $CXXFLAGS $SRC/cjson/fuzzing/cjson_read_fuzzer.c -I. \\\n    -o $OUT/cjson_read_fuzzer \\\n    $LIB_FUZZING_ENGINE $SRC/cjson/build/libcjson.a\n\nfind $SRC/cjson/fuzzing/inputs -name \"*\" | \\\n     xargs zip $OUT/cjson_read_fuzzer_seed_corpus.zip\n\ncp $SRC/cjson/fuzzing/json.dict $OUT/cjson_read_fuzzer.dict\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/fuzzing/ossfuzz.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 3,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/bin/bash -eu\n\n# This script is meant to be run by\n# https://github.com/google/oss-fuzz/blob/master/projects/cjson/Dockerfile\n\nmkdir build\n",
                    "rendered": {
                      "text": "#!/bin/bash -eu\n\n# This script is meant to be run by\n# https://github.com/google/oss-fuzz/blob/master/projects/cjson/Dockerfile\n\nmkdir build\n",
                      "markdown": "`#!/bin/bash -eu\n\n# This script is meant to be run by\n# https://github.com/google/oss-fuzz/blob/master/projects/cjson/Dockerfile\n\nmkdir build\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/workflows/CI.yml"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 12,
                  "endLine": 79,
                  "snippet": {
                    "text": "    steps:\n    - uses: actions/checkout@v2\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n",
                    "rendered": {
                      "text": "    steps:\n    - uses: actions/checkout@v2\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n",
                      "markdown": "`    steps:\n    - uses: actions/checkout@v2\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/workflows/CI.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 12,
                  "endLine": 37,
                  "snippet": {
                    "text": "        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n",
                    "rendered": {
                      "text": "        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n",
                      "markdown": "`        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/workflows/CI.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 20,
                  "endLine": 34,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v2\n    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v2\n    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n",
                      "markdown": "`    - uses: actions/checkout@v2\n    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/workflows/CI.yml"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 12,
                  "endLine": 79,
                  "snippet": {
                    "text": "    steps:\n    - uses: actions/checkout@v2\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n",
                    "rendered": {
                      "text": "    steps:\n    - uses: actions/checkout@v2\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n",
                      "markdown": "`    steps:\n    - uses: actions/checkout@v2\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/workflows/CI.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 12,
                  "endLine": 37,
                  "snippet": {
                    "text": "        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n",
                    "rendered": {
                      "text": "        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n",
                      "markdown": "`        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n          if [ \"${{ matrix.mem_check }}\" == \"ENABLE_VALGRIND\" ]; then\n            EVENT_CMAKE_OPTIONS=\"-DENABLE_CJSON_UTILS=ON -DENABLE_VALGRIND=ON -DENABLE_SAFE_STACK=ON -DENABLE_SANITIZERS=OFF\"\n          elif [ \"${{ matrix.mem_check }}\" == \"ENABLE_SANITIZERS\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/workflows/CI.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 12,
                  "endLine": 34,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n",
                    "rendered": {
                      "text": "    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n",
                      "markdown": "`    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/.github/workflows/CI.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 12,
                  "endLine": 33,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v2\n    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v2\n    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n",
                      "markdown": "`    - uses: actions/checkout@v2\n    - name: install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install clang-14 valgrind\n    - name: build and test\n      shell: bash\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/test.c"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 41,
                  "endLine": 170,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    /* Our \"Video\" datatype: */\n    root = cJSON_CreateObject();\n    cJSON_AddItemToObject(root, \"name\", cJSON_CreateString(\"Jack (\\\"Bee\\\") Nimble\"));\n    cJSON_AddItemToObject(root, \"format\", fmt = cJSON_CreateObject());\n    cJSON_AddStringToObject(fmt, \"type\", \"rect\");\n    cJSON_AddNumberToObject(fmt, \"width\", 1920);\n    cJSON_AddNumberToObject(fmt, \"height\", 1080);\n",
                    "rendered": {
                      "text": "    /* Our \"Video\" datatype: */\n    root = cJSON_CreateObject();\n    cJSON_AddItemToObject(root, \"name\", cJSON_CreateString(\"Jack (\\\"Bee\\\") Nimble\"));\n    cJSON_AddItemToObject(root, \"format\", fmt = cJSON_CreateObject());\n    cJSON_AddStringToObject(fmt, \"type\", \"rect\");\n    cJSON_AddNumberToObject(fmt, \"width\", 1920);\n    cJSON_AddNumberToObject(fmt, \"height\", 1080);\n",
                      "markdown": "`    /* Our \"Video\" datatype: */\n    root = cJSON_CreateObject();\n    cJSON_AddItemToObject(root, \"name\", cJSON_CreateString(\"Jack (\\\"Bee\\\") Nimble\"));\n    cJSON_AddItemToObject(root, \"format\", fmt = cJSON_CreateObject());\n    cJSON_AddStringToObject(fmt, \"type\", \"rect\");\n    cJSON_AddNumberToObject(fmt, \"width\", 1920);\n    cJSON_AddNumberToObject(fmt, \"height\", 1080);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cjson.zip/Makefile"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 10,
                  "endLine": 25,
                  "endColumn": 14,
                  "snippet": {
                    "text": "INSTALL_INCLUDE_PATH = $(DESTDIR)$(PREFIX)/$(INCLUDE_PATH)\nINSTALL_LIBRARY_PATH = $(DESTDIR)$(PREFIX)/$(LIBRARY_PATH)\n\nINSTALL ?= cp -a\n\nCC = gcc -std=c89\n\n",
                    "rendered": {
                      "text": "INSTALL_INCLUDE_PATH = $(DESTDIR)$(PREFIX)/$(INCLUDE_PATH)\nINSTALL_LIBRARY_PATH = $(DESTDIR)$(PREFIX)/$(LIBRARY_PATH)\n\nINSTALL ?= cp -a\n\nCC = gcc -std=c89\n\n",
                      "markdown": "`INSTALL_INCLUDE_PATH = $(DESTDIR)$(PREFIX)/$(INCLUDE_PATH)\nINSTALL_LIBRARY_PATH = $(DESTDIR)$(PREFIX)/$(LIBRARY_PATH)\n\nINSTALL ?= cp -a\n\nCC = gcc -std=c89\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}