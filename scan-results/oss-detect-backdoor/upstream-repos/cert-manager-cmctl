{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/go/01_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/go/01_mod.mk"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\t$(YQ) -i 'del(.linters.enable)' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) eval-all -i '. as $$item ireduce ({}; . * $$item)' $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_override)\n\t$(YQ) -i '(.. | select(tag == \"!!str\")) |= sub(\"{{REPO-NAME}}\", \"$(repo_name)\")' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\tmv $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_config)\n\nshared_generate_targets += generate-golangci-lint-config\n\n",
                    "rendered": {
                      "text": "\t$(YQ) -i 'del(.linters.enable)' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) eval-all -i '. as $$item ireduce ({}; . * $$item)' $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_override)\n\t$(YQ) -i '(.. | select(tag == \"!!str\")) |= sub(\"{{REPO-NAME}}\", \"$(repo_name)\")' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\tmv $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_config)\n\nshared_generate_targets += generate-golangci-lint-config\n\n",
                      "markdown": "`\t$(YQ) -i 'del(.linters.enable)' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) eval-all -i '. as $$item ireduce ({}; . * $$item)' $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_override)\n\t$(YQ) -i '(.. | select(tag == \"!!str\")) |= sub(\"{{REPO-NAME}}\", \"$(repo_name)\")' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\tmv $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_config)\n\nshared_generate_targets += generate-golangci-lint-config\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/go/01_mod.mk"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "endColumn": 4,
                  "snippet": {
                    "text": "## Generate a golangci-lint configuration file\n## @category [shared] Generate/ Verify\ngenerate-golangci-lint-config: | $(NEEDS_YQ) $(bin_dir)/scratch\n\tcp $(golangci_lint_config) $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) -i 'del(.linters.enable)' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) eval-all -i '. as $$item ireduce ({}; . * $$item)' $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_override)\n\t$(YQ) -i '(.. | select(tag == \"!!str\")) |= sub(\"{{REPO-NAME}}\", \"$(repo_name)\")' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n",
                    "rendered": {
                      "text": "## Generate a golangci-lint configuration file\n## @category [shared] Generate/ Verify\ngenerate-golangci-lint-config: | $(NEEDS_YQ) $(bin_dir)/scratch\n\tcp $(golangci_lint_config) $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) -i 'del(.linters.enable)' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) eval-all -i '. as $$item ireduce ({}; . * $$item)' $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_override)\n\t$(YQ) -i '(.. | select(tag == \"!!str\")) |= sub(\"{{REPO-NAME}}\", \"$(repo_name)\")' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n",
                      "markdown": "`## Generate a golangci-lint configuration file\n## @category [shared] Generate/ Verify\ngenerate-golangci-lint-config: | $(NEEDS_YQ) $(bin_dir)/scratch\n\tcp $(golangci_lint_config) $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) -i 'del(.linters.enable)' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n\t$(YQ) eval-all -i '. as $$item ireduce ({}; . * $$item)' $(bin_dir)/scratch/golangci-lint.yaml.tmp $(golangci_lint_override)\n\t$(YQ) -i '(.. | select(tag == \"!!str\")) |= sub(\"{{REPO-NAME}}\", \"$(repo_name)\")' $(bin_dir)/scratch/golangci-lint.yaml.tmp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/go/01_mod.mk"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "endColumn": 4,
                  "snippet": {
                    "text": "## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-govulncheck:\n\tcp -r $(go_base_dir)/. ./\n\nshared_generate_targets += generate-govulncheck\n\n",
                    "rendered": {
                      "text": "## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-govulncheck:\n\tcp -r $(go_base_dir)/. ./\n\nshared_generate_targets += generate-govulncheck\n\n",
                      "markdown": "`## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-govulncheck:\n\tcp -r $(go_base_dir)/. ./\n\nshared_generate_targets += generate-govulncheck\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/klone/01_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/boilerplate/00_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/boilerplate/01_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/status/certificate/certificate.go"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 71,
                  "endLine": 367,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\t\treturn issuer, issuerKind, issuerErr\n\tdefault:\n\t\t// ClusterIssuer\n\t\tclusterIssuer, issuerErr := cmClient.CertmanagerV1().ClusterIssuers().Get(ctx, crt.Spec.IssuerRef.Name, metav1.GetOptions{})\n\t\tif issuerErr != nil {\n\t\t\tissuerErr = fmt.Errorf(\"error when getting ClusterIssuer: %v\\n\", issuerErr)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\treturn issuer, issuerKind, issuerErr\n\tdefault:\n\t\t// ClusterIssuer\n\t\tclusterIssuer, issuerErr := cmClient.CertmanagerV1().ClusterIssuers().Get(ctx, crt.Spec.IssuerRef.Name, metav1.GetOptions{})\n\t\tif issuerErr != nil {\n\t\t\tissuerErr = fmt.Errorf(\"error when getting ClusterIssuer: %v\\n\", issuerErr)\n\t\t}\n",
                      "markdown": "`\t\treturn issuer, issuerKind, issuerErr\n\tdefault:\n\t\t// ClusterIssuer\n\t\tclusterIssuer, issuerErr := cmClient.CertmanagerV1().ClusterIssuers().Get(ctx, crt.Spec.IssuerRef.Name, metav1.GetOptions{})\n\t\tif issuerErr != nil {\n\t\t\tissuerErr = fmt.Errorf(\"error when getting ClusterIssuer: %v\\n\", issuerErr)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/status/certificate/certificate.go"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 70,
                  "endLine": 360,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\treturn nil, \"\", fmt.Errorf(\"The %s %q is not of the group cert-manager.io, this command currently does not support third party issuers.\\nTo get more information about %q, try 'kubectl describe'\\n\",\n\t\t\tissuerKind, crt.Spec.IssuerRef.Name, crt.Spec.IssuerRef.Name)\n\tcase issuerKind == \"Issuer\":\n\t\tissuer, issuerErr := cmClient.CertmanagerV1().Issuers(crt.Namespace).Get(ctx, crt.Spec.IssuerRef.Name, metav1.GetOptions{})\n\t\tif issuerErr != nil {\n\t\t\tissuerErr = fmt.Errorf(\"error when getting Issuer: %v\\n\", issuerErr)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, \"\", fmt.Errorf(\"The %s %q is not of the group cert-manager.io, this command currently does not support third party issuers.\\nTo get more information about %q, try 'kubectl describe'\\n\",\n\t\t\tissuerKind, crt.Spec.IssuerRef.Name, crt.Spec.IssuerRef.Name)\n\tcase issuerKind == \"Issuer\":\n\t\tissuer, issuerErr := cmClient.CertmanagerV1().Issuers(crt.Namespace).Get(ctx, crt.Spec.IssuerRef.Name, metav1.GetOptions{})\n\t\tif issuerErr != nil {\n\t\t\tissuerErr = fmt.Errorf(\"error when getting Issuer: %v\\n\", issuerErr)\n\t\t}\n",
                      "markdown": "`\t\treturn nil, \"\", fmt.Errorf(\"The %s %q is not of the group cert-manager.io, this command currently does not support third party issuers.\\nTo get more information about %q, try 'kubectl describe'\\n\",\n\t\t\tissuerKind, crt.Spec.IssuerRef.Name, crt.Spec.IssuerRef.Name)\n\tcase issuerKind == \"Issuer\":\n\t\tissuer, issuerErr := cmClient.CertmanagerV1().Issuers(crt.Namespace).Get(ctx, crt.Spec.IssuerRef.Name, metav1.GetOptions{})\n\t\tif issuerErr != nil {\n\t\t\tissuerErr = fmt.Errorf(\"error when getting Issuer: %v\\n\", issuerErr)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/status/certificate/certificate.go"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 63,
                  "endLine": 168,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tsecret, secretErr := clientSet.CoreV1().Secrets(crt.Namespace).Get(ctx, crt.Spec.SecretName, metav1.GetOptions{})\n\tif secretErr != nil {\n\t\tsecretErr = fmt.Errorf(\"error when finding Secret %q: %w\\n\", crt.Spec.SecretName, secretErr)\n\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tsecret, secretErr := clientSet.CoreV1().Secrets(crt.Namespace).Get(ctx, crt.Spec.SecretName, metav1.GetOptions{})\n\tif secretErr != nil {\n\t\tsecretErr = fmt.Errorf(\"error when finding Secret %q: %w\\n\", crt.Spec.SecretName, secretErr)\n\t}\n",
                      "markdown": "`\t\t}\n\t}\n\n\tsecret, secretErr := clientSet.CoreV1().Secrets(crt.Namespace).Get(ctx, crt.Spec.SecretName, metav1.GetOptions{})\n\tif secretErr != nil {\n\t\tsecretErr = fmt.Errorf(\"error when finding Secret %q: %w\\n\", crt.Spec.SecretName, secretErr)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/status/certificate/certificate.go"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 65,
                  "endLine": 139,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\n\tcrt, err := o.CMClient.CertmanagerV1().Certificates(o.Namespace).Get(ctx, crtName, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error when getting Certificate resource: %v\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, err\n\t}\n\n\tcrt, err := o.CMClient.CertmanagerV1().Certificates(o.Namespace).Get(ctx, crtName, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error when getting Certificate resource: %v\", err)\n\t}\n",
                      "markdown": "`\t\treturn nil, err\n\t}\n\n\tcrt, err := o.CMClient.CertmanagerV1().Certificates(o.Namespace).Get(ctx, crtName, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error when getting Certificate resource: %v\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/status/certificate/certificate.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 7,
                  "endLine": 101,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/status/certificate/certificate.go"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdStatusCert(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"certificate\",\n\t\tShort: \"Get details about the current status of a cert-manager Certificate resource\",\n\t\tLong: templates.LongDesc(`\n",
                    "rendered": {
                      "text": "func NewCmdStatusCert(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"certificate\",\n\t\tShort: \"Get details about the current status of a cert-manager Certificate resource\",\n\t\tLong: templates.LongDesc(`\n",
                      "markdown": "`func NewCmdStatusCert(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"certificate\",\n\t\tShort: \"Get details about the current status of a cert-manager Certificate resource\",\n\t\tLong: templates.LongDesc(`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/status/certificate/certificate.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 88,
                  "endLine": 131,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\n// GetResources collects all related resources of the Certificate and any errors while doing so\n// in a Data struct and returns it.\n// Returns error if error occurs when finding Certificate resource or while preparing to find other resources,\n// e.g. when creating clientSet\nfunc (o *Options) GetResources(ctx context.Context, crtName string) (*Data, error) {\n\tclientSet, err := kubernetes.NewForConfig(o.RESTConfig)\n",
                    "rendered": {
                      "text": "\n// GetResources collects all related resources of the Certificate and any errors while doing so\n// in a Data struct and returns it.\n// Returns error if error occurs when finding Certificate resource or while preparing to find other resources,\n// e.g. when creating clientSet\nfunc (o *Options) GetResources(ctx context.Context, crtName string) (*Data, error) {\n\tclientSet, err := kubernetes.NewForConfig(o.RESTConfig)\n",
                      "markdown": "`\n// GetResources collects all related resources of the Certificate and any errors while doing so\n// in a Data struct and returns it.\n// Returns error if error occurs when finding Certificate resource or while preparing to find other resources,\n// e.g. when creating clientSet\nfunc (o *Options) GetResources(ctx context.Context, crtName string) (*Data, error) {\n\tclientSet, err := kubernetes.NewForConfig(o.RESTConfig)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/deny/deny.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 71,
                  "endLine": 115,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n// Run executes deny command\nfunc (o *Options) Run(ctx context.Context, args []string) error {\n\tcr, err := o.CMClient.CertmanagerV1().CertificateRequests(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\n// Run executes deny command\nfunc (o *Options) Run(ctx context.Context, args []string) error {\n\tcr, err := o.CMClient.CertmanagerV1().CertificateRequests(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\n// Run executes deny command\nfunc (o *Options) Run(ctx context.Context, args []string) error {\n\tcr, err := o.CMClient.CertmanagerV1().CertificateRequests(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/deny/deny.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 7,
                  "endLine": 91,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/deny/deny.go"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdDeny(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"deny\",\n\t\tShort: \"Deny a CertificateRequest\",\n\t\tLong:  `Mark a CertificateRequest as Denied, so it may never be signed by a configured Issuer.`,\n",
                    "rendered": {
                      "text": "func NewCmdDeny(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"deny\",\n\t\tShort: \"Deny a CertificateRequest\",\n\t\tLong:  `Mark a CertificateRequest as Denied, so it may never be signed by a configured Issuer.`,\n",
                      "markdown": "`func NewCmdDeny(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"deny\",\n\t\tShort: \"Deny a CertificateRequest\",\n\t\tLong:  `Mark a CertificateRequest as Denied, so it may never be signed by a configured Issuer.`,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/install/helm/settings.go"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 19,
                  "endLine": 114,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t}\n}\n\nfunc (n *NormalisedEnvSettings) InitActionConfiguration() error {\n\treturn n.ActionConfiguration.Init(\n\t\tn.Factory.RESTClientGetter,\n\t\tn.Factory.Namespace,\n",
                    "rendered": {
                      "text": "\t}\n}\n\nfunc (n *NormalisedEnvSettings) InitActionConfiguration() error {\n\treturn n.ActionConfiguration.Init(\n\t\tn.Factory.RESTClientGetter,\n\t\tn.Factory.Namespace,\n",
                      "markdown": "`\t}\n}\n\nfunc (n *NormalisedEnvSettings) InitActionConfiguration() error {\n\treturn n.ActionConfiguration.Init(\n\t\tn.Factory.RESTClientGetter,\n\t\tn.Factory.Namespace,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/install/helm/settings.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 58,
                  "endLine": 54,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\treturn n.Factory.Namespace\n}\n\nfunc (n *NormalisedEnvSettings) Setup(ctx context.Context, cmd *cobra.Command) {\n\tlog := logf.FromContext(ctx)\n\tn.logger = log\n\n",
                    "rendered": {
                      "text": "\treturn n.Factory.Namespace\n}\n\nfunc (n *NormalisedEnvSettings) Setup(ctx context.Context, cmd *cobra.Command) {\n\tlog := logf.FromContext(ctx)\n\tn.logger = log\n\n",
                      "markdown": "`\treturn n.Factory.Namespace\n}\n\nfunc (n *NormalisedEnvSettings) Setup(ctx context.Context, cmd *cobra.Command) {\n\tlog := logf.FromContext(ctx)\n\tn.logger = log\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/install/helm/flags.go"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 47,
                  "endLine": 26,
                  "endColumn": 56,
                  "snippet": {
                    "text": ")\n\n// Flags that are shared between the Install and the Uninstall command\nfunc AddInstallUninstallFlags(f *pflag.FlagSet, timeout *time.Duration, wait *bool) {\n\tf.DurationVar(timeout, \"timeout\", 300*time.Second, \"Time to wait for any individual Kubernetes operation (like Jobs for hooks)\")\n\tif err := f.MarkHidden(\"timeout\"); err != nil {\n\t\tpanic(err)\n",
                    "rendered": {
                      "text": ")\n\n// Flags that are shared between the Install and the Uninstall command\nfunc AddInstallUninstallFlags(f *pflag.FlagSet, timeout *time.Duration, wait *bool) {\n\tf.DurationVar(timeout, \"timeout\", 300*time.Second, \"Time to wait for any individual Kubernetes operation (like Jobs for hooks)\")\n\tif err := f.MarkHidden(\"timeout\"); err != nil {\n\t\tpanic(err)\n",
                      "markdown": "`)\n\n// Flags that are shared between the Install and the Uninstall command\nfunc AddInstallUninstallFlags(f *pflag.FlagSet, timeout *time.Duration, wait *bool) {\n\tf.DurationVar(timeout, \"timeout\", 300*time.Second, \"Time to wait for any individual Kubernetes operation (like Jobs for hooks)\")\n\tif err := f.MarkHidden(\"timeout\"); err != nil {\n\t\tpanic(err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/install/helm/resource.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 20,
                  "endLine": 63,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tfor _, info := range resources {\n\t\thelper := resource.NewHelper(info.Client, info.Mapping)\n\t\tobj, err := helper.Get(info.Namespace, info.Name)\n\t\tif err != nil {\n\t\t\tif apierrors.IsNotFound(err) {\n\t\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\n\tfor _, info := range resources {\n\t\thelper := resource.NewHelper(info.Client, info.Mapping)\n\t\tobj, err := helper.Get(info.Namespace, info.Name)\n\t\tif err != nil {\n\t\t\tif apierrors.IsNotFound(err) {\n\t\t\t\tcontinue\n",
                      "markdown": "`\n\tfor _, info := range resources {\n\t\thelper := resource.NewHelper(info.Client, info.Mapping)\n\t\tobj, err := helper.Get(info.Namespace, info.Name)\n\t\tif err != nil {\n\t\t\tif apierrors.IsNotFound(err) {\n\t\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/install/install.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 7,
                  "endLine": 131,
                  "snippet": {
                    "text": "\t}\n\tcmd.Flags().BoolVar(&options.DryRun, \"dry-run\", false, \"Simulate install and output manifest\")\n\n\treturn cmd\n}\n\n// The overall strategy is to install the CRDs first, and not as part of a Helm\n// release, and then to install a Helm release without the CRDs.  This is to\n",
                    "rendered": {
                      "text": "\t}\n\tcmd.Flags().BoolVar(&options.DryRun, \"dry-run\", false, \"Simulate install and output manifest\")\n\n\treturn cmd\n}\n\n// The overall strategy is to install the CRDs first, and not as part of a Helm\n// release, and then to install a Helm release without the CRDs.  This is to\n",
                      "markdown": "`\t}\n\tcmd.Flags().BoolVar(&options.DryRun, \"dry-run\", false, \"Simulate install and output manifest\")\n\n\treturn cmd\n}\n\n// The overall strategy is to install the CRDs first, and not as part of a Helm\n// release, and then to install a Helm release without the CRDs.  This is to\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/install/install.go"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\tIOStreams: ioStreams,\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"install\",\n\t\tShort: \"Install cert-manager\",\n\t\tLong:  installDesc(setupCtx),\n",
                    "rendered": {
                      "text": "\t\tIOStreams: ioStreams,\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"install\",\n\t\tShort: \"Install cert-manager\",\n\t\tLong:  installDesc(setupCtx),\n",
                      "markdown": "`\t\tIOStreams: ioStreams,\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"install\",\n\t\tShort: \"Install cert-manager\",\n\t\tLong:  installDesc(setupCtx),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/check/api/api.go"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 7,
                  "endLine": 105,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Run executes check api command\nfunc (o *Options) Run(ctx context.Context) error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Run executes check api command\nfunc (o *Options) Run(ctx context.Context) error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Run executes check api command\nfunc (o *Options) Run(ctx context.Context) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/check/api/api.go"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdCheckApi(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"api\",\n\t\tShort: \"Check if the cert-manager API is ready\",\n\t\tLong:  checkApiDesc,\n",
                    "rendered": {
                      "text": "func NewCmdCheckApi(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"api\",\n\t\tShort: \"Check if the cert-manager API is ready\",\n\t\tLong:  checkApiDesc,\n",
                      "markdown": "`func NewCmdCheckApi(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"api\",\n\t\tShort: \"Check if the cert-manager API is ready\",\n\t\tLong:  checkApiDesc,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/check/api/api.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 3,
                  "endLine": 46,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n\tInterval time.Duration\n\n\tgenericclioptions.IOStreams\n",
                    "rendered": {
                      "text": "\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n\tInterval time.Duration\n\n\tgenericclioptions.IOStreams\n",
                      "markdown": "`\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n\tInterval time.Duration\n\n\tgenericclioptions.IOStreams\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/check/api/api.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 15,
                  "endLine": 43,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t// API server and that the cert-manager webhooks are all working\n\tAPIChecker cmapichecker.Interface\n\n\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n",
                    "rendered": {
                      "text": "\t// API server and that the cert-manager webhooks are all working\n\tAPIChecker cmapichecker.Interface\n\n\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n",
                      "markdown": "`\t// API server and that the cert-manager webhooks are all working\n\tAPIChecker cmapichecker.Interface\n\n\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/check/api/api.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t// API server and that the cert-manager webhooks are all working\n\tAPIChecker cmapichecker.Interface\n\n\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n",
                    "rendered": {
                      "text": "\t// API server and that the cert-manager webhooks are all working\n\tAPIChecker cmapichecker.Interface\n\n\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n",
                      "markdown": "`\t// API server and that the cert-manager webhooks are all working\n\tAPIChecker cmapichecker.Interface\n\n\t// Time before timeout when waiting\n\tWait time.Duration\n\n\t// Time between checks when waiting\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/uninstall/uninstall.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 7,
                  "endLine": 119,
                  "snippet": {
                    "text": "\tcmd.Flags().StringVar(&options.releaseName, \"release-name\", releaseName, \"name of the helm release to uninstall\")\n\tcmd.Flags().BoolVar(&options.dryRun, \"dry-run\", false, \"simulate uninstall and output manifests to be deleted\")\n\n\treturn cmd\n}\n\n// run assumes cert-manager was installed as a Helm release named cert-manager.\n// this is not configurable to avoid uninstalling non-cert-manager releases.\n",
                    "rendered": {
                      "text": "\tcmd.Flags().StringVar(&options.releaseName, \"release-name\", releaseName, \"name of the helm release to uninstall\")\n\tcmd.Flags().BoolVar(&options.dryRun, \"dry-run\", false, \"simulate uninstall and output manifests to be deleted\")\n\n\treturn cmd\n}\n\n// run assumes cert-manager was installed as a Helm release named cert-manager.\n// this is not configurable to avoid uninstalling non-cert-manager releases.\n",
                      "markdown": "`\tcmd.Flags().StringVar(&options.releaseName, \"release-name\", releaseName, \"name of the helm release to uninstall\")\n\tcmd.Flags().BoolVar(&options.dryRun, \"dry-run\", false, \"simulate uninstall and output manifests to be deleted\")\n\n\treturn cmd\n}\n\n// run assumes cert-manager was installed as a Helm release named cert-manager.\n// this is not configurable to avoid uninstalling non-cert-manager releases.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/uninstall/uninstall.go"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\tIOStreams: ioStreams,\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"uninstall\",\n\t\tShort: \"Uninstall cert-manager\",\n\t\tLong:  description(setupCtx),\n",
                    "rendered": {
                      "text": "\t\tIOStreams: ioStreams,\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"uninstall\",\n\t\tShort: \"Uninstall cert-manager\",\n\t\tLong:  description(setupCtx),\n",
                      "markdown": "`\t\tIOStreams: ioStreams,\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"uninstall\",\n\t\tShort: \"Uninstall cert-manager\",\n\t\tLong:  description(setupCtx),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/framework/apiserver.go"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 8,
                  "endLine": 133,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tt.Fatal(err)\n\t}\n\n\treturn env.Config, func() {\n\t\tdefer stopWebhook()\n\t\tstopControlPlane()\n\t}\n",
                    "rendered": {
                      "text": "\t\tt.Fatal(err)\n\t}\n\n\treturn env.Config, func() {\n\t\tdefer stopWebhook()\n\t\tstopControlPlane()\n\t}\n",
                      "markdown": "`\t\tt.Fatal(err)\n\t}\n\n\treturn env.Config, func() {\n\t\tdefer stopWebhook()\n\t\tstopControlPlane()\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/framework/apiserver.go"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 41,
                  "endLine": 165,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\t}\n\t\tcrd, err := readCRDsAtPath(codec, converter, path)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed reading CRDs at path %s: %w\", path, err)\n\t\t}\n\t\tcrds = append(crds, crd...)\n\t\treturn nil\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tcrd, err := readCRDsAtPath(codec, converter, path)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed reading CRDs at path %s: %w\", path, err)\n\t\t}\n\t\tcrds = append(crds, crd...)\n\t\treturn nil\n",
                      "markdown": "`\t\t}\n\t\tcrd, err := readCRDsAtPath(codec, converter, path)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed reading CRDs at path %s: %w\", path, err)\n\t\t}\n\t\tcrds = append(crds, crd...)\n\t\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/framework/apiserver.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 45,
                  "endLine": 47,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\ntype StopFunc func()\n\n// controlPlaneOptions has parameters for the control plane of the integration\n// test framework which can be overridden in tests.\ntype controlPlaneOptions struct {\n\tcrdsDir *string\n",
                    "rendered": {
                      "text": "\ntype StopFunc func()\n\n// controlPlaneOptions has parameters for the control plane of the integration\n// test framework which can be overridden in tests.\ntype controlPlaneOptions struct {\n\tcrdsDir *string\n",
                      "markdown": "`\ntype StopFunc func()\n\n// controlPlaneOptions has parameters for the control plane of the integration\n// test framework which can be overridden in tests.\ntype controlPlaneOptions struct {\n\tcrdsDir *string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 27,
                  "endLine": 623,
                  "endColumn": 33,
                  "snippet": {
                    "text": "             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\nendif\n",
                    "rendered": {
                      "text": "             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\nendif\n",
                      "markdown": "`             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\nendif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 38,
                  "endLine": 617,
                  "endColumn": 42,
                  "snippet": {
                    "text": "# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n",
                    "rendered": {
                      "text": "# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n",
                      "markdown": "`# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 104,
                  "endLine": 614,
                  "endColumn": 108,
                  "snippet": {
                    "text": "# to be available on the system. The vendor-go MAKECMDGOALS trick prevents the\n# check for the presence of Go when 'make vendor-go' is run.\n\n# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n",
                    "rendered": {
                      "text": "# to be available on the system. The vendor-go MAKECMDGOALS trick prevents the\n# check for the presence of Go when 'make vendor-go' is run.\n\n# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n",
                      "markdown": "`# to be available on the system. The vendor-go MAKECMDGOALS trick prevents the\n# check for the presence of Go when 'make vendor-go' is run.\n\n# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 27,
                  "endLine": 623,
                  "endColumn": 33,
                  "snippet": {
                    "text": "             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\nendif\n",
                    "rendered": {
                      "text": "             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\nendif\n",
                      "markdown": "`             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\nendif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 27,
                  "endLine": 622,
                  "endColumn": 34,
                  "snippet": {
                    "text": "missing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\n",
                    "rendered": {
                      "text": "missing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\n",
                      "markdown": "`missing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n$(error Missing required tools: $(missing))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 27,
                  "endLine": 621,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n",
                    "rendered": {
                      "text": "\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n",
                      "markdown": "`\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n             && (command -v bash >/dev/null || echo bash))\nifneq ($(missing),)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 27,
                  "endLine": 619,
                  "endColumn": 33,
                  "snippet": {
                    "text": "# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n",
                    "rendered": {
                      "text": "# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n",
                      "markdown": "`# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n             && (command -v git >/dev/null || echo git) \\\n             && (command -v rsync >/dev/null || echo rsync) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 45,
                  "endLine": 617,
                  "endColumn": 50,
                  "snippet": {
                    "text": "# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n",
                    "rendered": {
                      "text": "# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n",
                      "markdown": "`# Gotcha warning: MAKECMDGOALS only contains what the _top level_ make invocation used, and doesn't look at target dependencies\n# i.e. if we have a target \"abc: vendor-go test\" and run \"make abc\", we'll get an error\n# about go being missing even though abc itself depends on vendor-go!\n# That means we need to pass vendor-go at the top level if go is not installed (i.e. \"make vendor-go abc\")\n\nmissing=$(shell (command -v curl >/dev/null || echo curl) \\\n             && (command -v sha256sum >/dev/null || command -v shasum >/dev/null || echo sha256sum) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 1,
                  "endLine": 604,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/$(PREFLIGHT_VERSION)/preflight-linux-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(preflight_linux_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\n#################\n# Other Targets #\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/$(PREFLIGHT_VERSION)/preflight-linux-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(preflight_linux_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\n#################\n# Other Targets #\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/$(PREFLIGHT_VERSION)/preflight-linux-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(preflight_linux_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\n#################\n# Other Targets #\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 1,
                  "endLine": 596,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\tGOWORK=off GOBIN=$(outfile).dir $(GO) install github.com/redhat-openshift-ecosystem/openshift-preflight/cmd/preflight@$(PREFLIGHT_VERSION); \\\n\t\tmv $(outfile).dir/preflight $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n.PRECIOUS: $(DOWNLOAD_DIR)/tools/preflight@$(PREFLIGHT_VERSION)_linux_$(HOST_ARCH)\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\tGOWORK=off GOBIN=$(outfile).dir $(GO) install github.com/redhat-openshift-ecosystem/openshift-preflight/cmd/preflight@$(PREFLIGHT_VERSION); \\\n\t\tmv $(outfile).dir/preflight $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n.PRECIOUS: $(DOWNLOAD_DIR)/tools/preflight@$(PREFLIGHT_VERSION)_linux_$(HOST_ARCH)\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\tGOWORK=off GOBIN=$(outfile).dir $(GO) install github.com/redhat-openshift-ecosystem/openshift-preflight/cmd/preflight@$(PREFLIGHT_VERSION); \\\n\t\tmv $(outfile).dir/preflight $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n.PRECIOUS: $(DOWNLOAD_DIR)/tools/preflight@$(PREFLIGHT_VERSION)_linux_$(HOST_ARCH)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 1,
                  "endLine": 580,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t$(CURL) https://github.com/rclone/rclone/releases/download/$(RCLONE_VERSION)/rclone-$(RCLONE_VERSION)-$(OS)-$(HOST_ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(rclone_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -p $(outfile).zip rclone-$(RCLONE_VERSION)-$(OS)-$(HOST_ARCH)/rclone > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\npreflight_linux_amd64_SHA256SUM=97750df31f31200f073e3b2844628a0a3681a403648c76d12319f83c80666104\n",
                    "rendered": {
                      "text": "\t\t$(CURL) https://github.com/rclone/rclone/releases/download/$(RCLONE_VERSION)/rclone-$(RCLONE_VERSION)-$(OS)-$(HOST_ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(rclone_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -p $(outfile).zip rclone-$(RCLONE_VERSION)-$(OS)-$(HOST_ARCH)/rclone > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\npreflight_linux_amd64_SHA256SUM=97750df31f31200f073e3b2844628a0a3681a403648c76d12319f83c80666104\n",
                      "markdown": "`\t\t$(CURL) https://github.com/rclone/rclone/releases/download/$(RCLONE_VERSION)/rclone-$(RCLONE_VERSION)-$(OS)-$(HOST_ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(rclone_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -p $(outfile).zip rclone-$(RCLONE_VERSION)-$(OS)-$(HOST_ARCH)/rclone > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\npreflight_linux_amd64_SHA256SUM=97750df31f31200f073e3b2844628a0a3681a403648c76d12319f83c80666104\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 1,
                  "endLine": 565,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) -sSfL https://github.com/vmware-tanzu/carvel-ytt/releases/download/$(YTT_VERSION)/ytt-$(HOST_OS)-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(ytt_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nrclone_linux_amd64_SHA256SUM=07c23d21a94d70113d949253478e13261c54d14d72023bb14d96a8da5f3e7722\nrclone_linux_arm64_SHA256SUM=2b44981a1a7d1f432c53c0f2f0b6bcdd410f6491c47dc55428fdac0b85c763f1\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) -sSfL https://github.com/vmware-tanzu/carvel-ytt/releases/download/$(YTT_VERSION)/ytt-$(HOST_OS)-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(ytt_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nrclone_linux_amd64_SHA256SUM=07c23d21a94d70113d949253478e13261c54d14d72023bb14d96a8da5f3e7722\nrclone_linux_arm64_SHA256SUM=2b44981a1a7d1f432c53c0f2f0b6bcdd410f6491c47dc55428fdac0b85c763f1\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) -sSfL https://github.com/vmware-tanzu/carvel-ytt/releases/download/$(YTT_VERSION)/ytt-$(HOST_OS)-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(ytt_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nrclone_linux_amd64_SHA256SUM=07c23d21a94d70113d949253478e13261c54d14d72023bb14d96a8da5f3e7722\nrclone_linux_arm64_SHA256SUM=2b44981a1a7d1f432c53c0f2f0b6bcdd410f6491c47dc55428fdac0b85c763f1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 1,
                  "endLine": 552,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t$(CURL) https://github.com/aquasecurity/trivy/releases/download/$(TRIVY_VERSION)/trivy_$(patsubst v%,%,$(TRIVY_VERSION))_$(OS)-$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(trivy_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz trivy > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm $(outfile).tar.gz\n\nytt_linux_amd64_SHA256SUM=61dec6e00131f990db853afc4b7531c318bd3af3ba18f2cfdbc0d5e83a45c445\n",
                    "rendered": {
                      "text": "\t\t$(CURL) https://github.com/aquasecurity/trivy/releases/download/$(TRIVY_VERSION)/trivy_$(patsubst v%,%,$(TRIVY_VERSION))_$(OS)-$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(trivy_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz trivy > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm $(outfile).tar.gz\n\nytt_linux_amd64_SHA256SUM=61dec6e00131f990db853afc4b7531c318bd3af3ba18f2cfdbc0d5e83a45c445\n",
                      "markdown": "`\t\t$(CURL) https://github.com/aquasecurity/trivy/releases/download/$(TRIVY_VERSION)/trivy_$(patsubst v%,%,$(TRIVY_VERSION))_$(OS)-$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(trivy_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz trivy > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm $(outfile).tar.gz\n\nytt_linux_amd64_SHA256SUM=61dec6e00131f990db853afc4b7531c318bd3af3ba18f2cfdbc0d5e83a45c445\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 1,
                  "endLine": 551,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/aquasecurity/trivy/releases/download/$(TRIVY_VERSION)/trivy_$(patsubst v%,%,$(TRIVY_VERSION))_$(OS)-$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(trivy_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz trivy > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm $(outfile).tar.gz\n\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/aquasecurity/trivy/releases/download/$(TRIVY_VERSION)/trivy_$(patsubst v%,%,$(TRIVY_VERSION))_$(OS)-$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(trivy_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz trivy > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm $(outfile).tar.gz\n\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/aquasecurity/trivy/releases/download/$(TRIVY_VERSION)/trivy_$(patsubst v%,%,$(TRIVY_VERSION))_$(OS)-$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(trivy_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz trivy > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm $(outfile).tar.gz\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 1,
                  "endLine": 535,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t$(CURL) https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOC_VERSION)/protoc-$(PROTOC_VERSION)-$(OS)-$(ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(protoc_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -qq -c $(outfile).zip bin/protoc > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\ntrivy_linux_amd64_SHA256SUM=bbaaf8278b2a9bb49aa848fe23c8bfe19f7db4f5dc7b55a9793357cd78cb5ec5\n",
                    "rendered": {
                      "text": "\t\t$(CURL) https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOC_VERSION)/protoc-$(PROTOC_VERSION)-$(OS)-$(ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(protoc_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -qq -c $(outfile).zip bin/protoc > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\ntrivy_linux_amd64_SHA256SUM=bbaaf8278b2a9bb49aa848fe23c8bfe19f7db4f5dc7b55a9793357cd78cb5ec5\n",
                      "markdown": "`\t\t$(CURL) https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOC_VERSION)/protoc-$(PROTOC_VERSION)-$(OS)-$(ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(protoc_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -qq -c $(outfile).zip bin/protoc > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\ntrivy_linux_amd64_SHA256SUM=bbaaf8278b2a9bb49aa848fe23c8bfe19f7db4f5dc7b55a9793357cd78cb5ec5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 1,
                  "endLine": 518,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t$(CURL) https://github.com/ko-build/ko/releases/download/v$(KO_VERSION)/ko_$(KO_VERSION)_$(OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(ko_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz ko > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nprotoc_linux_amd64_SHA256SUM=6dab2adab83f915126cab53540d48957c40e9e9023969c3e84d44bfb936c7741\n",
                    "rendered": {
                      "text": "\t\t$(CURL) https://github.com/ko-build/ko/releases/download/v$(KO_VERSION)/ko_$(KO_VERSION)_$(OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(ko_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz ko > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nprotoc_linux_amd64_SHA256SUM=6dab2adab83f915126cab53540d48957c40e9e9023969c3e84d44bfb936c7741\n",
                      "markdown": "`\t\t$(CURL) https://github.com/ko-build/ko/releases/download/v$(KO_VERSION)/ko_$(KO_VERSION)_$(OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(ko_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz ko > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nprotoc_linux_amd64_SHA256SUM=6dab2adab83f915126cab53540d48957c40e9e9023969c3e84d44bfb936c7741\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 1,
                  "endLine": 517,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/ko-build/ko/releases/download/v$(KO_VERSION)/ko_$(KO_VERSION)_$(OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(ko_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz ko > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/ko-build/ko/releases/download/v$(KO_VERSION)/ko_$(KO_VERSION)_$(OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(ko_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz ko > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/ko-build/ko/releases/download/v$(KO_VERSION)/ko_$(KO_VERSION)_$(OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(ko_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz ko > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 1,
                  "endLine": 502,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/mikefarah/yq/releases/download/$(YQ_VERSION)/yq_$(HOST_OS)_$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(yq_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nko_linux_amd64_SHA256SUM=aee2caeced511e60c6889a4cfaf9ebe28ec35acb49531b7a90b09e0a963bcff7\nko_linux_arm64_SHA256SUM=45b6ba20084b2199c63dcc738c54f7f6c37ea4e9c7f79eefc286d9947b11d0d1\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/mikefarah/yq/releases/download/$(YQ_VERSION)/yq_$(HOST_OS)_$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(yq_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nko_linux_amd64_SHA256SUM=aee2caeced511e60c6889a4cfaf9ebe28ec35acb49531b7a90b09e0a963bcff7\nko_linux_arm64_SHA256SUM=45b6ba20084b2199c63dcc738c54f7f6c37ea4e9c7f79eefc286d9947b11d0d1\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/mikefarah/yq/releases/download/$(YQ_VERSION)/yq_$(HOST_OS)_$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(yq_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nko_linux_amd64_SHA256SUM=aee2caeced511e60c6889a4cfaf9ebe28ec35acb49531b7a90b09e0a963bcff7\nko_linux_arm64_SHA256SUM=45b6ba20084b2199c63dcc738c54f7f6c37ea4e9c7f79eefc286d9947b11d0d1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 1,
                  "endLine": 489,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t$(CURL) https://github.com/kyverno/kyverno/releases/download/$(KYVERNO_VERSION)/kyverno-cli_$(KYVERNO_VERSION)_$(HOST_OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(kyverno_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz kyverno > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nyq_linux_amd64_SHA256SUM=a2c097180dd884a8d50c956ee16a9cec070f30a7947cf4ebf87d5f36213e9ed7\n",
                    "rendered": {
                      "text": "\t\t$(CURL) https://github.com/kyverno/kyverno/releases/download/$(KYVERNO_VERSION)/kyverno-cli_$(KYVERNO_VERSION)_$(HOST_OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(kyverno_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz kyverno > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nyq_linux_amd64_SHA256SUM=a2c097180dd884a8d50c956ee16a9cec070f30a7947cf4ebf87d5f36213e9ed7\n",
                      "markdown": "`\t\t$(CURL) https://github.com/kyverno/kyverno/releases/download/$(KYVERNO_VERSION)/kyverno-cli_$(KYVERNO_VERSION)_$(HOST_OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(kyverno_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz kyverno > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nyq_linux_amd64_SHA256SUM=a2c097180dd884a8d50c956ee16a9cec070f30a7947cf4ebf87d5f36213e9ed7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 1,
                  "endLine": 488,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/kyverno/kyverno/releases/download/$(KYVERNO_VERSION)/kyverno-cli_$(KYVERNO_VERSION)_$(HOST_OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(kyverno_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz kyverno > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/kyverno/kyverno/releases/download/$(KYVERNO_VERSION)/kyverno-cli_$(KYVERNO_VERSION)_$(HOST_OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(kyverno_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz kyverno > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/kyverno/kyverno/releases/download/$(KYVERNO_VERSION)/kyverno-cli_$(KYVERNO_VERSION)_$(HOST_OS)_$(ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(kyverno_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz kyverno > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 68,
                  "endLine": 474,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/kube-apiserver > $(outfile) && chmod 775 $(outfile)\n\nkyverno_linux_amd64_SHA256SUM=962c396cdb149eadc7d6cc0cb345d3c01b6980d5265c8bb585c55ecd4b8a76b9\nkyverno_linux_arm64_SHA256SUM=dd66d363656685af142ec2fcbaa8ff997951df3241b25a3dbe3eb890da124121\n",
                    "rendered": {
                      "text": "\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/kube-apiserver > $(outfile) && chmod 775 $(outfile)\n\nkyverno_linux_amd64_SHA256SUM=962c396cdb149eadc7d6cc0cb345d3c01b6980d5265c8bb585c55ecd4b8a76b9\nkyverno_linux_arm64_SHA256SUM=dd66d363656685af142ec2fcbaa8ff997951df3241b25a3dbe3eb890da124121\n",
                      "markdown": "`\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/kube-apiserver > $(outfile) && chmod 775 $(outfile)\n\nkyverno_linux_amd64_SHA256SUM=962c396cdb149eadc7d6cc0cb345d3c01b6980d5265c8bb585c55ecd4b8a76b9\nkyverno_linux_arm64_SHA256SUM=dd66d363656685af142ec2fcbaa8ff997951df3241b25a3dbe3eb890da124121\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 1,
                  "endLine": 474,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/kube-apiserver > $(outfile) && chmod 775 $(outfile)\n\nkyverno_linux_amd64_SHA256SUM=962c396cdb149eadc7d6cc0cb345d3c01b6980d5265c8bb585c55ecd4b8a76b9\nkyverno_linux_arm64_SHA256SUM=dd66d363656685af142ec2fcbaa8ff997951df3241b25a3dbe3eb890da124121\n",
                    "rendered": {
                      "text": "\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/kube-apiserver > $(outfile) && chmod 775 $(outfile)\n\nkyverno_linux_amd64_SHA256SUM=962c396cdb149eadc7d6cc0cb345d3c01b6980d5265c8bb585c55ecd4b8a76b9\nkyverno_linux_arm64_SHA256SUM=dd66d363656685af142ec2fcbaa8ff997951df3241b25a3dbe3eb890da124121\n",
                      "markdown": "`\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/kube-apiserver > $(outfile) && chmod 775 $(outfile)\n\nkyverno_linux_amd64_SHA256SUM=962c396cdb149eadc7d6cc0cb345d3c01b6980d5265c8bb585c55ecd4b8a76b9\nkyverno_linux_arm64_SHA256SUM=dd66d363656685af142ec2fcbaa8ff997951df3241b25a3dbe3eb890da124121\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 58,
                  "endLine": 470,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n$(DOWNLOAD_DIR)/tools/etcd@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/etcd > $(outfile) && chmod 775 $(outfile)\n\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n",
                    "rendered": {
                      "text": "\n$(DOWNLOAD_DIR)/tools/etcd@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/etcd > $(outfile) && chmod 775 $(outfile)\n\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n",
                      "markdown": "`\n$(DOWNLOAD_DIR)/tools/etcd@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/etcd > $(outfile) && chmod 775 $(outfile)\n\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 1,
                  "endLine": 470,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n$(DOWNLOAD_DIR)/tools/etcd@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/etcd > $(outfile) && chmod 775 $(outfile)\n\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n",
                    "rendered": {
                      "text": "\n$(DOWNLOAD_DIR)/tools/etcd@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/etcd > $(outfile) && chmod 775 $(outfile)\n\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n",
                      "markdown": "`\n$(DOWNLOAD_DIR)/tools/etcd@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n\t\ttar xfO $< controller-tools/envtest/etcd > $(outfile) && chmod 775 $(outfile)\n\n$(DOWNLOAD_DIR)/tools/kube-apiserver@$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH): $(DOWNLOAD_DIR)/tools/kubebuilder_tools_$(KUBEBUILDER_ASSETS_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz | $(DOWNLOAD_DIR)/tools\n\t@source $(lock_script) $@; \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 48,
                  "endLine": 454,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/Azure/azure-workload-identity/releases/download/$(AZWI_VERSION)/azwi-$(AZWI_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(azwi_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz azwi > $(outfile) && chmod 775 $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubebuilder_tools_linux_amd64_SHA256SUM=b72c0c764c797e6b2cfd6d417abdad7b25d4fbc9f8475edeb44c8dd598999b76\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/Azure/azure-workload-identity/releases/download/$(AZWI_VERSION)/azwi-$(AZWI_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(azwi_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz azwi > $(outfile) && chmod 775 $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubebuilder_tools_linux_amd64_SHA256SUM=b72c0c764c797e6b2cfd6d417abdad7b25d4fbc9f8475edeb44c8dd598999b76\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/Azure/azure-workload-identity/releases/download/$(AZWI_VERSION)/azwi-$(AZWI_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(azwi_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz azwi > $(outfile) && chmod 775 $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubebuilder_tools_linux_amd64_SHA256SUM=b72c0c764c797e6b2cfd6d417abdad7b25d4fbc9f8475edeb44c8dd598999b76\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 1,
                  "endLine": 454,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/Azure/azure-workload-identity/releases/download/$(AZWI_VERSION)/azwi-$(AZWI_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(azwi_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz azwi > $(outfile) && chmod 775 $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubebuilder_tools_linux_amd64_SHA256SUM=b72c0c764c797e6b2cfd6d417abdad7b25d4fbc9f8475edeb44c8dd598999b76\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/Azure/azure-workload-identity/releases/download/$(AZWI_VERSION)/azwi-$(AZWI_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(azwi_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz azwi > $(outfile) && chmod 775 $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubebuilder_tools_linux_amd64_SHA256SUM=b72c0c764c797e6b2cfd6d417abdad7b25d4fbc9f8475edeb44c8dd598999b76\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/Azure/azure-workload-identity/releases/download/$(AZWI_VERSION)/azwi-$(AZWI_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(azwi_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz azwi > $(outfile) && chmod 775 $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubebuilder_tools_linux_amd64_SHA256SUM=b72c0c764c797e6b2cfd6d417abdad7b25d4fbc9f8475edeb44c8dd598999b76\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 1,
                  "endLine": 441,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t$(CURL) https://releases.hashicorp.com/vault/$(VAULT_VERSION)/vault_$(VAULT_VERSION)_$(HOST_OS)_$(HOST_ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(vault_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -qq -c $(outfile).zip > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\nazwi_linux_amd64_SHA256SUM=bbc84c7e5fcaf4c6e3e58064dc66b3b7f70f38a6d8f9cdd07f0669a8499bdd47\n",
                    "rendered": {
                      "text": "\t\t$(CURL) https://releases.hashicorp.com/vault/$(VAULT_VERSION)/vault_$(VAULT_VERSION)_$(HOST_OS)_$(HOST_ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(vault_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -qq -c $(outfile).zip > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\nazwi_linux_amd64_SHA256SUM=bbc84c7e5fcaf4c6e3e58064dc66b3b7f70f38a6d8f9cdd07f0669a8499bdd47\n",
                      "markdown": "`\t\t$(CURL) https://releases.hashicorp.com/vault/$(VAULT_VERSION)/vault_$(VAULT_VERSION)_$(HOST_OS)_$(HOST_ARCH).zip -o $(outfile).zip; \\\n\t\t$(checkhash_script) $(outfile).zip $(vault_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tunzip -qq -c $(outfile).zip > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).zip\n\nazwi_linux_amd64_SHA256SUM=bbc84c7e5fcaf4c6e3e58064dc66b3b7f70f38a6d8f9cdd07f0669a8499bdd47\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 1,
                  "endLine": 428,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/kubernetes-sigs/kind/releases/download/$(KIND_VERSION)/kind-$(HOST_OS)-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(kind_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nvault_linux_amd64_SHA256SUM=146536fd9ef8aa1465894e718a8fe7a9ca13d68761bae900428f01f7ecd83806\nvault_linux_arm64_SHA256SUM=6c7dc39df0058b1fa9e65050227cdb12dc7913153ecd56956911fb973c353590\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/kubernetes-sigs/kind/releases/download/$(KIND_VERSION)/kind-$(HOST_OS)-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(kind_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nvault_linux_amd64_SHA256SUM=146536fd9ef8aa1465894e718a8fe7a9ca13d68761bae900428f01f7ecd83806\nvault_linux_arm64_SHA256SUM=6c7dc39df0058b1fa9e65050227cdb12dc7913153ecd56956911fb973c353590\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://github.com/kubernetes-sigs/kind/releases/download/$(KIND_VERSION)/kind-$(HOST_OS)-$(HOST_ARCH) -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(kind_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nvault_linux_amd64_SHA256SUM=146536fd9ef8aa1465894e718a8fe7a9ca13d68761bae900428f01f7ecd83806\nvault_linux_arm64_SHA256SUM=6c7dc39df0058b1fa9e65050227cdb12dc7913153ecd56956911fb973c353590\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 1,
                  "endLine": 416,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://dl.k8s.io/release/$(KUBECTL_VERSION)/bin/$(HOST_OS)/$(HOST_ARCH)/kubectl -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(kubectl_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nkind_linux_amd64_SHA256SUM=b89aada5a39d620da3fcd16435b7f28d858927dd53f92cbac77686b0588b600d\nkind_linux_arm64_SHA256SUM=2968808d916e12d0a25c56d07c9a1c987163f972513fa8a94a2125a69f9c50eb\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://dl.k8s.io/release/$(KUBECTL_VERSION)/bin/$(HOST_OS)/$(HOST_ARCH)/kubectl -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(kubectl_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nkind_linux_amd64_SHA256SUM=b89aada5a39d620da3fcd16435b7f28d858927dd53f92cbac77686b0588b600d\nkind_linux_arm64_SHA256SUM=2968808d916e12d0a25c56d07c9a1c987163f972513fa8a94a2125a69f9c50eb\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://dl.k8s.io/release/$(KUBECTL_VERSION)/bin/$(HOST_OS)/$(HOST_ARCH)/kubectl -o $(outfile); \\\n\t\t$(checkhash_script) $(outfile) $(kubectl_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\tchmod +x $(outfile)\n\nkind_linux_amd64_SHA256SUM=b89aada5a39d620da3fcd16435b7f28d858927dd53f92cbac77686b0588b600d\nkind_linux_arm64_SHA256SUM=2968808d916e12d0a25c56d07c9a1c987163f972513fa8a94a2125a69f9c50eb\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 1,
                  "endLine": 403,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t$(CURL) https://get.helm.sh/helm-$(HELM_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(helm_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz $(HOST_OS)-$(HOST_ARCH)/helm > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubectl_linux_amd64_SHA256SUM=7c27adc64a84d1c0cc3dcf7bf4b6e916cc00f3f576a2dbac51b318d926032437\n",
                    "rendered": {
                      "text": "\t\t$(CURL) https://get.helm.sh/helm-$(HELM_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(helm_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz $(HOST_OS)-$(HOST_ARCH)/helm > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubectl_linux_amd64_SHA256SUM=7c27adc64a84d1c0cc3dcf7bf4b6e916cc00f3f576a2dbac51b318d926032437\n",
                      "markdown": "`\t\t$(CURL) https://get.helm.sh/helm-$(HELM_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(helm_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz $(HOST_OS)-$(HOST_ARCH)/helm > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\nkubectl_linux_amd64_SHA256SUM=7c27adc64a84d1c0cc3dcf7bf4b6e916cc00f3f576a2dbac51b318d926032437\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 1,
                  "endLine": 402,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://get.helm.sh/helm-$(HELM_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(helm_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz $(HOST_OS)-$(HOST_ARCH)/helm > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://get.helm.sh/helm-$(HELM_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(helm_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz $(HOST_OS)-$(HOST_ARCH)/helm > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\t$(CURL) https://get.helm.sh/helm-$(HELM_VERSION)-$(HOST_OS)-$(HOST_ARCH).tar.gz -o $(outfile).tar.gz; \\\n\t\t$(checkhash_script) $(outfile).tar.gz $(helm_$(HOST_OS)_$(HOST_ARCH)_SHA256SUM); \\\n\t\ttar xfO $(outfile).tar.gz $(HOST_OS)-$(HOST_ARCH)/helm > $(outfile); \\\n\t\tchmod +x $(outfile); \\\n\t\trm -f $(outfile).tar.gz\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 1,
                  "endLine": 372,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t@source $$(lock_script) $$@; \\\n\t\tmkdir -p $$(outfile).dir; \\\n\t\tGOWORK=off GOBIN=$$(outfile).dir $$(GO) install --tags \"$(strip $(go_tags_$1))\" $2@$($(call uc,$1)_VERSION); \\\n\t\tmv $$(outfile).dir/$1 $$(outfile); \\\n\t\trm -rf $$(outfile).dir\nendef\n$(call for_each_kv,go_dependency,$(go_dependencies))\n",
                    "rendered": {
                      "text": "\t@source $$(lock_script) $$@; \\\n\t\tmkdir -p $$(outfile).dir; \\\n\t\tGOWORK=off GOBIN=$$(outfile).dir $$(GO) install --tags \"$(strip $(go_tags_$1))\" $2@$($(call uc,$1)_VERSION); \\\n\t\tmv $$(outfile).dir/$1 $$(outfile); \\\n\t\trm -rf $$(outfile).dir\nendef\n$(call for_each_kv,go_dependency,$(go_dependencies))\n",
                      "markdown": "`\t@source $$(lock_script) $$@; \\\n\t\tmkdir -p $$(outfile).dir; \\\n\t\tGOWORK=off GOBIN=$$(outfile).dir $$(GO) install --tags \"$(strip $(go_tags_$1))\" $2@$($(call uc,$1)_VERSION); \\\n\t\tmv $$(outfile).dir/$1 $$(outfile); \\\n\t\trm -rf $$(outfile).dir\nendef\n$(call for_each_kv,go_dependency,$(go_dependencies))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 1,
                  "endLine": 306,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\ttar xzf $| -C $(outfile).dir; \\\n\t\tmv $(outfile).dir/go $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n###################\n",
                    "rendered": {
                      "text": "\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\ttar xzf $| -C $(outfile).dir; \\\n\t\tmv $(outfile).dir/go $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n###################\n",
                      "markdown": "`\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\ttar xzf $| -C $(outfile).dir; \\\n\t\tmv $(outfile).dir/go $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n###################\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 1,
                  "endLine": 305,
                  "endColumn": 6,
                  "snippet": {
                    "text": "$(GOVENDOR_DIR)/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH)/goroot: | $(DOWNLOAD_DIR)/tools/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz\n\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\ttar xzf $| -C $(outfile).dir; \\\n\t\tmv $(outfile).dir/go $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n",
                    "rendered": {
                      "text": "$(GOVENDOR_DIR)/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH)/goroot: | $(DOWNLOAD_DIR)/tools/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz\n\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\ttar xzf $| -C $(outfile).dir; \\\n\t\tmv $(outfile).dir/go $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n",
                      "markdown": "`$(GOVENDOR_DIR)/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH)/goroot: | $(DOWNLOAD_DIR)/tools/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz\n\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n\t\ttar xzf $| -C $(outfile).dir; \\\n\t\tmv $(outfile).dir/go $(outfile); \\\n\t\trm -rf $(outfile).dir\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 13,
                  "endLine": 301,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t@cd $(dir $@) && $(LN) $(patsubst $(bin_dir)/%,../%,$(word 1,$|)) $(notdir $@)\n\t@touch $@ # making sure the target of the symlink is newer than *_VERSION\n\n# Extract the tar to the $(GOVENDOR_DIR) directory, this directory is not cached across CI runs.\n$(GOVENDOR_DIR)/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH)/goroot: | $(DOWNLOAD_DIR)/tools/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz\n\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n",
                    "rendered": {
                      "text": "\t@cd $(dir $@) && $(LN) $(patsubst $(bin_dir)/%,../%,$(word 1,$|)) $(notdir $@)\n\t@touch $@ # making sure the target of the symlink is newer than *_VERSION\n\n# Extract the tar to the $(GOVENDOR_DIR) directory, this directory is not cached across CI runs.\n$(GOVENDOR_DIR)/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH)/goroot: | $(DOWNLOAD_DIR)/tools/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz\n\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n",
                      "markdown": "`\t@cd $(dir $@) && $(LN) $(patsubst $(bin_dir)/%,../%,$(word 1,$|)) $(notdir $@)\n\t@touch $@ # making sure the target of the symlink is newer than *_VERSION\n\n# Extract the tar to the $(GOVENDOR_DIR) directory, this directory is not cached across CI runs.\n$(GOVENDOR_DIR)/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH)/goroot: | $(DOWNLOAD_DIR)/tools/go@$(VENDORED_GO_VERSION)_$(HOST_OS)_$(HOST_ARCH).tar.gz\n\t@source $(lock_script) $@; \\\n\t\tmkdir -p $(outfile).dir; \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 40,
                  "endLine": 185,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n# to $(bin_dir)/tools/xxx\" operation simultaneously without issues (both\n# will perform the action and the second time the link will be overwritten).\n#\n# -s = Create a symbolic link\n# -f = Force the creation of the link (replace existing links)\n",
                    "rendered": {
                      "text": "# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n# to $(bin_dir)/tools/xxx\" operation simultaneously without issues (both\n# will perform the action and the second time the link will be overwritten).\n#\n# -s = Create a symbolic link\n# -f = Force the creation of the link (replace existing links)\n",
                      "markdown": "`# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n# to $(bin_dir)/tools/xxx\" operation simultaneously without issues (both\n# will perform the action and the second time the link will be overwritten).\n#\n# -s = Create a symbolic link\n# -f = Force the creation of the link (replace existing links)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 7,
                  "endLine": 180,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# --location = follow redirects from the server\n# --retry = the number of times to retry a failed attempt to connect\n# --retry-connrefused = retry even if the initial connection was refused\nCURL := curl --silent --show-error --fail --location --retry 10 --retry-connrefused\n\n# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n",
                    "rendered": {
                      "text": "# --location = follow redirects from the server\n# --retry = the number of times to retry a failed attempt to connect\n# --retry-connrefused = retry even if the initial connection was refused\nCURL := curl --silent --show-error --fail --location --retry 10 --retry-connrefused\n\n# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n",
                      "markdown": "`# --location = follow redirects from the server\n# --retry = the number of times to retry a failed attempt to connect\n# --retry-connrefused = retry even if the initial connection was refused\nCURL := curl --silent --show-error --fail --location --retry 10 --retry-connrefused\n\n# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 72,
                  "endLine": 180,
                  "endColumn": 5,
                  "snippet": {
                    "text": "# --fail = exit with a nonzero error code without the response from the server when there's an HTTP error\n# --location = follow redirects from the server\n# --retry = the number of times to retry a failed attempt to connect\n# --retry-connrefused = retry even if the initial connection was refused\nCURL := curl --silent --show-error --fail --location --retry 10 --retry-connrefused\n\n# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n",
                    "rendered": {
                      "text": "# --fail = exit with a nonzero error code without the response from the server when there's an HTTP error\n# --location = follow redirects from the server\n# --retry = the number of times to retry a failed attempt to connect\n# --retry-connrefused = retry even if the initial connection was refused\nCURL := curl --silent --show-error --fail --location --retry 10 --retry-connrefused\n\n# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n",
                      "markdown": "`# --fail = exit with a nonzero error code without the response from the server when there's an HTTP error\n# --location = follow redirects from the server\n# --retry = the number of times to retry a failed attempt to connect\n# --retry-connrefused = retry even if the initial connection was refused\nCURL := curl --silent --show-error --fail --location --retry 10 --retry-connrefused\n\n# LN is expected to be an atomic action, meaning that two Make processes\n# can run the \"link $(DOWNLOAD_DIR)/tools/xxx@$(XXX_VERSION)_$(HOST_OS)_$(HOST_ARCH)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 34,
                  "endLine": 172,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# When switching branches which use different versions of the tools, we\n# need a way to re-trigger the symlinking from $(bin_dir)/downloaded to $(bin_dir)/tools.\n$(bin_dir)/scratch/%_VERSION: FORCE | $(bin_dir)/scratch\n\t@test \"$($*_VERSION)\" == \"$(shell cat $@ 2>/dev/null)\" || echo $($*_VERSION) > $@\n\n# --silent = don't print output like progress meters\n# --show-error = but do print errors when they happen\n",
                    "rendered": {
                      "text": "# When switching branches which use different versions of the tools, we\n# need a way to re-trigger the symlinking from $(bin_dir)/downloaded to $(bin_dir)/tools.\n$(bin_dir)/scratch/%_VERSION: FORCE | $(bin_dir)/scratch\n\t@test \"$($*_VERSION)\" == \"$(shell cat $@ 2>/dev/null)\" || echo $($*_VERSION) > $@\n\n# --silent = don't print output like progress meters\n# --show-error = but do print errors when they happen\n",
                      "markdown": "`# When switching branches which use different versions of the tools, we\n# need a way to re-trigger the symlinking from $(bin_dir)/downloaded to $(bin_dir)/tools.\n$(bin_dir)/scratch/%_VERSION: FORCE | $(bin_dir)/scratch\n\t@test \"$($*_VERSION)\" == \"$(shell cat $@ 2>/dev/null)\" || echo $($*_VERSION) > $@\n\n# --silent = don't print output like progress meters\n# --show-error = but do print errors when they happen\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 53,
                  "endLine": 111,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# If there is no go.mod file (which is only the case for the makefile-modules\n# repo), then we default to a version that we know exists. We have to do this\n# because otherwise the awk failure renders the whole makefile unusable.\ndetected_ginkgo_version := $(shell [[ -f go.mod ]] && awk '/ginkgo\\/v2/ {print $$2}' go.mod || echo \"v2.13.2\")\ntools += ginkgo=$(detected_ginkgo_version)\n# https://pkg.go.dev/github.com/cert-manager/klone?tab=versions\ntools += klone=v0.1.0\n",
                    "rendered": {
                      "text": "# If there is no go.mod file (which is only the case for the makefile-modules\n# repo), then we default to a version that we know exists. We have to do this\n# because otherwise the awk failure renders the whole makefile unusable.\ndetected_ginkgo_version := $(shell [[ -f go.mod ]] && awk '/ginkgo\\/v2/ {print $$2}' go.mod || echo \"v2.13.2\")\ntools += ginkgo=$(detected_ginkgo_version)\n# https://pkg.go.dev/github.com/cert-manager/klone?tab=versions\ntools += klone=v0.1.0\n",
                      "markdown": "`# If there is no go.mod file (which is only the case for the makefile-modules\n# repo), then we default to a version that we know exists. We have to do this\n# because otherwise the awk failure renders the whole makefile unusable.\ndetected_ginkgo_version := $(shell [[ -f go.mod ]] && awk '/ginkgo\\/v2/ {print $$2}' go.mod || echo \"v2.13.2\")\ntools += ginkgo=$(detected_ginkgo_version)\n# https://pkg.go.dev/github.com/cert-manager/klone?tab=versions\ntools += klone=v0.1.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 23,
                  "endLine": 110,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# The gingko version should be kept in sync with the version used in code.\n# If there is no go.mod file (which is only the case for the makefile-modules\n# repo), then we default to a version that we know exists. We have to do this\n# because otherwise the awk failure renders the whole makefile unusable.\ndetected_ginkgo_version := $(shell [[ -f go.mod ]] && awk '/ginkgo\\/v2/ {print $$2}' go.mod || echo \"v2.13.2\")\ntools += ginkgo=$(detected_ginkgo_version)\n# https://pkg.go.dev/github.com/cert-manager/klone?tab=versions\n",
                    "rendered": {
                      "text": "# The gingko version should be kept in sync with the version used in code.\n# If there is no go.mod file (which is only the case for the makefile-modules\n# repo), then we default to a version that we know exists. We have to do this\n# because otherwise the awk failure renders the whole makefile unusable.\ndetected_ginkgo_version := $(shell [[ -f go.mod ]] && awk '/ginkgo\\/v2/ {print $$2}' go.mod || echo \"v2.13.2\")\ntools += ginkgo=$(detected_ginkgo_version)\n# https://pkg.go.dev/github.com/cert-manager/klone?tab=versions\n",
                      "markdown": "`# The gingko version should be kept in sync with the version used in code.\n# If there is no go.mod file (which is only the case for the makefile-modules\n# repo), then we default to a version that we know exists. We have to do this\n# because otherwise the awk failure renders the whole makefile unusable.\ndetected_ginkgo_version := $(shell [[ -f go.mod ]] && awk '/ginkgo\\/v2/ {print $$2}' go.mod || echo \"v2.13.2\")\ntools += ginkgo=$(detected_ginkgo_version)\n# https://pkg.go.dev/github.com/cert-manager/klone?tab=versions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 6,
                  "endLine": 46,
                  "snippet": {
                    "text": "# variables: https://stackoverflow.com/questions/54726457\nexport PATH := $(CURDIR)/$(bin_dir)/tools:$(PATH)\n\nCTR ?= docker\n.PHONY: __require-ctr\nifneq ($(shell command -v $(CTR) >/dev/null || echo notfound),)\n__require-ctr:\n\t@:$(error \"$(CTR) (or set CTR to a docker-compatible tool)\")\n",
                    "rendered": {
                      "text": "# variables: https://stackoverflow.com/questions/54726457\nexport PATH := $(CURDIR)/$(bin_dir)/tools:$(PATH)\n\nCTR ?= docker\n.PHONY: __require-ctr\nifneq ($(shell command -v $(CTR) >/dev/null || echo notfound),)\n__require-ctr:\n\t@:$(error \"$(CTR) (or set CTR to a docker-compatible tool)\")\n",
                      "markdown": "`# variables: https://stackoverflow.com/questions/54726457\nexport PATH := $(CURDIR)/$(bin_dir)/tools:$(PATH)\n\nCTR ?= docker\n.PHONY: __require-ctr\nifneq ($(shell command -v $(CTR) >/dev/null || echo notfound),)\n__require-ctr:\n\t@:$(error \"$(CTR) (or set CTR to a docker-compatible tool)\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 37,
                  "endLine": 40,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# the version of the tools, this symlink gets updated.\n\n# Let's have $(bin_dir)/tools in front of the PATH so that we don't inadvertently\n# pick up the wrong binary somewhere. Watch out, $(shell echo $$PATH) will\n# still print the original PATH, since GNU make does not honor exported\n# variables: https://stackoverflow.com/questions/54726457\nexport PATH := $(CURDIR)/$(bin_dir)/tools:$(PATH)\n",
                    "rendered": {
                      "text": "# the version of the tools, this symlink gets updated.\n\n# Let's have $(bin_dir)/tools in front of the PATH so that we don't inadvertently\n# pick up the wrong binary somewhere. Watch out, $(shell echo $$PATH) will\n# still print the original PATH, since GNU make does not honor exported\n# variables: https://stackoverflow.com/questions/54726457\nexport PATH := $(CURDIR)/$(bin_dir)/tools:$(PATH)\n",
                      "markdown": "`# the version of the tools, this symlink gets updated.\n\n# Let's have $(bin_dir)/tools in front of the PATH so that we don't inadvertently\n# pick up the wrong binary somewhere. Watch out, $(shell echo $$PATH) will\n# still print the original PATH, since GNU make does not honor exported\n# variables: https://stackoverflow.com/questions/54726457\nexport PATH := $(CURDIR)/$(bin_dir)/tools:$(PATH)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/00_mod.mk"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 36,
                  "endLine": 31,
                  "snippet": {
                    "text": "checkhash_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/checkhash.sh\nlock_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/lock.sh\n\n# $outfile is a variable in the lock script\noutfile := $$outfile\n\nfor_each_kv = $(foreach item,$2,$(eval $(call $1,$(word 1,$(subst =, ,$(item))),$(word 2,$(subst =, ,$(item))))))\n\n",
                    "rendered": {
                      "text": "checkhash_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/checkhash.sh\nlock_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/lock.sh\n\n# $outfile is a variable in the lock script\noutfile := $$outfile\n\nfor_each_kv = $(foreach item,$2,$(eval $(call $1,$(word 1,$(subst =, ,$(item))),$(word 2,$(subst =, ,$(item))))))\n\n",
                      "markdown": "`checkhash_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/checkhash.sh\nlock_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/lock.sh\n\n# $outfile is a variable in the lock script\noutfile := $$outfile\n\nfor_each_kv = $(foreach item,$2,$(eval $(call $1,$(word 1,$(subst =, ,$(item))),$(word 2,$(subst =, ,$(item))))))\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/completion/bash.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 29,
                  "endLine": 40,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n`),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n",
                    "rendered": {
                      "text": "  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n`),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n",
                      "markdown": "`  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n`),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/completion/bash.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 29,
                  "endLine": 37,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  $ source <({{.BuildName}} completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n",
                    "rendered": {
                      "text": "  $ source <({{.BuildName}} completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n",
                      "markdown": "`  $ source <({{.BuildName}} completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/completion/bash.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 49,
                  "endLine": 31,
                  "endColumn": 55,
                  "snippet": {
                    "text": "func newCmdCompletionBash(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"bash\",\n\t\tShort: \"Generate cert-manager CLI scripts for a Bash shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\nBash:\n  $ source <({{.BuildName}} completion bash)\n",
                    "rendered": {
                      "text": "func newCmdCompletionBash(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"bash\",\n\t\tShort: \"Generate cert-manager CLI scripts for a Bash shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\nBash:\n  $ source <({{.BuildName}} completion bash)\n",
                      "markdown": "`func newCmdCompletionBash(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"bash\",\n\t\tShort: \"Generate cert-manager CLI scripts for a Bash shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\nBash:\n  $ source <({{.BuildName}} completion bash)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/completion/bash.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 29,
                  "endLine": 40,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n`),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n",
                    "rendered": {
                      "text": "  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n`),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n",
                      "markdown": "`  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n`),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/completion/bash.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 29,
                  "endLine": 37,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  $ source <({{.BuildName}} completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n",
                    "rendered": {
                      "text": "  $ source <({{.BuildName}} completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n",
                      "markdown": "`  $ source <({{.BuildName}} completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ {{.BuildName}} completion bash > /etc/bash_completion.d/{{.BuildName}}\n\n  # macOS:\n  $ {{.BuildName}} completion bash > /usr/local/etc/bash_completion.d/{{.BuildName}}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/completion/bash.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 49,
                  "endLine": 31,
                  "endColumn": 55,
                  "snippet": {
                    "text": "func newCmdCompletionBash(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"bash\",\n\t\tShort: \"Generate cert-manager CLI scripts for a Bash shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\nBash:\n  $ source <({{.BuildName}} completion bash)\n",
                    "rendered": {
                      "text": "func newCmdCompletionBash(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"bash\",\n\t\tShort: \"Generate cert-manager CLI scripts for a Bash shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\nBash:\n  $ source <({{.BuildName}} completion bash)\n",
                      "markdown": "`func newCmdCompletionBash(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"bash\",\n\t\tShort: \"Generate cert-manager CLI scripts for a Bash shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\nBash:\n  $ source <({{.BuildName}} completion bash)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/completion/zsh.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 29,
                  "endLine": 38,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  $ echo \"autoload -U compinit; compinit\" >> ~/.zshrc\n\n  # To load completions for each session, execute once:\n  $ {{.BuildName}} completion zsh > \"${fpath[1]}/_{{.BuildName}}\"\n  # You will need to start a new shell for this setup to take effect.\n`),\n\t\tDisableFlagsInUseLine: true,\n",
                    "rendered": {
                      "text": "  $ echo \"autoload -U compinit; compinit\" >> ~/.zshrc\n\n  # To load completions for each session, execute once:\n  $ {{.BuildName}} completion zsh > \"${fpath[1]}/_{{.BuildName}}\"\n  # You will need to start a new shell for this setup to take effect.\n`),\n\t\tDisableFlagsInUseLine: true,\n",
                      "markdown": "`  $ echo \"autoload -U compinit; compinit\" >> ~/.zshrc\n\n  # To load completions for each session, execute once:\n  $ {{.BuildName}} completion zsh > \"${fpath[1]}/_{{.BuildName}}\"\n  # You will need to start a new shell for this setup to take effect.\n`),\n\t\tDisableFlagsInUseLine: true,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/completion/zsh.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 51,
                  "endLine": 31,
                  "endColumn": 56,
                  "snippet": {
                    "text": "func newCmdCompletionZSH(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"zsh\",\n\t\tShort: \"Generation cert-manager CLI scripts for a ZSH shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\n  # If shell completion is not already enabled in your environment,\n  # you will need to enable it.  You can execute the following once:\n",
                    "rendered": {
                      "text": "func newCmdCompletionZSH(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"zsh\",\n\t\tShort: \"Generation cert-manager CLI scripts for a ZSH shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\n  # If shell completion is not already enabled in your environment,\n  # you will need to enable it.  You can execute the following once:\n",
                      "markdown": "`func newCmdCompletionZSH(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"zsh\",\n\t\tShort: \"Generation cert-manager CLI scripts for a ZSH shell\",\n\t\tLong: build.WithTemplate(setupCtx, `To load completions:\n  # If shell completion is not already enabled in your environment,\n  # you will need to enable it.  You can execute the following once:\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/renew/renew_test.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 2,
                  "endLine": 131,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\tfor name, test := range tests {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tcmd := NewCmdRenew(context.TODO(), genericclioptions.IOStreams{})\n\n\t\t\t// This is normally registered in the main func. We add here to test\n\t\t\t// against flags normally inherited.\n",
                    "rendered": {
                      "text": "\n\tfor name, test := range tests {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tcmd := NewCmdRenew(context.TODO(), genericclioptions.IOStreams{})\n\n\t\t\t// This is normally registered in the main func. We add here to test\n\t\t\t// against flags normally inherited.\n",
                      "markdown": "`\n\tfor name, test := range tests {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tcmd := NewCmdRenew(context.TODO(), genericclioptions.IOStreams{})\n\n\t\t\t// This is normally registered in the main func. We add here to test\n\t\t\t// against flags normally inherited.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/renew/renew_test.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 31,
                  "endLine": 88,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t\texpErr: true,\n\t\t},\n\t\t\"If --namespace specified and at least one argument, don't error\": {\n\t\t\toptions: &Options{},\n\t\t\targs:    []string{\"bar\"},\n\t\t\tsetStringFlags: []stringFlag{\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t\texpErr: true,\n\t\t},\n\t\t\"If --namespace specified and at least one argument, don't error\": {\n\t\t\toptions: &Options{},\n\t\t\targs:    []string{\"bar\"},\n\t\t\tsetStringFlags: []stringFlag{\n",
                      "markdown": "`\t\t\t},\n\t\t\texpErr: true,\n\t\t},\n\t\t\"If --namespace specified and at least one argument, don't error\": {\n\t\t\toptions: &Options{},\n\t\t\targs:    []string{\"bar\"},\n\t\t\tsetStringFlags: []stringFlag{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/renew/renew.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 64,
                  "endLine": 187,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n\t\tdefault:\n\t\t\tfor _, crtName := range args {\n\t\t\t\tcrt, err := o.CMClient.CertmanagerV1().Certificates(ns.Name).Get(ctx, crtName, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\n\t\tdefault:\n\t\t\tfor _, crtName := range args {\n\t\t\t\tcrt, err := o.CMClient.CertmanagerV1().Certificates(ns.Name).Get(ctx, crtName, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n",
                      "markdown": "`\n\t\tdefault:\n\t\t\tfor _, crtName := range args {\n\t\t\t\tcrt, err := o.CMClient.CertmanagerV1().Certificates(ns.Name).Get(ctx, crtName, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/renew/renew.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 7,
                  "endLine": 92,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(cmd *cobra.Command, args []string) error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(cmd *cobra.Command, args []string) error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(cmd *cobra.Command, args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/renew/renew.go"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "endColumn": 5,
                  "snippet": {
                    "text": "// NewCmdRenew returns a cobra command for renewing Certificates\nfunc NewCmdRenew(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\tcmd := &cobra.Command{\n\t\tUse:   \"renew\",\n\t\tShort: \"Mark a Certificate for manual renewal\",\n\t\tLong: templates.LongDesc(`\n",
                    "rendered": {
                      "text": "// NewCmdRenew returns a cobra command for renewing Certificates\nfunc NewCmdRenew(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\tcmd := &cobra.Command{\n\t\tUse:   \"renew\",\n\t\tShort: \"Mark a Certificate for manual renewal\",\n\t\tLong: templates.LongDesc(`\n",
                      "markdown": "`// NewCmdRenew returns a cobra command for renewing Certificates\nfunc NewCmdRenew(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\tcmd := &cobra.Command{\n\t\tUse:   \"renew\",\n\t\tShort: \"Mark a Certificate for manual renewal\",\n\t\tLong: templates.LongDesc(`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/upgrade/migrateapiversion/command.go"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 7,
                  "endLine": 96,
                  "snippet": {
                    "text": "\tcmd.Flags().IntVar(&o.burst, \"burst\", 10, \"Maximum burst value for queries set to the apiserver from the client.\")\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(_ []string) error {\n",
                    "rendered": {
                      "text": "\tcmd.Flags().IntVar(&o.burst, \"burst\", 10, \"Maximum burst value for queries set to the apiserver from the client.\")\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(_ []string) error {\n",
                      "markdown": "`\tcmd.Flags().IntVar(&o.burst, \"burst\", 10, \"Maximum burst value for queries set to the apiserver from the client.\")\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(_ []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/upgrade/migrateapiversion/command.go"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "endColumn": 5,
                  "snippet": {
                    "text": "// to force a new storage version to be used.\nfunc NewCmdMigrate(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\tcmd := &cobra.Command{\n\t\tUse:   \"migrate-api-version\",\n\t\tShort: \"Migrate all existing persisted cert-manager resources to the v1 API version\",\n\t\tLong: templates.LongDesc(`\n",
                    "rendered": {
                      "text": "// to force a new storage version to be used.\nfunc NewCmdMigrate(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\tcmd := &cobra.Command{\n\t\tUse:   \"migrate-api-version\",\n\t\tShort: \"Migrate all existing persisted cert-manager resources to the v1 API version\",\n\t\tLong: templates.LongDesc(`\n",
                      "markdown": "`// to force a new storage version to be used.\nfunc NewCmdMigrate(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\tcmd := &cobra.Command{\n\t\tUse:   \"migrate-api-version\",\n\t\tShort: \"Migrate all existing persisted cert-manager resources to the v1 API version\",\n\t\tLong: templates.LongDesc(`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/upgrade/migrateapiversion/migrator.go"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 20,
                  "endLine": 204,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tfor _, crd := range crds {\n\t\t// fetch a fresh copy of the CRD to avoid any conflict errors\n\t\tfreshCRD := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: crd.Name}, freshCRD); err != nil {\n\t\t\treturn err\n\t\t}\n\n",
                    "rendered": {
                      "text": "\tfor _, crd := range crds {\n\t\t// fetch a fresh copy of the CRD to avoid any conflict errors\n\t\tfreshCRD := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: crd.Name}, freshCRD); err != nil {\n\t\t\treturn err\n\t\t}\n\n",
                      "markdown": "`\tfor _, crd := range crds {\n\t\t// fetch a fresh copy of the CRD to avoid any conflict errors\n\t\tfreshCRD := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: crd.Name}, freshCRD); err != nil {\n\t\t\treturn err\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/upgrade/migrateapiversion/migrator.go"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 20,
                  "endLine": 147,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tvar requireMigration []*apiext.CustomResourceDefinition\n\tfor _, name := range names {\n\t\tcrd := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: name}, crd); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// If no versions are stored, there's nothing to migrate.\n",
                    "rendered": {
                      "text": "\tvar requireMigration []*apiext.CustomResourceDefinition\n\tfor _, name := range names {\n\t\tcrd := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: name}, crd); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// If no versions are stored, there's nothing to migrate.\n",
                      "markdown": "`\tvar requireMigration []*apiext.CustomResourceDefinition\n\tfor _, name := range names {\n\t\tcrd := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: name}, crd); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// If no versions are stored, there's nothing to migrate.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/upgrade/migrateapiversion/migrator.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 20,
                  "endLine": 125,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tvar crds []*apiext.CustomResourceDefinition\n\tfor _, crdName := range names {\n\t\tcrd := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\t\treturn false, nil, err\n\t\t}\n\n",
                    "rendered": {
                      "text": "\tvar crds []*apiext.CustomResourceDefinition\n\tfor _, crdName := range names {\n\t\tcrd := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\t\treturn false, nil, err\n\t\t}\n\n",
                      "markdown": "`\tvar crds []*apiext.CustomResourceDefinition\n\tfor _, crdName := range names {\n\t\tcrd := &apiext.CustomResourceDefinition{}\n\t\tif err := m.Client.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\t\treturn false, nil, err\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/upgrade/migrateapiversion/migrator.go"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 86,
                  "endLine": 166,
                  "endColumn": 90,
                  "snippet": {
                    "text": "func (m *Migrator) migrateResourcesForCRD(ctx context.Context, crd *apiext.CustomResourceDefinition) error {\n\tstartTime := time.Now()\n\ttimeFormat := \"15:04:05\"\n\tfmt.Fprintf(m.Out, \"Migrating %q objects in group %q - this may take a while (started at %s)...\\n\", crd.Spec.Names.Kind, crd.Spec.Group, startTime.Format(timeFormat))\n\tlist := &unstructured.UnstructuredList{}\n\tlist.SetGroupVersionKind(schema.GroupVersionKind{\n\t\tGroup:   crd.Spec.Group,\n",
                    "rendered": {
                      "text": "func (m *Migrator) migrateResourcesForCRD(ctx context.Context, crd *apiext.CustomResourceDefinition) error {\n\tstartTime := time.Now()\n\ttimeFormat := \"15:04:05\"\n\tfmt.Fprintf(m.Out, \"Migrating %q objects in group %q - this may take a while (started at %s)...\\n\", crd.Spec.Names.Kind, crd.Spec.Group, startTime.Format(timeFormat))\n\tlist := &unstructured.UnstructuredList{}\n\tlist.SetGroupVersionKind(schema.GroupVersionKind{\n\t\tGroup:   crd.Spec.Group,\n",
                      "markdown": "`func (m *Migrator) migrateResourcesForCRD(ctx context.Context, crd *apiext.CustomResourceDefinition) error {\n\tstartTime := time.Now()\n\ttimeFormat := \"15:04:05\"\n\tfmt.Fprintf(m.Out, \"Migrating %q objects in group %q - this may take a while (started at %s)...\\n\", crd.Spec.Names.Kind, crd.Spec.Group, startTime.Format(timeFormat))\n\tlist := &unstructured.UnstructuredList{}\n\tlist.SetGroupVersionKind(schema.GroupVersionKind{\n\t\tGroup:   crd.Spec.Group,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/upgrade/migrateapiversion/migrator.go"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 51,
                  "endLine": 68,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n// Run begins the migration of all the named CRDs.\n// It will attempt to migrate all resources defined as part of these CRDs to the\n// given 'targetVersion', and after completion will update the `status.storedVersions`\n// field on the corresponding CRD version to only contain the given targetVersion.\n// Returns 'true' if a migration was actually performed, and false if migration was not required.\nfunc (m *Migrator) Run(ctx context.Context, targetVersion string, names []string) (bool, error) {\n",
                    "rendered": {
                      "text": "\n// Run begins the migration of all the named CRDs.\n// It will attempt to migrate all resources defined as part of these CRDs to the\n// given 'targetVersion', and after completion will update the `status.storedVersions`\n// field on the corresponding CRD version to only contain the given targetVersion.\n// Returns 'true' if a migration was actually performed, and false if migration was not required.\nfunc (m *Migrator) Run(ctx context.Context, targetVersion string, names []string) (bool, error) {\n",
                      "markdown": "`\n// Run begins the migration of all the named CRDs.\n// It will attempt to migrate all resources defined as part of these CRDs to the\n// given 'targetVersion', and after completion will update the `status.storedVersions`\n// field on the corresponding CRD version to only contain the given targetVersion.\n// Returns 'true' if a migration was actually performed, and false if migration was not required.\nfunc (m *Migrator) Run(ctx context.Context, targetVersion string, names []string) (bool, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/inspect/secret/secret_test.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 35,
                  "endLine": 75,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\tpanic(err)\n\t}\n\n\ttestCertKey, err := pki.GenerateECPrivateKey(256)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n",
                    "rendered": {
                      "text": "\t\tpanic(err)\n\t}\n\n\ttestCertKey, err := pki.GenerateECPrivateKey(256)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n",
                      "markdown": "`\t\tpanic(err)\n\t}\n\n\ttestCertKey, err := pki.GenerateECPrivateKey(256)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/inspect/secret/secret_test.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 29,
                  "endLine": 41,
                  "endColumn": 39,
                  "snippet": {
                    "text": ")\n\nfunc init() {\n\tcaKey, err := pki.GenerateECPrivateKey(256)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n",
                    "rendered": {
                      "text": ")\n\nfunc init() {\n\tcaKey, err := pki.GenerateECPrivateKey(256)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n",
                      "markdown": "`)\n\nfunc init() {\n\tcaKey, err := pki.GenerateECPrivateKey(256)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/inspect/secret/secret_test.go"
                },
                "region": {
                  "startLine": 355,
                  "endLine": 355,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\t\t- cert-manager.test\n\tURIs: \n\t\t- spiffe://cert-manager.test\n\tIP Addresses: \n\t\t- 10.0.0.1\n\tEmail Addresses: \n\t\t- test@cert-manager.io\n",
                    "rendered": {
                      "text": "\t\t- cert-manager.test\n\tURIs: \n\t\t- spiffe://cert-manager.test\n\tIP Addresses: \n\t\t- 10.0.0.1\n\tEmail Addresses: \n\t\t- test@cert-manager.io\n",
                      "markdown": "`\t\t- cert-manager.test\n\tURIs: \n\t\t- spiffe://cert-manager.test\n\tIP Addresses: \n\t\t- 10.0.0.1\n\tEmail Addresses: \n\t\t- test@cert-manager.io\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/inspect/secret/secret.go"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 58,
                  "endLine": 139,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n// Run executes status certificate command\nfunc (o *Options) Run(ctx context.Context, args []string, stdout io.Writer) error {\n\tsecret, err := o.KubeClient.CoreV1().Secrets(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when finding Secret %q: %w\\n\", args[0], err)\n\t}\n",
                    "rendered": {
                      "text": "\n// Run executes status certificate command\nfunc (o *Options) Run(ctx context.Context, args []string, stdout io.Writer) error {\n\tsecret, err := o.KubeClient.CoreV1().Secrets(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when finding Secret %q: %w\\n\", args[0], err)\n\t}\n",
                      "markdown": "`\n// Run executes status certificate command\nfunc (o *Options) Run(ctx context.Context, args []string, stdout io.Writer) error {\n\tsecret, err := o.KubeClient.CoreV1().Secrets(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when finding Secret %q: %w\\n\", args[0], err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/inspect/secret/secret.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 7,
                  "endLine": 124,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/inspect/secret/secret.go"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdInspectSecret(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"secret\",\n\t\tShort: \"Get details about a kubernetes.io/tls typed secret\",\n\t\tLong: templates.LongDesc(`\n",
                    "rendered": {
                      "text": "func NewCmdInspectSecret(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"secret\",\n\t\tShort: \"Get details about a kubernetes.io/tls typed secret\",\n\t\tLong: templates.LongDesc(`\n",
                      "markdown": "`func NewCmdInspectSecret(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"secret\",\n\t\tShort: \"Get details about a kubernetes.io/tls typed secret\",\n\t\tLong: templates.LongDesc(`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/inspect/secret/secret.go"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "endColumn": 4,
                  "snippet": {
                    "text": "const validForTemplate = `Valid for:\n\tDNS Names: {{ .DNSNames }}\n\tURIs: {{ .URIs }}\n\tIP Addresses: {{ .IPAddresses }}\n\tEmail Addresses: {{ .EmailAddresses }}\n\tUsages: {{ .KeyUsage }}`\n\n",
                    "rendered": {
                      "text": "const validForTemplate = `Valid for:\n\tDNS Names: {{ .DNSNames }}\n\tURIs: {{ .URIs }}\n\tIP Addresses: {{ .IPAddresses }}\n\tEmail Addresses: {{ .EmailAddresses }}\n\tUsages: {{ .KeyUsage }}`\n\n",
                      "markdown": "`const validForTemplate = `Valid for:\n\tDNS Names: {{ .DNSNames }}\n\tURIs: {{ .URIs }}\n\tIP Addresses: {{ .IPAddresses }}\n\tEmail Addresses: {{ .EmailAddresses }}\n\tUsages: {{ .KeyUsage }}`\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/install_framework/framework.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 46,
                  "endLine": 82,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\t\t}\n}\n\nfunc createKubeConfigFile(t *testing.T, user *envtest.AuthenticatedUser) (string, CleanupFunction) {\n\ttmpfile, err := os.CreateTemp(\"\", \"config\")\n\tif err != nil {\n\t\tt.Fatal(err)\n",
                    "rendered": {
                      "text": "\t\t}\n}\n\nfunc createKubeConfigFile(t *testing.T, user *envtest.AuthenticatedUser) (string, CleanupFunction) {\n\ttmpfile, err := os.CreateTemp(\"\", \"config\")\n\tif err != nil {\n\t\tt.Fatal(err)\n",
                      "markdown": "`\t\t}\n}\n\nfunc createKubeConfigFile(t *testing.T, user *envtest.AuthenticatedUser) (string, CleanupFunction) {\n\ttmpfile, err := os.CreateTemp(\"\", \"config\")\n\tif err != nil {\n\t\tt.Fatal(err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 13,
                  "endLine": 319,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n",
                    "rendered": {
                      "text": "\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n",
                      "markdown": "`\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 13,
                  "endLine": 260,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n",
                    "rendered": {
                      "text": "\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n",
                      "markdown": "`\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 13,
                  "endLine": 209,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n",
                    "rendered": {
                      "text": "\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n",
                      "markdown": "`\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 13,
                  "endLine": 154,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\t// Check the status.storedVersions field to ensure it only contains one element\n\tcrd = &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif len(crd.Status.StoredVersions) != 1 || crd.Status.StoredVersions[0] != nonStorageVersion {\n",
                    "rendered": {
                      "text": "\n\t// Check the status.storedVersions field to ensure it only contains one element\n\tcrd = &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif len(crd.Status.StoredVersions) != 1 || crd.Status.StoredVersions[0] != nonStorageVersion {\n",
                      "markdown": "`\n\t// Check the status.storedVersions field to ensure it only contains one element\n\tcrd = &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif len(crd.Status.StoredVersions) != 1 || crd.Status.StoredVersions[0] != nonStorageVersion {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 13,
                  "endLine": 110,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n",
                    "rendered": {
                      "text": "\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n",
                      "markdown": "`\n\t// Fetch a copy of the recently created TestType CRD\n\tcrd := &apiext.CustomResourceDefinition{}\n\tif err := cl.Get(ctx, client.ObjectKey{Name: crdName}, crd); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 14,
                  "endLine": 296,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n",
                    "rendered": {
                      "text": "\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n",
                      "markdown": "`\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 14,
                  "endLine": 237,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n",
                    "rendered": {
                      "text": "\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n",
                      "markdown": "`\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 14,
                  "endLine": 186,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n",
                    "rendered": {
                      "text": "\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n",
                      "markdown": "`\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 56,
                  "endLine": 161,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\t\tt.Fatalf(\"Expected status.storedVersions to be %q but it was: %v\", nonStorageVersion, crd.Status.StoredVersions)\n\t}\n\n\t// Remove the previous storage version from the CRD and update it\n\tremoveAPIVersion(crd, storageVersion)\n\tif err := cl.Update(ctx, crd); err != nil {\n\t\tt.Fatalf(\"Failed to remove old API version: %v\", err)\n",
                    "rendered": {
                      "text": "\t\tt.Fatalf(\"Expected status.storedVersions to be %q but it was: %v\", nonStorageVersion, crd.Status.StoredVersions)\n\t}\n\n\t// Remove the previous storage version from the CRD and update it\n\tremoveAPIVersion(crd, storageVersion)\n\tif err := cl.Update(ctx, crd); err != nil {\n\t\tt.Fatalf(\"Failed to remove old API version: %v\", err)\n",
                      "markdown": "`\t\tt.Fatalf(\"Expected status.storedVersions to be %q but it was: %v\", nonStorageVersion, crd.Status.StoredVersions)\n\t}\n\n\t// Remove the previous storage version from the CRD and update it\n\tremoveAPIVersion(crd, storageVersion)\n\tif err := cl.Update(ctx, crd); err != nil {\n\t\tt.Fatalf(\"Failed to remove old API version: %v\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 21,
                  "endLine": 136,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t// Set the storage version to the 'nonStorageVersion'\n\tsetStorageVersion(crd, nonStorageVersion)\n\tif err := cl.Update(ctx, crd); err != nil {\n\t\tt.Fatalf(\"Failed to update CRD storage version: %v\", err)\n\t}\n\tif len(crd.Status.StoredVersions) != 2 || crd.Status.StoredVersions[0] != storageVersion || crd.Status.StoredVersions[1] != nonStorageVersion {\n\t\tt.Fatalf(\"Expected status.storedVersions to contain [%s, %s] but it was: %v\", storageVersion, nonStorageVersion, crd.Status.StoredVersions)\n",
                    "rendered": {
                      "text": "\t// Set the storage version to the 'nonStorageVersion'\n\tsetStorageVersion(crd, nonStorageVersion)\n\tif err := cl.Update(ctx, crd); err != nil {\n\t\tt.Fatalf(\"Failed to update CRD storage version: %v\", err)\n\t}\n\tif len(crd.Status.StoredVersions) != 2 || crd.Status.StoredVersions[0] != storageVersion || crd.Status.StoredVersions[1] != nonStorageVersion {\n\t\tt.Fatalf(\"Expected status.storedVersions to contain [%s, %s] but it was: %v\", storageVersion, nonStorageVersion, crd.Status.StoredVersions)\n",
                      "markdown": "`\t// Set the storage version to the 'nonStorageVersion'\n\tsetStorageVersion(crd, nonStorageVersion)\n\tif err := cl.Update(ctx, crd); err != nil {\n\t\tt.Fatalf(\"Failed to update CRD storage version: %v\", err)\n\t}\n\tif len(crd.Status.StoredVersions) != 2 || crd.Status.StoredVersions[0] != storageVersion || crd.Status.StoredVersions[1] != nonStorageVersion {\n\t\tt.Fatalf(\"Expected status.storedVersions to contain [%s, %s] but it was: %v\", storageVersion, nonStorageVersion, crd.Status.StoredVersions)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 14,
                  "endLine": 87,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n",
                    "rendered": {
                      "text": "\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n",
                      "markdown": "`\tctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\n\tdefer cancel()\n\n\t// Create the control plane with the TestType conversion handlers registered\n\tscheme := newScheme()\n\t// name of the testtype CRD resource\n\tcrdName := \"testtypes.testgroup.testing.cert-manager.io\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 25,
                  "endLine": 40,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\tv2 \"github.com/cert-manager/cmctl/v2/test/integration/testdata/apis/testgroup/v2\"\n)\n\n// Create a test resource at a given version.\nfunc newResourceAtVersion(t *testing.T, version string) client.Object {\n\tswitch version {\n\tcase \"v1\":\n",
                    "rendered": {
                      "text": "\tv2 \"github.com/cert-manager/cmctl/v2/test/integration/testdata/apis/testgroup/v2\"\n)\n\n// Create a test resource at a given version.\nfunc newResourceAtVersion(t *testing.T, version string) client.Object {\n\tswitch version {\n\tcase \"v1\":\n",
                      "markdown": "`\tv2 \"github.com/cert-manager/cmctl/v2/test/integration/testdata/apis/testgroup/v2\"\n)\n\n// Create a test resource at a given version.\nfunc newResourceAtVersion(t *testing.T, version string) client.Object {\n\tswitch version {\n\tcase \"v1\":\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 6,
                  "endLine": 281,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t\tt.Errorf(\"Failed to create test resource: %v\", err)\n\t}\n\n\t// We expect this to succeed and for the migration to not be run\n\tmigrator := migrateapiversion.NewMigrator(cl, false, os.Stdout, os.Stderr)\n\tmigrated, err := migrator.Run(ctx, storageVersion, []string{crdName})\n\tif err != nil {\n",
                    "rendered": {
                      "text": "\t\tt.Errorf(\"Failed to create test resource: %v\", err)\n\t}\n\n\t// We expect this to succeed and for the migration to not be run\n\tmigrator := migrateapiversion.NewMigrator(cl, false, os.Stdout, os.Stderr)\n\tmigrated, err := migrator.Run(ctx, storageVersion, []string{crdName})\n\tif err != nil {\n",
                      "markdown": "`\t\tt.Errorf(\"Failed to create test resource: %v\", err)\n\t}\n\n\t// We expect this to succeed and for the migration to not be run\n\tmigrator := migrateapiversion.NewMigrator(cl, false, os.Stdout, os.Stderr)\n\tmigrated, err := migrator.Run(ctx, storageVersion, []string{crdName})\n\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/migrate/ctl_upgrade_migrate_test.go"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 6,
                  "endLine": 219,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t\tt.Fatal(\"this test requires testdata with both a storage and non-storage version set\")\n\t}\n\n\t// We expect this to fail, as we are attempting to migrate to the 'nonStorageVersion'.\n\tmigrator := migrateapiversion.NewMigrator(cl, false, os.Stdout, os.Stderr)\n\tmigrated, err := migrator.Run(ctx, nonStorageVersion, []string{crdName})\n\tif err == nil {\n",
                    "rendered": {
                      "text": "\t\tt.Fatal(\"this test requires testdata with both a storage and non-storage version set\")\n\t}\n\n\t// We expect this to fail, as we are attempting to migrate to the 'nonStorageVersion'.\n\tmigrator := migrateapiversion.NewMigrator(cl, false, os.Stdout, os.Stderr)\n\tmigrated, err := migrator.Run(ctx, nonStorageVersion, []string{crdName})\n\tif err == nil {\n",
                      "markdown": "`\t\tt.Fatal(\"this test requires testdata with both a storage and non-storage version set\")\n\t}\n\n\t// We expect this to fail, as we are attempting to migrate to the 'nonStorageVersion'.\n\tmigrator := migrateapiversion.NewMigrator(cl, false, os.Stdout, os.Stderr)\n\tmigrated, err := migrator.Run(ctx, nonStorageVersion, []string{crdName})\n\tif err == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_uninstall_test.go"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 50,
                  "endLine": 119,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t\t\tclientset, err := apiextensionsv1.NewForConfig(testApiServer.RestConfig())\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\t_, err = clientset.CustomResourceDefinitions().Get(ctx, \"certificates.cert-manager.io\", metav1.GetOptions{})\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\t\tclientset, err := apiextensionsv1.NewForConfig(testApiServer.RestConfig())\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\t_, err = clientset.CustomResourceDefinitions().Get(ctx, \"certificates.cert-manager.io\", metav1.GetOptions{})\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\t\tclientset, err := apiextensionsv1.NewForConfig(testApiServer.RestConfig())\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\t_, err = clientset.CustomResourceDefinitions().Get(ctx, \"certificates.cert-manager.io\", metav1.GetOptions{})\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_uninstall_test.go"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\tt.Fatal(\"HELM_BIN environment variable not set\")\n\t}\n\n\tcmd := exec.CommandContext(ctx, helmBinPath, inputArgs...)\n\n\t// Set empty environment variables except for KUBECONFIG and HOME environment variable\n\tcmd.Env = []string{\"KUBECONFIG=\" + kubeConfig, \"HOME=\" + os.Getenv(\"HOME\")}\n",
                    "rendered": {
                      "text": "\t\tt.Fatal(\"HELM_BIN environment variable not set\")\n\t}\n\n\tcmd := exec.CommandContext(ctx, helmBinPath, inputArgs...)\n\n\t// Set empty environment variables except for KUBECONFIG and HOME environment variable\n\tcmd.Env = []string{\"KUBECONFIG=\" + kubeConfig, \"HOME=\" + os.Getenv(\"HOME\")}\n",
                      "markdown": "`\t\tt.Fatal(\"HELM_BIN environment variable not set\")\n\t}\n\n\tcmd := exec.CommandContext(ctx, helmBinPath, inputArgs...)\n\n\t// Set empty environment variables except for KUBECONFIG and HOME environment variable\n\tcmd.Env = []string{\"KUBECONFIG=\" + kubeConfig, \"HOME=\" + os.Getenv(\"HOME\")}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_uninstall_test.go"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "endLine": 134,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\texpErr bool,\n\texpOutput string,\n) {\n\t// find Helm binary\n\thelmBinPath, ok := os.LookupEnv(\"HELM_BIN\")\n\tif !ok {\n\t\tt.Fatal(\"HELM_BIN environment variable not set\")\n",
                    "rendered": {
                      "text": "\texpErr bool,\n\texpOutput string,\n) {\n\t// find Helm binary\n\thelmBinPath, ok := os.LookupEnv(\"HELM_BIN\")\n\tif !ok {\n\t\tt.Fatal(\"HELM_BIN environment variable not set\")\n",
                      "markdown": "`\texpErr bool,\n\texpOutput string,\n) {\n\t// find Helm binary\n\thelmBinPath, ok := os.LookupEnv(\"HELM_BIN\")\n\tif !ok {\n\t\tt.Fatal(\"HELM_BIN environment variable not set\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_install_test.go"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 1,
                  "endLine": 156,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t}\n\n\texecuteAndCheckOutput(t, func(stdin io.Reader, stdout io.Writer) error {\n\t\tcmd := cmd.NewCertManagerCtlCommand(ctx, stdin, stdout, stdout)\n\t\tcmd.SetArgs(append([]string{fmt.Sprintf(\"--kubeconfig=%s\", kubeConfig)}, inputArgs...))\n\n\t\treturn cmd.Execute()\n",
                    "rendered": {
                      "text": "\t}\n\n\texecuteAndCheckOutput(t, func(stdin io.Reader, stdout io.Writer) error {\n\t\tcmd := cmd.NewCertManagerCtlCommand(ctx, stdin, stdout, stdout)\n\t\tcmd.SetArgs(append([]string{fmt.Sprintf(\"--kubeconfig=%s\", kubeConfig)}, inputArgs...))\n\n\t\treturn cmd.Execute()\n",
                      "markdown": "`\t}\n\n\texecuteAndCheckOutput(t, func(stdin io.Reader, stdout io.Writer) error {\n\t\tcmd := cmd.NewCertManagerCtlCommand(ctx, stdin, stdout, stdout)\n\t\tcmd.SetArgs(append([]string{fmt.Sprintf(\"--kubeconfig=%s\", kubeConfig)}, inputArgs...))\n\n\t\treturn cmd.Execute()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_install_test.go"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 26,
                  "endLine": 132,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tif !match {\n\t\tdiffs := dmp.DiffMain(strings.TrimSpace(expOutput), strings.TrimSpace(stdout.String()), false)\n\t\tt.Errorf(\n\t\t\t\"got unexpected output, diff (ignoring line anchors ^ and $ and regex for creation time):\\n\"+\n\t\t\t\t\"diff: %s\\n\\n\"+\n\t\t\t\t\" exp: %s\\n\\n\"+\n\t\t\t\t\" got: %s\",\n",
                    "rendered": {
                      "text": "\tif !match {\n\t\tdiffs := dmp.DiffMain(strings.TrimSpace(expOutput), strings.TrimSpace(stdout.String()), false)\n\t\tt.Errorf(\n\t\t\t\"got unexpected output, diff (ignoring line anchors ^ and $ and regex for creation time):\\n\"+\n\t\t\t\t\"diff: %s\\n\\n\"+\n\t\t\t\t\" exp: %s\\n\\n\"+\n\t\t\t\t\" got: %s\",\n",
                      "markdown": "`\tif !match {\n\t\tdiffs := dmp.DiffMain(strings.TrimSpace(expOutput), strings.TrimSpace(stdout.String()), false)\n\t\tt.Errorf(\n\t\t\t\"got unexpected output, diff (ignoring line anchors ^ and $ and regex for creation time):\\n\"+\n\t\t\t\t\"diff: %s\\n\\n\"+\n\t\t\t\t\" exp: %s\\n\\n\"+\n\t\t\t\t\" got: %s\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 22,
                  "endLine": 90,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n",
                    "rendered": {
                      "text": "                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n",
                      "markdown": "`                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 22,
                  "endLine": 89,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n",
                    "rendered": {
                      "text": "                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n",
                      "markdown": "`                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 84,
                  "endLine": 86,
                  "endColumn": 95,
                  "snippet": {
                    "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                    "rendered": {
                      "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                      "markdown": "`            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 39,
                  "endLine": 86,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                    "rendered": {
                      "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                      "markdown": "`            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 20,
                  "endLine": 80,
                  "endColumn": 31,
                  "snippet": {
                    "text": "              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n",
                    "rendered": {
                      "text": "              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n",
                      "markdown": "`              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 34,
                  "endLine": 79,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n",
                    "rendered": {
                      "text": "            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n",
                      "markdown": "`            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 30,
                  "endLine": 90,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n",
                    "rendered": {
                      "text": "                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n",
                      "markdown": "`                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 30,
                  "endLine": 89,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n",
                    "rendered": {
                      "text": "                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n",
                      "markdown": "`                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 92,
                  "endLine": 86,
                  "endColumn": 108,
                  "snippet": {
                    "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                    "rendered": {
                      "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                      "markdown": "`            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 47,
                  "endLine": 86,
                  "endColumn": 69,
                  "snippet": {
                    "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                    "rendered": {
                      "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                      "markdown": "`            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 28,
                  "endLine": 80,
                  "endColumn": 44,
                  "snippet": {
                    "text": "              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n",
                    "rendered": {
                      "text": "              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n",
                      "markdown": "`              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 64,
                  "snippet": {
                    "text": "            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n",
                    "rendered": {
                      "text": "            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n",
                      "markdown": "`            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 58,
                  "endLine": 30,
                  "endColumn": 107,
                  "snippet": {
                    "text": "\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n          exit 1\n",
                    "rendered": {
                      "text": "\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n          exit 1\n",
                      "markdown": "`\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n          exit 1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 54,
                  "snippet": {
                    "text": "          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n",
                    "rendered": {
                      "text": "          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n",
                      "markdown": "`          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1\n",
                    "rendered": {
                      "text": "          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1\n",
                      "markdown": "`          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 23,
                  "endLine": 68,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n",
                    "rendered": {
                      "text": "        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n",
                      "markdown": "`        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 68,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n",
                    "rendered": {
                      "text": "        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n",
                      "markdown": "`        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 9,
                  "endLine": 67,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n",
                    "rendered": {
                      "text": "      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n",
                      "markdown": "`      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 9,
                  "endLine": 66,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n",
                    "rendered": {
                      "text": "\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n",
                      "markdown": "`\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 54,
                  "snippet": {
                    "text": "          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n",
                    "rendered": {
                      "text": "          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n",
                      "markdown": "`          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 9,
                  "endLine": 46,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          go-version: ${{ steps.go-version.outputs.result }}\n\n      - run: |\n          git checkout -B \"$SELF_UPGRADE_BRANCH\"\n\n      - run: |\n          make -j upgrade-klone\n",
                    "rendered": {
                      "text": "          go-version: ${{ steps.go-version.outputs.result }}\n\n      - run: |\n          git checkout -B \"$SELF_UPGRADE_BRANCH\"\n\n      - run: |\n          make -j upgrade-klone\n",
                      "markdown": "`          go-version: ${{ steps.go-version.outputs.result }}\n\n      - run: |\n          git checkout -B \"$SELF_UPGRADE_BRANCH\"\n\n      - run: |\n          make -j upgrade-klone\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 35,
                  "endLine": 29,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      SELF_UPGRADE_BRANCH: \"self-upgrade-${{ github.ref_name }}\"\n\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n",
                    "rendered": {
                      "text": "      SELF_UPGRADE_BRANCH: \"self-upgrade-${{ github.ref_name }}\"\n\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n",
                      "markdown": "`      SELF_UPGRADE_BRANCH: \"self-upgrade-${{ github.ref_name }}\"\n\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/govulncheck.yaml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 17,
                  "endLine": 4,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/go/base/.github/workflows/govulncheck.yaml instead.\n\n# Run govulncheck at midnight every night on the main branch,\n# to alert us to recent vulnerabilities which affect the Go code in this\n# project.\nname: govulncheck\n",
                    "rendered": {
                      "text": "# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/go/base/.github/workflows/govulncheck.yaml instead.\n\n# Run govulncheck at midnight every night on the main branch,\n# to alert us to recent vulnerabilities which affect the Go code in this\n# project.\nname: govulncheck\n",
                      "markdown": "`# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/go/base/.github/workflows/govulncheck.yaml instead.\n\n# Run govulncheck at midnight every night on the main branch,\n# to alert us to recent vulnerabilities which affect the Go code in this\n# project.\nname: govulncheck\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/util/signal_test.go"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t}\n\n\t// #nosec G204\n\tcmd := exec.Command(os.Args[0], \"-test.run=\"+t.Name())\n\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n",
                    "rendered": {
                      "text": "\t}\n\n\t// #nosec G204\n\tcmd := exec.Command(os.Args[0], \"-test.run=\"+t.Name())\n\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n",
                      "markdown": "`\t}\n\n\t// #nosec G204\n\tcmd := exec.Command(os.Args[0], \"-test.run=\"+t.Name())\n\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/cert-manager/00_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/cert-manager/01_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/cert-manager/01_mod.mk"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\ncert_manager_crds := $(bin_dir)/scratch/cert-manager-$(cert_manager_version).yaml\n$(cert_manager_crds): | $(bin_dir)/scratch\n\tcurl -sSLo $@ https://github.com/cert-manager/cert-manager/releases/download/$(cert_manager_version)/cert-manager.crds.yaml\n",
                    "rendered": {
                      "text": "\ncert_manager_crds := $(bin_dir)/scratch/cert-manager-$(cert_manager_version).yaml\n$(cert_manager_crds): | $(bin_dir)/scratch\n\tcurl -sSLo $@ https://github.com/cert-manager/cert-manager/releases/download/$(cert_manager_version)/cert-manager.crds.yaml\n",
                      "markdown": "`\ncert_manager_crds := $(bin_dir)/scratch/cert-manager-$(cert_manager_version).yaml\n$(cert_manager_crds): | $(bin_dir)/scratch\n\tcurl -sSLo $@ https://github.com/cert-manager/cert-manager/releases/download/$(cert_manager_version)/cert-manager.crds.yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/01_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/help.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/help.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/help.sh"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 54,
                  "endLine": 98,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    # replace any $(...) with the actual value\n    if [[ $target =~ \\$\\((.*)\\) ]]; then\n        new_target=$(echo -e \"$extracted_expansions\" | grep \"<start-target>${BASH_REMATCH[1]}<end-target>\" || true)\n        if [[ -n \"$new_target\" ]]; then\n            target=$([[ $new_target =~ \\<start-expansion\\>(.*)\\<end-expansion\\> ]] && echo -e \"${BASH_REMATCH[1]}\")\n        fi\n",
                    "rendered": {
                      "text": "\n    # replace any $(...) with the actual value\n    if [[ $target =~ \\$\\((.*)\\) ]]; then\n        new_target=$(echo -e \"$extracted_expansions\" | grep \"<start-target>${BASH_REMATCH[1]}<end-target>\" || true)\n        if [[ -n \"$new_target\" ]]; then\n            target=$([[ $new_target =~ \\<start-expansion\\>(.*)\\<end-expansion\\> ]] && echo -e \"${BASH_REMATCH[1]}\")\n        fi\n",
                      "markdown": "`\n    # replace any $(...) with the actual value\n    if [[ $target =~ \\$\\((.*)\\) ]]; then\n        new_target=$(echo -e \"$extracted_expansions\" | grep \"<start-target>${BASH_REMATCH[1]}<end-target>\" || true)\n        if [[ -n \"$new_target\" ]]; then\n            target=$([[ $new_target =~ \\<start-expansion\\>(.*)\\<end-expansion\\> ]] && echo -e \"${BASH_REMATCH[1]}\")\n        fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/help.sh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 55,
                  "endLine": 79,
                  "endColumn": 61,
                  "snippet": {
                    "text": "CLEAR_STYLE=\"$(TERM=xterm tput sgr0)\"\nPURPLE=$(TERM=xterm tput setaf 125)\n\nextracted_lines=$(echo -e \"$extracted_lines\" | LC_ALL=C sort -r)\ncurrent_category=\"\"\n\n## Print the help\n",
                    "rendered": {
                      "text": "CLEAR_STYLE=\"$(TERM=xterm tput sgr0)\"\nPURPLE=$(TERM=xterm tput setaf 125)\n\nextracted_lines=$(echo -e \"$extracted_lines\" | LC_ALL=C sort -r)\ncurrent_category=\"\"\n\n## Print the help\n",
                      "markdown": "`CLEAR_STYLE=\"$(TERM=xterm tput sgr0)\"\nPURPLE=$(TERM=xterm tput setaf 125)\n\nextracted_lines=$(echo -e \"$extracted_lines\" | LC_ALL=C sort -r)\ncurrent_category=\"\"\n\n## Print the help\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/help.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 5,
                  "endLine": 72,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    fi\ndone <<< \"$raw_expansions\"\n\n## 3. Sort and print the extracted line items\n\nRULE_COLOR=\"$(TERM=xterm tput setaf 6)\"\nCATEGORY_COLOR=\"$(TERM=xterm tput setaf 3)\"\n",
                    "rendered": {
                      "text": "    fi\ndone <<< \"$raw_expansions\"\n\n## 3. Sort and print the extracted line items\n\nRULE_COLOR=\"$(TERM=xterm tput setaf 6)\"\nCATEGORY_COLOR=\"$(TERM=xterm tput setaf 3)\"\n",
                      "markdown": "`    fi\ndone <<< \"$raw_expansions\"\n\n## 3. Sort and print the extracted line items\n\nRULE_COLOR=\"$(TERM=xterm tput setaf 6)\"\nCATEGORY_COLOR=\"$(TERM=xterm tput setaf 3)\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/help.sh"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 76,
                  "endLine": 61,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\nASSIGNMENT_REGEX=\"^(([a-zA-Z0-9\\_\\/\\%\\$\\(\\)]|-)+)[[:space:]]*:=[[:space:]]*(.*)$\"\n\nraw_expansions=$(${MAKE} --dry-run --print-data-base noop | tr '\\t' '    ' | grep -E \"$ASSIGNMENT_REGEX\")\nextracted_expansions=\"\"\n\nwhile read -r line; do\n",
                    "rendered": {
                      "text": "\nASSIGNMENT_REGEX=\"^(([a-zA-Z0-9\\_\\/\\%\\$\\(\\)]|-)+)[[:space:]]*:=[[:space:]]*(.*)$\"\n\nraw_expansions=$(${MAKE} --dry-run --print-data-base noop | tr '\\t' '    ' | grep -E \"$ASSIGNMENT_REGEX\")\nextracted_expansions=\"\"\n\nwhile read -r line; do\n",
                      "markdown": "`\nASSIGNMENT_REGEX=\"^(([a-zA-Z0-9\\_\\/\\%\\$\\(\\)]|-)+)[[:space:]]*:=[[:space:]]*(.*)$\"\n\nraw_expansions=$(${MAKE} --dry-run --print-data-base noop | tr '\\t' '    ' | grep -E \"$ASSIGNMENT_REGEX\")\nextracted_expansions=\"\"\n\nwhile read -r line; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/help.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 51,
                  "endLine": 31,
                  "endColumn": 57,
                  "snippet": {
                    "text": "EMPTY_ITEM=\"<start-category><end-category><start-target><end-target><start-comment><end-comment>\"\n\n# shellcheck disable=SC2086\nraw_lines=$(cat ${MAKEFILE_LIST} | tr '\\t' '    ' | grep -E \"($TARGET_REGEX|$DOCBLOCK_REGEX|$EMPTYLINE_REGEX)\")\nextracted_lines=\"\"\nextracted_current=\"$EMPTY_ITEM\"\nmax_target_length=0\n",
                    "rendered": {
                      "text": "EMPTY_ITEM=\"<start-category><end-category><start-target><end-target><start-comment><end-comment>\"\n\n# shellcheck disable=SC2086\nraw_lines=$(cat ${MAKEFILE_LIST} | tr '\\t' '    ' | grep -E \"($TARGET_REGEX|$DOCBLOCK_REGEX|$EMPTYLINE_REGEX)\")\nextracted_lines=\"\"\nextracted_current=\"$EMPTY_ITEM\"\nmax_target_length=0\n",
                      "markdown": "`EMPTY_ITEM=\"<start-category><end-category><start-target><end-target><start-comment><end-comment>\"\n\n# shellcheck disable=SC2086\nraw_lines=$(cat ${MAKEFILE_LIST} | tr '\\t' '    ' | grep -E \"($TARGET_REGEX|$DOCBLOCK_REGEX|$EMPTYLINE_REGEX)\")\nextracted_lines=\"\"\nextracted_current=\"$EMPTY_ITEM\"\nmax_target_length=0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/help/help.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/generate-verify/util/verify.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/generate-verify/util/verify.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/generate-verify/util/verify.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 4,
                  "endLine": 54,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\npopd >/dev/null\n\nif ! diff \\\n    --exclude=\".git\" \\\n    --exclude=\"_bin\" \\\n    --new-file --unified --show-c-function --recursive \"${projectdir}\" \"${tmp}\"\n",
                    "rendered": {
                      "text": "\npopd >/dev/null\n\nif ! diff \\\n    --exclude=\".git\" \\\n    --exclude=\"_bin\" \\\n    --new-file --unified --show-c-function --recursive \"${projectdir}\" \"${tmp}\"\n",
                      "markdown": "`\npopd >/dev/null\n\nif ! diff \\\n    --exclude=\".git\" \\\n    --exclude=\"_bin\" \\\n    --new-file --unified --show-c-function --recursive \"${projectdir}\" \"${tmp}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/generate-verify/util/verify.sh"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 47,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    rm -rf \"${tmp}\"\n}\ntrap \"cleanup\" EXIT SIGINT\n\nrsync -aEq \"${projectdir}/.\" \"${tmp}\" --exclude \"_bin/\"\npushd \"${tmp}\" >/dev/null\n\n\"$@\"\n",
                    "rendered": {
                      "text": "    rm -rf \"${tmp}\"\n}\ntrap \"cleanup\" EXIT SIGINT\n\nrsync -aEq \"${projectdir}/.\" \"${tmp}\" --exclude \"_bin/\"\npushd \"${tmp}\" >/dev/null\n\n\"$@\"\n",
                      "markdown": "`    rm -rf \"${tmp}\"\n}\ntrap \"cleanup\" EXIT SIGINT\n\nrsync -aEq \"${projectdir}/.\" \"${tmp}\" --exclude \"_bin/\"\npushd \"${tmp}\" >/dev/null\n\n\"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/generate-verify/util/verify.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/generate-verify/02_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/generate-verify/02_mod.mk"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 68,
                  "endLine": 24,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\nverify_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/verify.sh\n\n# Run the supplied make target argument in a temporary workspace and diff the results.\nverify-%: FORCE\n\t+$(verify_script) $(MAKE) $*\n\n",
                    "rendered": {
                      "text": "\nverify_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/verify.sh\n\n# Run the supplied make target argument in a temporary workspace and diff the results.\nverify-%: FORCE\n\t+$(verify_script) $(MAKE) $*\n\n",
                      "markdown": "`\nverify_script := $(dir $(lastword $(MAKEFILE_LIST)))/util/verify.sh\n\n# Run the supplied make target argument in a temporary workspace and diff the results.\nverify-%: FORCE\n\t+$(verify_script) $(MAKE) $*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/generate-verify/00_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/executable/01_mod.mk"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 83,
                  "endLine": 116,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .ldflags[1] = \"-w\")' | \\\n\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .ldflags[2] = \"$(go_$(1)_ldflags)\")' | \\\n\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .gobinary = \"$(GO)\")' | \\\n\ttargets=$(exe_targets) $(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .targets = (env(targets) | split(\",\")))' |\nendef\n\n## Build the go source for release. This will build the source\n",
                    "rendered": {
                      "text": "\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .ldflags[1] = \"-w\")' | \\\n\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .ldflags[2] = \"$(go_$(1)_ldflags)\")' | \\\n\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .gobinary = \"$(GO)\")' | \\\n\ttargets=$(exe_targets) $(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .targets = (env(targets) | split(\",\")))' |\nendef\n\n## Build the go source for release. This will build the source\n",
                      "markdown": "`\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .ldflags[1] = \"-w\")' | \\\n\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .ldflags[2] = \"$(go_$(1)_ldflags)\")' | \\\n\t$(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .gobinary = \"$(GO)\")' | \\\n\ttargets=$(exe_targets) $(YQ) 'with(.builds[]; select(.id == \"$(1)\") | .targets = (env(targets) | split(\",\")))' |\nendef\n\n## Build the go source for release. This will build the source\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/executable/01_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/executable/01_mod.mk"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t$(eval go_releaser_path := $(bin_dir)/scratch/exe-publish)\n\trm -rf $(CURDIR)/$(go_releaser_path)\n\n\tcat $(gorelease_file) | \\\n\t$(foreach target,$(exe_build_names),$(call template_for_target,$(target))) \\\n\t$(YQ) '.dist = \"$(CURDIR)/$(go_releaser_path)\"' | \\\n\t$(YQ) 'with(.sboms[]; .cmd = \"$(SYFT)\" | .args = [\"$$artifact\", \"--output\", \"spdx-json=$$document\"] | .env = [\"SYFT_FILE_METADATA_CATALOGER_ENABLED=true\"])' | \\\n",
                    "rendered": {
                      "text": "\t$(eval go_releaser_path := $(bin_dir)/scratch/exe-publish)\n\trm -rf $(CURDIR)/$(go_releaser_path)\n\n\tcat $(gorelease_file) | \\\n\t$(foreach target,$(exe_build_names),$(call template_for_target,$(target))) \\\n\t$(YQ) '.dist = \"$(CURDIR)/$(go_releaser_path)\"' | \\\n\t$(YQ) 'with(.sboms[]; .cmd = \"$(SYFT)\" | .args = [\"$$artifact\", \"--output\", \"spdx-json=$$document\"] | .env = [\"SYFT_FILE_METADATA_CATALOGER_ENABLED=true\"])' | \\\n",
                      "markdown": "`\t$(eval go_releaser_path := $(bin_dir)/scratch/exe-publish)\n\trm -rf $(CURDIR)/$(go_releaser_path)\n\n\tcat $(gorelease_file) | \\\n\t$(foreach target,$(exe_build_names),$(call template_for_target,$(target))) \\\n\t$(YQ) '.dist = \"$(CURDIR)/$(go_releaser_path)\"' | \\\n\t$(YQ) 'with(.sboms[]; .cmd = \"$(SYFT)\" | .args = [\"$$artifact\", \"--output\", \"spdx-json=$$document\"] | .env = [\"SYFT_FILE_METADATA_CATALOGER_ENABLED=true\"])' | \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/go/base/.github/workflows/govulncheck.yaml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 17,
                  "endLine": 4,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/go/base/.github/workflows/govulncheck.yaml instead.\n\n# Run govulncheck at midnight every night on the main branch,\n# to alert us to recent vulnerabilities which affect the Go code in this\n# project.\nname: govulncheck\n",
                    "rendered": {
                      "text": "# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/go/base/.github/workflows/govulncheck.yaml instead.\n\n# Run govulncheck at midnight every night on the main branch,\n# to alert us to recent vulnerabilities which affect the Go code in this\n# project.\nname: govulncheck\n",
                      "markdown": "`# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/go/base/.github/workflows/govulncheck.yaml instead.\n\n# Run govulncheck at midnight every night on the main branch,\n# to alert us to recent vulnerabilities which affect the Go code in this\n# project.\nname: govulncheck\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/cmd/cmd.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 18,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"io\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"io\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"io\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 22,
                  "endLine": 90,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n",
                    "rendered": {
                      "text": "                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n",
                      "markdown": "`                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 22,
                  "endLine": 89,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n",
                    "rendered": {
                      "text": "                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n",
                      "markdown": "`                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 84,
                  "endLine": 86,
                  "endColumn": 95,
                  "snippet": {
                    "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                    "rendered": {
                      "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                      "markdown": "`            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 39,
                  "endLine": 86,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                    "rendered": {
                      "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                      "markdown": "`            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 20,
                  "endLine": 80,
                  "endColumn": 31,
                  "snippet": {
                    "text": "              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n",
                    "rendered": {
                      "text": "              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n",
                      "markdown": "`              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 34,
                  "endLine": 79,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n",
                    "rendered": {
                      "text": "            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n",
                      "markdown": "`            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 30,
                  "endLine": 90,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n",
                    "rendered": {
                      "text": "                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n",
                      "markdown": "`                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n                ].join('\\n'),\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 30,
                  "endLine": 89,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n",
                    "rendered": {
                      "text": "                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n",
                      "markdown": "`                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n                base: process.env.SOURCE_BRANCH,\n                body: [\n                  'This PR is auto-generated to bump the Makefile modules.',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 92,
                  "endLine": 86,
                  "endColumn": 108,
                  "snippet": {
                    "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                    "rendered": {
                      "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                      "markdown": "`            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 47,
                  "endLine": 86,
                  "endColumn": 69,
                  "snippet": {
                    "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                    "rendered": {
                      "text": "            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n",
                      "markdown": "`            \n            if (pulls.data.length < 1) {\n              const result = await github.rest.pulls.create({\n                title: '[CI] Merge ' + process.env.SELF_UPGRADE_BRANCH + ' into ' + process.env.SOURCE_BRANCH,\n                owner: owner,\n                repo: repo,\n                head: process.env.SELF_UPGRADE_BRANCH,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 28,
                  "endLine": 80,
                  "endColumn": 44,
                  "snippet": {
                    "text": "              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n",
                    "rendered": {
                      "text": "              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n",
                      "markdown": "`              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n            \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 64,
                  "snippet": {
                    "text": "            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n",
                    "rendered": {
                      "text": "            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n",
                      "markdown": "`            const pulls = await github.rest.pulls.list({\n              owner: owner,\n              repo: repo,\n              head: owner + ':' + process.env.SELF_UPGRADE_BRANCH,\n              base: process.env.SOURCE_BRANCH,\n              state: 'open',\n            });\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 58,
                  "endLine": 30,
                  "endColumn": 107,
                  "snippet": {
                    "text": "\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n          exit 1\n",
                    "rendered": {
                      "text": "\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n          exit 1\n",
                      "markdown": "`\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n          exit 1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 54,
                  "snippet": {
                    "text": "          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n",
                    "rendered": {
                      "text": "          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n",
                      "markdown": "`          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1\n",
                    "rendered": {
                      "text": "          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1\n",
                      "markdown": "`          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 23,
                  "endLine": 68,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n",
                    "rendered": {
                      "text": "        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n",
                      "markdown": "`        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 68,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n",
                    "rendered": {
                      "text": "        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n",
                      "markdown": "`        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 9,
                  "endLine": 67,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n",
                    "rendered": {
                      "text": "      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n",
                      "markdown": "`      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 9,
                  "endLine": 66,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n",
                    "rendered": {
                      "text": "\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n",
                      "markdown": "`\n      - if: ${{ steps.is-up-to-date.outputs.result != 'true' }}\n        run: |\n          git config --global user.name \"cert-manager-bot\"\n          git config --global user.email \"cert-manager-bot@users.noreply.github.com\"\n          git add -A && git commit -m \"BOT: run 'make upgrade-klone' and 'make generate'\" --signoff\n          git push -f origin \"$SELF_UPGRADE_BRANCH\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 54,
                  "snippet": {
                    "text": "          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n",
                    "rendered": {
                      "text": "          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n",
                      "markdown": "`          make -j generate\n\n      - id: is-up-to-date\n        shell: bash\n        run: |\n          git_status=$(git status -s)\n          is_up_to_date=\"true\"\n          if [ -n \"$git_status\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 9,
                  "endLine": 46,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          go-version: ${{ steps.go-version.outputs.result }}\n\n      - run: |\n          git checkout -B \"$SELF_UPGRADE_BRANCH\"\n\n      - run: |\n          make -j upgrade-klone\n",
                    "rendered": {
                      "text": "          go-version: ${{ steps.go-version.outputs.result }}\n\n      - run: |\n          git checkout -B \"$SELF_UPGRADE_BRANCH\"\n\n      - run: |\n          make -j upgrade-klone\n",
                      "markdown": "`          go-version: ${{ steps.go-version.outputs.result }}\n\n      - run: |\n          git checkout -B \"$SELF_UPGRADE_BRANCH\"\n\n      - run: |\n          make -j upgrade-klone\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/.github/workflows/make-self-upgrade.yaml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 35,
                  "endLine": 29,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      SELF_UPGRADE_BRANCH: \"self-upgrade-${{ github.ref_name }}\"\n\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n",
                    "rendered": {
                      "text": "      SELF_UPGRADE_BRANCH: \"self-upgrade-${{ github.ref_name }}\"\n\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n",
                      "markdown": "`      SELF_UPGRADE_BRANCH: \"self-upgrade-${{ github.ref_name }}\"\n\n    steps:\n      - name: Fail if branch is not head of branch.\n        if: ${{ !startsWith(github.ref, 'refs/heads/') && env.SOURCE_BRANCH != '' && env.SELF_UPGRADE_BRANCH != '' }}\n        run: |\n          echo \"This workflow should not be run on a non-branch-head.\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 21,
                  "endLine": 43,
                  "snippet": {
                    "text": "# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n",
                    "rendered": {
                      "text": "# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n",
                      "markdown": "`# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 15,
                  "snippet": {
                    "text": "##################################\n\n# Some modules build their dependencies from variables, we want these to be \n# evaluated at the last possible moment. For this we use second expansion to \n# re-evaluate the generate and verify targets a second time.\n#\n# See https://www.gnu.org/software/make/manual/html_node/Secondary-Expansion.html\n",
                    "rendered": {
                      "text": "##################################\n\n# Some modules build their dependencies from variables, we want these to be \n# evaluated at the last possible moment. For this we use second expansion to \n# re-evaluate the generate and verify targets a second time.\n#\n# See https://www.gnu.org/software/make/manual/html_node/Secondary-Expansion.html\n",
                      "markdown": "`##################################\n\n# Some modules build their dependencies from variables, we want these to be \n# evaluated at the last possible moment. For this we use second expansion to \n# re-evaluate the generate and verify targets a second time.\n#\n# See https://www.gnu.org/software/make/manual/html_node/Secondary-Expansion.html\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 19,
                  "endLine": 83,
                  "endColumn": 24,
                  "snippet": {
                    "text": "VERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n# Global variables and dirs      #\n",
                    "rendered": {
                      "text": "VERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n# Global variables and dirs      #\n",
                      "markdown": "`VERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n# Global variables and dirs      #\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 20,
                  "endLine": 82,
                  "endColumn": 25,
                  "snippet": {
                    "text": "git_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n",
                    "rendered": {
                      "text": "git_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n",
                      "markdown": "`git_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 79,
                  "endLine": 81,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n",
                    "rendered": {
                      "text": "\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n",
                      "markdown": "`\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 24,
                  "endLine": 81,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n",
                    "rendered": {
                      "text": "\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n",
                      "markdown": "`\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 22,
                  "endLine": 79,
                  "endColumn": 27,
                  "snippet": {
                    "text": "# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\n",
                    "rendered": {
                      "text": "# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\n",
                      "markdown": "`# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 6,
                  "snippet": {
                    "text": "endif\n\n##################################\n# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\n",
                    "rendered": {
                      "text": "endif\n\n##################################\n# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\n",
                      "markdown": "`endif\n\n##################################\n# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 46,
                  "endLine": 59,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n",
                    "rendered": {
                      "text": "# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n",
                      "markdown": "`# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 29,
                  "endLine": 59,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n",
                    "rendered": {
                      "text": "# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n",
                      "markdown": "`# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base/Makefile"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 21,
                  "endLine": 43,
                  "snippet": {
                    "text": "# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n",
                    "rendered": {
                      "text": "# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n",
                      "markdown": "`# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/base-dependabot/.github/dependabot.yaml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/repository-base/base-dependabot/.github/dependabot.yaml instead.\n\n# Update Go dependencies and GitHub Actions dependencies daily.\nversion: 2\nupdates:\n- package-ecosystem: gomod\n",
                    "rendered": {
                      "text": "# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/repository-base/base-dependabot/.github/dependabot.yaml instead.\n\n# Update Go dependencies and GitHub Actions dependencies daily.\nversion: 2\nupdates:\n- package-ecosystem: gomod\n",
                      "markdown": "`# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/repository-base/base-dependabot/.github/dependabot.yaml instead.\n\n# Update Go dependencies and GitHub Actions dependencies daily.\nversion: 2\nupdates:\n- package-ecosystem: gomod\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/01_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/01_mod.mk"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30,
                  "endColumn": 4,
                  "snippet": {
                    "text": "## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\n\tcp -r $(base_dependabot_dir)/. ./\nendif\n\nshared_generate_targets += generate-base\n",
                    "rendered": {
                      "text": "## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\n\tcp -r $(base_dependabot_dir)/. ./\nendif\n\nshared_generate_targets += generate-base\n",
                      "markdown": "`## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\n\tcp -r $(base_dependabot_dir)/. ./\nendif\n\nshared_generate_targets += generate-base\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/01_mod.mk"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "endColumn": 4,
                  "snippet": {
                    "text": "## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\n\tcp -r $(base_dependabot_dir)/. ./\nendif\n\n",
                    "rendered": {
                      "text": "## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\n\tcp -r $(base_dependabot_dir)/. ./\nendif\n\n",
                      "markdown": "`## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\n\tcp -r $(base_dependabot_dir)/. ./\nendif\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/repository-base/01_mod.mk"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "endColumn": 4,
                  "snippet": {
                    "text": "## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\nelse\n.PHONY: generate-base\n## Generate base files in the repository\n",
                    "rendered": {
                      "text": "## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\nelse\n.PHONY: generate-base\n## Generate base files in the repository\n",
                      "markdown": "`## Generate base files in the repository\n## @category [shared] Generate/ Verify\ngenerate-base:\n\tcp -r $(base_dir)/. ./\nelse\n.PHONY: generate-base\n## Generate base files in the repository\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/checkhash.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/checkhash.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/checkhash.sh"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 57,
                  "endLine": 49,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\texit 0\nfi\n\n# When running 'make learn-sha-tools', we don't want this script to fail.\n# Instead we log what sha values are wrong, so the make.mk file can be updated.\n\nif [ \"${LEARN_FILE:-}\" != \"\" ]; then\n",
                    "rendered": {
                      "text": "\texit 0\nfi\n\n# When running 'make learn-sha-tools', we don't want this script to fail.\n# Instead we log what sha values are wrong, so the make.mk file can be updated.\n\nif [ \"${LEARN_FILE:-}\" != \"\" ]; then\n",
                      "markdown": "`\texit 0\nfi\n\n# When running 'make learn-sha-tools', we don't want this script to fail.\n# Instead we log what sha values are wrong, so the make.mk file can be updated.\n\nif [ \"${LEARN_FILE:-}\" != \"\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/checkhash.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 6,
                  "endLine": 23,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\n# This script takes the hash of its first argument and verifies it against the\n# hex hash given in its second argument\n\nfunction usage_and_exit() {\n",
                    "rendered": {
                      "text": "\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\n# This script takes the hash of its first argument and verifies it against the\n# hex hash given in its second argument\n\nfunction usage_and_exit() {\n",
                      "markdown": "`\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\n# This script takes the hash of its first argument and verifies it against the\n# hex hash given in its second argument\n\nfunction usage_and_exit() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/checkhash.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/hash.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/hash.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/hash.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 6,
                  "endLine": 27,
                  "endColumn": 11,
                  "snippet": {
                    "text": "case \"$(uname -s)\" in\n    Darwin*)    shasum -a 256 \"$1\";;\n    *)          sha256sum \"$1\" \nesac | cut -d\" \" -f1",
                    "rendered": {
                      "text": "case \"$(uname -s)\" in\n    Darwin*)    shasum -a 256 \"$1\";;\n    *)          sha256sum \"$1\" \nesac | cut -d\" \" -f1",
                      "markdown": "`case \"$(uname -s)\" in\n    Darwin*)    shasum -a 256 \"$1\";;\n    *)          sha256sum \"$1\" \nesac | cut -d\" \" -f1`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/hash.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 6,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "set -o nounset\nset -o pipefail\n\n# This script is a wrapper for outputting purely the sha256 hash of the input file,\n# ideally in a portable way.\n\ncase \"$(uname -s)\" in\n",
                    "rendered": {
                      "text": "set -o nounset\nset -o pipefail\n\n# This script is a wrapper for outputting purely the sha256 hash of the input file,\n# ideally in a portable way.\n\ncase \"$(uname -s)\" in\n",
                      "markdown": "`set -o nounset\nset -o pipefail\n\n# This script is a wrapper for outputting purely the sha256 hash of the input file,\n# ideally in a portable way.\n\ncase \"$(uname -s)\" in\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/hash.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 51,
                  "endLine": 22,
                  "endColumn": 55,
                  "snippet": {
                    "text": "set -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n",
                    "rendered": {
                      "text": "set -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n",
                      "markdown": "`set -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 3,
                  "endLine": 62,
                  "endColumn": 7,
                  "snippet": {
                    "text": "finish() {\n  rv=$?\n  if [[ $rv -eq 0 ]]; then\n    mv \"$outfile\" \"$finalfile\"\n    echo \"[info]: downloaded $finalfile\"\n  else\n    rm -rf \"$outfile\" || true\n",
                    "rendered": {
                      "text": "finish() {\n  rv=$?\n  if [[ $rv -eq 0 ]]; then\n    mv \"$outfile\" \"$finalfile\"\n    echo \"[info]: downloaded $finalfile\"\n  else\n    rm -rf \"$outfile\" || true\n",
                      "markdown": "`finish() {\n  rv=$?\n  if [[ $rv -eq 0 ]]; then\n    mv \"$outfile\" \"$finalfile\"\n    echo \"[info]: downloaded $finalfile\"\n  else\n    rm -rf \"$outfile\" || true\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 6,
                  "endLine": 43,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  exec {FD}<>\"$lockfile\"\n\n  # wait for the file to be unlocked\n  if ! flock -x $FD; then\n    echo \"Failed to obtain a lock for $lockfile\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "  exec {FD}<>\"$lockfile\"\n\n  # wait for the file to be unlocked\n  if ! flock -x $FD; then\n    echo \"Failed to obtain a lock for $lockfile\"\n    exit 1\n  fi\n",
                      "markdown": "`  exec {FD}<>\"$lockfile\"\n\n  # wait for the file to be unlocked\n  if ! flock -x $FD; then\n    echo \"Failed to obtain a lock for $lockfile\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 28,
                  "endLine": 35,
                  "endColumn": 35,
                  "snippet": {
                    "text": "# On OSX, flock is not installed, we just skip locking in that case,\n# this means that running verify in parallel without downloading all\n# tools first will not work.\nflock_installed=$(command -v flock >/dev/null && echo \"yes\" || echo \"no\")\n\nif [[ \"$flock_installed\" == \"yes\" ]]; then\n  mkdir -p \"$(dirname \"$lockfile\")\"\n",
                    "rendered": {
                      "text": "# On OSX, flock is not installed, we just skip locking in that case,\n# this means that running verify in parallel without downloading all\n# tools first will not work.\nflock_installed=$(command -v flock >/dev/null && echo \"yes\" || echo \"no\")\n\nif [[ \"$flock_installed\" == \"yes\" ]]; then\n  mkdir -p \"$(dirname \"$lockfile\")\"\n",
                      "markdown": "`# On OSX, flock is not installed, we just skip locking in that case,\n# this means that running verify in parallel without downloading all\n# tools first will not work.\nflock_installed=$(command -v flock >/dev/null && echo \"yes\" || echo \"no\")\n\nif [[ \"$flock_installed\" == \"yes\" ]]; then\n  mkdir -p \"$(dirname \"$lockfile\")\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 9,
                  "endLine": 32,
                  "endColumn": 16,
                  "snippet": {
                    "text": "finalfile=\"$1\"\nlockfile=\"$finalfile.lock\"\n\n# On OSX, flock is not installed, we just skip locking in that case,\n# this means that running verify in parallel without downloading all\n# tools first will not work.\nflock_installed=$(command -v flock >/dev/null && echo \"yes\" || echo \"no\")\n",
                    "rendered": {
                      "text": "finalfile=\"$1\"\nlockfile=\"$finalfile.lock\"\n\n# On OSX, flock is not installed, we just skip locking in that case,\n# this means that running verify in parallel without downloading all\n# tools first will not work.\nflock_installed=$(command -v flock >/dev/null && echo \"yes\" || echo \"no\")\n",
                      "markdown": "`finalfile=\"$1\"\nlockfile=\"$finalfile.lock\"\n\n# On OSX, flock is not installed, we just skip locking in that case,\n# this means that running verify in parallel without downloading all\n# tools first will not work.\nflock_installed=$(command -v flock >/dev/null && echo \"yes\" || echo \"no\")\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 10,
                  "endLine": 27,
                  "endColumn": 18,
                  "snippet": {
                    "text": "# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n# the same files, we re-use the same downloads folder for all $(MAKE) invocations and\n# use this script to deduplicate the download processes.\n\nfinalfile=\"$1\"\nlockfile=\"$finalfile.lock\"\n",
                    "rendered": {
                      "text": "# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n# the same files, we re-use the same downloads folder for all $(MAKE) invocations and\n# use this script to deduplicate the download processes.\n\nfinalfile=\"$1\"\nlockfile=\"$finalfile.lock\"\n",
                      "markdown": "`# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n# the same files, we re-use the same downloads folder for all $(MAKE) invocations and\n# use this script to deduplicate the download processes.\n\nfinalfile=\"$1\"\nlockfile=\"$finalfile.lock\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 63,
                  "endLine": 22,
                  "endColumn": 69,
                  "snippet": {
                    "text": "set -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n",
                    "rendered": {
                      "text": "set -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n",
                      "markdown": "`set -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n# which each will try to download a set of tools. To prevent them from all downloading\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 6,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "set -o nounset\nset -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n",
                    "rendered": {
                      "text": "set -o nounset\nset -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n",
                      "markdown": "`set -o nounset\nset -o pipefail\n\n# This script is used to lock a file while it is being downloaded. It prevents\n# multiple processes from downloading the same file at the same time or from reading\n# a half-downloaded file.\n# We need this solution because we have recursive $(MAKE) calls in our makefile\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/_shared/tools/util/lock.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2023 The cert-manager Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/test-unit.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/02_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/00_mod.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/make/test-integration.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 10789,
                  "startColumn": 5,
                  "endLine": 10790,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 10765,
                  "startColumn": 5,
                  "endLine": 10766,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 10742,
                  "startColumn": 5,
                  "endLine": 10743,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cainjector\n    app.kubernetes.io/component: cainjector\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cainjector\n    app.kubernetes.io/component: cainjector\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cainjector\n    app.kubernetes.io/component: cainjector\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 10343,
                  "startColumn": 5,
                  "endLine": 10344,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 10319,
                  "startColumn": 5,
                  "endLine": 10320,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 9920,
                  "startColumn": 5,
                  "endLine": 9921,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 9896,
                  "startColumn": 5,
                  "endLine": 9897,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 9508,
                  "startColumn": 5,
                  "endLine": 9509,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 9484,
                  "startColumn": 5,
                  "endLine": 9485,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 9096,
                  "startColumn": 5,
                  "endLine": 9097,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 8708,
                  "startColumn": 5,
                  "endLine": 8709,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 8323,
                  "startColumn": 5,
                  "endLine": 8324,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 7951,
                  "startColumn": 5,
                  "endLine": 7952,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 7927,
                  "startColumn": 5,
                  "endLine": 7928,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 7555,
                  "startColumn": 5,
                  "endLine": 7556,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 7531,
                  "startColumn": 5,
                  "endLine": 7532,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 7162,
                  "startColumn": 5,
                  "endLine": 7163,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 7138,
                  "startColumn": 5,
                  "endLine": 7139,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 6769,
                  "startColumn": 5,
                  "endLine": 6770,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 6745,
                  "startColumn": 5,
                  "endLine": 6746,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 6379,
                  "startColumn": 5,
                  "endLine": 6380,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 6355,
                  "startColumn": 5,
                  "endLine": 6356,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 5989,
                  "startColumn": 5,
                  "endLine": 5990,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 5965,
                  "startColumn": 5,
                  "endLine": 5966,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 5599,
                  "startColumn": 5,
                  "endLine": 5600,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 5575,
                  "startColumn": 5,
                  "endLine": 5576,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 5210,
                  "startColumn": 5,
                  "endLine": 5211,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 5186,
                  "startColumn": 5,
                  "endLine": 5187,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 4822,
                  "startColumn": 5,
                  "endLine": 4823,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 4798,
                  "startColumn": 5,
                  "endLine": 4799,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 4454,
                  "startColumn": 5,
                  "endLine": 4455,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 4430,
                  "startColumn": 5,
                  "endLine": 4431,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 4086,
                  "startColumn": 5,
                  "endLine": 4087,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 4062,
                  "startColumn": 5,
                  "endLine": 4063,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 3720,
                  "startColumn": 5,
                  "endLine": 3721,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 3696,
                  "startColumn": 5,
                  "endLine": 3697,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 3361,
                  "startColumn": 5,
                  "endLine": 3362,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 3337,
                  "startColumn": 5,
                  "endLine": 3338,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 2991,
                  "startColumn": 5,
                  "endLine": 2992,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 2967,
                  "startColumn": 5,
                  "endLine": 2968,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 2557,
                  "startColumn": 5,
                  "endLine": 2558,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 2534,
                  "startColumn": 5,
                  "endLine": 2535,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 2117,
                  "startColumn": 5,
                  "endLine": 2118,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 2093,
                  "startColumn": 5,
                  "endLine": 2094,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 1690,
                  "startColumn": 5,
                  "endLine": 1691,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 1668,
                  "startColumn": 5,
                  "endLine": 1669,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 1277,
                  "startColumn": 5,
                  "endLine": 1278,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 5,
                  "endLine": 1256,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 5,
                  "endLine": 639,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 5,
                  "endLine": 615,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 5,
                  "endLine": 226,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: webhook\n    app.kubernetes.io/component: webhook\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/test_manifests.yaml"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 5,
                  "endLine": 204,
                  "snippet": {
                    "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                    "rendered": {
                      "text": "\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n",
                      "markdown": "`\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-manager\n    app.kubernetes.io/component: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/fetch.go"
                },
                "region": {
                  "startLine": 311,
                  "endLine": 311,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfunc listVersions(ctx context.Context, maxVersion string) (map[string]struct{}, error) {\n\tresult := bytes.Buffer{}\n\tcmd := exec.CommandContext(ctx, \"git\", \"ls-remote\", \"--tags\", \"--sort=version:refname\", \"--refs\", repoURL)\n\tcmd.Stdout = &result\n\tcmd.Stderr = os.Stderr\n\n",
                    "rendered": {
                      "text": "\nfunc listVersions(ctx context.Context, maxVersion string) (map[string]struct{}, error) {\n\tresult := bytes.Buffer{}\n\tcmd := exec.CommandContext(ctx, \"git\", \"ls-remote\", \"--tags\", \"--sort=version:refname\", \"--refs\", repoURL)\n\tcmd.Stdout = &result\n\tcmd.Stderr = os.Stderr\n\n",
                      "markdown": "`\nfunc listVersions(ctx context.Context, maxVersion string) (map[string]struct{}, error) {\n\tresult := bytes.Buffer{}\n\tcmd := exec.CommandContext(ctx, \"git\", \"ls-remote\", \"--tags\", \"--sort=version:refname\", \"--refs\", repoURL)\n\tcmd.Stdout = &result\n\tcmd.Stderr = os.Stderr\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/test/testdata/fetch.go"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 49,
                  "endLine": 330,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\t\tparts := bytes.Split(line, []byte(\"refs/tags/\"))\n\t\tif len(parts) != 2 {\n\t\t\treturn nil, fmt.Errorf(\"unexpected output from git command: %s\", line)\n\t\t}\n\n\t\tversion := string(parts[1])\n",
                    "rendered": {
                      "text": "\n\t\tparts := bytes.Split(line, []byte(\"refs/tags/\"))\n\t\tif len(parts) != 2 {\n\t\t\treturn nil, fmt.Errorf(\"unexpected output from git command: %s\", line)\n\t\t}\n\n\t\tversion := string(parts[1])\n",
                      "markdown": "`\n\t\tparts := bytes.Split(line, []byte(\"refs/tags/\"))\n\t\tif len(parts) != 2 {\n\t\t\treturn nil, fmt.Errorf(\"unexpected output from git command: %s\", line)\n\t\t}\n\n\t\tversion := string(parts[1])\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/fromcrd.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 15,
                  "endLine": 47,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t}\n\n\tobjv1beta1 := &apiextensionsv1beta1.CustomResourceDefinition{}\n\terr = o.client.Get(ctx, crdKey, objv1beta1)\n\tif err == nil {\n\t\tif label := extractVersionFromLabels(objv1beta1.Labels); label != \"\" {\n\t\t\to.versionSources[\"crdLabelVersion\"] = label\n",
                    "rendered": {
                      "text": "\t}\n\n\tobjv1beta1 := &apiextensionsv1beta1.CustomResourceDefinition{}\n\terr = o.client.Get(ctx, crdKey, objv1beta1)\n\tif err == nil {\n\t\tif label := extractVersionFromLabels(objv1beta1.Labels); label != \"\" {\n\t\t\to.versionSources[\"crdLabelVersion\"] = label\n",
                      "markdown": "`\t}\n\n\tobjv1beta1 := &apiextensionsv1beta1.CustomResourceDefinition{}\n\terr = o.client.Get(ctx, crdKey, objv1beta1)\n\tif err == nil {\n\t\tif label := extractVersionFromLabels(objv1beta1.Labels); label != \"\" {\n\t\t\to.versionSources[\"crdLabelVersion\"] = label\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/fromcrd.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 16,
                  "endLine": 32,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tcrdKey := client.ObjectKey{Name: crdName}\n\n\tobjv1 := &apiextensionsv1.CustomResourceDefinition{}\n\terr := o.client.Get(ctx, crdKey, objv1)\n\tif err == nil {\n\t\tif label := extractVersionFromLabels(objv1.Labels); label != \"\" {\n\t\t\to.versionSources[\"crdLabelVersion\"] = label\n",
                    "rendered": {
                      "text": "\tcrdKey := client.ObjectKey{Name: crdName}\n\n\tobjv1 := &apiextensionsv1.CustomResourceDefinition{}\n\terr := o.client.Get(ctx, crdKey, objv1)\n\tif err == nil {\n\t\tif label := extractVersionFromLabels(objv1.Labels); label != \"\" {\n\t\t\to.versionSources[\"crdLabelVersion\"] = label\n",
                      "markdown": "`\tcrdKey := client.ObjectKey{Name: crdName}\n\n\tobjv1 := &apiextensionsv1.CustomResourceDefinition{}\n\terr := o.client.Get(ctx, crdKey, objv1)\n\tif err == nil {\n\t\tif label := extractVersionFromLabels(objv1.Labels); label != \"\" {\n\t\t\to.versionSources[\"crdLabelVersion\"] = label\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/main.go"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\truntime.Goexit() // Do soft exit (handle all defers, that should set correct exit code)\n\t})\n\n\tcmd := ctlcmd.NewCertManagerCtlCommand(ctx, os.Stdin, os.Stdout, os.Stderr)\n\n\tif err := cmd.ExecuteContext(ctx); err != nil {\n\t\tcmdutil.CheckErr(err)\n",
                    "rendered": {
                      "text": "\t\truntime.Goexit() // Do soft exit (handle all defers, that should set correct exit code)\n\t})\n\n\tcmd := ctlcmd.NewCertManagerCtlCommand(ctx, os.Stdin, os.Stdout, os.Stderr)\n\n\tif err := cmd.ExecuteContext(ctx); err != nil {\n\t\tcmdutil.CheckErr(err)\n",
                      "markdown": "`\t\truntime.Goexit() // Do soft exit (handle all defers, that should set correct exit code)\n\t})\n\n\tcmd := ctlcmd.NewCertManagerCtlCommand(ctx, os.Stdin, os.Stdout, os.Stderr)\n\n\tif err := cmd.ExecuteContext(ctx); err != nil {\n\t\tcmdutil.CheckErr(err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/approve/approve.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 71,
                  "endLine": 115,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n// Run executes approve command\nfunc (o *Options) Run(ctx context.Context, args []string) error {\n\tcr, err := o.CMClient.CertmanagerV1().CertificateRequests(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\n// Run executes approve command\nfunc (o *Options) Run(ctx context.Context, args []string) error {\n\tcr, err := o.CMClient.CertmanagerV1().CertificateRequests(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\n// Run executes approve command\nfunc (o *Options) Run(ctx context.Context, args []string) error {\n\tcr, err := o.CMClient.CertmanagerV1().CertificateRequests(o.Namespace).Get(ctx, args[0], metav1.GetOptions{})\n\tif err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/approve/approve.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 7,
                  "endLine": 91,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/approve/approve.go"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdApprove(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := newOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"approve\",\n\t\tShort: \"Approve a CertificateRequest\",\n\t\tLong:  `Mark a CertificateRequest as Approved, so it may be signed by a configured Issuer.`,\n",
                    "rendered": {
                      "text": "func NewCmdApprove(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := newOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"approve\",\n\t\tShort: \"Approve a CertificateRequest\",\n\t\tLong:  `Mark a CertificateRequest as Approved, so it may be signed by a configured Issuer.`,\n",
                      "markdown": "`func NewCmdApprove(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := newOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"approve\",\n\t\tShort: \"Approve a CertificateRequest\",\n\t\tLong:  `Mark a CertificateRequest as Approved, so it may be signed by a configured Issuer.`,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/version/version.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 7,
                  "endLine": 121,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate() error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate() error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate() error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/version/version.go"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdVersion(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"version\",\n\t\tShort: \"Print the cert-manager CLI version and the deployed cert-manager version\",\n\t\tLong:  versionLong(setupCtx),\n",
                    "rendered": {
                      "text": "func NewCmdVersion(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"version\",\n\t\tShort: \"Print the cert-manager CLI version and the deployed cert-manager version\",\n\t\tLong:  versionLong(setupCtx),\n",
                      "markdown": "`func NewCmdVersion(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"version\",\n\t\tShort: \"Print the cert-manager CLI version and the deployed cert-manager version\",\n\t\tLong:  versionLong(setupCtx),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/version/version.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 33,
                  "endLine": 71,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\treturn build.WithTemplate(ctx, `Print the cert-manager CLI version and the deployed cert-manager version.\nThe CLI version is embedded in the binary and directly displayed. Determining\nthe deployed cert-manager version is done by querying the cert-manger\nresources.  First, the tool looks at the labels of the cert-manager CRD\nresources. Then, it searches for the labels of the resources related the\ncert-manager webhook linked in the CRDs.  It also tries to derive the version\nfrom the docker image tag of that webhook service.  After gathering all this\n",
                    "rendered": {
                      "text": "\treturn build.WithTemplate(ctx, `Print the cert-manager CLI version and the deployed cert-manager version.\nThe CLI version is embedded in the binary and directly displayed. Determining\nthe deployed cert-manager version is done by querying the cert-manger\nresources.  First, the tool looks at the labels of the cert-manager CRD\nresources. Then, it searches for the labels of the resources related the\ncert-manager webhook linked in the CRDs.  It also tries to derive the version\nfrom the docker image tag of that webhook service.  After gathering all this\n",
                      "markdown": "`\treturn build.WithTemplate(ctx, `Print the cert-manager CLI version and the deployed cert-manager version.\nThe CLI version is embedded in the binary and directly displayed. Determining\nthe deployed cert-manager version is done by querying the cert-manger\nresources.  First, the tool looks at the labels of the cert-manager CRD\nresources. Then, it searches for the labels of the resources related the\ncert-manager webhook linked in the CRDs.  It also tries to derive the version\nfrom the docker image tag of that webhook service.  After gathering all this\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/version/version.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 8,
                  "endLine": 74,
                  "endColumn": 16,
                  "snippet": {
                    "text": "resources.  First, the tool looks at the labels of the cert-manager CRD\nresources. Then, it searches for the labels of the resources related the\ncert-manager webhook linked in the CRDs.  It also tries to derive the version\nfrom the docker image tag of that webhook service.  After gathering all this\nversion information, the tool checks if all versions are the same and returns\nthat version. If no version information is found or the found versions differ,\nan error will be displayed.\n",
                    "rendered": {
                      "text": "resources.  First, the tool looks at the labels of the cert-manager CRD\nresources. Then, it searches for the labels of the resources related the\ncert-manager webhook linked in the CRDs.  It also tries to derive the version\nfrom the docker image tag of that webhook service.  After gathering all this\nversion information, the tool checks if all versions are the same and returns\nthat version. If no version information is found or the found versions differ,\nan error will be displayed.\n",
                      "markdown": "`resources.  First, the tool looks at the labels of the cert-manager CRD\nresources. Then, it searches for the labels of the resources related the\ncert-manager webhook linked in the CRDs.  It also tries to derive the version\nfrom the docker image tag of that webhook service.  After gathering all this\nversion information, the tool checks if all versions are the same and returns\nthat version. If no version information is found or the found versions differ,\nan error will be displayed.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 75,
                  "endLine": 244,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\t\tfmt.Fprintf(o.ErrOut, \"CertificateRequest %v in namespace %v has not been signed yet. Wait until it is signed...\\n\",\n\t\t\treq.Name, req.Namespace)\n\t\terr = wait.PollUntilContextTimeout(ctx, time.Second, o.Timeout, false, func(ctx context.Context) (done bool, err error) {\n\t\t\treq, err = o.CMClient.CertmanagerV1().CertificateRequests(req.Namespace).Get(ctx, req.Name, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\treturn false, nil // nolint: nilerr // Retry and keep polling until context is cancelled\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\tfmt.Fprintf(o.ErrOut, \"CertificateRequest %v in namespace %v has not been signed yet. Wait until it is signed...\\n\",\n\t\t\treq.Name, req.Namespace)\n\t\terr = wait.PollUntilContextTimeout(ctx, time.Second, o.Timeout, false, func(ctx context.Context) (done bool, err error) {\n\t\t\treq, err = o.CMClient.CertmanagerV1().CertificateRequests(req.Namespace).Get(ctx, req.Name, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\treturn false, nil // nolint: nilerr // Retry and keep polling until context is cancelled\n\t\t\t}\n",
                      "markdown": "`\t\tfmt.Fprintf(o.ErrOut, \"CertificateRequest %v in namespace %v has not been signed yet. Wait until it is signed...\\n\",\n\t\t\treq.Name, req.Namespace)\n\t\terr = wait.PollUntilContextTimeout(ctx, time.Second, o.Timeout, false, func(ctx context.Context) (done bool, err error) {\n\t\t\treq, err = o.CMClient.CertmanagerV1().CertificateRequests(req.Namespace).Get(ctx, req.Name, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\treturn false, nil // nolint: nilerr // Retry and keep polling until context is cancelled\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 26,
                  "endLine": 304,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\n\tsigner, err := pki.DecodePrivateKeyBytes(pk)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, err\n\t}\n\n\tsigner, err := pki.DecodePrivateKeyBytes(pk)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                      "markdown": "`\t\treturn nil, err\n\t}\n\n\tsigner, err := pki.DecodePrivateKeyBytes(pk)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 55,
                  "endLine": 207,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n\n\tkeyData, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateRequest: %w\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n\n\tkeyData, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateRequest: %w\", err)\n\t}\n",
                      "markdown": "`\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n\n\tkeyData, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateRequest: %w\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 27,
                  "endLine": 207,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n\n\tkeyData, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateRequest: %w\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n\n\tkeyData, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateRequest: %w\", err)\n\t}\n",
                      "markdown": "`\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n\n\tkeyData, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateRequest: %w\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 28,
                  "endLine": 202,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n",
                      "markdown": "`\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when generating new private key for CertificateRequest: %w\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 42,
                  "endLine": 199,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n",
                    "rendered": {
                      "text": "\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n",
                      "markdown": "`\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 11,
                  "endLine": 199,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n",
                    "rendered": {
                      "text": "\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n",
                      "markdown": "`\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 13,
                  "endLine": 198,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t}\n\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n",
                      "markdown": "`\t}\n\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 7,
                  "endLine": 130,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdCreateCR(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"certificaterequest\",\n\t\tAliases: []string{\"cr\"},\n\t\tShort:   \"Create a cert-manager CertificateRequest resource, using a Certificate resource as a template\",\n",
                    "rendered": {
                      "text": "func NewCmdCreateCR(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"certificaterequest\",\n\t\tAliases: []string{\"cr\"},\n\t\tShort:   \"Create a cert-manager CertificateRequest resource, using a Certificate resource as a template\",\n",
                      "markdown": "`func NewCmdCreateCR(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"certificaterequest\",\n\t\tAliases: []string{\"cr\"},\n\t\tShort:   \"Create a cert-manager CertificateRequest resource, using a Certificate resource as a template\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 14,
                  "endLine": 125,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tcmd.Flags().BoolVar(&o.FetchCert, \"fetch-certificate\", o.FetchCert,\n\t\t\"If set to true, command will wait for CertificateRequest to be signed to store x509 certificate in a file\")\n\tcmd.Flags().DurationVar(&o.Timeout, \"timeout\", 5*time.Minute,\n\t\t\"Time before timeout when waiting for CertificateRequest to be signed, must include unit, e.g. 10m or 1h\")\n\n\to.Factory = factory.New(cmd)\n\n",
                    "rendered": {
                      "text": "\tcmd.Flags().BoolVar(&o.FetchCert, \"fetch-certificate\", o.FetchCert,\n\t\t\"If set to true, command will wait for CertificateRequest to be signed to store x509 certificate in a file\")\n\tcmd.Flags().DurationVar(&o.Timeout, \"timeout\", 5*time.Minute,\n\t\t\"Time before timeout when waiting for CertificateRequest to be signed, must include unit, e.g. 10m or 1h\")\n\n\to.Factory = factory.New(cmd)\n\n",
                      "markdown": "`\tcmd.Flags().BoolVar(&o.FetchCert, \"fetch-certificate\", o.FetchCert,\n\t\t\"If set to true, command will wait for CertificateRequest to be signed to store x509 certificate in a file\")\n\tcmd.Flags().DurationVar(&o.Timeout, \"timeout\", 5*time.Minute,\n\t\t\"Time before timeout when waiting for CertificateRequest to be signed, must include unit, e.g. 10m or 1h\")\n\n\to.Factory = factory.New(cmd)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tInputFilename string\n\t// Length of time the command blocks to wait on CertificateRequest to be ready if --fetch-certificate flag is set\n\t// If not specified, default value is 5 minutes\n\tTimeout time.Duration\n\n\tgenericclioptions.IOStreams\n\t*factory.Factory\n",
                    "rendered": {
                      "text": "\tInputFilename string\n\t// Length of time the command blocks to wait on CertificateRequest to be ready if --fetch-certificate flag is set\n\t// If not specified, default value is 5 minutes\n\tTimeout time.Duration\n\n\tgenericclioptions.IOStreams\n\t*factory.Factory\n",
                      "markdown": "`\tInputFilename string\n\t// Length of time the command blocks to wait on CertificateRequest to be ready if --fetch-certificate flag is set\n\t// If not specified, default value is 5 minutes\n\tTimeout time.Duration\n\n\tgenericclioptions.IOStreams\n\t*factory.Factory\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 66,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t// when generating the CertificateRequest resource\n\t// Required\n\tInputFilename string\n\t// Length of time the command blocks to wait on CertificateRequest to be ready if --fetch-certificate flag is set\n\t// If not specified, default value is 5 minutes\n\tTimeout time.Duration\n\n",
                    "rendered": {
                      "text": "\t// when generating the CertificateRequest resource\n\t// Required\n\tInputFilename string\n\t// Length of time the command blocks to wait on CertificateRequest to be ready if --fetch-certificate flag is set\n\t// If not specified, default value is 5 minutes\n\tTimeout time.Duration\n\n",
                      "markdown": "`\t// when generating the CertificateRequest resource\n\t// Required\n\tInputFilename string\n\t// Length of time the command blocks to wait on CertificateRequest to be ready if --fetch-certificate flag is set\n\t// If not specified, default value is 5 minutes\n\tTimeout time.Duration\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 83,
                  "endLine": 57,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\t// If not specified, the private key will be written to <NameOfCR>.key\n\tKeyFilename string\n\t// If true, will wait for CertificateRequest to be ready to store the x509 certificate in a file\n\t// Command will block until CertificateRequest is ready or timeout as specified by Timeout happens\n\tFetchCert bool\n\t// Name of file that the generated x509 certificate will be stored in if --fetch-certificate flag is set\n\t// If not specified, the private key will be written to <NameOfCR>.crt\n",
                    "rendered": {
                      "text": "\t// If not specified, the private key will be written to <NameOfCR>.key\n\tKeyFilename string\n\t// If true, will wait for CertificateRequest to be ready to store the x509 certificate in a file\n\t// Command will block until CertificateRequest is ready or timeout as specified by Timeout happens\n\tFetchCert bool\n\t// Name of file that the generated x509 certificate will be stored in if --fetch-certificate flag is set\n\t// If not specified, the private key will be written to <NameOfCR>.crt\n",
                      "markdown": "`\t// If not specified, the private key will be written to <NameOfCR>.key\n\tKeyFilename string\n\t// If true, will wait for CertificateRequest to be ready to store the x509 certificate in a file\n\t// Command will block until CertificateRequest is ready or timeout as specified by Timeout happens\n\tFetchCert bool\n\t// Name of file that the generated x509 certificate will be stored in if --fetch-certificate flag is set\n\t// If not specified, the private key will be written to <NameOfCR>.crt\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificaterequest/certificaterequest.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 59,
                  "endLine": 57,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\t// If not specified, the private key will be written to <NameOfCR>.key\n\tKeyFilename string\n\t// If true, will wait for CertificateRequest to be ready to store the x509 certificate in a file\n\t// Command will block until CertificateRequest is ready or timeout as specified by Timeout happens\n\tFetchCert bool\n\t// Name of file that the generated x509 certificate will be stored in if --fetch-certificate flag is set\n\t// If not specified, the private key will be written to <NameOfCR>.crt\n",
                    "rendered": {
                      "text": "\t// If not specified, the private key will be written to <NameOfCR>.key\n\tKeyFilename string\n\t// If true, will wait for CertificateRequest to be ready to store the x509 certificate in a file\n\t// Command will block until CertificateRequest is ready or timeout as specified by Timeout happens\n\tFetchCert bool\n\t// Name of file that the generated x509 certificate will be stored in if --fetch-certificate flag is set\n\t// If not specified, the private key will be written to <NameOfCR>.crt\n",
                      "markdown": "`\t// If not specified, the private key will be written to <NameOfCR>.key\n\tKeyFilename string\n\t// If true, will wait for CertificateRequest to be ready to store the x509 certificate in a file\n\t// Command will block until CertificateRequest is ready or timeout as specified by Timeout happens\n\tFetchCert bool\n\t// Name of file that the generated x509 certificate will be stored in if --fetch-certificate flag is set\n\t// If not specified, the private key will be written to <NameOfCR>.crt\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 72,
                  "endLine": 262,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\t\tfmt.Fprintf(o.Out, \"CertificateSigningRequest %s has not been signed yet. Wait until it is signed...\\n\", req.Name)\n\n\t\terr = wait.PollUntilContextTimeout(ctx, time.Second, o.Timeout, false, func(ctx context.Context) (done bool, err error) {\n\t\t\treq, err = o.KubeClient.CertificatesV1().CertificateSigningRequests().Get(ctx, req.Name, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\treturn false, err\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\tfmt.Fprintf(o.Out, \"CertificateSigningRequest %s has not been signed yet. Wait until it is signed...\\n\", req.Name)\n\n\t\terr = wait.PollUntilContextTimeout(ctx, time.Second, o.Timeout, false, func(ctx context.Context) (done bool, err error) {\n\t\t\treq, err = o.KubeClient.CertificatesV1().CertificateSigningRequests().Get(ctx, req.Name, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\treturn false, err\n\t\t\t}\n",
                      "markdown": "`\t\tfmt.Fprintf(o.Out, \"CertificateSigningRequest %s has not been signed yet. Wait until it is signed...\\n\", req.Name)\n\n\t\terr = wait.PollUntilContextTimeout(ctx, time.Second, o.Timeout, false, func(ctx context.Context) (done bool, err error) {\n\t\t\treq, err = o.KubeClient.CertificatesV1().CertificateSigningRequests().Get(ctx, req.Name, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\treturn false, err\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 26,
                  "endLine": 385,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\n\tsigner, err := pki.DecodePrivateKeyBytes(pk)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, err\n\t}\n\n\tsigner, err := pki.DecodePrivateKeyBytes(pk)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                      "markdown": "`\t\treturn nil, err\n\t}\n\n\tsigner, err := pki.DecodePrivateKeyBytes(pk)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 54,
                  "endLine": 224,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n\n\tkeyPEM, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateSigningRequest: %s\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n\n\tkeyPEM, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateSigningRequest: %s\", err)\n\t}\n",
                      "markdown": "`\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n\n\tkeyPEM, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateSigningRequest: %s\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 26,
                  "endLine": 224,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n\n\tkeyPEM, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateSigningRequest: %s\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n\n\tkeyPEM, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateSigningRequest: %s\", err)\n\t}\n",
                      "markdown": "`\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n\n\tkeyPEM, err := pki.EncodePrivateKey(signer, crt.Spec.PrivateKey.Encoding)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode new private key for CertificateSigningRequest: %s\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 28,
                  "endLine": 219,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\tcrt.Namespace = \"default\"\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\tcrt.Namespace = \"default\"\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n",
                      "markdown": "`\t\tcrt.Namespace = \"default\"\n\t}\n\n\tsigner, err := pki.GeneratePrivateKeyForCertificate(crt)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when generating new private key for CertificateSigningRequest: %s\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 42,
                  "endLine": 210,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tif len(crt.Namespace) == 0 {\n",
                    "rendered": {
                      "text": "\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tif len(crt.Namespace) == 0 {\n",
                      "markdown": "`\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tif len(crt.Namespace) == 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 11,
                  "endLine": 210,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tif len(crt.Namespace) == 0 {\n",
                    "rendered": {
                      "text": "\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tif len(crt.Namespace) == 0 {\n",
                      "markdown": "`\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n\tif len(crt.Namespace) == 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 13,
                  "endLine": 209,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t}\n\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n",
                      "markdown": "`\t}\n\n\tcrt = crt.DeepCopy()\n\tif crt.Spec.PrivateKey == nil {\n\t\tcrt.Spec.PrivateKey = &cmapi.CertificatePrivateKey{}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 7,
                  "endLine": 142,
                  "snippet": {
                    "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                    "rendered": {
                      "text": "\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n",
                      "markdown": "`\n\to.Factory = factory.New(cmd)\n\n\treturn cmd\n}\n\n// Validate validates the provided options\nfunc (o *Options) Validate(args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdCreateCSR(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"certificatesigningrequest\",\n\t\tAliases: []string{\"csr\"},\n\t\tShort:   \"Create a Kubernetes CertificateSigningRequest resource, using a Certificate resource as a template\",\n",
                    "rendered": {
                      "text": "func NewCmdCreateCSR(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"certificatesigningrequest\",\n\t\tAliases: []string{\"csr\"},\n\t\tShort:   \"Create a Kubernetes CertificateSigningRequest resource, using a Certificate resource as a template\",\n",
                      "markdown": "`func NewCmdCreateCSR(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:     \"certificatesigningrequest\",\n\t\tAliases: []string{\"csr\"},\n\t\tShort:   \"Create a Kubernetes CertificateSigningRequest resource, using a Certificate resource as a template\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 14,
                  "endLine": 137,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tcmd.Flags().BoolVarP(&o.FetchCert, \"fetch-certificate\", \"w\", o.FetchCert,\n\t\t\"If set to true, command will wait for CertificateSigningRequest to be signed to store x509 certificate in a file\")\n\tcmd.Flags().DurationVar(&o.Timeout, \"timeout\", 5*time.Minute,\n\t\t\"Time before timeout when waiting for CertificateSigningRequest to be signed, must include unit, e.g. 10m or 1h\")\n\n\to.Factory = factory.New(cmd)\n\n",
                    "rendered": {
                      "text": "\tcmd.Flags().BoolVarP(&o.FetchCert, \"fetch-certificate\", \"w\", o.FetchCert,\n\t\t\"If set to true, command will wait for CertificateSigningRequest to be signed to store x509 certificate in a file\")\n\tcmd.Flags().DurationVar(&o.Timeout, \"timeout\", 5*time.Minute,\n\t\t\"Time before timeout when waiting for CertificateSigningRequest to be signed, must include unit, e.g. 10m or 1h\")\n\n\to.Factory = factory.New(cmd)\n\n",
                      "markdown": "`\tcmd.Flags().BoolVarP(&o.FetchCert, \"fetch-certificate\", \"w\", o.FetchCert,\n\t\t\"If set to true, command will wait for CertificateSigningRequest to be signed to store x509 certificate in a file\")\n\tcmd.Flags().DurationVar(&o.Timeout, \"timeout\", 5*time.Minute,\n\t\t\"Time before timeout when waiting for CertificateSigningRequest to be signed, must include unit, e.g. 10m or 1h\")\n\n\to.Factory = factory.New(cmd)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t// Length of time the command blocks to wait on CertificateSigningRequest to\n\t// be ready if --fetch-certificate flag is set If not specified, default\n\t// value is 5 minutes.\n\tTimeout time.Duration\n\n\tgenericclioptions.IOStreams\n\t*factory.Factory\n",
                    "rendered": {
                      "text": "\t// Length of time the command blocks to wait on CertificateSigningRequest to\n\t// be ready if --fetch-certificate flag is set If not specified, default\n\t// value is 5 minutes.\n\tTimeout time.Duration\n\n\tgenericclioptions.IOStreams\n\t*factory.Factory\n",
                      "markdown": "`\t// Length of time the command blocks to wait on CertificateSigningRequest to\n\t// be ready if --fetch-certificate flag is set If not specified, default\n\t// value is 5 minutes.\n\tTimeout time.Duration\n\n\tgenericclioptions.IOStreams\n\t*factory.Factory\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "endLine": 77,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t// Required.\n\tInputFilename string\n\n\t// Length of time the command blocks to wait on CertificateSigningRequest to\n\t// be ready if --fetch-certificate flag is set If not specified, default\n\t// value is 5 minutes.\n\tTimeout time.Duration\n",
                    "rendered": {
                      "text": "\t// Required.\n\tInputFilename string\n\n\t// Length of time the command blocks to wait on CertificateSigningRequest to\n\t// be ready if --fetch-certificate flag is set If not specified, default\n\t// value is 5 minutes.\n\tTimeout time.Duration\n",
                      "markdown": "`\t// Required.\n\tInputFilename string\n\n\t// Length of time the command blocks to wait on CertificateSigningRequest to\n\t// be ready if --fetch-certificate flag is set If not specified, default\n\t// value is 5 minutes.\n\tTimeout time.Duration\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 16,
                  "endLine": 64,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t// If true, will wait for CertificateSigingRequest to be ready to store the\n\t// x509 certificate in a file.\n\t// Command will block until CertificateSigningRequest is ready or timeout as\n\t// specified by Timeout happens.\n\tFetchCert bool\n\n\t// Name of file that the generated x509 certificate will be stored in if\n",
                    "rendered": {
                      "text": "\t// If true, will wait for CertificateSigingRequest to be ready to store the\n\t// x509 certificate in a file.\n\t// Command will block until CertificateSigningRequest is ready or timeout as\n\t// specified by Timeout happens.\n\tFetchCert bool\n\n\t// Name of file that the generated x509 certificate will be stored in if\n",
                      "markdown": "`\t// If true, will wait for CertificateSigingRequest to be ready to store the\n\t// x509 certificate in a file.\n\t// Command will block until CertificateSigningRequest is ready or timeout as\n\t// specified by Timeout happens.\n\tFetchCert bool\n\n\t// Name of file that the generated x509 certificate will be stored in if\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/create/certificatesigningrequest/certificatesigningrequest.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 66,
                  "endLine": 63,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n\t// If true, will wait for CertificateSigingRequest to be ready to store the\n\t// x509 certificate in a file.\n\t// Command will block until CertificateSigningRequest is ready or timeout as\n\t// specified by Timeout happens.\n\tFetchCert bool\n\n",
                    "rendered": {
                      "text": "\n\t// If true, will wait for CertificateSigingRequest to be ready to store the\n\t// x509 certificate in a file.\n\t// Command will block until CertificateSigningRequest is ready or timeout as\n\t// specified by Timeout happens.\n\tFetchCert bool\n\n",
                      "markdown": "`\n\t// If true, will wait for CertificateSigingRequest to be ready to store the\n\t// x509 certificate in a file.\n\t// Command will block until CertificateSigningRequest is ready or timeout as\n\t// specified by Timeout happens.\n\tFetchCert bool\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_create_cr_test.go"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 78,
                  "endLine": 364,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n\t\t\t// Finished creating CR, check if everything is expected\n\t\t\tcrName := test.inputArgs[0]\n\t\t\tgotCr, err := cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).Get(ctx, crName, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\n\t\t\t// Finished creating CR, check if everything is expected\n\t\t\tcrName := test.inputArgs[0]\n\t\t\tgotCr, err := cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).Get(ctx, crName, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n",
                      "markdown": "`\n\t\t\t// Finished creating CR, check if everything is expected\n\t\t\tcrName := test.inputArgs[0]\n\t\t\tgotCr, err := cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).Get(ctx, crName, metav1.GetOptions{})\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_create_cr_test.go"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 78,
                  "endLine": 316,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\t\t\t\tgo func() {\n\t\t\t\t\tdefer close(errCh)\n\t\t\t\t\terr = wait.PollUntilContextCancel(pollCtx, time.Second, true, func(ctx context.Context) (done bool, err error) {\n\t\t\t\t\t\treq, err = cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).Get(ctx, test.inputArgs[0], metav1.GetOptions{})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn false, nil // nolint: nilerr // Retry and keep polling until context is cancelled\n\t\t\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tgo func() {\n\t\t\t\t\tdefer close(errCh)\n\t\t\t\t\terr = wait.PollUntilContextCancel(pollCtx, time.Second, true, func(ctx context.Context) (done bool, err error) {\n\t\t\t\t\t\treq, err = cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).Get(ctx, test.inputArgs[0], metav1.GetOptions{})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn false, nil // nolint: nilerr // Retry and keep polling until context is cancelled\n\t\t\t\t\t\t}\n",
                      "markdown": "`\t\t\t\tgo func() {\n\t\t\t\t\tdefer close(errCh)\n\t\t\t\t\terr = wait.PollUntilContextCancel(pollCtx, time.Second, true, func(ctx context.Context) (done bool, err error) {\n\t\t\t\t\t\treq, err = cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).Get(ctx, test.inputArgs[0], metav1.GetOptions{})\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn false, nil // nolint: nilerr // Retry and keep polling until context is cancelled\n\t\t\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_create_cr_test.go"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 22,
                  "endLine": 357,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"error when reading file storing private key: %v\", err)\n\t\t\t}\n\t\t\t_, err = pki.DecodePrivateKeyBytes(keyData)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"invalid private key: %v\", err)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"error when reading file storing private key: %v\", err)\n\t\t\t}\n\t\t\t_, err = pki.DecodePrivateKeyBytes(keyData)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"invalid private key: %v\", err)\n\t\t\t}\n",
                      "markdown": "`\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"error when reading file storing private key: %v\", err)\n\t\t\t}\n\t\t\t_, err = pki.DecodePrivateKeyBytes(keyData)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"invalid private key: %v\", err)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_create_cr_test.go"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 22,
                  "endLine": 154,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"error when reading file storing private key: %v\", err)\n\t\t\t}\n\t\t\t_, err = pki.DecodePrivateKeyBytes(keyData)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"invalid private key: %v\", err)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"error when reading file storing private key: %v\", err)\n\t\t\t}\n\t\t\t_, err = pki.DecodePrivateKeyBytes(keyData)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"invalid private key: %v\", err)\n\t\t\t}\n",
                      "markdown": "`\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"error when reading file storing private key: %v\", err)\n\t\t\t}\n\t\t\t_, err = pki.DecodePrivateKeyBytes(keyData)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"invalid private key: %v\", err)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_create_cr_test.go"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 32,
                  "endLine": 327,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\t// CR has been created, try update status\n\t\t\t\t\treq.Status.Conditions = test.crStatus.Conditions\n\t\t\t\t\treq.Status.Certificate = test.crStatus.Certificate\n\t\t\t\t\treq, err = cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).UpdateStatus(pollCtx, req, metav1.UpdateOptions{})\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\t// CR has been created, try update status\n\t\t\t\t\treq.Status.Conditions = test.crStatus.Conditions\n\t\t\t\t\treq.Status.Certificate = test.crStatus.Certificate\n\t\t\t\t\treq, err = cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).UpdateStatus(pollCtx, req, metav1.UpdateOptions{})\n",
                      "markdown": "`\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\t// CR has been created, try update status\n\t\t\t\t\treq.Status.Conditions = test.crStatus.Conditions\n\t\t\t\t\treq.Status.Certificate = test.crStatus.Certificate\n\t\t\t\t\treq, err = cmCl.CertmanagerV1().CertificateRequests(test.inputNamespace).UpdateStatus(pollCtx, req, metav1.UpdateOptions{})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_create_cr_test.go"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tkeyFilename    string\n\tcertFilename   string\n\tfetchCert      bool\n\ttimeout        time.Duration\n\tcrStatus       cmapiv1.CertificateRequestStatus\n\n\texpRunErr          bool\n",
                    "rendered": {
                      "text": "\tkeyFilename    string\n\tcertFilename   string\n\tfetchCert      bool\n\ttimeout        time.Duration\n\tcrStatus       cmapiv1.CertificateRequestStatus\n\n\texpRunErr          bool\n",
                      "markdown": "`\tkeyFilename    string\n\tcertFilename   string\n\tfetchCert      bool\n\ttimeout        time.Duration\n\tcrStatus       cmapiv1.CertificateRequestStatus\n\n\texpRunErr          bool\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 65,
                  "endLine": 510,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\t\t\t}\n\n\t\t\tif len(test.challenges) > 0 {\n\t\t\t\tcreatedOrder, err := cmCl.AcmeV1().Orders(test.req.Namespace).Get(ctx, test.order.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\n\t\t\tif len(test.challenges) > 0 {\n\t\t\t\tcreatedOrder, err := cmCl.AcmeV1().Orders(test.req.Namespace).Get(ctx, test.order.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n",
                      "markdown": "`\t\t\t}\n\n\t\t\tif len(test.challenges) > 0 {\n\t\t\t\tcreatedOrder, err := cmCl.AcmeV1().Orders(test.req.Namespace).Get(ctx, test.order.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 83,
                  "endLine": 499,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\t\t\t}\n\n\t\t\tif test.order != nil {\n\t\t\t\tcreatedReq, err := cmCl.CertmanagerV1().CertificateRequests(test.req.Namespace).Get(ctx, test.req.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\n\t\t\tif test.order != nil {\n\t\t\t\tcreatedReq, err := cmCl.CertmanagerV1().CertificateRequests(test.req.Namespace).Get(ctx, test.req.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n",
                      "markdown": "`\t\t\t}\n\n\t\t\tif test.order != nil {\n\t\t\t\tcreatedReq, err := cmCl.CertmanagerV1().CertificateRequests(test.req.Namespace).Get(ctx, test.req.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 24,
                  "endLine": 210,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\t\t\tgen.SetIssuerNamespace(ns1),\n\t\t\t\tgen.SetIssuerACME(cmacme.ACMEIssuer{\n\t\t\t\t\tServer: \"https://dummy.acme.local/\",\n\t\t\t\t\tPrivateKey: cmmeta.SecretKeySelector{\n\t\t\t\t\t\tLocalObjectReference: cmmeta.LocalObjectReference{\n\t\t\t\t\t\t\tName: \"test\",\n\t\t\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tgen.SetIssuerNamespace(ns1),\n\t\t\t\tgen.SetIssuerACME(cmacme.ACMEIssuer{\n\t\t\t\t\tServer: \"https://dummy.acme.local/\",\n\t\t\t\t\tPrivateKey: cmmeta.SecretKeySelector{\n\t\t\t\t\t\tLocalObjectReference: cmmeta.LocalObjectReference{\n\t\t\t\t\t\t\tName: \"test\",\n\t\t\t\t\t\t},\n",
                      "markdown": "`\t\t\t\tgen.SetIssuerNamespace(ns1),\n\t\t\t\tgen.SetIssuerACME(cmacme.ACMEIssuer{\n\t\t\t\t\tServer: \"https://dummy.acme.local/\",\n\t\t\t\t\tPrivateKey: cmmeta.SecretKeySelector{\n\t\t\t\t\t\tLocalObjectReference: cmmeta.LocalObjectReference{\n\t\t\t\t\t\t\tName: \"test\",\n\t\t\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 5,
                  "endLine": 210,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\t\t\tgen.SetIssuerNamespace(ns1),\n\t\t\t\tgen.SetIssuerACME(cmacme.ACMEIssuer{\n\t\t\t\t\tServer: \"https://dummy.acme.local/\",\n\t\t\t\t\tPrivateKey: cmmeta.SecretKeySelector{\n\t\t\t\t\t\tLocalObjectReference: cmmeta.LocalObjectReference{\n\t\t\t\t\t\t\tName: \"test\",\n\t\t\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tgen.SetIssuerNamespace(ns1),\n\t\t\t\tgen.SetIssuerACME(cmacme.ACMEIssuer{\n\t\t\t\t\tServer: \"https://dummy.acme.local/\",\n\t\t\t\t\tPrivateKey: cmmeta.SecretKeySelector{\n\t\t\t\t\t\tLocalObjectReference: cmmeta.LocalObjectReference{\n\t\t\t\t\t\t\tName: \"test\",\n\t\t\t\t\t\t},\n",
                      "markdown": "`\t\t\t\tgen.SetIssuerNamespace(ns1),\n\t\t\t\tgen.SetIssuerACME(cmacme.ACMEIssuer{\n\t\t\t\t\tServer: \"https://dummy.acme.local/\",\n\t\t\t\t\tPrivateKey: cmmeta.SecretKeySelector{\n\t\t\t\t\t\tLocalObjectReference: cmmeta.LocalObjectReference{\n\t\t\t\t\t\t\tName: \"test\",\n\t\t\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 30,
                  "endLine": 48,
                  "endColumn": 40,
                  "snippet": {
                    "text": ")\n\nfunc generateCSR(t *testing.T) []byte {\n\tskRSA, err := pki.GenerateRSAPrivateKey(2048)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n",
                    "rendered": {
                      "text": ")\n\nfunc generateCSR(t *testing.T) []byte {\n\tskRSA, err := pki.GenerateRSAPrivateKey(2048)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n",
                      "markdown": "`)\n\nfunc generateCSR(t *testing.T) []byte {\n\tskRSA, err := pki.GenerateRSAPrivateKey(2048)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 4,
                  "endLine": 130,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\tinputNamespace    string\n\t\treq               *cmapi.CertificateRequest\n\t\treqStatus         *cmapi.CertificateRequestStatus\n\t\t// At most one of issuer and clusterIssuer is not nil\n\t\tissuer        *cmapi.Issuer\n\t\tclusterIssuer *cmapi.ClusterIssuer\n\t\tsecret        *corev1.Secret\n",
                    "rendered": {
                      "text": "\t\tinputNamespace    string\n\t\treq               *cmapi.CertificateRequest\n\t\treqStatus         *cmapi.CertificateRequestStatus\n\t\t// At most one of issuer and clusterIssuer is not nil\n\t\tissuer        *cmapi.Issuer\n\t\tclusterIssuer *cmapi.ClusterIssuer\n\t\tsecret        *corev1.Secret\n",
                      "markdown": "`\t\tinputNamespace    string\n\t\treq               *cmapi.CertificateRequest\n\t\treqStatus         *cmapi.CertificateRequestStatus\n\t\t// At most one of issuer and clusterIssuer is not nil\n\t\tissuer        *cmapi.Issuer\n\t\tclusterIssuer *cmapi.ClusterIssuer\n\t\tsecret        *corev1.Secret\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 93,
                  "endLine": 674,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\t\t\t}\n\n\t\t\tif !notAfter.Equal(expectedNotAfter) {\n\t\t\t\treturn fmt.Errorf(\"got unexpected 'not after' (note that time zone differences could be a red herring) - wanted %q but got %q\", expectedNotAfter.Format(time.RFC3339), notAfter.Format(time.RFC3339))\n\t\t\t}\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\n\t\t\tif !notAfter.Equal(expectedNotAfter) {\n\t\t\t\treturn fmt.Errorf(\"got unexpected 'not after' (note that time zone differences could be a red herring) - wanted %q but got %q\", expectedNotAfter.Format(time.RFC3339), notAfter.Format(time.RFC3339))\n\t\t\t}\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\t}\n\n\t\t\tif !notAfter.Equal(expectedNotAfter) {\n\t\t\t\treturn fmt.Errorf(\"got unexpected 'not after' (note that time zone differences could be a red herring) - wanted %q but got %q\", expectedNotAfter.Format(time.RFC3339), notAfter.Format(time.RFC3339))\n\t\t\t}\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 60,
                  "endLine": 674,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\t\t\t}\n\n\t\t\tif !notAfter.Equal(expectedNotAfter) {\n\t\t\t\treturn fmt.Errorf(\"got unexpected 'not after' (note that time zone differences could be a red herring) - wanted %q but got %q\", expectedNotAfter.Format(time.RFC3339), notAfter.Format(time.RFC3339))\n\t\t\t}\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\n\t\t\tif !notAfter.Equal(expectedNotAfter) {\n\t\t\t\treturn fmt.Errorf(\"got unexpected 'not after' (note that time zone differences could be a red herring) - wanted %q but got %q\", expectedNotAfter.Format(time.RFC3339), notAfter.Format(time.RFC3339))\n\t\t\t}\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\t}\n\n\t\t\tif !notAfter.Equal(expectedNotAfter) {\n\t\t\t\treturn fmt.Errorf(\"got unexpected 'not after' (note that time zone differences could be a red herring) - wanted %q but got %q\", expectedNotAfter.Format(time.RFC3339), notAfter.Format(time.RFC3339))\n\t\t\t}\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_status_certificate_test.go"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 36,
                  "endLine": 556,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tif !match {\n\t\t\t\tdmp := diffmatchpatch.New()\n\t\t\t\tdiffs := dmp.DiffMain(expectedOutput, commandOutput, false)\n\t\t\t\tt.Errorf(\"got unexpected output, diff (ignoring line anchors ^ and $ and regex for creation time):\\n%s\\n\\n expected: \\n%s\\n\\n got: \\n%s\", dmp.DiffPrettyText(diffs), test.expOutput, outBuf.String())\n\t\t\t}\n\n\t\t\terr = validateOutputTimes(commandOutput, certIsValidTime)\n",
                    "rendered": {
                      "text": "\t\t\tif !match {\n\t\t\t\tdmp := diffmatchpatch.New()\n\t\t\t\tdiffs := dmp.DiffMain(expectedOutput, commandOutput, false)\n\t\t\t\tt.Errorf(\"got unexpected output, diff (ignoring line anchors ^ and $ and regex for creation time):\\n%s\\n\\n expected: \\n%s\\n\\n got: \\n%s\", dmp.DiffPrettyText(diffs), test.expOutput, outBuf.String())\n\t\t\t}\n\n\t\t\terr = validateOutputTimes(commandOutput, certIsValidTime)\n",
                      "markdown": "`\t\t\tif !match {\n\t\t\t\tdmp := diffmatchpatch.New()\n\t\t\t\tdiffs := dmp.DiffMain(expectedOutput, commandOutput, false)\n\t\t\t\tt.Errorf(\"got unexpected output, diff (ignoring line anchors ^ and $ and regex for creation time):\\n%s\\n\\n expected: \\n%s\\n\\n got: \\n%s\", dmp.DiffPrettyText(diffs), test.expOutput, outBuf.String())\n\t\t\t}\n\n\t\t\terr = validateOutputTimes(commandOutput, certIsValidTime)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_renew_test.go"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 67,
                  "endLine": 182,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n\t\t\t// Check issuing condition against Certificates\n\t\t\tfor crt, shouldIssue := range test.crtsWithIssuing {\n\t\t\t\tgotCrt, err := cmCl.CertmanagerV1().Certificates(crt.Namespace).Get(ctx, crt.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\n\t\t\t// Check issuing condition against Certificates\n\t\t\tfor crt, shouldIssue := range test.crtsWithIssuing {\n\t\t\t\tgotCrt, err := cmCl.CertmanagerV1().Certificates(crt.Namespace).Get(ctx, crt.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n",
                      "markdown": "`\n\t\t\t// Check issuing condition against Certificates\n\t\t\tfor crt, shouldIssue := range test.crtsWithIssuing {\n\t\t\t\tgotCrt, err := cmCl.CertmanagerV1().Certificates(crt.Namespace).Get(ctx, crt.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/test/integration/ctl_renew_test.go"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 2,
                  "endLine": 164,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\t// Run ctl renew command with input options\n\t\t\tstreams, _, _, _ := genericclioptions.NewTestIOStreams()\n\n\t\t\tcmd := &renew.Options{\n\t\t\t\tLabelSelector: test.inputLabels,\n\t\t\t\tAll:           test.inputAll,\n\t\t\t\tAllNamespaces: test.inputAllNamespaces,\n",
                    "rendered": {
                      "text": "\t\t\t// Run ctl renew command with input options\n\t\t\tstreams, _, _, _ := genericclioptions.NewTestIOStreams()\n\n\t\t\tcmd := &renew.Options{\n\t\t\t\tLabelSelector: test.inputLabels,\n\t\t\t\tAll:           test.inputAll,\n\t\t\t\tAllNamespaces: test.inputAllNamespaces,\n",
                      "markdown": "`\t\t\t// Run ctl renew command with input options\n\t\t\tstreams, _, _, _ := genericclioptions.NewTestIOStreams()\n\n\t\t\tcmd := &renew.Options{\n\t\t\t\tLabelSelector: test.inputLabels,\n\t\t\t\tAll:           test.inputAll,\n\t\t\t\tAllNamespaces: test.inputAllNamespaces,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 10,
                  "endLine": 30,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - uses: actions/setup-go@v5\n        with:\n",
                    "rendered": {
                      "text": "        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - uses: actions/setup-go@v5\n        with:\n",
                      "markdown": "`        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - uses: actions/setup-go@v5\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/.github/dependabot.yaml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/repository-base/base-dependabot/.github/dependabot.yaml instead.\n\n# Update Go dependencies and GitHub Actions dependencies daily.\nversion: 2\nupdates:\n- package-ecosystem: gomod\n",
                    "rendered": {
                      "text": "# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/repository-base/base-dependabot/.github/dependabot.yaml instead.\n\n# Update Go dependencies and GitHub Actions dependencies daily.\nversion: 2\nupdates:\n- package-ecosystem: gomod\n",
                      "markdown": "`# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n# Edit https://github.com/cert-manager/makefile-modules/blob/main/modules/repository-base/base-dependabot/.github/dependabot.yaml instead.\n\n# Update Go dependencies and GitHub Actions dependencies daily.\nversion: 2\nupdates:\n- package-ecosystem: gomod\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/fromservice.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 16,
                  "endLine": 37,
                  "endColumn": 21,
                  "snippet": {
                    "text": ") error {\n\tservice := &corev1.Service{}\n\tserviceKey := client.ObjectKey{Namespace: namespace, Name: serviceName}\n\terr := o.client.Get(ctx, serviceKey, service)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": ") error {\n\tservice := &corev1.Service{}\n\tserviceKey := client.ObjectKey{Namespace: namespace, Name: serviceName}\n\terr := o.client.Get(ctx, serviceKey, service)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`) error {\n\tservice := &corev1.Service{}\n\tserviceKey := client.ObjectKey{Namespace: namespace, Name: serviceName}\n\terr := o.client.Get(ctx, serviceKey, service)\n\tif err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/internal/versionchecker/fromservice.go"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tnamespace string,\n\tserviceName string,\n) error {\n\tservice := &corev1.Service{}\n\tserviceKey := client.ObjectKey{Namespace: namespace, Name: serviceName}\n\terr := o.client.Get(ctx, serviceKey, service)\n\tif err != nil {\n",
                    "rendered": {
                      "text": "\tnamespace string,\n\tserviceName string,\n) error {\n\tservice := &corev1.Service{}\n\tserviceKey := client.ObjectKey{Namespace: namespace, Name: serviceName}\n\terr := o.client.Get(ctx, serviceKey, service)\n\tif err != nil {\n",
                      "markdown": "`\tnamespace string,\n\tserviceName string,\n) error {\n\tservice := &corev1.Service{}\n\tserviceKey := client.ObjectKey{Namespace: namespace, Name: serviceName}\n\terr := o.client.Get(ctx, serviceKey, service)\n\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 133,
                  "endLine": 26,
                  "snippet": {
                    "text": "    - Sign the checksums\n    - Create a draft GitHub release\n    - Upload binaries, checksums and signature to the GitHub release\n3. Visit the [releases page], edit the draft release, click \"Generate release notes\", then edit the notes to add the following to the top\n    ```\n    cmctl is the command line tool for interacting with cert-manager.\n    ```\n4. Publish the release.\n",
                    "rendered": {
                      "text": "    - Sign the checksums\n    - Create a draft GitHub release\n    - Upload binaries, checksums and signature to the GitHub release\n3. Visit the [releases page], edit the draft release, click \"Generate release notes\", then edit the notes to add the following to the top\n    ```\n    cmctl is the command line tool for interacting with cert-manager.\n    ```\n4. Publish the release.\n",
                      "markdown": "`    - Sign the checksums\n    - Create a draft GitHub release\n    - Upload binaries, checksums and signature to the GitHub release\n3. Visit the [releases page], edit the draft release, click \"Generate release notes\", then edit the notes to add the following to the top\n    ```\n    cmctl is the command line tool for interacting with cert-manager.\n    ```\n4. Publish the release.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 2,
                  "endLine": 17,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    ```sh\n   export VERSION=v0.5.0-alpha.0\n   git tag --annotate --message=\"Release ${VERSION}\" \"${VERSION}\"\n   git push origin \"${VERSION}\"\n   ```\n2. A GitHub action will see the new tag and do the following:\n    - Build the binaries\n",
                    "rendered": {
                      "text": "    ```sh\n   export VERSION=v0.5.0-alpha.0\n   git tag --annotate --message=\"Release ${VERSION}\" \"${VERSION}\"\n   git push origin \"${VERSION}\"\n   ```\n2. A GitHub action will see the new tag and do the following:\n    - Build the binaries\n",
                      "markdown": "`    ```sh\n   export VERSION=v0.5.0-alpha.0\n   git tag --annotate --message=\"Release ${VERSION}\" \"${VERSION}\"\n   git push origin \"${VERSION}\"\n   ```\n2. A GitHub action will see the new tag and do the following:\n    - Build the binaries\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 2,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "1. Create a tag for the new release:\n    ```sh\n   export VERSION=v0.5.0-alpha.0\n   git tag --annotate --message=\"Release ${VERSION}\" \"${VERSION}\"\n   git push origin \"${VERSION}\"\n   ```\n2. A GitHub action will see the new tag and do the following:\n",
                    "rendered": {
                      "text": "1. Create a tag for the new release:\n    ```sh\n   export VERSION=v0.5.0-alpha.0\n   git tag --annotate --message=\"Release ${VERSION}\" \"${VERSION}\"\n   git push origin \"${VERSION}\"\n   ```\n2. A GitHub action will see the new tag and do the following:\n",
                      "markdown": "`1. Create a tag for the new release:\n    ```sh\n   export VERSION=v0.5.0-alpha.0\n   git tag --annotate --message=\"Release ${VERSION}\" \"${VERSION}\"\n   git push origin \"${VERSION}\"\n   ```\n2. A GitHub action will see the new tag and do the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 77,
                  "endLine": 9,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n## Process\n\nThere is a semi-automated release process for this project. When you create a Git tag with a tagname that has a `v` prefix and push it to GitHub it will trigger the [release workflow].\n\nThe release process for this repo is documented below:\n\n",
                    "rendered": {
                      "text": "\n## Process\n\nThere is a semi-automated release process for this project. When you create a Git tag with a tagname that has a `v` prefix and push it to GitHub it will trigger the [release workflow].\n\nThe release process for this repo is documented below:\n\n",
                      "markdown": "`\n## Process\n\nThere is a semi-automated release process for this project. When you create a Git tag with a tagname that has a `v` prefix and push it to GitHub it will trigger the [release workflow].\n\nThe release process for this repo is documented below:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 20,
                  "endLine": 71,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n...\n```\n\n",
                    "rendered": {
                      "text": "  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n...\n```\n\n",
                      "markdown": "`  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n...\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 20,
                  "endLine": 68,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  $ source <(cmctl completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n",
                    "rendered": {
                      "text": "  $ source <(cmctl completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n",
                      "markdown": "`  $ source <(cmctl completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 18,
                  "endLine": 62,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\nBash:\n  $ source <(cmctl completion bash)\n",
                    "rendered": {
                      "text": "  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\nBash:\n  $ source <(cmctl completion bash)\n",
                      "markdown": "`  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\nBash:\n  $ source <(cmctl completion bash)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 53,
                  "endLine": 57,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n",
                    "rendered": {
                      "text": "# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n",
                      "markdown": "`# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n",
                    "rendered": {
                      "text": "# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n",
                      "markdown": "`# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 20,
                  "endLine": 71,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n...\n```\n\n",
                    "rendered": {
                      "text": "  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n...\n```\n\n",
                      "markdown": "`  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n...\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 20,
                  "endLine": 68,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  $ source <(cmctl completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n",
                    "rendered": {
                      "text": "  $ source <(cmctl completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n",
                      "markdown": "`  $ source <(cmctl completion bash)\n  # To load completions for each session, execute once:\n  # Linux:\n  $ cmctl completion bash > /etc/bash_completion.d/cmctl\n\n  # macOS:\n  $ cmctl completion bash > /usr/local/etc/bash_completion.d/cmctl\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 18,
                  "endLine": 62,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\nBash:\n  $ source <(cmctl completion bash)\n",
                    "rendered": {
                      "text": "  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\nBash:\n  $ source <(cmctl completion bash)\n",
                      "markdown": "`  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\nBash:\n  $ source <(cmctl completion bash)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 55,
                  "endLine": 60,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\n",
                    "rendered": {
                      "text": "  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\n",
                      "markdown": "`  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\n",
                    "rendered": {
                      "text": "  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\n",
                      "markdown": "`  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n\n$ cmctl completion bash --help\nTo load completions:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 53,
                  "endLine": 57,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n",
                    "rendered": {
                      "text": "# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n",
                      "markdown": "`# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n",
                    "rendered": {
                      "text": "# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n",
                      "markdown": "`# or `kubectl cert-manager completion --help`\n...\nAvailable Commands:\n  bash        Generate cert-manager CLI scripts for a Bash shell\n  fish        Generate cert-manager CLI scripts for a Fish shell\n  powershell  Generate cert-manager CLI scripts for a PowerShell shell\n  zsh         Generation cert-manager CLI scripts for a ZSH shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14,
                  "snippet": {
                    "text": "OS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n\n### Shell Completion\n",
                    "rendered": {
                      "text": "OS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n\n### Shell Completion\n",
                      "markdown": "`OS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n\n### Shell Completion\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 44,
                  "endColumn": 8,
                  "snippet": {
                    "text": "```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n\n",
                    "rendered": {
                      "text": "```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n\n",
                      "markdown": "````sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 198,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n",
                    "rendered": {
                      "text": "In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n",
                      "markdown": "`In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 95,
                  "endLine": 42,
                  "endColumn": 101,
                  "snippet": {
                    "text": "In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n",
                    "rendered": {
                      "text": "In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n",
                      "markdown": "`In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 70,
                  "endLine": 42,
                  "endColumn": 75,
                  "snippet": {
                    "text": "In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n",
                    "rendered": {
                      "text": "In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n",
                      "markdown": "`In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/README.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 46,
                  "endLine": 42,
                  "endColumn": 51,
                  "snippet": {
                    "text": "In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n",
                    "rendered": {
                      "text": "In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n",
                      "markdown": "`In order to use `cmctl` you need its binary to be accessible under the name `cmctl` in your `$PATH`. Run the following commands to set up the CLI. Replace OS and ARCH with your systems equivalents:\n\n```sh\nOS=$(uname -s | tr A-Z a-z); ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/'); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_${OS}_${ARCH}\nchmod +x cmctl\nsudo mv cmctl /usr/local/bin\n# or `sudo mv cmctl /usr/local/bin/kubectl-cert_manager` to use `kubectl cert-manager` instead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/convert/convert.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "endLine": 102,
                  "snippet": {
                    "text": "\tcmdutil.AddFilenameOptionFlags(cmd, &o.FilenameOptions, \"Path to a file containing cert-manager resources to be converted.\")\n\to.PrintFlags.AddFlags(cmd)\n\n\treturn cmd\n}\n\n// Complete collects information required to run Convert command from command line.\nfunc (o *Options) Complete() error {\n",
                    "rendered": {
                      "text": "\tcmdutil.AddFilenameOptionFlags(cmd, &o.FilenameOptions, \"Path to a file containing cert-manager resources to be converted.\")\n\to.PrintFlags.AddFlags(cmd)\n\n\treturn cmd\n}\n\n// Complete collects information required to run Convert command from command line.\nfunc (o *Options) Complete() error {\n",
                      "markdown": "`\tcmdutil.AddFilenameOptionFlags(cmd, &o.FilenameOptions, \"Path to a file containing cert-manager resources to be converted.\")\n\to.PrintFlags.AddFlags(cmd)\n\n\treturn cmd\n}\n\n// Complete collects information required to run Convert command from command line.\nfunc (o *Options) Complete() error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/pkg/convert/convert.go"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func NewCmdConvert(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"convert\",\n\t\tShort: \"Convert cert-manager config files between different API versions\",\n\t\tLong: templates.LongDesc(`\n",
                    "rendered": {
                      "text": "func NewCmdConvert(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"convert\",\n\t\tShort: \"Convert cert-manager config files between different API versions\",\n\t\tLong: templates.LongDesc(`\n",
                      "markdown": "`func NewCmdConvert(setupCtx context.Context, ioStreams genericclioptions.IOStreams) *cobra.Command {\n\to := NewOptions(ioStreams)\n\n\tcmd := &cobra.Command{\n\t\tUse:   \"convert\",\n\t\tShort: \"Convert cert-manager config files between different API versions\",\n\t\tLong: templates.LongDesc(`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 21,
                  "endLine": 43,
                  "snippet": {
                    "text": "# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n",
                    "rendered": {
                      "text": "# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n",
                      "markdown": "`# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 15,
                  "snippet": {
                    "text": "##################################\n\n# Some modules build their dependencies from variables, we want these to be \n# evaluated at the last possible moment. For this we use second expansion to \n# re-evaluate the generate and verify targets a second time.\n#\n# See https://www.gnu.org/software/make/manual/html_node/Secondary-Expansion.html\n",
                    "rendered": {
                      "text": "##################################\n\n# Some modules build their dependencies from variables, we want these to be \n# evaluated at the last possible moment. For this we use second expansion to \n# re-evaluate the generate and verify targets a second time.\n#\n# See https://www.gnu.org/software/make/manual/html_node/Secondary-Expansion.html\n",
                      "markdown": "`##################################\n\n# Some modules build their dependencies from variables, we want these to be \n# evaluated at the last possible moment. For this we use second expansion to \n# re-evaluate the generate and verify targets a second time.\n#\n# See https://www.gnu.org/software/make/manual/html_node/Secondary-Expansion.html\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 19,
                  "endLine": 83,
                  "endColumn": 24,
                  "snippet": {
                    "text": "VERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n# Global variables and dirs      #\n",
                    "rendered": {
                      "text": "VERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n# Global variables and dirs      #\n",
                      "markdown": "`VERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n# Global variables and dirs      #\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 20,
                  "endLine": 82,
                  "endColumn": 25,
                  "snippet": {
                    "text": "git_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n",
                    "rendered": {
                      "text": "git_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n",
                      "markdown": "`git_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n##################################\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 79,
                  "endLine": 81,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n",
                    "rendered": {
                      "text": "\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n",
                      "markdown": "`\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 24,
                  "endLine": 81,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n",
                    "rendered": {
                      "text": "\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n",
                      "markdown": "`\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\nGITEPOCH := $(shell git show -s --format=%ct HEAD)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 22,
                  "endLine": 79,
                  "endColumn": 27,
                  "snippet": {
                    "text": "# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\n",
                    "rendered": {
                      "text": "# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\n",
                      "markdown": "`# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\nVERSION ?= $(git_version)\nIS_PRERELEASE := $(shell git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false)\nGITCOMMIT := $(shell git rev-parse HEAD)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 6,
                  "snippet": {
                    "text": "endif\n\n##################################\n# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\n",
                    "rendered": {
                      "text": "endif\n\n##################################\n# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\n",
                      "markdown": "`endif\n\n##################################\n# Git and versioning information #\n##################################\n\ngit_version := $(shell git describe --tags --always --match='v*' --abbrev=14 --dirty)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 46,
                  "endLine": 59,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n",
                    "rendered": {
                      "text": "# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n",
                      "markdown": "`# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 29,
                  "endLine": 59,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n",
                    "rendered": {
                      "text": "# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n",
                      "markdown": "`# Host OS and architecture setup #\n##################################\n\n# The reason we don't use \"go env GOOS\" or \"go env GOARCH\" is that the \"go\"\n# binary may not be available in the PATH yet when the Makefiles are\n# evaluated. HOST_OS and HOST_ARCH only support Linux, *BSD and macOS (M1\n# and Intel).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-manager-cmctl.zip/Makefile"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 21,
                  "endLine": 43,
                  "snippet": {
                    "text": "# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n",
                    "rendered": {
                      "text": "# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n",
                      "markdown": "`# For details on some of these \"prelude\" settings, see:\n# https://clarkgrubb.com/makefile-style-guide\nMAKEFLAGS += --warn-undefined-variables --no-builtin-rules\nSHELL := /usr/bin/env bash\n.SHELLFLAGS := -uo pipefail -c\n.DEFAULT_GOAL := help\n.DELETE_ON_ERROR:\n.SUFFIXES:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}