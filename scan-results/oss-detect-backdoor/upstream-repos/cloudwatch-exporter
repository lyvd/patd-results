{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/GetMetricDataDataGetter.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 18,
                  "endLine": 190,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  @Override\n  public MetricRuleData metricRuleDataFor(List<Dimension> dimensions) {\n    return results.get(dimensionsToKey(dimensions));\n  }\n\n  private static class StatAndDimensions {\n",
                    "rendered": {
                      "text": "\n  @Override\n  public MetricRuleData metricRuleDataFor(List<Dimension> dimensions) {\n    return results.get(dimensionsToKey(dimensions));\n  }\n\n  private static class StatAndDimensions {\n",
                      "markdown": "`\n  @Override\n  public MetricRuleData metricRuleDataFor(List<Dimension> dimensions) {\n    return results.get(dimensionsToKey(dimensions));\n  }\n\n  private static class StatAndDimensions {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/GetMetricDataDataGetter.java"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 40,
                  "endLine": 158,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      String statString = statAndDimensions.stat;\n      String labelsKey = statAndDimensions.dimetionsAsString;\n      Instant timestamp = dataResult.timestamps().get(0);\n      Double value = dataResult.values().get(0);\n      MetricRuleData metricRuleData =\n          res.getOrDefault(labelsKey, new MetricRuleData(timestamp, \"N/A\"));\n      Statistic stat = Statistic.fromValue(statString);\n",
                    "rendered": {
                      "text": "      String statString = statAndDimensions.stat;\n      String labelsKey = statAndDimensions.dimetionsAsString;\n      Instant timestamp = dataResult.timestamps().get(0);\n      Double value = dataResult.values().get(0);\n      MetricRuleData metricRuleData =\n          res.getOrDefault(labelsKey, new MetricRuleData(timestamp, \"N/A\"));\n      Statistic stat = Statistic.fromValue(statString);\n",
                      "markdown": "`      String statString = statAndDimensions.stat;\n      String labelsKey = statAndDimensions.dimetionsAsString;\n      Instant timestamp = dataResult.timestamps().get(0);\n      Double value = dataResult.values().get(0);\n      MetricRuleData metricRuleData =\n          res.getOrDefault(labelsKey, new MetricRuleData(timestamp, \"N/A\"));\n      Statistic stat = Statistic.fromValue(statString);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/GetMetricDataDataGetter.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 49,
                  "endLine": 157,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      StatAndDimensions statAndDimensions = MetricLabels.decode(dataResult.label());\n      String statString = statAndDimensions.stat;\n      String labelsKey = statAndDimensions.dimetionsAsString;\n      Instant timestamp = dataResult.timestamps().get(0);\n      Double value = dataResult.values().get(0);\n      MetricRuleData metricRuleData =\n          res.getOrDefault(labelsKey, new MetricRuleData(timestamp, \"N/A\"));\n",
                    "rendered": {
                      "text": "      StatAndDimensions statAndDimensions = MetricLabels.decode(dataResult.label());\n      String statString = statAndDimensions.stat;\n      String labelsKey = statAndDimensions.dimetionsAsString;\n      Instant timestamp = dataResult.timestamps().get(0);\n      Double value = dataResult.values().get(0);\n      MetricRuleData metricRuleData =\n          res.getOrDefault(labelsKey, new MetricRuleData(timestamp, \"N/A\"));\n",
                      "markdown": "`      StatAndDimensions statAndDimensions = MetricLabels.decode(dataResult.label());\n      String statString = statAndDimensions.stat;\n      String labelsKey = statAndDimensions.dimetionsAsString;\n      Instant timestamp = dataResult.timestamps().get(0);\n      Double value = dataResult.values().get(0);\n      MetricRuleData metricRuleData =\n          res.getOrDefault(labelsKey, new MetricRuleData(timestamp, \"N/A\"));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/test/java/io/prometheus/cloudwatch/CachingDimensionSourceTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 59,
                  "endLine": 28,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n    Dimension dimension = Dimension.builder().name(\"AWS/Redshift\").value(\"WriteIOPS\").build();\n    assertEquals(1, source.called);\n    assertEquals(dimension, expected.getDimensions().get(0).get(0));\n  }\n\n  private MetricRule createMetricRule(String namespace, String name) {\n",
                    "rendered": {
                      "text": "\n    Dimension dimension = Dimension.builder().name(\"AWS/Redshift\").value(\"WriteIOPS\").build();\n    assertEquals(1, source.called);\n    assertEquals(dimension, expected.getDimensions().get(0).get(0));\n  }\n\n  private MetricRule createMetricRule(String namespace, String name) {\n",
                      "markdown": "`\n    Dimension dimension = Dimension.builder().name(\"AWS/Redshift\").value(\"WriteIOPS\").build();\n    assertEquals(1, source.called);\n    assertEquals(dimension, expected.getDimensions().get(0).get(0));\n  }\n\n  private MetricRule createMetricRule(String namespace, String name) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/test/java/io/prometheus/cloudwatch/CachingDimensionSourceTest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 52,
                  "endLine": 28,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    Dimension dimension = Dimension.builder().name(\"AWS/Redshift\").value(\"WriteIOPS\").build();\n    assertEquals(1, source.called);\n    assertEquals(dimension, expected.getDimensions().get(0).get(0));\n  }\n\n  private MetricRule createMetricRule(String namespace, String name) {\n",
                    "rendered": {
                      "text": "\n    Dimension dimension = Dimension.builder().name(\"AWS/Redshift\").value(\"WriteIOPS\").build();\n    assertEquals(1, source.called);\n    assertEquals(dimension, expected.getDimensions().get(0).get(0));\n  }\n\n  private MetricRule createMetricRule(String namespace, String name) {\n",
                      "markdown": "`\n    Dimension dimension = Dimension.builder().name(\"AWS/Redshift\").value(\"WriteIOPS\").build();\n    assertEquals(1, source.called);\n    assertEquals(dimension, expected.getDimensions().get(0).get(0));\n  }\n\n  private MetricRule createMetricRule(String namespace, String name) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/ISSUE_TEMPLATE/metrics.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 15,
                  "endLine": 45,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n```\n\n### What do you expect to happen?\n\n<!-- Please describe your desired outcome -->\n\n",
                    "rendered": {
                      "text": "\n```\n\n### What do you expect to happen?\n\n<!-- Please describe your desired outcome -->\n\n",
                      "markdown": "`\n```\n\n### What do you expect to happen?\n\n<!-- Please describe your desired outcome -->\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 20,
                  "endLine": 226,
                  "endColumn": 3,
                  "snippet": {
                    "text": "`GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\nAt first this feature would be opt-in to allow you to decide when and how to test it\nOn later versions we would swap the default so everyone can enjoy the benefits.\n\nCloudwatch exporter also expose a new self metric called `cloudwatch_metrics_requested_total` that allows you to track number of requested metrics in addition to the number of API requests.\n",
                    "rendered": {
                      "text": "`GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\nAt first this feature would be opt-in to allow you to decide when and how to test it\nOn later versions we would swap the default so everyone can enjoy the benefits.\n\nCloudwatch exporter also expose a new self metric called `cloudwatch_metrics_requested_total` that allows you to track number of requested metrics in addition to the number of API requests.\n",
                      "markdown": "``GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\nAt first this feature would be opt-in to allow you to decide when and how to test it\nOn later versions we would swap the default so everyone can enjoy the benefits.\n\nCloudwatch exporter also expose a new self metric called `cloudwatch_metrics_requested_total` that allows you to track number of requested metrics in addition to the number of API requests.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 42,
                  "endLine": 223,
                  "endColumn": 46,
                  "snippet": {
                    "text": "API | performence | Costs | Stability \n--- |--- |--- |--- \n`GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\nAt first this feature would be opt-in to allow you to decide when and how to test it\n",
                    "rendered": {
                      "text": "API | performence | Costs | Stability \n--- |--- |--- |--- \n`GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\nAt first this feature would be opt-in to allow you to decide when and how to test it\n",
                      "markdown": "`API | performence | Costs | Stability \n--- |--- |--- |--- \n`GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\nAt first this feature would be opt-in to allow you to decide when and how to test it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 35,
                  "endLine": 222,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\nAPI | performence | Costs | Stability \n--- |--- |--- |--- \n`GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\n",
                    "rendered": {
                      "text": "\nAPI | performence | Costs | Stability \n--- |--- |--- |--- \n`GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\n",
                      "markdown": "`\nAPI | performence | Costs | Stability \n--- |--- |--- |--- \n`GetMetricStatistics` | May be slow at scale | Charged per API request | stable. (Default option)\n`GetMetricData` | Can retrieve data faster at scale | Charged per **metric** requested | New (opt-in via configuration)\n\n#### Transition plan\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 57,
                  "endLine": 155,
                  "endColumn": 61,
                  "snippet": {
                    "text": "Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n",
                    "rendered": {
                      "text": "Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n",
                      "markdown": "`Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 25,
                  "endLine": 144,
                  "endColumn": 33,
                  "snippet": {
                    "text": "`aws_elb_request_count_sum offset 10m` will allow you to access the data, and\nshould be used in recording rules and alerts.\n\nFor certain metrics which update relatively rarely, such as from S3,\n`set_timestamp` should be configured to false so that they are not exposed with\na timestamp. This is as the true timestamp from CloudWatch could be so old that\nPrometheus would reject the sample.\n",
                    "rendered": {
                      "text": "`aws_elb_request_count_sum offset 10m` will allow you to access the data, and\nshould be used in recording rules and alerts.\n\nFor certain metrics which update relatively rarely, such as from S3,\n`set_timestamp` should be configured to false so that they are not exposed with\na timestamp. This is as the true timestamp from CloudWatch could be so old that\nPrometheus would reject the sample.\n",
                      "markdown": "``aws_elb_request_count_sum offset 10m` will allow you to access the data, and\nshould be used in recording rules and alerts.\n\nFor certain metrics which update relatively rarely, such as from S3,\n`set_timestamp` should be configured to false so that they are not exposed with\na timestamp. This is as the true timestamp from CloudWatch could be so old that\nPrometheus would reject the sample.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 61,
                  "endLine": 139,
                  "endColumn": 65,
                  "snippet": {
                    "text": "data from CloudWatch, so usual staleness semantics will not apply and values will persist\nfor 5m for instant vectors.\n\nIn practice this means that if you evaluate an instant vector at the current\ntime, you will not see data from CloudWatch. An expression such as\n`aws_elb_request_count_sum offset 10m` will allow you to access the data, and\nshould be used in recording rules and alerts.\n",
                    "rendered": {
                      "text": "data from CloudWatch, so usual staleness semantics will not apply and values will persist\nfor 5m for instant vectors.\n\nIn practice this means that if you evaluate an instant vector at the current\ntime, you will not see data from CloudWatch. An expression such as\n`aws_elb_request_count_sum offset 10m` will allow you to access the data, and\nshould be used in recording rules and alerts.\n",
                      "markdown": "`data from CloudWatch, so usual staleness semantics will not apply and values will persist\nfor 5m for instant vectors.\n\nIn practice this means that if you evaluate an instant vector at the current\ntime, you will not see data from CloudWatch. An expression such as\n`aws_elb_request_count_sum offset 10m` will allow you to access the data, and\nshould be used in recording rules and alerts.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 51,
                  "endLine": 134,
                  "endColumn": 55,
                  "snippet": {
                    "text": "### Timestamps\n\nCloudWatch has been observed to sometimes take minutes for reported values to converge. The\ndefault `delay_seconds` will result in data that is at least 10 minutes old\nbeing requested to mitigate this. The samples exposed will have the timestamps of the\ndata from CloudWatch, so usual staleness semantics will not apply and values will persist\nfor 5m for instant vectors.\n",
                    "rendered": {
                      "text": "### Timestamps\n\nCloudWatch has been observed to sometimes take minutes for reported values to converge. The\ndefault `delay_seconds` will result in data that is at least 10 minutes old\nbeing requested to mitigate this. The samples exposed will have the timestamps of the\ndata from CloudWatch, so usual staleness semantics will not apply and values will persist\nfor 5m for instant vectors.\n",
                      "markdown": "`### Timestamps\n\nCloudWatch has been observed to sometimes take minutes for reported values to converge. The\ndefault `delay_seconds` will result in data that is at least 10 minutes old\nbeing requested to mitigate this. The samples exposed will have the timestamps of the\ndata from CloudWatch, so usual staleness semantics will not apply and values will persist\nfor 5m for instant vectors.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 42,
                  "endLine": 20,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n`java -jar target/cloudwatch_exporter-*-SNAPSHOT-jar-with-dependencies.jar 9106 example.yml` to run.\n\nThe most recent pre-built JAR can be found at http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudwatch_exporter%22\n\n## Credentials and permissions\n\n",
                    "rendered": {
                      "text": "\n`java -jar target/cloudwatch_exporter-*-SNAPSHOT-jar-with-dependencies.jar 9106 example.yml` to run.\n\nThe most recent pre-built JAR can be found at http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudwatch_exporter%22\n\n## Credentials and permissions\n\n",
                      "markdown": "`\n`java -jar target/cloudwatch_exporter-*-SNAPSHOT-jar-with-dependencies.jar 9106 example.yml` to run.\n\nThe most recent pre-built JAR can be found at http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudwatch_exporter%22\n\n## Credentials and permissions\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 28,
                  "endLine": 14,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n## Building and running\n\nCloudwatch Exporter requires at least Java 11.\n\n`mvn package` to build.\n\n",
                    "rendered": {
                      "text": "\n## Building and running\n\nCloudwatch Exporter requires at least Java 11.\n\n`mvn package` to build.\n\n",
                      "markdown": "`\n## Building and running\n\nCloudwatch Exporter requires at least Java 11.\n\n`mvn package` to build.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 5,
                  "endLine": 254,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nSpecify the config as the CMD:\n\n```sh\ndocker run -p 9106 -v /path/on/host/us-west-1.yml:/config/us-west-1.yml quay.io/prometheus/cloudwatch-exporter /config/us-west-1.yml\n```\n\nOr create a config file named `config.yml` along with following\n",
                    "rendered": {
                      "text": "\nSpecify the config as the CMD:\n\n```sh\ndocker run -p 9106 -v /path/on/host/us-west-1.yml:/config/us-west-1.yml quay.io/prometheus/cloudwatch-exporter /config/us-west-1.yml\n```\n\nOr create a config file named `config.yml` along with following\n",
                      "markdown": "`\nSpecify the config as the CMD:\n\n```sh\ndocker run -p 9106 -v /path/on/host/us-west-1.yml:/config/us-west-1.yml quay.io/prometheus/cloudwatch-exporter /config/us-west-1.yml\n```\n\nOr create a config file named `config.yml` along with following\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 5,
                  "endLine": 248,
                  "endColumn": 7,
                  "snippet": {
                    "text": "The image exposes port 9106 and expects the config in `/config/config.yml`.\nTo configure it, you can bind-mount a config from your host:\n\n```sh\ndocker run -p 9106 -v /path/on/host/config.yml:/config/config.yml quay.io/prometheus/cloudwatch-exporter\n```\n\nSpecify the config as the CMD:\n",
                    "rendered": {
                      "text": "The image exposes port 9106 and expects the config in `/config/config.yml`.\nTo configure it, you can bind-mount a config from your host:\n\n```sh\ndocker run -p 9106 -v /path/on/host/config.yml:/config/config.yml quay.io/prometheus/cloudwatch-exporter\n```\n\nSpecify the config as the CMD:\n",
                      "markdown": "`The image exposes port 9106 and expects the config in `/config/config.yml`.\nTo configure it, you can bind-mount a config from your host:\n\n```sh\ndocker run -p 9106 -v /path/on/host/config.yml:/config/config.yml quay.io/prometheus/cloudwatch-exporter\n```\n\nSpecify the config as the CMD:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 2,
                  "endLine": 231,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nCloudwatch exporter also expose a new self metric called `cloudwatch_metrics_requested_total` that allows you to track number of requested metrics in addition to the number of API requests.\n\n## Docker Images\n\nTo run the CloudWatch exporter on Docker, you can use the image from\n\n",
                    "rendered": {
                      "text": "\nCloudwatch exporter also expose a new self metric called `cloudwatch_metrics_requested_total` that allows you to track number of requested metrics in addition to the number of API requests.\n\n## Docker Images\n\nTo run the CloudWatch exporter on Docker, you can use the image from\n\n",
                      "markdown": "`\nCloudwatch exporter also expose a new self metric called `cloudwatch_metrics_requested_total` that allows you to track number of requested metrics in addition to the number of API requests.\n\n## Docker Images\n\nTo run the CloudWatch exporter on Docker, you can use the image from\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 97,
                  "endLine": 155,
                  "endColumn": 103,
                  "snippet": {
                    "text": "Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n",
                    "rendered": {
                      "text": "Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n",
                      "markdown": "`Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 60,
                  "endLine": 155,
                  "endColumn": 66,
                  "snippet": {
                    "text": "Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n",
                    "rendered": {
                      "text": "Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n",
                      "markdown": "`Try the graph view.\n\nThis is an unfortunate result of a fundamental mismatch between CloudWatch and Prometheus.\nCloudWatch metrics converge over time, that is, the value at time `T` can change up to some later time `T+dT`.\nMeanwhile, Prometheus assumes that once it has scraped a sample, that is the truth, and the past does not change.\n\nTo compensate for this, by default the exporter [delays fetching metrics](https://github.com/prometheus/cloudwatch_exporter/blob/master/README.md#timestamps), that is, it only asks for data 10 minutes later, when _almost_ all AWS services have converged.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 205,
                  "endLine": 129,
                  "endColumn": 211,
                  "snippet": {
                    "text": "\n### CloudWatch doesn't always report data\n\nCloudwatch reports data either always or only in some cases, example only if there is a non-zero value. The CloudWatch Exporter mirrors this behavior, so you should refer to the Cloudwatch documentation to find out if your metric is always reported or not.\n\n### Timestamps\n\n",
                    "rendered": {
                      "text": "\n### CloudWatch doesn't always report data\n\nCloudwatch reports data either always or only in some cases, example only if there is a non-zero value. The CloudWatch Exporter mirrors this behavior, so you should refer to the Cloudwatch documentation to find out if your metric is always reported or not.\n\n### Timestamps\n\n",
                      "markdown": "`\n### CloudWatch doesn't always report data\n\nCloudwatch reports data either always or only in some cases, example only if there is a non-zero value. The CloudWatch Exporter mirrors this behavior, so you should refer to the Cloudwatch documentation to find out if your metric is always reported or not.\n\n### Timestamps\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 28,
                  "endLine": 94,
                  "endColumn": 34,
                  "snippet": {
                    "text": "warn_on_empty_list_dimensions | Optional. Boolean Emit warning if the exporter cannot determine what metrics to request\n\n\nThe above config will export time series such as\n```\n# HELP aws_elb_request_count_sum CloudWatch metric AWS/ELB RequestCount Dimensions: [\"AvailabilityZone\",\"LoadBalancerName\"] Statistic: Sum Unit: Count\n# TYPE aws_elb_request_count_sum gauge\n",
                    "rendered": {
                      "text": "warn_on_empty_list_dimensions | Optional. Boolean Emit warning if the exporter cannot determine what metrics to request\n\n\nThe above config will export time series such as\n```\n# HELP aws_elb_request_count_sum CloudWatch metric AWS/ELB RequestCount Dimensions: [\"AvailabilityZone\",\"LoadBalancerName\"] Statistic: Sum Unit: Count\n# TYPE aws_elb_request_count_sum gauge\n",
                      "markdown": "`warn_on_empty_list_dimensions | Optional. Boolean Emit warning if the exporter cannot determine what metrics to request\n\n\nThe above config will export time series such as\n```\n# HELP aws_elb_request_count_sum CloudWatch metric AWS/ELB RequestCount Dimensions: [\"AvailabilityZone\",\"LoadBalancerName\"] Statistic: Sum Unit: Count\n# TYPE aws_elb_request_count_sum gauge\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/README.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 134,
                  "endLine": 75,
                  "endColumn": 140,
                  "snippet": {
                    "text": "atch metrics to retrieve and export\naws_namespace  | Required. Namespace of the CloudWatch metric.\naws_metric_name  | Required. Metric name of the CloudWatch metric.\naws_dimensions | Required. This should contain exactly all the dimensions available for a metric. Run `aws cloudwatch list-metrics` to find out which dimensions you need to include for your metric.\naws_dimension_select | Optional. Which dimension values to filter. Specify a map from the dimension name to a list of values to select from that dimension.\naws_dimension_select_regex | Optional. Which dimension values to filter on with a regu",
                    "rendered": {
                      "text": "atch metrics to retrieve and export\naws_namespace  | Required. Namespace of the CloudWatch metric.\naws_metric_name  | Required. Metric name of the CloudWatch metric.\naws_dimensions | Required. This should contain exactly all the dimensions available for a metric. Run `aws cloudwatch list-metrics` to find out which dimensions you need to include for your metric.\naws_dimension_select | Optional. Which dimension values to filter. Specify a map from the dimension name to a list of values to select from that dimension.\naws_dimension_select_regex | Optional. Which dimension values to filter on with a regu",
                      "markdown": "`atch metrics to retrieve and export\naws_namespace  | Required. Namespace of the CloudWatch metric.\naws_metric_name  | Required. Metric name of the CloudWatch metric.\naws_dimensions | Required. This should contain exactly all the dimensions available for a metric. Run `aws cloudwatch list-metrics` to find out which dimensions you need to include for your metric.\naws_dimension_select | Optional. Which dimension values to filter. Specify a map from the dimension name to a list of values to select from that dimension.\naws_dimension_select_regex | Optional. Which dimension values to filter on with a regu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/workflows/maven.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 11,
                  "endLine": 34,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      run: mvn -B package --file pom.xml\n\n    # Upload the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive\n    - name: Update dependency graph\n      uses: advanced-security/maven-dependency-submission-action@v4.1.1\n",
                    "rendered": {
                      "text": "      run: mvn -B package --file pom.xml\n\n    # Upload the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive\n    - name: Update dependency graph\n      uses: advanced-security/maven-dependency-submission-action@v4.1.1\n",
                      "markdown": "`      run: mvn -B package --file pom.xml\n\n    # Upload the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive\n    - name: Update dependency graph\n      uses: advanced-security/maven-dependency-submission-action@v4.1.1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/workflows/maven.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 122,
                  "endLine": 2,
                  "snippet": {
                    "text": "# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven\n\n# This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n",
                    "rendered": {
                      "text": "# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven\n\n# This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n",
                      "markdown": "`# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven\n\n# This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/example.yml"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 34,
                  "endLine": 145,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  aws_statistics: [Average]\n\n# S3 Storage metrics are published to Cloudwatch 1x per day with a timestamp of midnight UTC, hence period_seconds: 86400\n# Publishing does not always occur at the same time, but it will occur before the next day, hence range_seconds: 172800\n- aws_namespace: AWS/S3\n  aws_metric_name: BucketSizeBytes\n  aws_dimensions: [BucketName, StorageType]\n",
                    "rendered": {
                      "text": "  aws_statistics: [Average]\n\n# S3 Storage metrics are published to Cloudwatch 1x per day with a timestamp of midnight UTC, hence period_seconds: 86400\n# Publishing does not always occur at the same time, but it will occur before the next day, hence range_seconds: 172800\n- aws_namespace: AWS/S3\n  aws_metric_name: BucketSizeBytes\n  aws_dimensions: [BucketName, StorageType]\n",
                      "markdown": "`  aws_statistics: [Average]\n\n# S3 Storage metrics are published to Cloudwatch 1x per day with a timestamp of midnight UTC, hence period_seconds: 86400\n# Publishing does not always occur at the same time, but it will occur before the next day, hence range_seconds: 172800\n- aws_namespace: AWS/S3\n  aws_metric_name: BucketSizeBytes\n  aws_dimensions: [BucketName, StorageType]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 27,
                  "endLine": 612,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                baseName + \"_average\",\n                Type.GAUGE,\n                help(rule, unit, \"Average\"),\n                baseSamples.get(Statistic.AVERAGE)));\n      }\n      for (Entry<String, List<MetricFamilySamples.Sample>> entry : extendedSamples.entrySet()) {\n        mfs.add(\n",
                    "rendered": {
                      "text": "                baseName + \"_average\",\n                Type.GAUGE,\n                help(rule, unit, \"Average\"),\n                baseSamples.get(Statistic.AVERAGE)));\n      }\n      for (Entry<String, List<MetricFamilySamples.Sample>> entry : extendedSamples.entrySet()) {\n        mfs.add(\n",
                      "markdown": "`                baseName + \"_average\",\n                Type.GAUGE,\n                help(rule, unit, \"Average\"),\n                baseSamples.get(Statistic.AVERAGE)));\n      }\n      for (Entry<String, List<MetricFamilySamples.Sample>> entry : extendedSamples.entrySet()) {\n        mfs.add(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 606,
                  "startColumn": 22,
                  "endLine": 606,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                help(rule, unit, \"Maximum\"),\n                baseSamples.get(Statistic.MAXIMUM)));\n      }\n      if (!baseSamples.get(Statistic.AVERAGE).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_average\",\n",
                    "rendered": {
                      "text": "                help(rule, unit, \"Maximum\"),\n                baseSamples.get(Statistic.MAXIMUM)));\n      }\n      if (!baseSamples.get(Statistic.AVERAGE).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_average\",\n",
                      "markdown": "`                help(rule, unit, \"Maximum\"),\n                baseSamples.get(Statistic.MAXIMUM)));\n      }\n      if (!baseSamples.get(Statistic.AVERAGE).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_average\",\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 27,
                  "endLine": 604,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                baseName + \"_maximum\",\n                Type.GAUGE,\n                help(rule, unit, \"Maximum\"),\n                baseSamples.get(Statistic.MAXIMUM)));\n      }\n      if (!baseSamples.get(Statistic.AVERAGE).isEmpty()) {\n        mfs.add(\n",
                    "rendered": {
                      "text": "                baseName + \"_maximum\",\n                Type.GAUGE,\n                help(rule, unit, \"Maximum\"),\n                baseSamples.get(Statistic.MAXIMUM)));\n      }\n      if (!baseSamples.get(Statistic.AVERAGE).isEmpty()) {\n        mfs.add(\n",
                      "markdown": "`                baseName + \"_maximum\",\n                Type.GAUGE,\n                help(rule, unit, \"Maximum\"),\n                baseSamples.get(Statistic.MAXIMUM)));\n      }\n      if (!baseSamples.get(Statistic.AVERAGE).isEmpty()) {\n        mfs.add(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 22,
                  "endLine": 598,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                help(rule, unit, \"Minimum\"),\n                baseSamples.get(Statistic.MINIMUM)));\n      }\n      if (!baseSamples.get(Statistic.MAXIMUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_maximum\",\n",
                    "rendered": {
                      "text": "                help(rule, unit, \"Minimum\"),\n                baseSamples.get(Statistic.MINIMUM)));\n      }\n      if (!baseSamples.get(Statistic.MAXIMUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_maximum\",\n",
                      "markdown": "`                help(rule, unit, \"Minimum\"),\n                baseSamples.get(Statistic.MINIMUM)));\n      }\n      if (!baseSamples.get(Statistic.MAXIMUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_maximum\",\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 27,
                  "endLine": 596,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                baseName + \"_minimum\",\n                Type.GAUGE,\n                help(rule, unit, \"Minimum\"),\n                baseSamples.get(Statistic.MINIMUM)));\n      }\n      if (!baseSamples.get(Statistic.MAXIMUM).isEmpty()) {\n        mfs.add(\n",
                    "rendered": {
                      "text": "                baseName + \"_minimum\",\n                Type.GAUGE,\n                help(rule, unit, \"Minimum\"),\n                baseSamples.get(Statistic.MINIMUM)));\n      }\n      if (!baseSamples.get(Statistic.MAXIMUM).isEmpty()) {\n        mfs.add(\n",
                      "markdown": "`                baseName + \"_minimum\",\n                Type.GAUGE,\n                help(rule, unit, \"Minimum\"),\n                baseSamples.get(Statistic.MINIMUM)));\n      }\n      if (!baseSamples.get(Statistic.MAXIMUM).isEmpty()) {\n        mfs.add(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 22,
                  "endLine": 590,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                help(rule, unit, \"SampleCount\"),\n                baseSamples.get(Statistic.SAMPLE_COUNT)));\n      }\n      if (!baseSamples.get(Statistic.MINIMUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_minimum\",\n",
                    "rendered": {
                      "text": "                help(rule, unit, \"SampleCount\"),\n                baseSamples.get(Statistic.SAMPLE_COUNT)));\n      }\n      if (!baseSamples.get(Statistic.MINIMUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_minimum\",\n",
                      "markdown": "`                help(rule, unit, \"SampleCount\"),\n                baseSamples.get(Statistic.SAMPLE_COUNT)));\n      }\n      if (!baseSamples.get(Statistic.MINIMUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_minimum\",\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 27,
                  "endLine": 588,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                baseName + \"_sample_count\",\n                Type.GAUGE,\n                help(rule, unit, \"SampleCount\"),\n                baseSamples.get(Statistic.SAMPLE_COUNT)));\n      }\n      if (!baseSamples.get(Statistic.MINIMUM).isEmpty()) {\n        mfs.add(\n",
                    "rendered": {
                      "text": "                baseName + \"_sample_count\",\n                Type.GAUGE,\n                help(rule, unit, \"SampleCount\"),\n                baseSamples.get(Statistic.SAMPLE_COUNT)));\n      }\n      if (!baseSamples.get(Statistic.MINIMUM).isEmpty()) {\n        mfs.add(\n",
                      "markdown": "`                baseName + \"_sample_count\",\n                Type.GAUGE,\n                help(rule, unit, \"SampleCount\"),\n                baseSamples.get(Statistic.SAMPLE_COUNT)));\n      }\n      if (!baseSamples.get(Statistic.MINIMUM).isEmpty()) {\n        mfs.add(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 22,
                  "endLine": 582,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                help(rule, unit, \"Sum\"),\n                baseSamples.get(Statistic.SUM)));\n      }\n      if (!baseSamples.get(Statistic.SAMPLE_COUNT).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_sample_count\",\n",
                    "rendered": {
                      "text": "                help(rule, unit, \"Sum\"),\n                baseSamples.get(Statistic.SUM)));\n      }\n      if (!baseSamples.get(Statistic.SAMPLE_COUNT).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_sample_count\",\n",
                      "markdown": "`                help(rule, unit, \"Sum\"),\n                baseSamples.get(Statistic.SUM)));\n      }\n      if (!baseSamples.get(Statistic.SAMPLE_COUNT).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_sample_count\",\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 27,
                  "endLine": 580,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                baseName + \"_sum\",\n                Type.GAUGE,\n                help(rule, unit, \"Sum\"),\n                baseSamples.get(Statistic.SUM)));\n      }\n      if (!baseSamples.get(Statistic.SAMPLE_COUNT).isEmpty()) {\n        mfs.add(\n",
                    "rendered": {
                      "text": "                baseName + \"_sum\",\n                Type.GAUGE,\n                help(rule, unit, \"Sum\"),\n                baseSamples.get(Statistic.SUM)));\n      }\n      if (!baseSamples.get(Statistic.SAMPLE_COUNT).isEmpty()) {\n        mfs.add(\n",
                      "markdown": "`                baseName + \"_sum\",\n                Type.GAUGE,\n                help(rule, unit, \"Sum\"),\n                baseSamples.get(Statistic.SUM)));\n      }\n      if (!baseSamples.get(Statistic.SAMPLE_COUNT).isEmpty()) {\n        mfs.add(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 22,
                  "endLine": 574,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        }\n      }\n\n      if (!baseSamples.get(Statistic.SUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_sum\",\n",
                    "rendered": {
                      "text": "        }\n      }\n\n      if (!baseSamples.get(Statistic.SUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_sum\",\n",
                      "markdown": "`        }\n      }\n\n      if (!baseSamples.get(Statistic.SUM).isEmpty()) {\n        mfs.add(\n            new MetricFamilySamples(\n                baseName + \"_sum\",\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 14,
                  "endLine": 553,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        for (Entry<Statistic, Double> e : values.statisticValues.entrySet()) {\n          String suffix = sampleLabelSuffixBy(e.getKey());\n          baseSamples\n              .get(e.getKey())\n              .add(\n                  new MetricFamilySamples.Sample(\n                      baseName + suffix, labelNames, labelValues, e.getValue(), timestamp));\n",
                    "rendered": {
                      "text": "        for (Entry<Statistic, Double> e : values.statisticValues.entrySet()) {\n          String suffix = sampleLabelSuffixBy(e.getKey());\n          baseSamples\n              .get(e.getKey())\n              .add(\n                  new MetricFamilySamples.Sample(\n                      baseName + suffix, labelNames, labelValues, e.getValue(), timestamp));\n",
                      "markdown": "`        for (Entry<Statistic, Double> e : values.statisticValues.entrySet()) {\n          String suffix = sampleLabelSuffixBy(e.getKey());\n          baseSamples\n              .get(e.getKey())\n              .add(\n                  new MetricFamilySamples.Sample(\n                      baseName + suffix, labelNames, labelValues, e.getValue(), timestamp));\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 36,
                  "endLine": 367,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        StsClient.builder().region(Region.of((String) config.get(\"region\"))).build();\n    AssumeRoleRequest assumeRoleRequest =\n        AssumeRoleRequest.builder()\n            .roleArn((String) config.get(\"role_arn\"))\n            .roleSessionName(\"cloudwatch_exporter\")\n            .build();\n    return StsAssumeRoleCredentialsProvider.builder()\n",
                    "rendered": {
                      "text": "        StsClient.builder().region(Region.of((String) config.get(\"region\"))).build();\n    AssumeRoleRequest assumeRoleRequest =\n        AssumeRoleRequest.builder()\n            .roleArn((String) config.get(\"role_arn\"))\n            .roleSessionName(\"cloudwatch_exporter\")\n            .build();\n    return StsAssumeRoleCredentialsProvider.builder()\n",
                      "markdown": "`        StsClient.builder().region(Region.of((String) config.get(\"region\"))).build();\n    AssumeRoleRequest assumeRoleRequest =\n        AssumeRoleRequest.builder()\n            .roleArn((String) config.get(\"role_arn\"))\n            .roleSessionName(\"cloudwatch_exporter\")\n            .build();\n    return StsAssumeRoleCredentialsProvider.builder()\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 60,
                  "endLine": 364,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n  private AwsCredentialsProvider getRoleCredentialProvider(Map<String, Object> config) {\n    StsClient stsClient =\n        StsClient.builder().region(Region.of((String) config.get(\"region\"))).build();\n    AssumeRoleRequest assumeRoleRequest =\n        AssumeRoleRequest.builder()\n            .roleArn((String) config.get(\"role_arn\"))\n",
                    "rendered": {
                      "text": "\n  private AwsCredentialsProvider getRoleCredentialProvider(Map<String, Object> config) {\n    StsClient stsClient =\n        StsClient.builder().region(Region.of((String) config.get(\"region\"))).build();\n    AssumeRoleRequest assumeRoleRequest =\n        AssumeRoleRequest.builder()\n            .roleArn((String) config.get(\"role_arn\"))\n",
                      "markdown": "`\n  private AwsCredentialsProvider getRoleCredentialProvider(Map<String, Object> config) {\n    StsClient stsClient =\n        StsClient.builder().region(Region.of((String) config.get(\"region\"))).build();\n    AssumeRoleRequest assumeRoleRequest =\n        AssumeRoleRequest.builder()\n            .roleArn((String) config.get(\"role_arn\"))\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 55,
                  "endLine": 333,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n      if (yamlMetricRule.containsKey(\"list_metrics_cache_ttl\")) {\n        rule.listMetricsCacheTtl =\n            Duration.ofSeconds(((Number) yamlMetricRule.get(\"list_metrics_cache_ttl\")).intValue());\n        metricCacheConfig.addOverride(rule);\n      } else {\n        rule.listMetricsCacheTtl = defaultMetricCacheSeconds;\n",
                    "rendered": {
                      "text": "\n      if (yamlMetricRule.containsKey(\"list_metrics_cache_ttl\")) {\n        rule.listMetricsCacheTtl =\n            Duration.ofSeconds(((Number) yamlMetricRule.get(\"list_metrics_cache_ttl\")).intValue());\n        metricCacheConfig.addOverride(rule);\n      } else {\n        rule.listMetricsCacheTtl = defaultMetricCacheSeconds;\n",
                      "markdown": "`\n      if (yamlMetricRule.containsKey(\"list_metrics_cache_ttl\")) {\n        rule.listMetricsCacheTtl =\n            Duration.ofSeconds(((Number) yamlMetricRule.get(\"list_metrics_cache_ttl\")).intValue());\n        metricCacheConfig.addOverride(rule);\n      } else {\n        rule.listMetricsCacheTtl = defaultMetricCacheSeconds;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 55,
                  "endLine": 327,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        }\n        if (yamlAwsTagSelect.containsKey(\"arn_resource_id_regexp\")) {\n          awsTagSelect.arnResourceIdRegexp =\n              Pattern.compile((String) yamlAwsTagSelect.get(\"arn_resource_id_regexp\"));\n        }\n      }\n\n",
                    "rendered": {
                      "text": "        }\n        if (yamlAwsTagSelect.containsKey(\"arn_resource_id_regexp\")) {\n          awsTagSelect.arnResourceIdRegexp =\n              Pattern.compile((String) yamlAwsTagSelect.get(\"arn_resource_id_regexp\"));\n        }\n      }\n\n",
                      "markdown": "`        }\n        if (yamlAwsTagSelect.containsKey(\"arn_resource_id_regexp\")) {\n          awsTagSelect.arnResourceIdRegexp =\n              Pattern.compile((String) yamlAwsTagSelect.get(\"arn_resource_id_regexp\"));\n        }\n      }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 58,
                  "endLine": 323,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n          awsTagSelect.tagSelections =\n              (Map<String, List<String>>) yamlAwsTagSelect.get(\"tag_selections\");\n        }\n        if (yamlAwsTagSelect.containsKey(\"arn_resource_id_regexp\")) {\n          awsTagSelect.arnResourceIdRegexp =\n",
                    "rendered": {
                      "text": "\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n          awsTagSelect.tagSelections =\n              (Map<String, List<String>>) yamlAwsTagSelect.get(\"tag_selections\");\n        }\n        if (yamlAwsTagSelect.containsKey(\"arn_resource_id_regexp\")) {\n          awsTagSelect.arnResourceIdRegexp =\n",
                      "markdown": "`\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n          awsTagSelect.tagSelections =\n              (Map<String, List<String>>) yamlAwsTagSelect.get(\"tag_selections\");\n        }\n        if (yamlAwsTagSelect.containsKey(\"arn_resource_id_regexp\")) {\n          awsTagSelect.arnResourceIdRegexp =\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 68,
                  "endLine": 319,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n        awsTagSelect.resourceTypeSelection =\n            (String) yamlAwsTagSelect.get(\"resource_type_selection\");\n        awsTagSelect.resourceIdDimension = (String) yamlAwsTagSelect.get(\"resource_id_dimension\");\n\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n          awsTagSelect.tagSelections =\n",
                    "rendered": {
                      "text": "\n        awsTagSelect.resourceTypeSelection =\n            (String) yamlAwsTagSelect.get(\"resource_type_selection\");\n        awsTagSelect.resourceIdDimension = (String) yamlAwsTagSelect.get(\"resource_id_dimension\");\n\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n          awsTagSelect.tagSelections =\n",
                      "markdown": "`\n        awsTagSelect.resourceTypeSelection =\n            (String) yamlAwsTagSelect.get(\"resource_type_selection\");\n        awsTagSelect.resourceIdDimension = (String) yamlAwsTagSelect.get(\"resource_id_dimension\");\n\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n          awsTagSelect.tagSelections =\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 37,
                  "endLine": 318,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        rule.awsTagSelect = awsTagSelect;\n\n        awsTagSelect.resourceTypeSelection =\n            (String) yamlAwsTagSelect.get(\"resource_type_selection\");\n        awsTagSelect.resourceIdDimension = (String) yamlAwsTagSelect.get(\"resource_id_dimension\");\n\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n",
                    "rendered": {
                      "text": "        rule.awsTagSelect = awsTagSelect;\n\n        awsTagSelect.resourceTypeSelection =\n            (String) yamlAwsTagSelect.get(\"resource_type_selection\");\n        awsTagSelect.resourceIdDimension = (String) yamlAwsTagSelect.get(\"resource_id_dimension\");\n\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n",
                      "markdown": "`        rule.awsTagSelect = awsTagSelect;\n\n        awsTagSelect.resourceTypeSelection =\n            (String) yamlAwsTagSelect.get(\"resource_type_selection\");\n        awsTagSelect.resourceIdDimension = (String) yamlAwsTagSelect.get(\"resource_id_dimension\");\n\n        if (yamlAwsTagSelect.containsKey(\"tag_selections\")) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 48,
                  "endLine": 308,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n      if (yamlMetricRule.containsKey(\"aws_tag_select\")) {\n        Map<String, Object> yamlAwsTagSelect =\n            (Map<String, Object>) yamlMetricRule.get(\"aws_tag_select\");\n        if (!yamlAwsTagSelect.containsKey(\"resource_type_selection\")\n            || !yamlAwsTagSelect.containsKey(\"resource_id_dimension\")) {\n          throw new IllegalArgumentException(\n",
                    "rendered": {
                      "text": "\n      if (yamlMetricRule.containsKey(\"aws_tag_select\")) {\n        Map<String, Object> yamlAwsTagSelect =\n            (Map<String, Object>) yamlMetricRule.get(\"aws_tag_select\");\n        if (!yamlAwsTagSelect.containsKey(\"resource_type_selection\")\n            || !yamlAwsTagSelect.containsKey(\"resource_id_dimension\")) {\n          throw new IllegalArgumentException(\n",
                      "markdown": "`\n      if (yamlMetricRule.containsKey(\"aws_tag_select\")) {\n        Map<String, Object> yamlAwsTagSelect =\n            (Map<String, Object>) yamlMetricRule.get(\"aws_tag_select\");\n        if (!yamlAwsTagSelect.containsKey(\"resource_type_selection\")\n            || !yamlAwsTagSelect.containsKey(\"resource_id_dimension\")) {\n          throw new IllegalArgumentException(\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 36,
                  "endLine": 301,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      }\n      if (yamlMetricRule.containsKey(\"warn_on_empty_list_dimensions\")) {\n        rule.warnOnEmptyListDimensions =\n            (Boolean) yamlMetricRule.get(\"warn_on_empty_list_dimensions\");\n      } else {\n        rule.warnOnEmptyListDimensions = defaultWarnOnMissingDimensions;\n      }\n",
                    "rendered": {
                      "text": "      }\n      if (yamlMetricRule.containsKey(\"warn_on_empty_list_dimensions\")) {\n        rule.warnOnEmptyListDimensions =\n            (Boolean) yamlMetricRule.get(\"warn_on_empty_list_dimensions\");\n      } else {\n        rule.warnOnEmptyListDimensions = defaultWarnOnMissingDimensions;\n      }\n",
                      "markdown": "`      }\n      if (yamlMetricRule.containsKey(\"warn_on_empty_list_dimensions\")) {\n        rule.warnOnEmptyListDimensions =\n            (Boolean) yamlMetricRule.get(\"warn_on_empty_list_dimensions\");\n      } else {\n        rule.warnOnEmptyListDimensions = defaultWarnOnMissingDimensions;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 56,
                  "endLine": 295,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        rule.cloudwatchTimestamp = defaultCloudwatchTimestamp;\n      }\n      if (yamlMetricRule.containsKey(\"use_get_metric_data\")) {\n        rule.useGetMetricData = (Boolean) yamlMetricRule.get(\"use_get_metric_data\");\n      } else {\n        rule.useGetMetricData = defaultUseGetMetricData;\n      }\n",
                    "rendered": {
                      "text": "        rule.cloudwatchTimestamp = defaultCloudwatchTimestamp;\n      }\n      if (yamlMetricRule.containsKey(\"use_get_metric_data\")) {\n        rule.useGetMetricData = (Boolean) yamlMetricRule.get(\"use_get_metric_data\");\n      } else {\n        rule.useGetMetricData = defaultUseGetMetricData;\n      }\n",
                      "markdown": "`        rule.cloudwatchTimestamp = defaultCloudwatchTimestamp;\n      }\n      if (yamlMetricRule.containsKey(\"use_get_metric_data\")) {\n        rule.useGetMetricData = (Boolean) yamlMetricRule.get(\"use_get_metric_data\");\n      } else {\n        rule.useGetMetricData = defaultUseGetMetricData;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 59,
                  "endLine": 290,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        rule.delaySeconds = defaultDelay;\n      }\n      if (yamlMetricRule.containsKey(\"set_timestamp\")) {\n        rule.cloudwatchTimestamp = (Boolean) yamlMetricRule.get(\"set_timestamp\");\n      } else {\n        rule.cloudwatchTimestamp = defaultCloudwatchTimestamp;\n      }\n",
                    "rendered": {
                      "text": "        rule.delaySeconds = defaultDelay;\n      }\n      if (yamlMetricRule.containsKey(\"set_timestamp\")) {\n        rule.cloudwatchTimestamp = (Boolean) yamlMetricRule.get(\"set_timestamp\");\n      } else {\n        rule.cloudwatchTimestamp = defaultCloudwatchTimestamp;\n      }\n",
                      "markdown": "`        rule.delaySeconds = defaultDelay;\n      }\n      if (yamlMetricRule.containsKey(\"set_timestamp\")) {\n        rule.cloudwatchTimestamp = (Boolean) yamlMetricRule.get(\"set_timestamp\");\n      } else {\n        rule.cloudwatchTimestamp = defaultCloudwatchTimestamp;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 52,
                  "endLine": 285,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        rule.rangeSeconds = defaultRange;\n      }\n      if (yamlMetricRule.containsKey(\"delay_seconds\")) {\n        rule.delaySeconds = ((Number) yamlMetricRule.get(\"delay_seconds\")).intValue();\n      } else {\n        rule.delaySeconds = defaultDelay;\n      }\n",
                    "rendered": {
                      "text": "        rule.rangeSeconds = defaultRange;\n      }\n      if (yamlMetricRule.containsKey(\"delay_seconds\")) {\n        rule.delaySeconds = ((Number) yamlMetricRule.get(\"delay_seconds\")).intValue();\n      } else {\n        rule.delaySeconds = defaultDelay;\n      }\n",
                      "markdown": "`        rule.rangeSeconds = defaultRange;\n      }\n      if (yamlMetricRule.containsKey(\"delay_seconds\")) {\n        rule.delaySeconds = ((Number) yamlMetricRule.get(\"delay_seconds\")).intValue();\n      } else {\n        rule.delaySeconds = defaultDelay;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 52,
                  "endLine": 280,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        rule.periodSeconds = defaultPeriod;\n      }\n      if (yamlMetricRule.containsKey(\"range_seconds\")) {\n        rule.rangeSeconds = ((Number) yamlMetricRule.get(\"range_seconds\")).intValue();\n      } else {\n        rule.rangeSeconds = defaultRange;\n      }\n",
                    "rendered": {
                      "text": "        rule.periodSeconds = defaultPeriod;\n      }\n      if (yamlMetricRule.containsKey(\"range_seconds\")) {\n        rule.rangeSeconds = ((Number) yamlMetricRule.get(\"range_seconds\")).intValue();\n      } else {\n        rule.rangeSeconds = defaultRange;\n      }\n",
                      "markdown": "`        rule.periodSeconds = defaultPeriod;\n      }\n      if (yamlMetricRule.containsKey(\"range_seconds\")) {\n        rule.rangeSeconds = ((Number) yamlMetricRule.get(\"range_seconds\")).intValue();\n      } else {\n        rule.rangeSeconds = defaultRange;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 53,
                  "endLine": 275,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        rule.awsExtendedStatistics = (List<String>) yamlMetricRule.get(\"aws_extended_statistics\");\n      }\n      if (yamlMetricRule.containsKey(\"period_seconds\")) {\n        rule.periodSeconds = ((Number) yamlMetricRule.get(\"period_seconds\")).intValue();\n      } else {\n        rule.periodSeconds = defaultPeriod;\n      }\n",
                    "rendered": {
                      "text": "        rule.awsExtendedStatistics = (List<String>) yamlMetricRule.get(\"aws_extended_statistics\");\n      }\n      if (yamlMetricRule.containsKey(\"period_seconds\")) {\n        rule.periodSeconds = ((Number) yamlMetricRule.get(\"period_seconds\")).intValue();\n      } else {\n        rule.periodSeconds = defaultPeriod;\n      }\n",
                      "markdown": "`        rule.awsExtendedStatistics = (List<String>) yamlMetricRule.get(\"aws_extended_statistics\");\n      }\n      if (yamlMetricRule.containsKey(\"period_seconds\")) {\n        rule.periodSeconds = ((Number) yamlMetricRule.get(\"period_seconds\")).intValue();\n      } else {\n        rule.periodSeconds = defaultPeriod;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 66,
                  "endLine": 272,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        }\n      }\n      if (yamlMetricRule.containsKey(\"aws_extended_statistics\")) {\n        rule.awsExtendedStatistics = (List<String>) yamlMetricRule.get(\"aws_extended_statistics\");\n      }\n      if (yamlMetricRule.containsKey(\"period_seconds\")) {\n        rule.periodSeconds = ((Number) yamlMetricRule.get(\"period_seconds\")).intValue();\n",
                    "rendered": {
                      "text": "        }\n      }\n      if (yamlMetricRule.containsKey(\"aws_extended_statistics\")) {\n        rule.awsExtendedStatistics = (List<String>) yamlMetricRule.get(\"aws_extended_statistics\");\n      }\n      if (yamlMetricRule.containsKey(\"period_seconds\")) {\n        rule.periodSeconds = ((Number) yamlMetricRule.get(\"period_seconds\")).intValue();\n",
                      "markdown": "`        }\n      }\n      if (yamlMetricRule.containsKey(\"aws_extended_statistics\")) {\n        rule.awsExtendedStatistics = (List<String>) yamlMetricRule.get(\"aws_extended_statistics\");\n      }\n      if (yamlMetricRule.containsKey(\"period_seconds\")) {\n        rule.periodSeconds = ((Number) yamlMetricRule.get(\"period_seconds\")).intValue();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 61,
                  "endLine": 261,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      }\n      if (yamlMetricRule.containsKey(\"aws_statistics\")) {\n        rule.awsStatistics = new ArrayList<>();\n        for (String statistic : (List<String>) yamlMetricRule.get(\"aws_statistics\")) {\n          rule.awsStatistics.add(Statistic.fromValue(statistic));\n        }\n      } else if (!yamlMetricRule.containsKey(\"aws_extended_statistics\")) {\n",
                    "rendered": {
                      "text": "      }\n      if (yamlMetricRule.containsKey(\"aws_statistics\")) {\n        rule.awsStatistics = new ArrayList<>();\n        for (String statistic : (List<String>) yamlMetricRule.get(\"aws_statistics\")) {\n          rule.awsStatistics.add(Statistic.fromValue(statistic));\n        }\n      } else if (!yamlMetricRule.containsKey(\"aws_extended_statistics\")) {\n",
                      "markdown": "`      }\n      if (yamlMetricRule.containsKey(\"aws_statistics\")) {\n        rule.awsStatistics = new ArrayList<>();\n        for (String statistic : (List<String>) yamlMetricRule.get(\"aws_statistics\")) {\n          rule.awsStatistics.add(Statistic.fromValue(statistic));\n        }\n      } else if (!yamlMetricRule.containsKey(\"aws_extended_statistics\")) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 54,
                  "endLine": 257,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        rule.awsDimensionSelectRegex =\n            (Map<String, List<String>>) yamlMetricRule.get(\"aws_dimension_select_regex\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_statistics\")) {\n        rule.awsStatistics = new ArrayList<>();\n",
                    "rendered": {
                      "text": "      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        rule.awsDimensionSelectRegex =\n            (Map<String, List<String>>) yamlMetricRule.get(\"aws_dimension_select_regex\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_statistics\")) {\n        rule.awsStatistics = new ArrayList<>();\n",
                      "markdown": "`      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        rule.awsDimensionSelectRegex =\n            (Map<String, List<String>>) yamlMetricRule.get(\"aws_dimension_select_regex\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_statistics\")) {\n        rule.awsStatistics = new ArrayList<>();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 54,
                  "endLine": 253,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")) {\n        rule.awsDimensionSelect =\n            (Map<String, List<String>>) yamlMetricRule.get(\"aws_dimension_select\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        rule.awsDimensionSelectRegex =\n",
                    "rendered": {
                      "text": "      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")) {\n        rule.awsDimensionSelect =\n            (Map<String, List<String>>) yamlMetricRule.get(\"aws_dimension_select\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        rule.awsDimensionSelectRegex =\n",
                      "markdown": "`      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")) {\n        rule.awsDimensionSelect =\n            (Map<String, List<String>>) yamlMetricRule.get(\"aws_dimension_select\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        rule.awsDimensionSelectRegex =\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 58,
                  "endLine": 244,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimensions\")) {\n        rule.awsDimensions = (List<String>) yamlMetricRule.get(\"aws_dimensions\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")\n          && yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n",
                    "rendered": {
                      "text": "        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimensions\")) {\n        rule.awsDimensions = (List<String>) yamlMetricRule.get(\"aws_dimensions\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")\n          && yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n",
                      "markdown": "`        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimensions\")) {\n        rule.awsDimensions = (List<String>) yamlMetricRule.get(\"aws_dimensions\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")\n          && yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 43,
                  "endLine": 241,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimensions\")) {\n        rule.awsDimensions = (List<String>) yamlMetricRule.get(\"aws_dimensions\");\n",
                    "rendered": {
                      "text": "      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimensions\")) {\n        rule.awsDimensions = (List<String>) yamlMetricRule.get(\"aws_dimensions\");\n",
                      "markdown": "`      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimensions\")) {\n        rule.awsDimensions = (List<String>) yamlMetricRule.get(\"aws_dimensions\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 50,
                  "endLine": 239,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        throw new IllegalArgumentException(\"Must provide aws_namespace and aws_metric_name\");\n      }\n      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n",
                    "rendered": {
                      "text": "        throw new IllegalArgumentException(\"Must provide aws_namespace and aws_metric_name\");\n      }\n      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n",
                      "markdown": "`        throw new IllegalArgumentException(\"Must provide aws_namespace and aws_metric_name\");\n      }\n      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n      }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 49,
                  "endLine": 238,
                  "endColumn": 54,
                  "snippet": {
                    "text": "          || !yamlMetricRule.containsKey(\"aws_metric_name\")) {\n        throw new IllegalArgumentException(\"Must provide aws_namespace and aws_metric_name\");\n      }\n      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n",
                    "rendered": {
                      "text": "          || !yamlMetricRule.containsKey(\"aws_metric_name\")) {\n        throw new IllegalArgumentException(\"Must provide aws_namespace and aws_metric_name\");\n      }\n      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n",
                      "markdown": "`          || !yamlMetricRule.containsKey(\"aws_metric_name\")) {\n        throw new IllegalArgumentException(\"Must provide aws_namespace and aws_metric_name\");\n      }\n      rule.awsNamespace = (String) yamlMetricRule.get(\"aws_namespace\");\n      rule.awsMetricName = (String) yamlMetricRule.get(\"aws_metric_name\");\n      if (yamlMetricRule.containsKey(\"help\")) {\n        rule.help = (String) yamlMetricRule.get(\"help\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 63,
                  "endLine": 230,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    DimensionCacheConfig metricCacheConfig = new DimensionCacheConfig(defaultMetricCacheSeconds);\n    ArrayList<MetricRule> rules = new ArrayList<>();\n\n    for (Object ruleObject : (List<Map<String, Object>>) config.get(\"metrics\")) {\n      Map<String, Object> yamlMetricRule = (Map<String, Object>) ruleObject;\n      MetricRule rule = new MetricRule();\n      rules.add(rule);\n",
                    "rendered": {
                      "text": "    DimensionCacheConfig metricCacheConfig = new DimensionCacheConfig(defaultMetricCacheSeconds);\n    ArrayList<MetricRule> rules = new ArrayList<>();\n\n    for (Object ruleObject : (List<Map<String, Object>>) config.get(\"metrics\")) {\n      Map<String, Object> yamlMetricRule = (Map<String, Object>) ruleObject;\n      MetricRule rule = new MetricRule();\n      rules.add(rule);\n",
                      "markdown": "`    DimensionCacheConfig metricCacheConfig = new DimensionCacheConfig(defaultMetricCacheSeconds);\n    ArrayList<MetricRule> rules = new ArrayList<>();\n\n    for (Object ruleObject : (List<Map<String, Object>>) config.get(\"metrics\")) {\n      Map<String, Object> yamlMetricRule = (Map<String, Object>) ruleObject;\n      MetricRule rule = new MetricRule();\n      rules.add(rule);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 35,
                  "endLine": 194,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      defaultWarnOnMissingDimensions = (Boolean) config.get(\"warn_on_empty_list_dimensions\");\n    }\n\n    String region = (String) config.get(\"region\");\n\n    if (cloudWatchClient == null) {\n      CloudWatchClientBuilder clientBuilder = CloudWatchClient.builder();\n",
                    "rendered": {
                      "text": "      defaultWarnOnMissingDimensions = (Boolean) config.get(\"warn_on_empty_list_dimensions\");\n    }\n\n    String region = (String) config.get(\"region\");\n\n    if (cloudWatchClient == null) {\n      CloudWatchClientBuilder clientBuilder = CloudWatchClient.builder();\n",
                      "markdown": "`      defaultWarnOnMissingDimensions = (Boolean) config.get(\"warn_on_empty_list_dimensions\");\n    }\n\n    String region = (String) config.get(\"region\");\n\n    if (cloudWatchClient == null) {\n      CloudWatchClientBuilder clientBuilder = CloudWatchClient.builder();\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 55,
                  "endLine": 191,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    boolean defaultWarnOnMissingDimensions = false;\n    if (config.containsKey(\"warn_on_empty_list_dimensions\")) {\n      defaultWarnOnMissingDimensions = (Boolean) config.get(\"warn_on_empty_list_dimensions\");\n    }\n\n    String region = (String) config.get(\"region\");\n",
                    "rendered": {
                      "text": "\n    boolean defaultWarnOnMissingDimensions = false;\n    if (config.containsKey(\"warn_on_empty_list_dimensions\")) {\n      defaultWarnOnMissingDimensions = (Boolean) config.get(\"warn_on_empty_list_dimensions\");\n    }\n\n    String region = (String) config.get(\"region\");\n",
                      "markdown": "`\n    boolean defaultWarnOnMissingDimensions = false;\n    if (config.containsKey(\"warn_on_empty_list_dimensions\")) {\n      defaultWarnOnMissingDimensions = (Boolean) config.get(\"warn_on_empty_list_dimensions\");\n    }\n\n    String region = (String) config.get(\"region\");\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 45,
                  "endLine": 186,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    Duration defaultMetricCacheSeconds = Duration.ofSeconds(0);\n    if (config.containsKey(\"list_metrics_cache_ttl\")) {\n      defaultMetricCacheSeconds =\n          Duration.ofSeconds(((Number) config.get(\"list_metrics_cache_ttl\")).intValue());\n    }\n\n    boolean defaultWarnOnMissingDimensions = false;\n",
                    "rendered": {
                      "text": "    Duration defaultMetricCacheSeconds = Duration.ofSeconds(0);\n    if (config.containsKey(\"list_metrics_cache_ttl\")) {\n      defaultMetricCacheSeconds =\n          Duration.ofSeconds(((Number) config.get(\"list_metrics_cache_ttl\")).intValue());\n    }\n\n    boolean defaultWarnOnMissingDimensions = false;\n",
                      "markdown": "`    Duration defaultMetricCacheSeconds = Duration.ofSeconds(0);\n    if (config.containsKey(\"list_metrics_cache_ttl\")) {\n      defaultMetricCacheSeconds =\n          Duration.ofSeconds(((Number) config.get(\"list_metrics_cache_ttl\")).intValue());\n    }\n\n    boolean defaultWarnOnMissingDimensions = false;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 48,
                  "endLine": 180,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    boolean defaultUseGetMetricData = false;\n    if (config.containsKey(\"use_get_metric_data\")) {\n      defaultUseGetMetricData = (Boolean) config.get(\"use_get_metric_data\");\n    }\n\n    Duration defaultMetricCacheSeconds = Duration.ofSeconds(0);\n",
                    "rendered": {
                      "text": "\n    boolean defaultUseGetMetricData = false;\n    if (config.containsKey(\"use_get_metric_data\")) {\n      defaultUseGetMetricData = (Boolean) config.get(\"use_get_metric_data\");\n    }\n\n    Duration defaultMetricCacheSeconds = Duration.ofSeconds(0);\n",
                      "markdown": "`\n    boolean defaultUseGetMetricData = false;\n    if (config.containsKey(\"use_get_metric_data\")) {\n      defaultUseGetMetricData = (Boolean) config.get(\"use_get_metric_data\");\n    }\n\n    Duration defaultMetricCacheSeconds = Duration.ofSeconds(0);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 51,
                  "endLine": 175,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    boolean defaultCloudwatchTimestamp = true;\n    if (config.containsKey(\"set_timestamp\")) {\n      defaultCloudwatchTimestamp = (Boolean) config.get(\"set_timestamp\");\n    }\n\n    boolean defaultUseGetMetricData = false;\n",
                    "rendered": {
                      "text": "\n    boolean defaultCloudwatchTimestamp = true;\n    if (config.containsKey(\"set_timestamp\")) {\n      defaultCloudwatchTimestamp = (Boolean) config.get(\"set_timestamp\");\n    }\n\n    boolean defaultUseGetMetricData = false;\n",
                      "markdown": "`\n    boolean defaultCloudwatchTimestamp = true;\n    if (config.containsKey(\"set_timestamp\")) {\n      defaultCloudwatchTimestamp = (Boolean) config.get(\"set_timestamp\");\n    }\n\n    boolean defaultUseGetMetricData = false;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 37,
                  "endLine": 170,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    }\n    int defaultDelay = 600;\n    if (config.containsKey(\"delay_seconds\")) {\n      defaultDelay = ((Number) config.get(\"delay_seconds\")).intValue();\n    }\n\n    boolean defaultCloudwatchTimestamp = true;\n",
                    "rendered": {
                      "text": "    }\n    int defaultDelay = 600;\n    if (config.containsKey(\"delay_seconds\")) {\n      defaultDelay = ((Number) config.get(\"delay_seconds\")).intValue();\n    }\n\n    boolean defaultCloudwatchTimestamp = true;\n",
                      "markdown": "`    }\n    int defaultDelay = 600;\n    if (config.containsKey(\"delay_seconds\")) {\n      defaultDelay = ((Number) config.get(\"delay_seconds\")).intValue();\n    }\n\n    boolean defaultCloudwatchTimestamp = true;\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 37,
                  "endLine": 166,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    }\n    int defaultRange = 600;\n    if (config.containsKey(\"range_seconds\")) {\n      defaultRange = ((Number) config.get(\"range_seconds\")).intValue();\n    }\n    int defaultDelay = 600;\n    if (config.containsKey(\"delay_seconds\")) {\n",
                    "rendered": {
                      "text": "    }\n    int defaultRange = 600;\n    if (config.containsKey(\"range_seconds\")) {\n      defaultRange = ((Number) config.get(\"range_seconds\")).intValue();\n    }\n    int defaultDelay = 600;\n    if (config.containsKey(\"delay_seconds\")) {\n",
                      "markdown": "`    }\n    int defaultRange = 600;\n    if (config.containsKey(\"range_seconds\")) {\n      defaultRange = ((Number) config.get(\"range_seconds\")).intValue();\n    }\n    int defaultDelay = 600;\n    if (config.containsKey(\"delay_seconds\")) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 38,
                  "endLine": 162,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n    int defaultPeriod = 60;\n    if (config.containsKey(\"period_seconds\")) {\n      defaultPeriod = ((Number) config.get(\"period_seconds\")).intValue();\n    }\n    int defaultRange = 600;\n    if (config.containsKey(\"range_seconds\")) {\n",
                    "rendered": {
                      "text": "\n    int defaultPeriod = 60;\n    if (config.containsKey(\"period_seconds\")) {\n      defaultPeriod = ((Number) config.get(\"period_seconds\")).intValue();\n    }\n    int defaultRange = 600;\n    if (config.containsKey(\"range_seconds\")) {\n",
                      "markdown": "`\n    int defaultPeriod = 60;\n    if (config.containsKey(\"period_seconds\")) {\n      defaultPeriod = ((Number) config.get(\"period_seconds\")).intValue();\n    }\n    int defaultRange = 600;\n    if (config.containsKey(\"range_seconds\")) {\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 81,
                  "endLine": 249,
                  "endColumn": 85,
                  "snippet": {
                    "text": "      if (yamlMetricRule.containsKey(\"aws_dimension_select\")\n          && yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        throw new IllegalArgumentException(\n            \"Must not provide aws_dimension_select and aws_dimension_select_regex at the same time\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")) {\n        rule.awsDimensionSelect =\n",
                    "rendered": {
                      "text": "      if (yamlMetricRule.containsKey(\"aws_dimension_select\")\n          && yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        throw new IllegalArgumentException(\n            \"Must not provide aws_dimension_select and aws_dimension_select_regex at the same time\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")) {\n        rule.awsDimensionSelect =\n",
                      "markdown": "`      if (yamlMetricRule.containsKey(\"aws_dimension_select\")\n          && yamlMetricRule.containsKey(\"aws_dimension_select_regex\")) {\n        throw new IllegalArgumentException(\n            \"Must not provide aws_dimension_select and aws_dimension_select_regex at the same time\");\n      }\n      if (yamlMetricRule.containsKey(\"aws_dimension_select\")) {\n        rule.awsDimensionSelect =\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/CloudWatchCollector.java"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 45,
                  "endLine": 469,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      case AVERAGE:\n        return \"_average\";\n      default:\n        throw new RuntimeException(\"I did not expect this stats!\");\n    }\n  }\n\n",
                    "rendered": {
                      "text": "      case AVERAGE:\n        return \"_average\";\n      default:\n        throw new RuntimeException(\"I did not expect this stats!\");\n    }\n  }\n\n",
                      "markdown": "`      case AVERAGE:\n        return \"_average\";\n      default:\n        throw new RuntimeException(\"I did not expect this stats!\");\n    }\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/DefaultDimensionSource.java"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 74,
                  "endLine": 154,
                  "endColumn": 79,
                  "snippet": {
                    "text": "      String dimensionName = dimension.name();\n      String dimensionValue = dimension.value();\n      if (dimensionSelectRegexKeys.contains(dimensionName)) {\n        List<String> allowedDimensionValues = rule.awsDimensionSelectRegex.get(dimensionName);\n        if (!regexListMatch(allowedDimensionValues, dimensionValue)) {\n          return false;\n        }\n",
                    "rendered": {
                      "text": "      String dimensionName = dimension.name();\n      String dimensionValue = dimension.value();\n      if (dimensionSelectRegexKeys.contains(dimensionName)) {\n        List<String> allowedDimensionValues = rule.awsDimensionSelectRegex.get(dimensionName);\n        if (!regexListMatch(allowedDimensionValues, dimensionValue)) {\n          return false;\n        }\n",
                      "markdown": "`      String dimensionName = dimension.name();\n      String dimensionValue = dimension.value();\n      if (dimensionSelectRegexKeys.contains(dimensionName)) {\n        List<String> allowedDimensionValues = rule.awsDimensionSelectRegex.get(dimensionName);\n        if (!regexListMatch(allowedDimensionValues, dimensionValue)) {\n          return false;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/DefaultDimensionSource.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 69,
                  "endLine": 138,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      String dimensionName = dimension.name();\n      String dimensionValue = dimension.value();\n      if (dimensionSelectKeys.contains(dimensionName)) {\n        List<String> allowedDimensionValues = rule.awsDimensionSelect.get(dimensionName);\n        if (!allowedDimensionValues.contains(dimensionValue)) {\n          return false;\n        }\n",
                    "rendered": {
                      "text": "      String dimensionName = dimension.name();\n      String dimensionValue = dimension.value();\n      if (dimensionSelectKeys.contains(dimensionName)) {\n        List<String> allowedDimensionValues = rule.awsDimensionSelect.get(dimensionName);\n        if (!allowedDimensionValues.contains(dimensionValue)) {\n          return false;\n        }\n",
                      "markdown": "`      String dimensionName = dimension.name();\n      String dimensionValue = dimension.value();\n      if (dimensionSelectKeys.contains(dimensionName)) {\n        List<String> allowedDimensionValues = rule.awsDimensionSelect.get(dimensionName);\n        if (!allowedDimensionValues.contains(dimensionValue)) {\n          return false;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/main/java/io/prometheus/cloudwatch/DefaultDimensionSource.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 52,
                  "endLine": 52,
                  "endColumn": 57,
                  "snippet": {
                    "text": "      List<String> dimensionsCopy = new ArrayList<>(dimensions);\n      String dimensionName = dimensionsCopy.remove(dimensionsCopy.size() - 1);\n      for (List<Dimension> permutation : permuteDimensions(dimensionsCopy, dimensionValues)) {\n        for (String dimensionValue : dimensionValues.get(dimensionName)) {\n          Dimension.Builder dimensionBuilder = Dimension.builder();\n          dimensionBuilder.value(dimensionValue);\n          dimensionBuilder.name(dimensionName);\n",
                    "rendered": {
                      "text": "      List<String> dimensionsCopy = new ArrayList<>(dimensions);\n      String dimensionName = dimensionsCopy.remove(dimensionsCopy.size() - 1);\n      for (List<Dimension> permutation : permuteDimensions(dimensionsCopy, dimensionValues)) {\n        for (String dimensionValue : dimensionValues.get(dimensionName)) {\n          Dimension.Builder dimensionBuilder = Dimension.builder();\n          dimensionBuilder.value(dimensionValue);\n          dimensionBuilder.name(dimensionName);\n",
                      "markdown": "`      List<String> dimensionsCopy = new ArrayList<>(dimensions);\n      String dimensionName = dimensionsCopy.remove(dimensionsCopy.size() - 1);\n      for (List<Dimension> permutation : permuteDimensions(dimensionsCopy, dimensionValues)) {\n        for (String dimensionValue : dimensionValues.get(dimensionName)) {\n          Dimension.Builder dimensionBuilder = Dimension.builder();\n          dimensionBuilder.value(dimensionValue);\n          dimensionBuilder.name(dimensionName);\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 57,
                  "endLine": 64,
                  "endColumn": 65,
                  "snippet": {
                    "text": "      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n          if [[ -n \"$CIRCLE_TAG\" ]]; then\n",
                    "rendered": {
                      "text": "      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n          if [[ -n \"$CIRCLE_TAG\" ]]; then\n",
                      "markdown": "`      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n          if [[ -n \"$CIRCLE_TAG\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 53,
                  "endLine": 63,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n",
                    "rendered": {
                      "text": "            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n",
                      "markdown": "`            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 9,
                  "endLine": 107,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n            --progress plain \\\n            --platform \"$BUILDX_PLATFORMS\" \\\n            .\n",
                    "rendered": {
                      "text": "      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n            --progress plain \\\n            --platform \"$BUILDX_PLATFORMS\" \\\n            .\n",
                      "markdown": "`      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n            --progress plain \\\n            --platform \"$BUILDX_PLATFORMS\" \\\n            .\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 12,
                  "endLine": 105,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n            --progress plain \\\n",
                    "rendered": {
                      "text": "            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n            --progress plain \\\n",
                      "markdown": "`            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n            --progress plain \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 12,
                  "endLine": 104,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n",
                    "rendered": {
                      "text": "            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n",
                      "markdown": "`            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n          docker buildx build \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 11,
                  "endLine": 103,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n",
                    "rendered": {
                      "text": "\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n",
                      "markdown": "`\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 11,
                  "endLine": 101,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n",
                    "rendered": {
                      "text": "            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n",
                      "markdown": "`            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 11,
                  "endLine": 99,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n",
                    "rendered": {
                      "text": "            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n",
                      "markdown": "`            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 11,
                  "endLine": 98,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n",
                    "rendered": {
                      "text": "\n            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n",
                      "markdown": "`\n            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 11,
                  "endLine": 92,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          command: |\n            BUILDX_BINARY_URL=\"https://github.com/docker/buildx/releases/download/v0.7.0/buildx-v0.7.0.linux-amd64\"\n\n            curl --output docker-buildx \\\n              --silent --show-error --location --fail --retry 3 \\\n              \"$BUILDX_BINARY_URL\"\n\n",
                    "rendered": {
                      "text": "          command: |\n            BUILDX_BINARY_URL=\"https://github.com/docker/buildx/releases/download/v0.7.0/buildx-v0.7.0.linux-amd64\"\n\n            curl --output docker-buildx \\\n              --silent --show-error --location --fail --retry 3 \\\n              \"$BUILDX_BINARY_URL\"\n\n",
                      "markdown": "`          command: |\n            BUILDX_BINARY_URL=\"https://github.com/docker/buildx/releases/download/v0.7.0/buildx-v0.7.0.linux-amd64\"\n\n            curl --output docker-buildx \\\n              --silent --show-error --location --fail --retry 3 \\\n              \"$BUILDX_BINARY_URL\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 12,
                  "endLine": 78,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            \"${tags[@]/#/--tag=quay.io/prometheus/cloudwatch-exporter:}\" \\\n            \"${tags[@]/#/--tag=prom/cloudwatch-exporter:}\" \\\n            --push .\n      - run: docker images\n  build_image:\n    executor: java\n    environment:\n",
                    "rendered": {
                      "text": "            \"${tags[@]/#/--tag=quay.io/prometheus/cloudwatch-exporter:}\" \\\n            \"${tags[@]/#/--tag=prom/cloudwatch-exporter:}\" \\\n            --push .\n      - run: docker images\n  build_image:\n    executor: java\n    environment:\n",
                      "markdown": "`            \"${tags[@]/#/--tag=quay.io/prometheus/cloudwatch-exporter:}\" \\\n            \"${tags[@]/#/--tag=prom/cloudwatch-exporter:}\" \\\n            --push .\n      - run: docker images\n  build_image:\n    executor: java\n    environment:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 9,
                  "endLine": 72,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          fi\n\n          set -x\n          docker buildx build \\\n            --progress plain \\\n            --platform \"$BUILDX_PLATFORMS\" \\\n            \"${tags[@]/#/--tag=quay.io/prometheus/cloudwatch-exporter:}\" \\\n",
                    "rendered": {
                      "text": "          fi\n\n          set -x\n          docker buildx build \\\n            --progress plain \\\n            --platform \"$BUILDX_PLATFORMS\" \\\n            \"${tags[@]/#/--tag=quay.io/prometheus/cloudwatch-exporter:}\" \\\n",
                      "markdown": "`          fi\n\n          set -x\n          docker buildx build \\\n            --progress plain \\\n            --platform \"$BUILDX_PLATFORMS\" \\\n            \"${tags[@]/#/--tag=quay.io/prometheus/cloudwatch-exporter:}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 12,
                  "endLine": 64,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n          if [[ -n \"$CIRCLE_TAG\" ]]; then\n",
                    "rendered": {
                      "text": "      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n          if [[ -n \"$CIRCLE_TAG\" ]]; then\n",
                      "markdown": "`      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n          if [[ -n \"$CIRCLE_TAG\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 12,
                  "endLine": 63,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n",
                    "rendered": {
                      "text": "            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n",
                      "markdown": "`            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n          tags=(master main)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 12,
                  "endLine": 62,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n",
                    "rendered": {
                      "text": "            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n",
                      "markdown": "`            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n      - run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "endLine": 61,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n",
                    "rendered": {
                      "text": "            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n",
                      "markdown": "`            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n      - run: docker login -u \"$DOCKER_LOGIN\" -p \"$DOCKER_PASSWORD\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 11,
                  "endLine": 60,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n",
                    "rendered": {
                      "text": "\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n",
                      "markdown": "`\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n      - run: docker buildx create --name buildx --use buildx\n      - run: docker login -u \"$QUAY_LOGIN\" -p \"$QUAY_PASSWORD\" quay.io\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 11,
                  "endLine": 58,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n",
                    "rendered": {
                      "text": "            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n",
                      "markdown": "`            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n            docker run --rm --privileged tonistiigi/binfmt:latest --install \"$BUILDX_PLATFORMS\"\n      - run: docker context create buildx\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 11,
                  "endLine": 56,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n",
                    "rendered": {
                      "text": "            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n",
                      "markdown": "`            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n            # Run binfmt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 11,
                  "endLine": 55,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n",
                    "rendered": {
                      "text": "\n            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n",
                      "markdown": "`\n            mkdir -p ~/.docker/cli-plugins\n\n            mv docker-buildx ~/.docker/cli-plugins/\n            chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n            docker buildx install\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.circleci/config.yml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 11,
                  "endLine": 49,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          command: |\n            BUILDX_BINARY_URL=\"https://github.com/docker/buildx/releases/download/v0.7.0/buildx-v0.7.0.linux-amd64\"\n\n            curl --output docker-buildx \\\n              --silent --show-error --location --fail --retry 3 \\\n              \"$BUILDX_BINARY_URL\"\n\n",
                    "rendered": {
                      "text": "          command: |\n            BUILDX_BINARY_URL=\"https://github.com/docker/buildx/releases/download/v0.7.0/buildx-v0.7.0.linux-amd64\"\n\n            curl --output docker-buildx \\\n              --silent --show-error --location --fail --retry 3 \\\n              \"$BUILDX_BINARY_URL\"\n\n",
                      "markdown": "`          command: |\n            BUILDX_BINARY_URL=\"https://github.com/docker/buildx/releases/download/v0.7.0/buildx-v0.7.0.linux-amd64\"\n\n            curl --output docker-buildx \\\n              --silent --show-error --location --fail --retry 3 \\\n              \"$BUILDX_BINARY_URL\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/ISSUE_TEMPLATE/bug.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 16,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n<!-- Please provide steps for us to reproduce this issue? Example for config file are very welcomed! -->\n\n### What did you expect to see?\n\n### What did you see instead? Under which circumstances?\n\n",
                    "rendered": {
                      "text": "\n<!-- Please provide steps for us to reproduce this issue? Example for config file are very welcomed! -->\n\n### What did you expect to see?\n\n### What did you see instead? Under which circumstances?\n\n",
                      "markdown": "`\n<!-- Please provide steps for us to reproduce this issue? Example for config file are very welcomed! -->\n\n### What did you expect to see?\n\n### What did you see instead? Under which circumstances?\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/ISSUE_TEMPLATE/config.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 20,
                  "endLine": 6,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  - name: Prometheus community channels\n    url: https://prometheus.io/community\n    about: For general prometheus questions ❓❓ \n  - name: Cloudwatch Service quotas\n    url: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_limits.html\n    about: Read about Cloudwatch quotas\n",
                    "rendered": {
                      "text": "  - name: Prometheus community channels\n    url: https://prometheus.io/community\n    about: For general prometheus questions ❓❓ \n  - name: Cloudwatch Service quotas\n    url: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_limits.html\n    about: Read about Cloudwatch quotas\n",
                      "markdown": "`  - name: Prometheus community channels\n    url: https://prometheus.io/community\n    about: For general prometheus questions ❓❓ \n  - name: Cloudwatch Service quotas\n    url: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_limits.html\n    about: Read about Cloudwatch quotas\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/workflows/container_description.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 46,
                  "endLine": 28,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n        env:\n          DOCKER_USER: ${{ secrets.DOCKER_HUB_LOGIN }}\n          DOCKER_PASS: ${{ secrets.DOCKER_HUB_PASSWORD }}\n        with:\n          destination_container_repo: ${{ env.DOCKER_REPO_NAME }}\n          provider: dockerhub\n",
                    "rendered": {
                      "text": "        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n        env:\n          DOCKER_USER: ${{ secrets.DOCKER_HUB_LOGIN }}\n          DOCKER_PASS: ${{ secrets.DOCKER_HUB_PASSWORD }}\n        with:\n          destination_container_repo: ${{ env.DOCKER_REPO_NAME }}\n          provider: dockerhub\n",
                      "markdown": "`        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n        env:\n          DOCKER_USER: ${{ secrets.DOCKER_HUB_LOGIN }}\n          DOCKER_PASS: ${{ secrets.DOCKER_HUB_PASSWORD }}\n        with:\n          destination_container_repo: ${{ env.DOCKER_REPO_NAME }}\n          provider: dockerhub\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/workflows/container_description.yml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 13,
                  "endLine": 42,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    name: Push README to quay.io\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set quay.io org name\n        run: echo \"DOCKER_REPO=$(echo quay.io/${GITHUB_REPOSITORY_OWNER} | tr -d '-')\" >> $GITHUB_ENV\n",
                    "rendered": {
                      "text": "    name: Push README to quay.io\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set quay.io org name\n        run: echo \"DOCKER_REPO=$(echo quay.io/${GITHUB_REPOSITORY_OWNER} | tr -d '-')\" >> $GITHUB_ENV\n",
                      "markdown": "`    name: Push README to quay.io\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set quay.io org name\n        run: echo \"DOCKER_REPO=$(echo quay.io/${GITHUB_REPOSITORY_OWNER} | tr -d '-')\" >> $GITHUB_ENV\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/workflows/container_description.yml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 17,
                  "endLine": 22,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set docker hub repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n      - name: Push README to Dockerhub\n        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n",
                    "rendered": {
                      "text": "    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set docker hub repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n      - name: Push README to Dockerhub\n        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n",
                      "markdown": "`    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set docker hub repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n      - name: Push README to Dockerhub\n        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/workflows/container_description.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 13,
                  "endLine": 20,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    name: Push README to Docker Hub\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set docker hub repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n",
                    "rendered": {
                      "text": "    name: Push README to Docker Hub\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set docker hub repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n",
                      "markdown": "`    name: Push README to Docker Hub\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6\n      - name: Set docker hub repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/workflows/container_description.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 24,
                  "endLine": 17,
                  "endColumn": 32,
                  "snippet": {
                    "text": "jobs:\n  PushDockerHubReadme:\n    runs-on: ubuntu-latest\n    name: Push README to Docker Hub\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n",
                    "rendered": {
                      "text": "jobs:\n  PushDockerHubReadme:\n    runs-on: ubuntu-latest\n    name: Push README to Docker Hub\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n",
                      "markdown": "`jobs:\n  PushDockerHubReadme:\n    runs-on: ubuntu-latest\n    name: Push README to Docker Hub\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.github/workflows/container_description.yml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 20,
                  "endLine": 2,
                  "endColumn": 28,
                  "snippet": {
                    "text": "---\nname: Push README to Docker Hub\non:\n  push:\n    paths:\n",
                    "rendered": {
                      "text": "---\nname: Push README to Docker Hub\non:\n  push:\n    paths:\n",
                      "markdown": "`---\nname: Push README to Docker Hub\non:\n  push:\n    paths:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/Dockerfile"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 64,
                  "endLine": 28,
                  "endColumn": 4,
                  "snippet": {
                    "text": "WORKDIR /\nRUN mkdir /config\nCOPY --from=builder /cloudwatch_exporter.jar /cloudwatch_exporter.jar\nENTRYPOINT [ \"java\", \"-jar\", \"/cloudwatch_exporter.jar\", \"9106\"]\nCMD [\"/config/config.yml\"]\n",
                    "rendered": {
                      "text": "WORKDIR /\nRUN mkdir /config\nCOPY --from=builder /cloudwatch_exporter.jar /cloudwatch_exporter.jar\nENTRYPOINT [ \"java\", \"-jar\", \"/cloudwatch_exporter.jar\", \"9106\"]\nCMD [\"/config/config.yml\"]\n",
                      "markdown": "`WORKDIR /\nRUN mkdir /config\nCOPY --from=builder /cloudwatch_exporter.jar /cloudwatch_exporter.jar\nENTRYPOINT [ \"java\", \"-jar\", \"/cloudwatch_exporter.jar\", \"9106\"]\nCMD [\"/config/config.yml\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/Dockerfile"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 18,
                  "endColumn": 7,
                  "snippet": {
                    "text": "COPY . /cloudwatch_exporter\n\nRUN mvn package \\\n && mv target/cloudwatch_exporter-*-with-dependencies.jar /cloudwatch_exporter.jar\n\nFROM eclipse-temurin:21-jre-noble as runner\nLABEL maintainer=\"The Prometheus Authors <prometheus-developers@googlegroups.com>\"\n",
                    "rendered": {
                      "text": "COPY . /cloudwatch_exporter\n\nRUN mvn package \\\n && mv target/cloudwatch_exporter-*-with-dependencies.jar /cloudwatch_exporter.jar\n\nFROM eclipse-temurin:21-jre-noble as runner\nLABEL maintainer=\"The Prometheus Authors <prometheus-developers@googlegroups.com>\"\n",
                      "markdown": "`COPY . /cloudwatch_exporter\n\nRUN mvn package \\\n && mv target/cloudwatch_exporter-*-with-dependencies.jar /cloudwatch_exporter.jar\n\nFROM eclipse-temurin:21-jre-noble as runner\nLABEL maintainer=\"The Prometheus Authors <prometheus-developers@googlegroups.com>\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/Dockerfile"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 66,
                  "endLine": 12,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz /opt/maven.tar.gz\nRUN mkdir -p /opt/maven \\\n && echo \"${MAVEN_SHA512}  /opt/maven.tar.gz\" | sha512sum -c \\\n && tar -x --strip-components=1 -C /opt/maven -f /opt/maven.tar.gz\nENV PATH /opt/maven/bin:${PATH}\n\nWORKDIR /cloudwatch_exporter\nCOPY . /cloudwatch_exporter\n",
                    "rendered": {
                      "text": "ADD https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz /opt/maven.tar.gz\nRUN mkdir -p /opt/maven \\\n && echo \"${MAVEN_SHA512}  /opt/maven.tar.gz\" | sha512sum -c \\\n && tar -x --strip-components=1 -C /opt/maven -f /opt/maven.tar.gz\nENV PATH /opt/maven/bin:${PATH}\n\nWORKDIR /cloudwatch_exporter\nCOPY . /cloudwatch_exporter\n",
                      "markdown": "`ADD https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz /opt/maven.tar.gz\nRUN mkdir -p /opt/maven \\\n && echo \"${MAVEN_SHA512}  /opt/maven.tar.gz\" | sha512sum -c \\\n && tar -x --strip-components=1 -C /opt/maven -f /opt/maven.tar.gz\nENV PATH /opt/maven/bin:${PATH}\n\nWORKDIR /cloudwatch_exporter\nCOPY . /cloudwatch_exporter\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/Dockerfile"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 8,
                  "snippet": {
                    "text": "ADD https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz /opt/maven.tar.gz\nRUN mkdir -p /opt/maven \\\n && echo \"${MAVEN_SHA512}  /opt/maven.tar.gz\" | sha512sum -c \\\n && tar -x --strip-components=1 -C /opt/maven -f /opt/maven.tar.gz\nENV PATH /opt/maven/bin:${PATH}\n\nWORKDIR /cloudwatch_exporter\n",
                    "rendered": {
                      "text": "ADD https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz /opt/maven.tar.gz\nRUN mkdir -p /opt/maven \\\n && echo \"${MAVEN_SHA512}  /opt/maven.tar.gz\" | sha512sum -c \\\n && tar -x --strip-components=1 -C /opt/maven -f /opt/maven.tar.gz\nENV PATH /opt/maven/bin:${PATH}\n\nWORKDIR /cloudwatch_exporter\n",
                      "markdown": "`ADD https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz /opt/maven.tar.gz\nRUN mkdir -p /opt/maven \\\n && echo \"${MAVEN_SHA512}  /opt/maven.tar.gz\" | sha512sum -c \\\n && tar -x --strip-components=1 -C /opt/maven -f /opt/maven.tar.gz\nENV PATH /opt/maven/bin:${PATH}\n\nWORKDIR /cloudwatch_exporter\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 32,
                  "endLine": 36,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n",
                    "rendered": {
                      "text": "      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n",
                      "markdown": "`      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 22,
                  "endLine": 36,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n",
                    "rendered": {
                      "text": "      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n",
                      "markdown": "`      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n",
                    "rendered": {
                      "text": "      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n",
                      "markdown": "`      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n  </servers>\n</settings>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 10,
                  "snippet": {
                    "text": "This will\n\n1. prompt for the version\n2. update `pom.xml` with this version\n3. create and push a git tag\n4. build everything\n5. GPG-sign the artifacts\n",
                    "rendered": {
                      "text": "This will\n\n1. prompt for the version\n2. update `pom.xml` with this version\n3. create and push a git tag\n4. build everything\n5. GPG-sign the artifacts\n",
                      "markdown": "`This will\n\n1. prompt for the version\n2. update `pom.xml` with this version\n3. create and push a git tag\n4. build everything\n5. GPG-sign the artifacts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 50,
                  "endLine": 34,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  <servers>\n    <server>\n      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n",
                    "rendered": {
                      "text": "  <servers>\n    <server>\n      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n",
                      "markdown": "`  <servers>\n    <server>\n      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 10,
                  "endLine": 34,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  <servers>\n    <server>\n      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n",
                    "rendered": {
                      "text": "  <servers>\n    <server>\n      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n",
                      "markdown": "`  <servers>\n    <server>\n      <id>ossrh</id>\n      <!-- Update these following the instructions at https://central.sonatype.org/publish/generate-token/ -->\n      <username>token-user</username>\n      <password>token-password</password>\n    </server>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 26,
                  "endLine": 19,
                  "endColumn": 30,
                  "snippet": {
                    "text": "The same login will be used for the repository.\n\nVerify that you can log into [OSSRH](https://oss.sonatype.org/).\nThe CloudWatch Exporter is at [io.prometheus.cloudwatch](https://oss.sonatype.org/#nexus-search;quick~io.prometheus.cloudwatch).\n\nSet up [Maven publishing](https://central.sonatype.org/publish/publish-maven/), specifically the `<server>` block in `~/.m2/settings.xml`.\nFetch your user token according to [these instructions](https://central.sonatype.org/publish/generate-token/).\n",
                    "rendered": {
                      "text": "The same login will be used for the repository.\n\nVerify that you can log into [OSSRH](https://oss.sonatype.org/).\nThe CloudWatch Exporter is at [io.prometheus.cloudwatch](https://oss.sonatype.org/#nexus-search;quick~io.prometheus.cloudwatch).\n\nSet up [Maven publishing](https://central.sonatype.org/publish/publish-maven/), specifically the `<server>` block in `~/.m2/settings.xml`.\nFetch your user token according to [these instructions](https://central.sonatype.org/publish/generate-token/).\n",
                      "markdown": "`The same login will be used for the repository.\n\nVerify that you can log into [OSSRH](https://oss.sonatype.org/).\nThe CloudWatch Exporter is at [io.prometheus.cloudwatch](https://oss.sonatype.org/#nexus-search;quick~io.prometheus.cloudwatch).\n\nSet up [Maven publishing](https://central.sonatype.org/publish/publish-maven/), specifically the `<server>` block in `~/.m2/settings.xml`.\nFetch your user token according to [these instructions](https://central.sonatype.org/publish/generate-token/).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 53,
                  "endLine": 94,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n## Docker images\n\nAs part of the release process, `mvn` will create the git tag.\nThis tag is picked up by [CircleCI](https://app.circleci.com/pipelines/github/prometheus/cloudwatch_exporter?branch=master), which builds and pushes the [Docker images](README.md#docker-images).\n\n## GitHub Release\n",
                    "rendered": {
                      "text": "\n## Docker images\n\nAs part of the release process, `mvn` will create the git tag.\nThis tag is picked up by [CircleCI](https://app.circleci.com/pipelines/github/prometheus/cloudwatch_exporter?branch=master), which builds and pushes the [Docker images](README.md#docker-images).\n\n## GitHub Release\n",
                      "markdown": "`\n## Docker images\n\nAs part of the release process, `mvn` will create the git tag.\nThis tag is picked up by [CircleCI](https://app.circleci.com/pipelines/github/prometheus/cloudwatch_exporter?branch=master), which builds and pushes the [Docker images](README.md#docker-images).\n\n## GitHub Release\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 2,
                  "endLine": 92,
                  "endColumn": 10,
                  "snippet": {
                    "text": "This runs for a while, and the new version should become available on [OSSRH](https://oss.sonatype.org/#nexus-search;quick~io.prometheus.cloudwatch).\nIt usually appears immediately after the release process is done, but can take a few hours to show up.\n\n## Docker images\n\nAs part of the release process, `mvn` will create the git tag.\nThis tag is picked up by [CircleCI](https://app.circleci.com/pipelines/github/prometheus/cloudwatch_exporter?branch=master), which builds and pushes the [Docker images](README.md#docker-images).\n",
                    "rendered": {
                      "text": "This runs for a while, and the new version should become available on [OSSRH](https://oss.sonatype.org/#nexus-search;quick~io.prometheus.cloudwatch).\nIt usually appears immediately after the release process is done, but can take a few hours to show up.\n\n## Docker images\n\nAs part of the release process, `mvn` will create the git tag.\nThis tag is picked up by [CircleCI](https://app.circleci.com/pipelines/github/prometheus/cloudwatch_exporter?branch=master), which builds and pushes the [Docker images](README.md#docker-images).\n",
                      "markdown": "`This runs for a while, and the new version should become available on [OSSRH](https://oss.sonatype.org/#nexus-search;quick~io.prometheus.cloudwatch).\nIt usually appears immediately after the release process is done, but can take a few hours to show up.\n\n## Docker images\n\nAs part of the release process, `mvn` will create the git tag.\nThis tag is picked up by [CircleCI](https://app.circleci.com/pipelines/github/prometheus/cloudwatch_exporter?branch=master), which builds and pushes the [Docker images](README.md#docker-images).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/RELEASING.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 20,
                  "endLine": 66,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n1. prompt for the version\n2. update `pom.xml` with this version\n3. create and push a git tag\n4. build everything\n5. GPG-sign the artifacts\n\n",
                    "rendered": {
                      "text": "\n1. prompt for the version\n2. update `pom.xml` with this version\n3. create and push a git tag\n4. build everything\n5. GPG-sign the artifacts\n\n",
                      "markdown": "`\n1. prompt for the version\n2. update `pom.xml` with this version\n3. create and push a git tag\n4. build everything\n5. GPG-sign the artifacts\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/src/test/java/io/prometheus/cloudwatch/CloudWatchCollectorTest.java"
                },
                "region": {
                  "startLine": 1029,
                  "startColumn": 44,
                  "endLine": 1029,
                  "endColumn": 87,
                  "snippet": {
                    "text": "                    argThat(\n                        new GetMetricStatisticsRequestMatcher()\n                            .Namespace(\"AWS/DynamoDB\")\n                                .MetricName(\"AccountProvisionedReadCapacityUtilization\"))))\n        .thenReturn(\n            GetMetricStatisticsResponse.builder()\n                .datapoints(Datapoint.builder().timestamp(new Date().toInstant()).sum(1.0).build())\n",
                    "rendered": {
                      "text": "                    argThat(\n                        new GetMetricStatisticsRequestMatcher()\n                            .Namespace(\"AWS/DynamoDB\")\n                                .MetricName(\"AccountProvisionedReadCapacityUtilization\"))))\n        .thenReturn(\n            GetMetricStatisticsResponse.builder()\n                .datapoints(Datapoint.builder().timestamp(new Date().toInstant()).sum(1.0).build())\n",
                      "markdown": "`                    argThat(\n                        new GetMetricStatisticsRequestMatcher()\n                            .Namespace(\"AWS/DynamoDB\")\n                                .MetricName(\"AccountProvisionedReadCapacityUtilization\"))))\n        .thenReturn(\n            GetMetricStatisticsResponse.builder()\n                .datapoints(Datapoint.builder().timestamp(new Date().toInstant()).sum(1.0).build())\n`"
                    }
                  },
                  "sourceLanguage": "java"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloudwatch-exporter.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 47,
                  "endLine": 16,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n### Formatting\n- IDEs differ in how they format Java code. This can generate a lot of unrelated code change. To avoid this - we enforce specific formatting.\n- Code is automatically formatted with [Spotify fmt maven-plugin](https://github.com/spotify/fmt-maven-plugin) whenever you run standard `mvn install`.\n- CI builds will fail if code is not formatted that way.\n- To simply run the formatter you can always run: `mvn fmt:format` (requires JVM > 11)\n# Releasing\n",
                    "rendered": {
                      "text": "\n### Formatting\n- IDEs differ in how they format Java code. This can generate a lot of unrelated code change. To avoid this - we enforce specific formatting.\n- Code is automatically formatted with [Spotify fmt maven-plugin](https://github.com/spotify/fmt-maven-plugin) whenever you run standard `mvn install`.\n- CI builds will fail if code is not formatted that way.\n- To simply run the formatter you can always run: `mvn fmt:format` (requires JVM > 11)\n# Releasing\n",
                      "markdown": "`\n### Formatting\n- IDEs differ in how they format Java code. This can generate a lot of unrelated code change. To avoid this - we enforce specific formatting.\n- Code is automatically formatted with [Spotify fmt maven-plugin](https://github.com/spotify/fmt-maven-plugin) whenever you run standard `mvn install`.\n- CI builds will fail if code is not formatted that way.\n- To simply run the formatter you can always run: `mvn fmt:format` (requires JVM > 11)\n# Releasing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}